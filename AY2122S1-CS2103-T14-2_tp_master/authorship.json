[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# CS2103-T14-2","lastModifiedDate":"2021-09-16"},{"lineNumber":2,"author":{"gitId":"okyntary"},"content":"*needs to be changed:*","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"justintanyf"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103-T14-2/tp/actions)","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"okyntary"},"content":"* This is **a contact manager for USP students to keep track of other USP students and their respective CCAs/IGs,** by providing remainders for events and social gatherings related to those organisations.\u003cbr\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"okyntary"},"content":"* It is meant to be used regularly, and requires the user to consistently update it on a routine basis.","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"okyntary"},"content":"* This contact manager is:","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"okyntary"},"content":"  * **written in OOP fashion**.","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"okyntary"},"content":"  * built off of is based on the _AddressBook-Level3_ project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"okyntary"},"content":"* Documentation for this project, such as the User Guide and Developer Guide, can be found in the docs folder.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"okyntary"},"content":"* This project is a product of the CS2103 T14-2 team.","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"justintanyf":1,"-":4,"okyntary":9}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"jivesh"},"content":"### Jivesh Mohan","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"\u003cimg src\u003d\"images/jivesh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"jivesh"},"content":"[[github](https://github.com/jivesh)]","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"jivesh"},"content":"* Role: Developer","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"jivesh"},"content":"* Responsibilities: Integration, Git expert","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"### Jovyn Tan","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":"\u003cimg src\u003d\"images/jovyntls.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"weiquu"},"content":"[[github](http://github.com/jovyntls)]","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"justintanyf"},"content":"[[portfolio](team/jovyn.md)]","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"jovyntls"},"content":"* Responsibilities: Scheduling and tracking, Deliverables and deadlines","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"weiquu"},"content":"### Neo Wei Qing","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"weiquu"},"content":"\u003cimg src\u003d\"images/weiquu.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"weiquu"},"content":"[[github](http://github.com/weiquu)]","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"weiquu"},"content":"[[portfolio](team/weiqing.md)]","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"weiquu"},"content":"* Responsibilities: Documentation, Code Quality","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"justintanyf"},"content":"### Tan Yan Feng","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"justintanyf"},"content":"\u003cimg src\u003d\"images/justintanyf.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"justintanyf"},"content":"[[github](http://github.com/justintanyf)]","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"justintanyf"},"content":"[[portfolio](team/tanyanfeng.md)]","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"justintanyf"},"content":"* Responsibilities: Intellij Expert, SourceTree Expert","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"okyntary"},"content":"### Teo Keane","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"okyntary"},"content":"\u003cimg src\u003d\"images/okyntary.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"okyntary"},"content":"[[github](http://github.com/okyntary)]","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"okyntary"},"content":"[[portfolio](team/okyntary.md)]","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"okyntary"},"content":"* Responsibilities: Gradle Expert","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"okyntary"},"content":"I like playing Slay the Spire. Slay the Spire is the best game released in the last three years, fight me.","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"justintanyf":6,"jivesh":4,"weiquu":6,"-":35,"jovyntls":4,"okyntary":7}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-09-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"jovyntls"},"content":"2. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"jovyntls"},"content":"3. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"jovyntls"},"content":"4. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":101,"author":{"gitId":"jivesh"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"deletep 1\")` API call.","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":103,"author":{"gitId":"jivesh"},"content":"![Interactions Inside the Logic Component for the `deletep 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2021-09-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"weiquu"},"content":"****","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2021-09-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2021-09-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-09-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2021-09-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2021-09-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2021-09-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2021-09-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2021-09-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2021-09-27"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2021-09-27"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2021-09-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2021-09-27"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2021-09-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2021-09-27"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2021-09-27"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2021-09-27"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":175,"author":{"gitId":"jivesh"},"content":"Step 2. The user executes `deletep 5` command to delete the 5th person in the address book. The `deletep` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `deletep 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2021-10-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2021-09-27"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":179,"author":{"gitId":"jivesh"},"content":"Step 3. The user executes `addp n/David …` to add a new person. The `addp` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2021-10-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2021-09-27"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2021-09-27"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2021-09-27"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2021-09-27"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2021-09-27"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2021-09-27"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2021-09-27"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2021-09-27"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-09-27"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2021-09-27"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2021-09-27"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2021-09-27"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2021-09-27"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":214,"author":{"gitId":"weiquu"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2021-09-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2021-09-27"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2021-09-27"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-09-27"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-09-27"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2021-09-27"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2021-09-27"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2021-09-27"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2021-09-27"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2021-09-27"},{"lineNumber":232,"author":{"gitId":"jivesh"},"content":"  * Pros: Will use less memory (e.g. for `deletep`, just save the person being deleted).","lastModifiedDate":"2021-10-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2021-09-27"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2021-09-27"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2021-09-27"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2021-09-27"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-27"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2021-09-27"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-27"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2021-09-27"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2021-09-27"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2021-09-27"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":260,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts","lastModifiedDate":"2021-09-27"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2021-09-27"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2021-09-27"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2021-09-27"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2021-09-27"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":266,"author":{"gitId":"jovyntls"},"content":"**Value proposition**: ","lastModifiedDate":"2021-09-27"},{"lineNumber":267,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":268,"author":{"gitId":"jovyntls"},"content":"ePoch helps users categorise contacts, which helps the user keep track of various overlapping social circles.","lastModifiedDate":"2021-09-27"},{"lineNumber":269,"author":{"gitId":"jovyntls"},"content":"The product offers peace of mind to the user using a “set-and-forget” approach by helping the user schedule recurring social events.","lastModifiedDate":"2021-09-27"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":272,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2021-09-27"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":274,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2021-09-27"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":276,"author":{"gitId":"jovyntls"},"content":"| Priority | As a …                                    | I want to …                     | So that I can…                                                        |","lastModifiedDate":"2021-09-27"},{"lineNumber":277,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2021-09-27"},{"lineNumber":278,"author":{"gitId":"jovyntls"},"content":"| `* * *` | new user | see usage instructions of ePoch | refer to instructions if I forget how to use ePoch |","lastModifiedDate":"2021-09-27"},{"lineNumber":279,"author":{"gitId":"jovyntls"},"content":"| `* *` | user with multiple devices across different operating systems | use ePoch across multiple platforms | access its functionality regardless of the device I am using |","lastModifiedDate":"2021-09-27"},{"lineNumber":280,"author":{"gitId":"jovyntls"},"content":"| `* * *` | user who dislikes using the mouse or trackpad (or has no acces to them) | something similar to a command line interface | rely exclusively on keyboard inputs |","lastModifiedDate":"2021-09-27"},{"lineNumber":281,"author":{"gitId":"jovyntls"},"content":"| `* *` | careless user | be able to undo any command I erroneously enter with ease | get ePoch back to a state where there are no errors |","lastModifiedDate":"2021-09-27"},{"lineNumber":282,"author":{"gitId":"jovyntls"},"content":"| `*` | careless user who often does not realise their mistakes immediately | be able to undo any commands even across different sessions of using ePoch | revert ePoch back to an even earlier state if necessary |","lastModifiedDate":"2021-09-27"},{"lineNumber":283,"author":{"gitId":"jovyntls"},"content":"| `*` | user with an appreciation for aesthetics | be able to visualise my contacts on fancy visualisations (e.g. using graphs or charts) | gain a better understanding of how they connect with each other through their CCAs |","lastModifiedDate":"2021-09-27"},{"lineNumber":284,"author":{"gitId":"jovyntls"},"content":"| `*` | user with a love for statistics and categories | view statistics of my contacts and CCAs | view potentially interesting data on them and their relation to me |","lastModifiedDate":"2021-09-27"},{"lineNumber":285,"author":{"gitId":"jovyntls"},"content":"| `*` | user who is visually impaired | hear sound cues every time there is an action | verify that my command has been executed |","lastModifiedDate":"2021-09-27"},{"lineNumber":286,"author":{"gitId":"jovyntls"},"content":"| `*` | user who is sensitive to the volume of sounds | be able to adjust the master volume of the sound cues | get the volume to a level which is comfortable with me |","lastModifiedDate":"2021-09-27"},{"lineNumber":287,"author":{"gitId":"jovyntls"},"content":"| `*` | user who does not want sound cues for all reminders | be able to toggle certain reminder sound cues on and off at will | get a stronger reminder for certain events but not others |","lastModifiedDate":"2021-09-27"},{"lineNumber":288,"author":{"gitId":"jovyntls"},"content":"| `*` | user who gets bored looking at the same GUI all day | be able to occasionally change ePoch\u0027s colour scheme | have a fresh experience when I use ePoch |","lastModifiedDate":"2021-09-27"},{"lineNumber":289,"author":{"gitId":"jovyntls"},"content":"| `*` | user who values their time and has occasional typos | have an auto-complete function | not worry about correcting my typos |","lastModifiedDate":"2021-09-27"},{"lineNumber":290,"author":{"gitId":"jovyntls"},"content":"| `*` | organised user | be able to export my contacts to a JSON file | send an organised list of contacts to others |","lastModifiedDate":"2021-09-27"},{"lineNumber":291,"author":{"gitId":"jovyntls"},"content":"| `* *` | visual user | be able to customise the colour for my contact\u0027s CCA tags | visually differentiate and colour-code different tags |","lastModifiedDate":"2021-09-28"},{"lineNumber":292,"author":{"gitId":"jovyntls"},"content":"| `* *` | visual user | be able to customise the colour for my various tasks and reminders | visually differentiate and colour-code different them based on my preferences |","lastModifiedDate":"2021-09-28"},{"lineNumber":293,"author":{"gitId":"jovyntls"},"content":"| `* *` | tech-savvy user who is familiar with keyboard shortcuts | be able to exeucte commands with shortcuts I am familiar with | easily execute more complicated commands with just a few keystrokes |","lastModifiedDate":"2021-09-28"},{"lineNumber":294,"author":{"gitId":"jovyntls"},"content":"| `* * *` | user who has multiple friends, CCAs, and reminders | be able to view all within a nice UI | view them quickly and efficiently |","lastModifiedDate":"2021-09-28"},{"lineNumber":295,"author":{"gitId":"jovyntls"},"content":"| `* *` | user with friends in multiple CCAs | be able to quickly view what CCAs my friends are in | keep track of which CCAs to join based on what CCAs my friends are in |","lastModifiedDate":"2021-09-28"},{"lineNumber":296,"author":{"gitId":"jovyntls"},"content":"| `* *` | user who loves to experiment | be able to quickly delete all data from ePoch at once | try out different configurations of persons CCAs and reminders |","lastModifiedDate":"2021-09-28"},{"lineNumber":297,"author":{"gitId":"jovyntls"},"content":"| `* * *` | user | add a person to a CCA | keep track of what CCAs my friends are in |","lastModifiedDate":"2021-09-28"},{"lineNumber":298,"author":{"gitId":"jovyntls"},"content":"| `* * *` | user whose friends are experimenting with CCAs | be able to efficiently add and remove people from CCAs | update ePoch with the latest information |","lastModifiedDate":"2021-09-28"},{"lineNumber":299,"author":{"gitId":"jovyntls"},"content":"| `* * *` | user who meets many fellow students | be able to add contacts in ePoch | keep track of the people I meet |","lastModifiedDate":"2021-09-28"},{"lineNumber":300,"author":{"gitId":"jovyntls"},"content":"| `* *` | user who meets many fellow students | be able to edit the details of my contacts in ePoch | update ePoch with the latest information, especially since a contact\u0027s details may change regularly |","lastModifiedDate":"2021-09-28"},{"lineNumber":301,"author":{"gitId":"jovyntls"},"content":"| `* * *` | busy user | be able to delete contacts from ePoch | stop keeping tracks of contacts that are no longer relevant |","lastModifiedDate":"2021-09-28"},{"lineNumber":302,"author":{"gitId":"jovyntls"},"content":"| `* *` | forgetful user | find any contact that matches my search terms | easily find and contact(s) that I desire |","lastModifiedDate":"2021-09-28"},{"lineNumber":303,"author":{"gitId":"jovyntls"},"content":"| `* * *` | user with multiple CCAs | be able to add all the CCAs I am involved in | keep track of them |","lastModifiedDate":"2021-09-28"},{"lineNumber":304,"author":{"gitId":"jovyntls"},"content":"| `* * *` | user who changes CCAs over time | be able to delete CCAs | keep track of those I am currently a part of |","lastModifiedDate":"2021-09-28"},{"lineNumber":305,"author":{"gitId":"jovyntls"},"content":"| `* *` | careless user | be able to edit the details of CCAs | fix any mistakes I\u0027ve made in adding the CCA |","lastModifiedDate":"2021-09-28"},{"lineNumber":306,"author":{"gitId":"jovyntls"},"content":"| `* *` | user who is overcommitted with many CCAs | be able to find any CCA with a title that matches a given search term | easily filter through my many CCAs |","lastModifiedDate":"2021-09-28"},{"lineNumber":307,"author":{"gitId":"jovyntls"},"content":"| `* *` | user who has many friends from different CCAs | be able to search for a CCA and view all the people who are part of that CCA | remember who is part of that CCA |","lastModifiedDate":"2021-09-28"},{"lineNumber":308,"author":{"gitId":"jovyntls"},"content":"| `* *` | user who is overcommitted with many upcoming events and commitments | be able to view all the reminders associated with a CCA | see what upcoming events I have related to that CCA |","lastModifiedDate":"2021-09-28"},{"lineNumber":309,"author":{"gitId":"jovyntls"},"content":"| `* * *` | user with many commitments | be able to add reminders | be reminded to do any tasks or events associated with those commitments |","lastModifiedDate":"2021-09-28"},{"lineNumber":310,"author":{"gitId":"jovyntls"},"content":"| `* * *` | user with many CCA commitments | be able to add reminders associated with CCAs | be reminded of CCA-specific commitments |","lastModifiedDate":"2021-09-28"},{"lineNumber":311,"author":{"gitId":"okyntary"},"content":"| `* *` | user who might make typos | edit reminder titles | rectify any errors in the title I set for reminders |","lastModifiedDate":"2021-09-28"},{"lineNumber":312,"author":{"gitId":"okyntary"},"content":"| `* * *` | user with commitments constantly in flux | delete reminders | delete irrelevant or redundant reminders |","lastModifiedDate":"2021-09-28"},{"lineNumber":313,"author":{"gitId":"okyntary"},"content":"| `* *` | user who is overcommitted with many commitments | filter reminders | find more important reminders by their title |","lastModifiedDate":"2021-09-28"},{"lineNumber":314,"author":{"gitId":"okyntary"},"content":"| `* *` | user who can finish reminders quickly | snooze reminders that I\u0027ve completed | clear space for reminders that I\u0027ve not yet completed |","lastModifiedDate":"2021-09-28"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":317,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2021-09-28"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":319,"author":{"gitId":"okyntary"},"content":"(For all use cases below, the **System** is`ePoch` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-09-28"},{"lineNumber":320,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":321,"author":{"gitId":"okyntary"},"content":"**Use case: UC1 - List all persons, CCAs, and reminders**","lastModifiedDate":"2021-09-28"},{"lineNumber":322,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":323,"author":{"gitId":"okyntary"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":324,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":325,"author":{"gitId":"okyntary"},"content":"1. User requests to list all persons,  CCAs, and reminders.","lastModifiedDate":"2021-09-28"},{"lineNumber":326,"author":{"gitId":"okyntary"},"content":"2. ePoch displays all persons,  CCAs, and reminders currently stored in ePoch.","lastModifiedDate":"2021-09-28"},{"lineNumber":327,"author":{"gitId":"okyntary"},"content":"Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":329,"author":{"gitId":"okyntary"},"content":"**Use case: UC2 - Add a person**","lastModifiedDate":"2021-09-28"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":333,"author":{"gitId":"okyntary"},"content":"1. User requests to add a person to the list and optionally specifies their name, phone number, email and address.","lastModifiedDate":"2021-09-28"},{"lineNumber":334,"author":{"gitId":"okyntary"},"content":"2. ePoch adds the person with the specified information ","lastModifiedDate":"2021-09-28"},{"lineNumber":335,"author":{"gitId":"okyntary"},"content":"Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":336,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":337,"author":{"gitId":"okyntary"},"content":"**Use case: UC3 - Add a CCA**","lastModifiedDate":"2021-09-28"},{"lineNumber":338,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":339,"author":{"gitId":"okyntary"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":340,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":341,"author":{"gitId":"okyntary"},"content":"1. User requests to add a CCA to the list and specifies the CCA name.","lastModifiedDate":"2021-09-28"},{"lineNumber":342,"author":{"gitId":"okyntary"},"content":"2. ePoch adds the CCA to the list of CCAs.","lastModifiedDate":"2021-09-28"},{"lineNumber":343,"author":{"gitId":"okyntary"},"content":"Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":344,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":345,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":346,"author":{"gitId":"okyntary"},"content":"**Use case: UC4 - Find a person**","lastModifiedDate":"2021-09-28"},{"lineNumber":347,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":348,"author":{"gitId":"justintanyf"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":349,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":350,"author":{"gitId":"justintanyf"},"content":"1. User requests to find a person based on their attributes.","lastModifiedDate":"2021-09-28"},{"lineNumber":351,"author":{"gitId":"justintanyf"},"content":"2. ePoch displays all persons that fit the user\u0027s requirements.","lastModifiedDate":"2021-09-28"},{"lineNumber":352,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":353,"author":{"gitId":"justintanyf"},"content":"Extensions:","lastModifiedDate":"2021-09-28"},{"lineNumber":354,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":355,"author":{"gitId":"justintanyf"},"content":"* 1a. No attributes are specified.","lastModifiedDate":"2021-09-28"},{"lineNumber":356,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":357,"author":{"gitId":"justintanyf"},"content":"    * 1a1. ePoch throws an error.","lastModifiedDate":"2021-09-28"},{"lineNumber":358,"author":{"gitId":"justintanyf"},"content":"      Use case resumes from step 1.","lastModifiedDate":"2021-09-28"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":360,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":361,"author":{"gitId":"justintanyf"},"content":"**Use case: UC5 -  Delete a person**","lastModifiedDate":"2021-09-28"},{"lineNumber":362,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":363,"author":{"gitId":"justintanyf"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":364,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":365,"author":{"gitId":"justintanyf"},"content":"1. User requests to list persons.","lastModifiedDate":"2021-09-28"},{"lineNumber":366,"author":{"gitId":"justintanyf"},"content":"2. ePoch shows a list of persons.","lastModifiedDate":"2021-09-28"},{"lineNumber":367,"author":{"gitId":"justintanyf"},"content":"3. User requests to delete a person and specficies the person ID.","lastModifiedDate":"2021-09-28"},{"lineNumber":368,"author":{"gitId":"justintanyf"},"content":"4. ePoch deletes the person.","lastModifiedDate":"2021-09-28"},{"lineNumber":369,"author":{"gitId":"justintanyf"},"content":"Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":371,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":373,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":375,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":376,"author":{"gitId":"justintanyf"},"content":"  ","lastModifiedDate":"2021-09-28"},{"lineNumber":377,"author":{"gitId":"justintanyf"},"content":"* 3a. The given person does not exist (person ID invalid).","lastModifiedDate":"2021-09-28"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    * 3a1. AddressBook shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":380,"author":{"gitId":"justintanyf"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-28"},{"lineNumber":381,"author":{"gitId":"justintanyf"},"content":"     ","lastModifiedDate":"2021-09-28"},{"lineNumber":382,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":383,"author":{"gitId":"justintanyf"},"content":"**Use case: UC6 - Enrol a person into a CCA**","lastModifiedDate":"2021-09-28"},{"lineNumber":384,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":385,"author":{"gitId":"justintanyf"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":386,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":387,"author":{"gitId":"justintanyf"},"content":"1. User requests to list persons and CCAs.","lastModifiedDate":"2021-09-28"},{"lineNumber":388,"author":{"gitId":"justintanyf"},"content":"2. ePoch shows a list of persons and CCAs.","lastModifiedDate":"2021-09-28"},{"lineNumber":389,"author":{"gitId":"justintanyf"},"content":"3. User requests to enrol a person into a CCA and specifices the person ID and CCA ID.","lastModifiedDate":"2021-09-28"},{"lineNumber":390,"author":{"gitId":"justintanyf"},"content":"4. ePoch adds the person to the CCA.","lastModifiedDate":"2021-09-28"},{"lineNumber":391,"author":{"gitId":"justintanyf"},"content":"Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":392,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":393,"author":{"gitId":"jivesh"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":394,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":395,"author":{"gitId":"jivesh"},"content":"* 2a. The list of persons is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":396,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":397,"author":{"gitId":"jivesh"},"content":"  Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":398,"author":{"gitId":"jivesh"},"content":"  ","lastModifiedDate":"2021-09-29"},{"lineNumber":399,"author":{"gitId":"jivesh"},"content":"* 2b. The list of CCAs is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":400,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":401,"author":{"gitId":"jivesh"},"content":"  Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":402,"author":{"gitId":"jivesh"},"content":"  ","lastModifiedDate":"2021-09-29"},{"lineNumber":403,"author":{"gitId":"jivesh"},"content":"* 3a. The given person does not exist (person ID invalid).","lastModifiedDate":"2021-09-29"},{"lineNumber":404,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":405,"author":{"gitId":"jivesh"},"content":"    * 3a1. ePoch shows an error message.","lastModifiedDate":"2021-09-29"},{"lineNumber":406,"author":{"gitId":"jivesh"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":407,"author":{"gitId":"jivesh"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":408,"author":{"gitId":"jivesh"},"content":"* 3b. The given CCA does not exist (CCA ID invalid).","lastModifiedDate":"2021-09-29"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":410,"author":{"gitId":"jivesh"},"content":"    * 3b1. ePoch shows an error message.","lastModifiedDate":"2021-09-29"},{"lineNumber":411,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":413,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2021-09-29"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":415,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2021-09-29"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":417,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2021-09-29"},{"lineNumber":418,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-09-29"},{"lineNumber":419,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2021-09-29"},{"lineNumber":420,"author":{"gitId":"jivesh"},"content":"4.  The JAR file should not exceed 100MB.","lastModifiedDate":"2021-09-29"},{"lineNumber":421,"author":{"gitId":"jivesh"},"content":"5.  The system should respond within 2 seconds whenever a command is entered by the user. ","lastModifiedDate":"2021-09-29"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":423,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2021-09-29"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":425,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2021-09-29"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":427,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2021-09-29"},{"lineNumber":428,"author":{"gitId":"jivesh"},"content":"* **Person**: A contact that the user wants to save","lastModifiedDate":"2021-09-29"},{"lineNumber":429,"author":{"gitId":"jivesh"},"content":"* **CCA**: A school-based group that a person may be a member of","lastModifiedDate":"2021-09-29"},{"lineNumber":430,"author":{"gitId":"jivesh"},"content":"* **Reminder**: A scheduled event associated with a CCA that the user wishes to be notified of","lastModifiedDate":"2021-09-29"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":432,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-29"},{"lineNumber":433,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":434,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2021-09-29"},{"lineNumber":435,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":436,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2021-09-29"},{"lineNumber":437,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":438,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2021-09-29"},{"lineNumber":439,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2021-09-29"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":441,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":443,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2021-09-29"},{"lineNumber":444,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":445,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2021-09-29"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":447,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2021-09-29"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":449,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2021-09-29"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":451,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2021-09-29"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":453,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2021-09-29"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":455,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":456,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2021-09-29"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":458,"author":{"gitId":"weiquu"},"content":"1. _{ more test cases … }_","lastModifiedDate":"2021-09-29"},{"lineNumber":459,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":460,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2021-09-29"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":462,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2021-09-29"},{"lineNumber":463,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":464,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2021-09-29"},{"lineNumber":465,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":466,"author":{"gitId":"jivesh"},"content":"   1. Test case: `deletpe 1`\u003cbr\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":467,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2021-09-29"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":469,"author":{"gitId":"jivesh"},"content":"   1. Test case: `deletep 0`\u003cbr\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":470,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2021-09-29"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":472,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":473,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2021-09-29"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":475,"author":{"gitId":"weiquu"},"content":"1. _{ more test cases … }_","lastModifiedDate":"2021-09-29"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":477,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2021-09-29"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":479,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2021-09-29"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":481,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2021-09-29"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":483,"author":{"gitId":"weiquu"},"content":"1. _{ more test cases … }_","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"justintanyf":36,"jivesh":30,"weiquu":5,"-":343,"jovyntls":41,"okyntary":28}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"jivesh"},"content":"layout: user","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"ePoch is a desktop app for managing contacts, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ePoch can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"jivesh"},"content":"ePoch is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ePoch can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"jivesh"},"content":"It has been designed for the busy NUS student. It allows the user to create contacts for persons and to create CCAs, link those persons and CCAs together, and to create periodic reminders for those CCAs.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"It is intended to be used by NUS students, to help keep track of the students and organizations that they encounter.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"1. Ensure you have Java 11 or above installed in your Computer.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"1. Download the JAR file. *The download location will be confirmed later*.","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"1. Copy the file to the folder you want to use as the home folder for your ePoch.","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"jivesh"},"content":"1. Download the JAR file. **The download location will be confirmed later.**","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"jivesh"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your ePoch.","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"jivesh"},"content":"   * **`list`** : Lists all persons, CCAs and reminders.","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"jovyntls"},"content":"   * **`add`** `n/Tan Wei Yang id/e27182818` : Adds a contact named `Tan Wei Yang` with id `e27182818` to the Address Book.","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"jovyntls"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"jivesh"},"content":"   * **`addp`**`n/Tan Wei Yang:` Adds a person named `Tan Wei Yang` to ePoch.","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"jivesh"},"content":"   * **`deletep`**`pid/3` : Deletes the person with id 3.","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"jivesh"},"content":"   * **`clear`** : Deletes all data (persons, CCAs, reminders) from ePoch.","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"jovyntls"},"content":"1. Refer to the [Features](##features) below for details of each command.","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"jivesh"},"content":"  e.g. in `addp n/NAME`, `NAME` is a parameter which can be used as `addp n/John Doe`.","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"jovyntls"},"content":"  e.g `n/NAME [e/EMAIL]` can be used as `n/Johnny Doe [e/EMAIL]` or as `n/Johnny Doe`.","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"jovyntls"},"content":"### Listing all persons : `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"jovyntls"},"content":"Shows a list of all persons, CCAs, reminders in ePoch.","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"jovyntls"},"content":"Format: `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":79,"author":{"gitId":"jovyntls"},"content":"### Adding a person: `addp`","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"jovyntls"},"content":"Adds a person to ePoch.","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"jovyntls"},"content":"Format: `addp n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]​`","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"jovyntls"},"content":"A person must have at least their name added.","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"jovyntls"},"content":"* `addp n/Jovyn Tan Li Shyan`","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"jovyntls"},"content":"* `addp n/Neo Wei Qing e/wei_qing_official_email_real@gmail.com a/Cinnamon College at/NUSSO @nussymphonyorchestra thanks`","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"jovyntls"},"content":"### Editing a person: `editp`","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"jovyntls"},"content":"Edits an existing person in ePoch.","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"jovyntls"},"content":"Format: `editp pid/PERSON_ID [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]​`","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"jovyntls"},"content":"* Edits the person at the specified by their person id (`pid`). The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-09-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-09-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":104,"author":{"gitId":"jovyntls"},"content":"*  `edit pid/1 p/91234567 e/jiveshrealemail@yahoo.com` Edits the phone number and email address of the 1st person to be `91234567` and `jiveshrealemail@yahoo.com` respectively.","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"jovyntls"},"content":"*  `edit 2 n/weiq dt/NUSSO @nussymphonyorchestra thanks` Edits the name of the 2nd person to be `weiq` and clears the specified tag.","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"jovyntls"},"content":"### Deleting a person: `deletep`","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"jovyntls"},"content":"Deletes the specified person from ePoch.","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"weiquu"},"content":"Format: `deletep pid/PERSON_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"weiquu"},"content":"* Deletes the person with the specified person ID (`pid`).","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"weiquu"},"content":"* The person ID refers to the index number shown in the displayed person list.","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"weiquu"},"content":"* The person ID **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-09-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":118,"author":{"gitId":"weiquu"},"content":"* `deletep pid/2` deletes the person in the address book that has person ID of 2.","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"weiquu"},"content":"### Finding a person: `findp`","lastModifiedDate":"2021-09-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":122,"author":{"gitId":"weiquu"},"content":"Finds all the people in ePoch that match all the specified fields.","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"weiquu"},"content":"Format: `findp [pid/PERSON_ID] [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [cca/CCA_NAME]`","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"weiquu"},"content":"* Finds the people who have valid matches for all the specified fields.","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"weiquu"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":129,"author":{"gitId":"weiquu"},"content":"### Adding a cca: `addc`","lastModifiedDate":"2021-09-27"},{"lineNumber":130,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"weiquu"},"content":"Adds a CCA.","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"weiquu"},"content":"Format: `addc n/CCA_NAME`","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"weiquu"},"content":"### Editing a cca: `editc`","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":137,"author":{"gitId":"weiquu"},"content":"Edits the name of a CCA.","lastModifiedDate":"2021-09-27"},{"lineNumber":138,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"weiquu"},"content":"Format: `editc cid/CCA_ID n/CCA_NAME`","lastModifiedDate":"2021-09-27"},{"lineNumber":140,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"weiquu"},"content":"### Deleting a cca: `deletec`","lastModifiedDate":"2021-09-27"},{"lineNumber":142,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":143,"author":{"gitId":"weiquu"},"content":"Deletes a CCA.","lastModifiedDate":"2021-09-27"},{"lineNumber":144,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"weiquu"},"content":"Format: `deletec cid/CCA_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":147,"author":{"gitId":"weiquu"},"content":"### Deleting a cca: `deletec`","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":149,"author":{"gitId":"weiquu"},"content":"Deletes a CCA.","lastModifiedDate":"2021-09-27"},{"lineNumber":150,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":151,"author":{"gitId":"weiquu"},"content":"Format: `deletec cid/CCA_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":153,"author":{"gitId":"weiquu"},"content":"### Finding a cca: `findc`","lastModifiedDate":"2021-09-27"},{"lineNumber":154,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":155,"author":{"gitId":"weiquu"},"content":"Filters all CCAs with names that contain a given string.","lastModifiedDate":"2021-09-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":157,"author":{"gitId":"weiquu"},"content":"Format: `findc s/STRING`","lastModifiedDate":"2021-09-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":159,"author":{"gitId":"weiquu"},"content":"### Adding a reminder to a CCA: `addr`","lastModifiedDate":"2021-09-27"},{"lineNumber":160,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":161,"author":{"gitId":"weiquu"},"content":"Adds a reminder to a CCA.","lastModifiedDate":"2021-09-27"},{"lineNumber":162,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":163,"author":{"gitId":"weiquu"},"content":"Format: `addr cid/CCA_ID t/REMINDER_TITLE sd/START_DATE [f/FREQUENCY] [o/OCCURRENCES]`","lastModifiedDate":"2021-09-27"},{"lineNumber":164,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":165,"author":{"gitId":"justintanyf"},"content":"### Editing the title of a reminder: `editr`","lastModifiedDate":"2021-09-27"},{"lineNumber":166,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":167,"author":{"gitId":"justintanyf"},"content":"Edits the title of a reminder.","lastModifiedDate":"2021-09-27"},{"lineNumber":168,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":169,"author":{"gitId":"justintanyf"},"content":"Format: `editr rid/REMINDER_ID t/REMINDER_TITLE`","lastModifiedDate":"2021-09-27"},{"lineNumber":170,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":171,"author":{"gitId":"justintanyf"},"content":"### Deleting the title of a reminder: `deleter`","lastModifiedDate":"2021-09-27"},{"lineNumber":172,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":173,"author":{"gitId":"justintanyf"},"content":"Deletes a reminder.","lastModifiedDate":"2021-09-27"},{"lineNumber":174,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":175,"author":{"gitId":"justintanyf"},"content":"Format: `deleter rid/REMINDER_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":176,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":177,"author":{"gitId":"justintanyf"},"content":"### Finding the title of a reminder: `findr`","lastModifiedDate":"2021-09-27"},{"lineNumber":178,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":179,"author":{"gitId":"justintanyf"},"content":"Filters all reminders that fit a given string.","lastModifiedDate":"2021-09-27"},{"lineNumber":180,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":181,"author":{"gitId":"justintanyf"},"content":"Format: `findr t/REMINDER_TITLE`","lastModifiedDate":"2021-09-27"},{"lineNumber":182,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":183,"author":{"gitId":"justintanyf"},"content":"### Snoozing a reminder: `snoozer`","lastModifiedDate":"2021-09-27"},{"lineNumber":184,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":185,"author":{"gitId":"justintanyf"},"content":"Snoozes the reminder.","lastModifiedDate":"2021-09-27"},{"lineNumber":186,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":187,"author":{"gitId":"justintanyf"},"content":"Format: `snoozer rid/REMINDER_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":188,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":189,"author":{"gitId":"justintanyf"},"content":"### Enrolling a person from a CCA: `enrol`","lastModifiedDate":"2021-09-27"},{"lineNumber":190,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":191,"author":{"gitId":"justintanyf"},"content":"Enrols a person into a CCA.","lastModifiedDate":"2021-09-27"},{"lineNumber":192,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":193,"author":{"gitId":"justintanyf"},"content":"Format: `enrol cid/CCA_ID pid/PERSON_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":194,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":195,"author":{"gitId":"justintanyf"},"content":"### Expelling a person from a CCA: `expel`","lastModifiedDate":"2021-09-27"},{"lineNumber":196,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":197,"author":{"gitId":"justintanyf"},"content":"Removes a person from a CCA.","lastModifiedDate":"2021-09-27"},{"lineNumber":198,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":199,"author":{"gitId":"justintanyf"},"content":"Format: `expel cid/CCA_ID pid/PERSON_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":200,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":201,"author":{"gitId":"justintanyf"},"content":"### Delete all data from ePoch: `clear`","lastModifiedDate":"2021-09-27"},{"lineNumber":202,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":203,"author":{"gitId":"justintanyf"},"content":"Deletes all data (persons, CCAs, reminders) from ePoch.","lastModifiedDate":"2021-09-27"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":205,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2021-09-27"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":207,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2021-09-27"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":209,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2021-09-27"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":211,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2021-09-27"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":213,"author":{"gitId":"justintanyf"},"content":"### Viewing help : `help`","lastModifiedDate":"2021-09-27"},{"lineNumber":214,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":215,"author":{"gitId":"justintanyf"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2021-09-27"},{"lineNumber":216,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":217,"author":{"gitId":"justintanyf"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2021-09-27"},{"lineNumber":218,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":219,"author":{"gitId":"justintanyf"},"content":"Format: `help`","lastModifiedDate":"2021-09-27"},{"lineNumber":220,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":221,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2021-09-27"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":223,"author":{"gitId":"justintanyf"},"content":"ePoch data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-09-27"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":225,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-09-27"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":227,"author":{"gitId":"jovyntls"},"content":"ePoch data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-09-27"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":229,"author":{"gitId":"jovyntls"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e**Caution:**","lastModifiedDate":"2021-09-27"},{"lineNumber":230,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-09-27"},{"lineNumber":231,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":233,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2021-09-27"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-09-27"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":237,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-27"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":239,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2021-09-27"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":241,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":242,"author":{"gitId":"jovyntls"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ePoch home folder.","lastModifiedDate":"2021-09-27"},{"lineNumber":243,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":244,"author":{"gitId":"jovyntls"},"content":"**Q**: Can I create a reminder without linking it to a CCA?","lastModifiedDate":"2021-09-27"},{"lineNumber":245,"author":{"gitId":"jovyntls"},"content":"**A**: No. We do not support that functionality: all reminders must be linked to a CCA in some way","lastModifiedDate":"2021-09-27"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":247,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-27"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":249,"author":{"gitId":"jovyntls"},"content":"## Summary of commands","lastModifiedDate":"2021-09-27"},{"lineNumber":250,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":251,"author":{"gitId":"jovyntls"},"content":"Action | Format","lastModifiedDate":"2021-09-27"},{"lineNumber":252,"author":{"gitId":"jovyntls"},"content":"-------|------------------","lastModifiedDate":"2021-09-27"},{"lineNumber":253,"author":{"gitId":"jovyntls"},"content":"**List all data** | `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":254,"author":{"gitId":"jovyntls"},"content":"**Delete all data** | `clear`","lastModifiedDate":"2021-09-27"},{"lineNumber":255,"author":{"gitId":"jovyntls"},"content":"**Add person** | `addp n/PERSON_NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]`","lastModifiedDate":"2021-09-27"},{"lineNumber":256,"author":{"gitId":"jovyntls"},"content":"**Edit person data** | `editp pid/PERSON_ID [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]`","lastModifiedDate":"2021-09-27"},{"lineNumber":257,"author":{"gitId":"jovyntls"},"content":"**Delete person** | `deletep pid/PERSON_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":258,"author":{"gitId":"jovyntls"},"content":"**Find person** | `findp [pid/PERSON_ID] [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [cca/CCA_NAME]`","lastModifiedDate":"2021-09-27"},{"lineNumber":259,"author":{"gitId":"jovyntls"},"content":"**Add CCA** | `addc n/CCA_NAME`","lastModifiedDate":"2021-09-27"},{"lineNumber":260,"author":{"gitId":"jovyntls"},"content":"**Edit CCA name** | `editc cid/CCA_ID n/CCA_NAME`","lastModifiedDate":"2021-09-27"},{"lineNumber":261,"author":{"gitId":"jovyntls"},"content":"**Delete CCA** | `deletec cid/CCA_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":262,"author":{"gitId":"jovyntls"},"content":"**Find CCA** | `findc s/STRING`","lastModifiedDate":"2021-09-27"},{"lineNumber":263,"author":{"gitId":"jovyntls"},"content":"**Add reminder** |`addr cid/CCA_ID t/REMINDER_TITLE sd/START_DATE [f/FREQUENCY] [o/OCCURRENCES]`","lastModifiedDate":"2021-09-27"},{"lineNumber":264,"author":{"gitId":"jovyntls"},"content":"**Edit reminder title** | `editr rid/REMINDER_ID t/REMINDER_TITLE`","lastModifiedDate":"2021-09-27"},{"lineNumber":265,"author":{"gitId":"jovyntls"},"content":"**Delete reminder** | `deleter rid/REMINDER_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":266,"author":{"gitId":"jovyntls"},"content":"**Find reminder** | `findr t/REMINDER_TITLE`","lastModifiedDate":"2021-09-27"},{"lineNumber":267,"author":{"gitId":"jovyntls"},"content":"**Snooze reminder** | `snoozer`","lastModifiedDate":"2021-09-27"},{"lineNumber":268,"author":{"gitId":"jovyntls"},"content":"**Enrols a person into CCA** | `enrol cid/CCA_ID pid/PERSON_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":269,"author":{"gitId":"jovyntls"},"content":"**Removes a person from a CCA** | `expel cid/CCA_ID pid/PERSON_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":270,"author":{"gitId":"jovyntls"},"content":"**Exit** | Exits the app","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"justintanyf":48,"jivesh":11,"weiquu":44,"-":109,"jovyntls":58}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"jivesh"},"content":"[-\u003e LogicManager : execute(\"deletep 1\")","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"activate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"create DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"create DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"DeleteCommandParser -\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e DeleteCommandParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"DeleteCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"destroy DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"AddressBookParser --\u003e LogicManager : d","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"deactivate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"LogicManager -\u003e DeleteCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e Model : deletePerson(1)","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"Model --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"jivesh":1,"-":68}},{"path":"docs/team/jivesh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jivesh"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"jivesh"},"content":"layout: page","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"jivesh"},"content":"title: Jivesh Mohan\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"jivesh"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"jivesh"},"content":"### Project: ePoch","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"jivesh"},"content":"ePoch is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"jivesh"},"content":"Given below are my contributions to the project. The following is placeholder.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"jivesh"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"jivesh"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"jivesh"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"jivesh"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"jivesh"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"jivesh"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"jivesh"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"jivesh"},"content":"* **Project management**:","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"jivesh"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"jivesh"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"jivesh"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"jivesh"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"jivesh"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"jivesh"},"content":"  * User Guide:","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"jivesh"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"jivesh"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"jivesh"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"jivesh"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"jivesh"},"content":"* **Community**:","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"jivesh"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"jivesh"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"jivesh"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"jivesh"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"jivesh"},"content":"* **Tools**:","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"jivesh"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"jivesh"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"jivesh"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"jivesh":46}},{"path":"docs/team/jovyn.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"layout: page","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"title: Jovyn Tan\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"### Project: ePoch","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"ePoch is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jovyntls":11}},{"path":"docs/team/okyntary.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"okyntary"},"content":"title: Teo Keane\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-07-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":45,"okyntary":1}},{"path":"docs/team/tanyanfeng.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"justintanyf"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"justintanyf"},"content":"layout: page","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"justintanyf"},"content":"title: Tan Yan Feng\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"justintanyf"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"justintanyf"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"justintanyf"},"content":"ePoch - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"justintanyf"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"justintanyf"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"justintanyf"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"justintanyf"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"justintanyf"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"justintanyf"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"justintanyf"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"justintanyf"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"justintanyf"},"content":"* **Project management**:","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"justintanyf"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"justintanyf"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"justintanyf"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"justintanyf"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"justintanyf"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"justintanyf"},"content":"  * User Guide:","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"justintanyf"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"justintanyf"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"justintanyf"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"justintanyf"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"justintanyf"},"content":"* **Community**:","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"justintanyf"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"justintanyf"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"justintanyf"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"justintanyf"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"justintanyf"},"content":"* **Tools**:","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"justintanyf"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"justintanyf"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"justintanyf"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"justintanyf":46}},{"path":"docs/team/weiqing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"title: Wei Qing\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"weiquu":1,"-":45}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"jivesh"},"content":"    public static final String MESSAGE_INVALID_CCA_DISPLAYED_INDEX \u003d \"The CCA index provided is invalid :(\";","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jivesh":1,"-":13}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.Reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":38,"author":{"gitId":"weiquu"},"content":"    /** Returns an unmodifiable view of the filtered list of ccas */","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"jovyntls"},"content":"    ObservableList\u003cCca\u003e getFilteredCcaList();","lastModifiedDate":"2021-10-04"},{"lineNumber":40,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"weiquu"},"content":"    /** Returns an unmodifiable view of the filtered list of reminders */","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"weiquu"},"content":"    ObservableList\u003cReminder\u003e getFilteredReminderList();","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"weiquu":5,"-":50,"jovyntls":3}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.Reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":69,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":70,"author":{"gitId":"jovyntls"},"content":"    public ObservableList\u003cCca\u003e getFilteredCcaList() {","lastModifiedDate":"2021-10-04"},{"lineNumber":71,"author":{"gitId":"jovyntls"},"content":"        return model.getFilteredCcaList();","lastModifiedDate":"2021-10-04"},{"lineNumber":72,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":73,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":74,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"weiquu"},"content":"    public ObservableList\u003cReminder\u003e getFilteredReminderList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"weiquu"},"content":"        return model.getFilteredReminderList();","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"weiquu":6,"-":81,"jovyntls":6}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CCAS;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"        model.updateFilteredCcaList(PREDICATE_SHOW_ALL_CCAS);","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":24,"jovyntls":2}},{"path":"src/main/java/seedu/address/logic/commands/cca/CcaAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.logic.commands.cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"/**","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"jovyntls"},"content":" * Adds a CCA to the address book.","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":" */","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"public class CcaAddCommand extends Command {","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"    public static final String COMMAND_WORD \u003d \"addc\";","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a CCA to the address book. \"","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"            + PREFIX_NAME + \"NUS String Orchestra \";","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"jovyntls"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New CCA added: %1$s\";","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"    public static final String MESSAGE_DUPLICATE_CCA \u003d \"This CCA already exists in the address book\";","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":"    private final Cca toAdd;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"jovyntls"},"content":"     * Creates an CcaAddCommand to add the specified {@code Cca}","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"    public CcaAddCommand(Cca cca) {","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(cca);","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"jovyntls"},"content":"        toAdd \u003d cca;","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":37,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":39,"author":{"gitId":"jovyntls"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-04"},{"lineNumber":40,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":42,"author":{"gitId":"jovyntls"},"content":"        if (model.hasCca(toAdd)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"jovyntls"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CCA);","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":46,"author":{"gitId":"jovyntls"},"content":"        model.addCca(toAdd);","lastModifiedDate":"2021-10-04"},{"lineNumber":47,"author":{"gitId":"jovyntls"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-10-04"},{"lineNumber":48,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":49,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":50,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":51,"author":{"gitId":"jovyntls"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"jovyntls"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-04"},{"lineNumber":53,"author":{"gitId":"jovyntls"},"content":"                || (other instanceof CcaAddCommand // instanceof handles nulls","lastModifiedDate":"2021-10-04"},{"lineNumber":54,"author":{"gitId":"jovyntls"},"content":"                \u0026\u0026 toAdd.equals(((CcaAddCommand) other).toAdd));","lastModifiedDate":"2021-10-04"},{"lineNumber":55,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":56,"author":{"gitId":"jovyntls"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"jovyntls":56}},{"path":"src/main/java/seedu/address/logic/commands/cca/CcaDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jivesh"},"content":"package seedu.address.logic.commands.cca;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"jivesh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"jivesh"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"jivesh"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"jivesh"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"jivesh"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"jivesh"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"jivesh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"jivesh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"jivesh"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"jivesh"},"content":"public class CcaDeleteCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"jivesh"},"content":"    public static final String COMMAND_WORD \u003d \"deletec\";","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"jivesh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"jivesh"},"content":"            + \": Deletes the CCA identified by the index number used in the displayed CCA list.\\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"jivesh"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"jivesh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"jivesh"},"content":"    public static final String MESSAGE_DELETE_CCA_SUCCESS \u003d \"Deleted CCA: %1$s\";","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"jivesh"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"jivesh"},"content":"    public CcaDeleteCommand(Index targetIndex) {","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"jivesh"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"jivesh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"jivesh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"jivesh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"jivesh"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"jivesh"},"content":"        List\u003cCca\u003e lastShownList \u003d model.getFilteredCcaList();","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"jivesh"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"jivesh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CCA_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"jivesh"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"jivesh"},"content":"        Cca ccaToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"jivesh"},"content":"        model.deleteCca(ccaToDelete);","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"jivesh"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_CCA_SUCCESS, ccaToDelete));","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"jivesh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"jivesh"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"jivesh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"jivesh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"jivesh"},"content":"                || (other instanceof CcaDeleteCommand // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"jivesh"},"content":"                \u0026\u0026 targetIndex.equals(((CcaDeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"jivesh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"jivesh"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"jivesh":51}},{"path":"src/main/java/seedu/address/logic/commands/cca/CcaEnrolCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justintanyf"},"content":"package seedu.address.logic.commands.cca;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"justintanyf"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"justintanyf"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA_ID;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"justintanyf"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"justintanyf"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"justintanyf"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"justintanyf"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"justintanyf"},"content":"public class CcaEnrolCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"justintanyf"},"content":"    public static final String COMMAND_WORD \u003d \"enrol\";","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"justintanyf"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enrols a person into a CCA. \"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"justintanyf"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"justintanyf"},"content":"            + PREFIX_CCA_ID + \"CCA_ID \"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"justintanyf"},"content":"            + PREFIX_PERSON_ID + \"CCA_ID \\n\"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"justintanyf"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"justintanyf"},"content":"            + PREFIX_CCA_ID + \"1 \"","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"justintanyf"},"content":"            + PREFIX_PERSON_ID + \"1 \";","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"justintanyf"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Successfully enrolled %1$s into %2$s\";","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"justintanyf"},"content":"    public static final String MESSAGE_MISSING_CCA \u003d \"This CCA does not exist in the address book\";","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"justintanyf"},"content":"    public static final String MESSAGE_MISSING_PERSON \u003d \"This person does not exist in the address book\";","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"justintanyf"},"content":"    public static final String MESSAGE_PRESENT_PERSON \u003d \"This person(%1$s) is already part of that CCA(%2$s)\";","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"justintanyf"},"content":"    private Cca ccaToEnrolInto;","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"justintanyf"},"content":"    private final int cid;","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"justintanyf"},"content":"    private Person personToEnrol;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"justintanyf"},"content":"    private final int pid;","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"justintanyf"},"content":"     * Creates an CcaAddCommand to add the specified {@code Cca}","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"justintanyf"},"content":"    public CcaEnrolCommand(int cid, int pid) {","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"justintanyf"},"content":"        this.cid \u003d cid;","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"justintanyf"},"content":"        this.pid \u003d pid;","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"justintanyf"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"justintanyf"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"justintanyf"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"justintanyf"},"content":"        this.ccaToEnrolInto \u003d model.findCcaFromCid(cid);","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"justintanyf"},"content":"        this.personToEnrol \u003d model.findPersonFromPid(pid);","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"justintanyf"},"content":"        if (ccaToEnrolInto \u003d\u003d null) {","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"justintanyf"},"content":"            throw new CommandException(MESSAGE_MISSING_CCA);","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"justintanyf"},"content":"        if (personToEnrol \u003d\u003d null) {","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"justintanyf"},"content":"            throw new CommandException(MESSAGE_MISSING_PERSON);","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"justintanyf"},"content":"        boolean success \u003d model.enrolPersonIntoCca(ccaToEnrolInto, personToEnrol);","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"justintanyf"},"content":"        if (success) {","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"justintanyf"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, personToEnrol.getName(), ccaToEnrolInto.getName()));","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"justintanyf"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"justintanyf"},"content":"            throw new CommandException(","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"justintanyf"},"content":"                    String.format(MESSAGE_PRESENT_PERSON, personToEnrol.getName(), ccaToEnrolInto.getName()));","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"justintanyf"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"justintanyf"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"justintanyf"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"justintanyf"},"content":"                || (other instanceof CcaEnrolCommand // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"justintanyf"},"content":"                \u0026\u0026 ccaToEnrolInto.equals(((CcaEnrolCommand) other).ccaToEnrolInto)","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"justintanyf"},"content":"                \u0026\u0026 personToEnrol.equals(((CcaEnrolCommand) other).personToEnrol));","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"justintanyf"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"justintanyf":75}},{"path":"src/main/java/seedu/address/logic/commands/cca/CcaExpelCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justintanyf"},"content":"package seedu.address.logic.commands.cca;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"justintanyf"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"justintanyf"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA_ID;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"justintanyf"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"justintanyf"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"justintanyf"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"justintanyf"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"justintanyf"},"content":"public class CcaExpelCommand extends Command {","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"justintanyf"},"content":"    public static final String COMMAND_WORD \u003d \"expel\";","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"justintanyf"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Expels a person from a CCA. \"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"justintanyf"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"justintanyf"},"content":"            + PREFIX_CCA_ID + \"CCA_ID \"","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"justintanyf"},"content":"            + PREFIX_PERSON_ID + \"CCA_ID \\n\"","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"justintanyf"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"justintanyf"},"content":"            + PREFIX_CCA_ID + \"1 \"","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"justintanyf"},"content":"            + PREFIX_PERSON_ID + \"1 \";","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"justintanyf"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Successfully expelled %1$s from %2$s\";","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"justintanyf"},"content":"    public static final String MESSAGE_MISSING_CCA \u003d \"This CCA does not exist in the address book\";","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"justintanyf"},"content":"    public static final String MESSAGE_MISSING_PERSON \u003d \"This person does not exist in the address book\";","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"justintanyf"},"content":"    public static final String MESSAGE_MISSING_PERSON_FROM_CCA \u003d \"This person(%1$s) is not enrolled in this CCA(%2$s)\";","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"justintanyf"},"content":"    private Cca ccaToEnrolInto;","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"justintanyf"},"content":"    private final int cid;","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"justintanyf"},"content":"    private Person personToExpel;","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"justintanyf"},"content":"    private final int pid;","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"justintanyf"},"content":"     * Creates an CcaAddCommand to add the specified {@code Cca}","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"justintanyf"},"content":"    public CcaExpelCommand(int cid, int pid) {","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"justintanyf"},"content":"        this.cid \u003d cid;","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"justintanyf"},"content":"        this.pid \u003d pid;","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"justintanyf"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"justintanyf"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"justintanyf"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"justintanyf"},"content":"        this.ccaToEnrolInto \u003d model.findCcaFromCid(cid);","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"justintanyf"},"content":"        this.personToExpel \u003d model.findPersonFromPid(pid);","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"justintanyf"},"content":"        if (ccaToEnrolInto \u003d\u003d null) {","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"justintanyf"},"content":"            throw new CommandException(MESSAGE_MISSING_CCA);","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"justintanyf"},"content":"        if (personToExpel \u003d\u003d null) {","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"justintanyf"},"content":"            throw new CommandException(MESSAGE_MISSING_PERSON);","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"justintanyf"},"content":"        boolean success \u003d model.expelPersonFromCca(ccaToEnrolInto, personToExpel);","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"justintanyf"},"content":"        if (success) {","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"justintanyf"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, personToExpel.getName(), ccaToEnrolInto.getName()));","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"justintanyf"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"justintanyf"},"content":"            throw new CommandException(","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"justintanyf"},"content":"                    String.format(MESSAGE_MISSING_PERSON_FROM_CCA, personToExpel.getName(), ccaToEnrolInto.getName()));","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"justintanyf"},"content":"    public Cca getCcaToEnrolInto() {","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"justintanyf"},"content":"        return this.ccaToEnrolInto;","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"justintanyf"},"content":"    public Person getPersonToExpel() {","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"justintanyf"},"content":"        return this.personToExpel;","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"justintanyf"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"justintanyf"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"justintanyf"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"justintanyf"},"content":"                || (other instanceof CcaExpelCommand // instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"justintanyf"},"content":"                \u0026\u0026 ccaToEnrolInto.equals(((CcaExpelCommand) other).getCcaToEnrolInto())","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"justintanyf"},"content":"                \u0026\u0026 personToExpel.equals(((CcaExpelCommand) other).getPersonToExpel()));","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"justintanyf"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"justintanyf":82}},{"path":"src/main/java/seedu/address/logic/commands/person/PersonAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.logic.commands.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"public class PersonAddCommand extends Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"jovyntls"},"content":"     * Creates an PersonAddCommand to add the specified {@code Person}","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"jovyntls"},"content":"    public PersonAddCommand(Person person) {","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"jovyntls"},"content":"                || (other instanceof PersonAddCommand // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"jovyntls"},"content":"                \u0026\u0026 toAdd.equals(((PersonAddCommand) other).toAdd));","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jovyntls":8,"-":61}},{"path":"src/main/java/seedu/address/logic/commands/person/PersonDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.logic.commands.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"public class PersonDeleteCommand extends Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"jivesh"},"content":"    public static final String COMMAND_WORD \u003d \"deletep\";","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"jovyntls"},"content":"    public PersonDeleteCommand(Index targetIndex) {","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"jovyntls"},"content":"                || (other instanceof PersonDeleteCommand // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"jovyntls"},"content":"                \u0026\u0026 targetIndex.equals(((PersonDeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jivesh":1,"jovyntls":7,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/person/PersonEditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.logic.commands.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"public class PersonEditCommand extends Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"    public PersonEditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);","lastModifiedDate":"2017-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"jovyntls"},"content":"        if (!(other instanceof PersonEditCommand)) {","lastModifiedDate":"2021-10-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand e \u003d (PersonEditCommand) other;","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":190,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":191,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":192,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"jovyntls":7,"-":221}},{"path":"src/main/java/seedu/address/logic/commands/person/PersonFindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.logic.commands.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"public class PersonFindCommand extends Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"    public PersonFindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"jovyntls"},"content":"                || (other instanceof PersonFindCommand // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"jovyntls"},"content":"                \u0026\u0026 predicate.equals(((PersonFindCommand) other).predicate)); // state check","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"jovyntls":7,"-":37}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.GreetCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.cca.CcaAddCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"jivesh"},"content":"import seedu.address.logic.commands.cca.CcaDeleteCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.commands.cca.CcaEnrolCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.commands.cca.CcaExpelCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonAddCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonDeleteCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonFindCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.cca.CcaAddCommandParser;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"jivesh"},"content":"import seedu.address.logic.parser.cca.CcaDeleteCommandParser;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.cca.CcaEnrolCommandParser;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.cca.CcaExpelCommandParser;","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.person.PersonAddCommandParser;","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.person.PersonDeleteCommandParser;","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.person.PersonEditCommandParser;","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.person.PersonFindCommandParser;","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"jovyntls"},"content":"        case PersonAddCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"            return new PersonAddCommandParser().parse(arguments);","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"jovyntls"},"content":"        case PersonEditCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"jovyntls"},"content":"            return new PersonEditCommandParser().parse(arguments);","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"jovyntls"},"content":"        case PersonDeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"jovyntls"},"content":"            return new PersonDeleteCommandParser().parse(arguments);","lastModifiedDate":"2021-10-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"jovyntls"},"content":"        case PersonFindCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"jovyntls"},"content":"            return new PersonFindCommandParser().parse(arguments);","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        case GreetCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return new GreetCommand();","lastModifiedDate":"2021-09-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":88,"author":{"gitId":"jovyntls"},"content":"        case CcaAddCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-04"},{"lineNumber":89,"author":{"gitId":"jovyntls"},"content":"            return new CcaAddCommandParser().parse(arguments);","lastModifiedDate":"2021-10-04"},{"lineNumber":90,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":91,"author":{"gitId":"jivesh"},"content":"        case CcaDeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"jivesh"},"content":"            return new CcaDeleteCommandParser().parse(arguments);","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"jivesh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"justintanyf"},"content":"        case CcaEnrolCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"justintanyf"},"content":"            return new CcaEnrolCommandParser().parse(arguments);","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"justintanyf"},"content":"        case CcaExpelCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"justintanyf"},"content":"            return new CcaExpelCommandParser().parse(arguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"justintanyf":10,"jivesh":5,"-":63,"jovyntls":27}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"justintanyf"},"content":"    public static final Prefix PREFIX_CCA_ID \u003d new Prefix(\"cid/\");","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"justintanyf"},"content":"    public static final Prefix PREFIX_PERSON_ID \u003d new Prefix(\"pid/\");","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"justintanyf":2,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.CcaName;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":40,"author":{"gitId":"jovyntls"},"content":"     * Parses a {@code String name} into a {@code CcaName}.","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":55,"author":{"gitId":"jovyntls"},"content":"     * Parses a {@code String name} into a {@code CcaName}.","lastModifiedDate":"2021-10-04"},{"lineNumber":56,"author":{"gitId":"jovyntls"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-04"},{"lineNumber":57,"author":{"gitId":"jovyntls"},"content":"     *","lastModifiedDate":"2021-10-04"},{"lineNumber":58,"author":{"gitId":"jovyntls"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-10-04"},{"lineNumber":59,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":60,"author":{"gitId":"jovyntls"},"content":"    public static CcaName parseCcaName(String name) throws ParseException {","lastModifiedDate":"2021-10-04"},{"lineNumber":61,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-10-04"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2021-10-04"},{"lineNumber":63,"author":{"gitId":"jovyntls"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":64,"author":{"gitId":"jovyntls"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-04"},{"lineNumber":65,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":66,"author":{"gitId":"jovyntls"},"content":"        return new CcaName(trimmedName);","lastModifiedDate":"2021-10-04"},{"lineNumber":67,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":68,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":140,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":142,"author":{"gitId":"justintanyf"},"content":"     * Parses a {@code String cid} into an {@code int}.","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"justintanyf"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"justintanyf"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"justintanyf"},"content":"     * @throws ParseException if the given {@code cid} is invalid.","lastModifiedDate":"2021-10-07"},{"lineNumber":146,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":147,"author":{"gitId":"justintanyf"},"content":"    public static int parseCid(String cid) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"justintanyf"},"content":"        requireNonNull(cid);","lastModifiedDate":"2021-10-07"},{"lineNumber":149,"author":{"gitId":"justintanyf"},"content":"        String trimmedCid \u003d cid.trim();","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"justintanyf"},"content":"        int intCid \u003d -1;","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"justintanyf"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"justintanyf"},"content":"            intCid \u003d Integer.parseInt(trimmedCid);","lastModifiedDate":"2021-10-07"},{"lineNumber":153,"author":{"gitId":"justintanyf"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-10-07"},{"lineNumber":154,"author":{"gitId":"justintanyf"},"content":"            throw new ParseException(\"Please input cid as a number\");","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"justintanyf"},"content":"        } finally {","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"justintanyf"},"content":"            if (intCid \u003d\u003d -1) {","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"justintanyf"},"content":"                throw new ParseException(\"Please input cid as a number\");","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"justintanyf"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"justintanyf"},"content":"            return intCid;","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":161,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"justintanyf"},"content":"     * Parses a {@code String pid} into an {@code int}.","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"justintanyf"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"justintanyf"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"justintanyf"},"content":"     * @throws ParseException if the given {@code pid} is invalid.","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"justintanyf"},"content":"    public static int parsePid(String pid) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"justintanyf"},"content":"        requireNonNull(pid);","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"justintanyf"},"content":"        String trimmedPid \u003d pid.trim();","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"justintanyf"},"content":"        int intPid \u003d -1;","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"justintanyf"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":174,"author":{"gitId":"justintanyf"},"content":"            intPid \u003d Integer.parseInt(trimmedPid);","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"justintanyf"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"justintanyf"},"content":"            throw new ParseException(\"Please input pid as a number\");","lastModifiedDate":"2021-10-07"},{"lineNumber":177,"author":{"gitId":"justintanyf"},"content":"        } finally {","lastModifiedDate":"2021-10-07"},{"lineNumber":178,"author":{"gitId":"justintanyf"},"content":"            if (intPid \u003d\u003d -1) {","lastModifiedDate":"2021-10-07"},{"lineNumber":179,"author":{"gitId":"justintanyf"},"content":"                throw new ParseException(\"Please input pid as a number\");","lastModifiedDate":"2021-10-07"},{"lineNumber":180,"author":{"gitId":"justintanyf"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":181,"author":{"gitId":"justintanyf"},"content":"            return intPid;","lastModifiedDate":"2021-10-07"},{"lineNumber":182,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":183,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"justintanyf":44,"-":123,"jovyntls":17}},{"path":"src/main/java/seedu/address/logic/parser/cca/CcaAddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.logic.parser.cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.cca.CcaAddCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.CcaName;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"public class CcaAddCommandParser implements Parser\u003cCcaAddCommand\u003e {","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"     * Parses the given {@code String} of arguments in the context of the CcaAddCommand","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"     * and returns an CcaAddCommand object for execution.","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":"    public CcaAddCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"jovyntls"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME);","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"jovyntls"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CcaAddCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"        CcaName ccaName \u003d ParserUtil.parseCcaName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"justintanyf"},"content":"        // Create a new CCA here","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"jovyntls"},"content":"        Cca cca \u003d new Cca(ccaName);","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"jovyntls"},"content":"        return new CcaAddCommand(cca);","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":40,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":42,"author":{"gitId":"jovyntls"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"jovyntls"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"jovyntls"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-04"},{"lineNumber":46,"author":{"gitId":"jovyntls"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-04"},{"lineNumber":47,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":48,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":49,"author":{"gitId":"jovyntls"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"justintanyf":1,"jovyntls":48}},{"path":"src/main/java/seedu/address/logic/parser/cca/CcaDeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jivesh"},"content":"package seedu.address.logic.parser.cca;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"jivesh"},"content":"import seedu.address.logic.commands.cca.CcaDeleteCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"jivesh"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"jivesh"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"jivesh"},"content":"public class CcaDeleteCommandParser implements Parser\u003cCcaDeleteCommand\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"jivesh"},"content":"     * Parses the given {@code String} of arguments in the context of the PersonDeleteCommand","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"jivesh"},"content":"     * and returns a PersonDeleteCommand object for execution.","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"jivesh"},"content":"    public CcaDeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"jivesh"},"content":"            return new CcaDeleteCommand(index);","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"jivesh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CcaDeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"jivesh":10,"-":17}},{"path":"src/main/java/seedu/address/logic/parser/cca/CcaEnrolCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justintanyf"},"content":"package seedu.address.logic.parser.cca;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"justintanyf"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"justintanyf"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA_ID;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"justintanyf"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"justintanyf"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.commands.cca.CcaEnrolCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"justintanyf"},"content":"public class CcaEnrolCommandParser {","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"justintanyf"},"content":"     * Parses the given {@code String} of arguments in the context of the CcaEnrolCommand","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"justintanyf"},"content":"     * and returns an CcaEnrolCommand object for execution.","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"justintanyf"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"justintanyf"},"content":"    public CcaEnrolCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"justintanyf"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"justintanyf"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_CCA_ID, PREFIX_PERSON_ID);","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"justintanyf"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_CCA_ID, PREFIX_PERSON_ID)","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"justintanyf"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"justintanyf"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CcaEnrolCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"justintanyf"},"content":"        int cid \u003d ParserUtil.parseCid(argMultimap.getValue(PREFIX_CCA_ID).get());","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"justintanyf"},"content":"        int pid \u003d ParserUtil.parsePid(argMultimap.getValue(PREFIX_PERSON_ID).get());","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"justintanyf"},"content":"        return new CcaEnrolCommand(cid, pid);","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"justintanyf"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"justintanyf"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"justintanyf"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"justintanyf"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"justintanyf"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"justintanyf":43}},{"path":"src/main/java/seedu/address/logic/parser/cca/CcaExpelCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justintanyf"},"content":"package seedu.address.logic.parser.cca;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"justintanyf"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"justintanyf"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA_ID;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"justintanyf"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ID;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"justintanyf"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.commands.cca.CcaExpelCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"justintanyf"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"justintanyf"},"content":"public class CcaExpelCommandParser {","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"justintanyf"},"content":"     * Parses the given {@code String} of arguments in the context of the CcaEnrolCommand","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"justintanyf"},"content":"     * and returns an CcaEnrolCommand object for execution.","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"justintanyf"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"justintanyf"},"content":"    public CcaExpelCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"justintanyf"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"justintanyf"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_CCA_ID, PREFIX_PERSON_ID);","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"justintanyf"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_CCA_ID, PREFIX_PERSON_ID)","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"justintanyf"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"justintanyf"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CcaExpelCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"justintanyf"},"content":"        int cid \u003d ParserUtil.parseCid(argMultimap.getValue(PREFIX_CCA_ID).get());","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"justintanyf"},"content":"        int pid \u003d ParserUtil.parsePid(argMultimap.getValue(PREFIX_PERSON_ID).get());","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"justintanyf"},"content":"        return new CcaExpelCommand(cid, pid);","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"justintanyf"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"justintanyf"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"justintanyf"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"justintanyf"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"justintanyf"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"justintanyf":43}},{"path":"src/main/java/seedu/address/logic/parser/person/PersonAddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.logic.parser.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonAddCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":" * Parses input arguments and creates a new PersonAddCommand object","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"jovyntls"},"content":"public class PersonAddCommandParser implements Parser\u003cPersonAddCommand\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"     * Parses the given {@code String} of arguments in the context of the PersonAddCommand","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"     * and returns an PersonAddCommand object for execution.","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"jovyntls"},"content":"    public PersonAddCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":43,"author":{"gitId":"jovyntls"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PersonAddCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList);","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"jovyntls"},"content":"        return new PersonAddCommand(person);","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"jovyntls":14,"-":51}},{"path":"src/main/java/seedu/address/logic/parser/person/PersonDeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.logic.parser.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonDeleteCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":" * Parses input arguments and creates a new PersonDeleteCommand object","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"public class PersonDeleteCommandParser implements Parser\u003cPersonDeleteCommand\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"     * Parses the given {@code String} of arguments in the context of the PersonDeleteCommand","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"     * and returns a PersonDeleteCommand object for execution.","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"    public PersonDeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":"            return new PersonDeleteCommand(index);","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PersonDeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"jovyntls":11,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/person/PersonEditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.logic.parser.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":" * Parses input arguments and creates a new PersonEditCommand object","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"public class PersonEditCommandParser implements Parser\u003cPersonEditCommand\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"jovyntls"},"content":"     * Parses the given {@code String} of arguments in the context of the PersonEditCommand","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"     * and returns an PersonEditCommand object for execution.","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"jovyntls"},"content":"    public PersonEditCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"jovyntls"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"jovyntls"},"content":"                PersonEditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"jovyntls"},"content":"            throw new ParseException(PersonEditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"jovyntls"},"content":"        return new PersonEditCommand(index, editPersonDescriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"jovyntls":16,"-":71}},{"path":"src/main/java/seedu/address/logic/parser/person/PersonFindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.logic.parser.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonFindCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"jovyntls"},"content":" * Parses input arguments and creates a new PersonFindCommand object","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"public class PersonFindCommandParser implements Parser\u003cPersonFindCommand\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"     * Parses the given {@code String} of arguments in the context of the PersonFindCommand","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"     * and returns a PersonFindCommand object for execution.","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"    public PersonFindCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PersonFindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"jovyntls"},"content":"        return new PersonFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"jovyntls":10,"-":24}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.UniqueCcaList;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.Reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.UniqueReminderList;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"    private final UniqueCcaList ccas;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"weiquu"},"content":"    private final UniqueReminderList reminders;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"        ccas \u003d new UniqueCcaList();","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"weiquu"},"content":"        reminders \u003d new UniqueReminderList();","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"okyntary"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"okyntary"},"content":"     * Replaces the contents of the cca list with {@code ccas}.","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"okyntary"},"content":"     * {@code ccas} must not contain duplicate persons.","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"okyntary"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"okyntary"},"content":"    public void setCcas(List\u003cCca\u003e ccas) {","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"okyntary"},"content":"        this.ccas.setCcas(ccas);","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":73,"author":{"gitId":"okyntary"},"content":"        setCcas(newData.getCcaList());","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":92,"author":{"gitId":"justintanyf"},"content":"        p.setPid(persons.getCurrentIndex() + 1);","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"jovyntls"},"content":"    //// cca-level operations","lastModifiedDate":"2021-10-04"},{"lineNumber":115,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":116,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":117,"author":{"gitId":"jovyntls"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2021-10-04"},{"lineNumber":118,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":119,"author":{"gitId":"jovyntls"},"content":"    public boolean hasCca(Cca cca) {","lastModifiedDate":"2021-10-04"},{"lineNumber":120,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(cca);","lastModifiedDate":"2021-10-04"},{"lineNumber":121,"author":{"gitId":"jovyntls"},"content":"        return ccas.contains(cca);","lastModifiedDate":"2021-10-04"},{"lineNumber":122,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":123,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":124,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":125,"author":{"gitId":"jovyntls"},"content":"     * Adds a cca to the address book.","lastModifiedDate":"2021-10-04"},{"lineNumber":126,"author":{"gitId":"jovyntls"},"content":"     * The cca must not already exist in the address book.","lastModifiedDate":"2021-10-04"},{"lineNumber":127,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":128,"author":{"gitId":"justintanyf"},"content":"    public void addCca(Cca cca) {","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"justintanyf"},"content":"        ccas.add(cca);","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"justintanyf"},"content":"        cca.setCid(ccas.getCurrentIndex() + 1);","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":132,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":133,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":134,"author":{"gitId":"jovyntls"},"content":"     * Replaces the given cca {@code target} in the list with {@code editedCca}.","lastModifiedDate":"2021-10-04"},{"lineNumber":135,"author":{"gitId":"jovyntls"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2021-10-04"},{"lineNumber":136,"author":{"gitId":"jovyntls"},"content":"     * The cca identity of {@code editedCca} must not be the same as another existing cca in the address book.","lastModifiedDate":"2021-10-04"},{"lineNumber":137,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":138,"author":{"gitId":"jovyntls"},"content":"    public void setCca(Cca target, Cca editedCca) {","lastModifiedDate":"2021-10-04"},{"lineNumber":139,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(editedCca);","lastModifiedDate":"2021-10-04"},{"lineNumber":140,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":141,"author":{"gitId":"jovyntls"},"content":"        ccas.setCca(target, editedCca);","lastModifiedDate":"2021-10-04"},{"lineNumber":142,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":143,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":144,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":145,"author":{"gitId":"jovyntls"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2021-10-04"},{"lineNumber":146,"author":{"gitId":"jovyntls"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2021-10-04"},{"lineNumber":147,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":148,"author":{"gitId":"jovyntls"},"content":"    public void removeCca(Cca key) {","lastModifiedDate":"2021-10-04"},{"lineNumber":149,"author":{"gitId":"jovyntls"},"content":"        ccas.remove(key);","lastModifiedDate":"2021-10-04"},{"lineNumber":150,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":151,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"okyntary"},"content":"        String result \u003d persons.asUnmodifiableObservableList().size() + \" persons, \"","lastModifiedDate":"2021-10-08"},{"lineNumber":157,"author":{"gitId":"okyntary"},"content":"                + ccas.asUnmodifiableObservableList().size() + \" ccas\";","lastModifiedDate":"2021-10-08"},{"lineNumber":158,"author":{"gitId":"okyntary"},"content":"        return result;","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":167,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":168,"author":{"gitId":"jovyntls"},"content":"    public ObservableList\u003cCca\u003e getCcaList() {","lastModifiedDate":"2021-10-04"},{"lineNumber":169,"author":{"gitId":"jovyntls"},"content":"        return ccas.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-04"},{"lineNumber":170,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":171,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":172,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"weiquu"},"content":"    public ObservableList\u003cReminder\u003e getReminderList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":174,"author":{"gitId":"weiquu"},"content":"        return reminders.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));","lastModifiedDate":"2018-08-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":188,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":189,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":190,"author":{"gitId":"justintanyf"},"content":"     * Returns the CCA from the cid.","lastModifiedDate":"2021-10-08"},{"lineNumber":191,"author":{"gitId":"justintanyf"},"content":"     * @param cid of the CCA to be found","lastModifiedDate":"2021-10-08"},{"lineNumber":192,"author":{"gitId":"justintanyf"},"content":"     * @return the CCA with that cid","lastModifiedDate":"2021-10-08"},{"lineNumber":193,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":194,"author":{"gitId":"justintanyf"},"content":"    public Cca findCcaFromCid(int cid) {","lastModifiedDate":"2021-10-08"},{"lineNumber":195,"author":{"gitId":"justintanyf"},"content":"        final Cca[] ccaFromCid \u003d new Cca[1];","lastModifiedDate":"2021-10-08"},{"lineNumber":196,"author":{"gitId":"justintanyf"},"content":"        ccaFromCid[0] \u003d null;","lastModifiedDate":"2021-10-08"},{"lineNumber":197,"author":{"gitId":"justintanyf"},"content":"        this.getCcaList().parallelStream().forEach(cca -\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":198,"author":{"gitId":"justintanyf"},"content":"            if (cca.getCid() \u003d\u003d cid) {","lastModifiedDate":"2021-10-08"},{"lineNumber":199,"author":{"gitId":"justintanyf"},"content":"                ccaFromCid[0] \u003d cca;","lastModifiedDate":"2021-10-08"},{"lineNumber":200,"author":{"gitId":"justintanyf"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":201,"author":{"gitId":"justintanyf"},"content":"        });","lastModifiedDate":"2021-10-08"},{"lineNumber":202,"author":{"gitId":"justintanyf"},"content":"        return ccaFromCid[0];","lastModifiedDate":"2021-10-08"},{"lineNumber":203,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":204,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":205,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":206,"author":{"gitId":"justintanyf"},"content":"     * Returns the CCA from the cid.","lastModifiedDate":"2021-10-08"},{"lineNumber":207,"author":{"gitId":"justintanyf"},"content":"     * @param pid of the CCA to be found","lastModifiedDate":"2021-10-08"},{"lineNumber":208,"author":{"gitId":"justintanyf"},"content":"     * @return the CCA with that cid","lastModifiedDate":"2021-10-08"},{"lineNumber":209,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":210,"author":{"gitId":"justintanyf"},"content":"    public Person findPersonFromPid(int pid) {","lastModifiedDate":"2021-10-08"},{"lineNumber":211,"author":{"gitId":"justintanyf"},"content":"        final Person[] personFromPid \u003d new Person[1];","lastModifiedDate":"2021-10-08"},{"lineNumber":212,"author":{"gitId":"justintanyf"},"content":"        personFromPid[0] \u003d null;","lastModifiedDate":"2021-10-08"},{"lineNumber":213,"author":{"gitId":"justintanyf"},"content":"        this.getPersonList().parallelStream().forEach(person -\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":214,"author":{"gitId":"justintanyf"},"content":"            if (person.getPid() \u003d\u003d pid) {","lastModifiedDate":"2021-10-08"},{"lineNumber":215,"author":{"gitId":"justintanyf"},"content":"                personFromPid[0] \u003d person;","lastModifiedDate":"2021-10-08"},{"lineNumber":216,"author":{"gitId":"justintanyf"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":217,"author":{"gitId":"justintanyf"},"content":"        });","lastModifiedDate":"2021-10-08"},{"lineNumber":218,"author":{"gitId":"justintanyf"},"content":"        return personFromPid[0];","lastModifiedDate":"2021-10-08"},{"lineNumber":219,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"justintanyf":36,"weiquu":9,"-":119,"jovyntls":44,"okyntary":12}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.Reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"    Predicate\u003cCca\u003e PREDICATE_SHOW_ALL_CCAS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":86,"author":{"gitId":"justintanyf"},"content":"     * Returns true if a CCA with the same identity as {@code CCA} exists in the address book.","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":88,"author":{"gitId":"jovyntls"},"content":"    boolean hasCca(Cca cca);","lastModifiedDate":"2021-10-04"},{"lineNumber":89,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":90,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":91,"author":{"gitId":"jovyntls"},"content":"     * Deletes the given cca.","lastModifiedDate":"2021-10-04"},{"lineNumber":92,"author":{"gitId":"jovyntls"},"content":"     * The cca must exist in the address book.","lastModifiedDate":"2021-10-04"},{"lineNumber":93,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":94,"author":{"gitId":"jovyntls"},"content":"    void deleteCca(Cca target);","lastModifiedDate":"2021-10-04"},{"lineNumber":95,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":96,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":97,"author":{"gitId":"jovyntls"},"content":"     * Adds the given cca.","lastModifiedDate":"2021-10-04"},{"lineNumber":98,"author":{"gitId":"jovyntls"},"content":"     * {@code cca} must not already exist in the address book.","lastModifiedDate":"2021-10-04"},{"lineNumber":99,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":100,"author":{"gitId":"jovyntls"},"content":"    void addCca(Cca cca);","lastModifiedDate":"2021-10-04"},{"lineNumber":101,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":102,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":103,"author":{"gitId":"jovyntls"},"content":"     * Replaces the given cca {@code target} with {@code editedCca}.","lastModifiedDate":"2021-10-04"},{"lineNumber":104,"author":{"gitId":"jovyntls"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2021-10-04"},{"lineNumber":105,"author":{"gitId":"jovyntls"},"content":"     * The cca identity of {@code editedCca} must not be the same as another existing cca in the address book.","lastModifiedDate":"2021-10-04"},{"lineNumber":106,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":107,"author":{"gitId":"jovyntls"},"content":"    void setCca(Cca target, Cca editedCca);","lastModifiedDate":"2021-10-04"},{"lineNumber":108,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":109,"author":{"gitId":"jovyntls"},"content":"    /** Returns an unmodifiable view of the filtered cca list */","lastModifiedDate":"2021-10-04"},{"lineNumber":110,"author":{"gitId":"jovyntls"},"content":"    ObservableList\u003cCca\u003e getFilteredCcaList();","lastModifiedDate":"2021-10-04"},{"lineNumber":111,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":118,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":119,"author":{"gitId":"jovyntls"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-04"},{"lineNumber":120,"author":{"gitId":"jovyntls"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-04"},{"lineNumber":121,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":122,"author":{"gitId":"jovyntls"},"content":"    void updateFilteredCcaList(Predicate\u003cCca\u003e predicate);","lastModifiedDate":"2021-10-04"},{"lineNumber":123,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"justintanyf"},"content":"     * Enrols a person into a CCA","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":127,"author":{"gitId":"justintanyf"},"content":"    boolean enrolPersonIntoCca(Cca ccaToEnrolInto, Person personToEnrol);","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"justintanyf"},"content":"     * Expels a person from a CCA","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"justintanyf"},"content":"    boolean expelPersonFromCca(Cca ccaToExpelFrom, Person personToExpel);","lastModifiedDate":"2021-10-08"},{"lineNumber":133,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"justintanyf"},"content":"     * Finds a CCA based on the cid","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"justintanyf"},"content":"    Cca findCcaFromCid(int cid);","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"justintanyf"},"content":"     * Finds a Person based on the pid","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":142,"author":{"gitId":"justintanyf"},"content":"    Person findPersonFromPid(int pid);","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"weiquu"},"content":"    /** Returns an unmodifiable view of the filtered cca list */","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"weiquu"},"content":"    ObservableList\u003cReminder\u003e getFilteredReminderList();","lastModifiedDate":"2021-10-07"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"justintanyf":22,"weiquu":3,"-":87,"jovyntls":34}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.Reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":"    private final FilteredList\u003cCca\u003e filteredCcas;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"weiquu"},"content":"    private final FilteredList\u003cReminder\u003e filteredReminders;","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"jovyntls"},"content":"        filteredCcas \u003d new FilteredList\u003c\u003e(this.addressBook.getCcaList());","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"weiquu"},"content":"        filteredReminders \u003d new FilteredList\u003c\u003e(this.addressBook.getReminderList());","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":121,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":122,"author":{"gitId":"jovyntls"},"content":"    public boolean hasCca(Cca person) {","lastModifiedDate":"2021-10-04"},{"lineNumber":123,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(person);","lastModifiedDate":"2021-10-04"},{"lineNumber":124,"author":{"gitId":"jovyntls"},"content":"        return addressBook.hasCca(person);","lastModifiedDate":"2021-10-04"},{"lineNumber":125,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":126,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":127,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":128,"author":{"gitId":"jovyntls"},"content":"    public void deleteCca(Cca target) {","lastModifiedDate":"2021-10-04"},{"lineNumber":129,"author":{"gitId":"jovyntls"},"content":"        addressBook.removeCca(target);","lastModifiedDate":"2021-10-04"},{"lineNumber":130,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":131,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":132,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":133,"author":{"gitId":"jovyntls"},"content":"    public void addCca(Cca person) {","lastModifiedDate":"2021-10-04"},{"lineNumber":134,"author":{"gitId":"jovyntls"},"content":"        addressBook.addCca(person);","lastModifiedDate":"2021-10-04"},{"lineNumber":135,"author":{"gitId":"jovyntls"},"content":"        updateFilteredCcaList(PREDICATE_SHOW_ALL_CCAS);","lastModifiedDate":"2021-10-04"},{"lineNumber":136,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":137,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":138,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":139,"author":{"gitId":"jovyntls"},"content":"    public void setCca(Cca target, Cca editedCca) {","lastModifiedDate":"2021-10-04"},{"lineNumber":140,"author":{"gitId":"jovyntls"},"content":"        requireAllNonNull(target, editedCca);","lastModifiedDate":"2021-10-04"},{"lineNumber":141,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":142,"author":{"gitId":"jovyntls"},"content":"        addressBook.setCca(target, editedCca);","lastModifiedDate":"2021-10-04"},{"lineNumber":143,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":144,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":162,"author":{"gitId":"jovyntls"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Cca List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-04"},{"lineNumber":163,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":164,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":165,"author":{"gitId":"weiquu"},"content":"     * Returns an unmodifiable view of the list of {@code Cca} backed by the internal list of","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"jovyntls"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-10-04"},{"lineNumber":167,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":168,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":169,"author":{"gitId":"jovyntls"},"content":"    public ObservableList\u003cCca\u003e getFilteredCcaList() {","lastModifiedDate":"2021-10-04"},{"lineNumber":170,"author":{"gitId":"jovyntls"},"content":"        return filteredCcas;","lastModifiedDate":"2021-10-04"},{"lineNumber":171,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":172,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":173,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":174,"author":{"gitId":"jovyntls"},"content":"    public void updateFilteredCcaList(Predicate\u003cCca\u003e predicate) {","lastModifiedDate":"2021-10-04"},{"lineNumber":175,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-04"},{"lineNumber":176,"author":{"gitId":"jovyntls"},"content":"        filteredCcas.setPredicate(predicate);","lastModifiedDate":"2021-10-04"},{"lineNumber":177,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":178,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":179,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":180,"author":{"gitId":"justintanyf"},"content":"     * Enrols a person into a CCA","lastModifiedDate":"2021-10-07"},{"lineNumber":181,"author":{"gitId":"justintanyf"},"content":"     * {@code cca} must not already exist in the address book.","lastModifiedDate":"2021-10-07"},{"lineNumber":182,"author":{"gitId":"justintanyf"},"content":"     *  @param ccaToEnrolInto CCA to enrol into","lastModifiedDate":"2021-10-08"},{"lineNumber":183,"author":{"gitId":"justintanyf"},"content":"     * @param personToEnrol Person enrolling into CCA","lastModifiedDate":"2021-10-08"},{"lineNumber":184,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":185,"author":{"gitId":"justintanyf"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":186,"author":{"gitId":"justintanyf"},"content":"    public boolean enrolPersonIntoCca(Cca ccaToEnrolInto, Person personToEnrol) {","lastModifiedDate":"2021-10-08"},{"lineNumber":187,"author":{"gitId":"justintanyf"},"content":"        return ccaToEnrolInto.enrolPerson(personToEnrol);","lastModifiedDate":"2021-10-08"},{"lineNumber":188,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":189,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":190,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":191,"author":{"gitId":"justintanyf"},"content":"     * Expels a person from a CCA","lastModifiedDate":"2021-10-08"},{"lineNumber":192,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":193,"author":{"gitId":"justintanyf"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":194,"author":{"gitId":"justintanyf"},"content":"    public boolean expelPersonFromCca(Cca ccaToExpelFrom, Person personToExpel) {","lastModifiedDate":"2021-10-08"},{"lineNumber":195,"author":{"gitId":"justintanyf"},"content":"        return ccaToExpelFrom.expelPerson(personToExpel);","lastModifiedDate":"2021-10-08"},{"lineNumber":196,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":197,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":198,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":199,"author":{"gitId":"justintanyf"},"content":"     * Finds a CCA based on the cid","lastModifiedDate":"2021-10-07"},{"lineNumber":200,"author":{"gitId":"justintanyf"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":201,"author":{"gitId":"justintanyf"},"content":"     * @param cid cid of CCA to be found","lastModifiedDate":"2021-10-08"},{"lineNumber":202,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":203,"author":{"gitId":"justintanyf"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":204,"author":{"gitId":"justintanyf"},"content":"    public Cca findCcaFromCid(int cid) {","lastModifiedDate":"2021-10-07"},{"lineNumber":205,"author":{"gitId":"justintanyf"},"content":"        return this.addressBook.findCcaFromCid(cid);","lastModifiedDate":"2021-10-08"},{"lineNumber":206,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":207,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":208,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":209,"author":{"gitId":"justintanyf"},"content":"     * Finds a Person based on the pid","lastModifiedDate":"2021-10-07"},{"lineNumber":210,"author":{"gitId":"justintanyf"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":211,"author":{"gitId":"justintanyf"},"content":"     * @param pid pid of Person to be found","lastModifiedDate":"2021-10-08"},{"lineNumber":212,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":213,"author":{"gitId":"justintanyf"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":214,"author":{"gitId":"justintanyf"},"content":"    public Person findPersonFromPid(int pid) {","lastModifiedDate":"2021-10-07"},{"lineNumber":215,"author":{"gitId":"justintanyf"},"content":"        return this.addressBook.findPersonFromPid(pid);","lastModifiedDate":"2021-10-08"},{"lineNumber":216,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":217,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":234,"author":{"gitId":"jovyntls"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2021-10-04"},{"lineNumber":235,"author":{"gitId":"jovyntls"},"content":"                \u0026\u0026 filteredCcas.equals(other.filteredCcas);","lastModifiedDate":"2021-10-04"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":238,"author":{"gitId":"weiquu"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Reminder List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":239,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":240,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":241,"author":{"gitId":"weiquu"},"content":"     * Returns an unmodifiable view of the list of {@code Reminder} backed by the internal list of","lastModifiedDate":"2021-10-07"},{"lineNumber":242,"author":{"gitId":"weiquu"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-10-07"},{"lineNumber":243,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":244,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":245,"author":{"gitId":"weiquu"},"content":"    public ObservableList\u003cReminder\u003e getFilteredReminderList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":246,"author":{"gitId":"weiquu"},"content":"        return filteredReminders;","lastModifiedDate":"2021-10-07"},{"lineNumber":247,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"justintanyf":39,"weiquu":14,"-":150,"jovyntls":45}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.Reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"weiquu"},"content":"     * Returns an unmodifiable view of the cca list.","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"weiquu"},"content":"     * This list will not contain any duplicate ccas.","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"    ObservableList\u003cCca\u003e getCcaList();","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"weiquu"},"content":"     * Returns an unmodifiable view of the reminders list.","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"weiquu"},"content":"     * This list will not contain any duplicate reminders.","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"weiquu"},"content":"    ObservableList\u003cReminder\u003e getReminderList();","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"weiquu":8,"-":17,"jovyntls":4}},{"path":"src/main/java/seedu/address/model/cca/Cca.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.model.cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"justintanyf"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"justintanyf"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"justintanyf"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"public class Cca {","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"jovyntls"},"content":"    // Identity fields","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"    private final CcaName ccaName;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"justintanyf"},"content":"    private Set\u003cPerson\u003e personArrayList;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"justintanyf"},"content":"    private int cid;","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"    public Cca(CcaName ccaName) {","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"        requireAllNonNull(ccaName);","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"        this.ccaName \u003d ccaName;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"justintanyf"},"content":"        this.personArrayList \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"justintanyf"},"content":"     * Returns the name of this CCA.","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"justintanyf"},"content":"     * @return the name of this CCA","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"jovyntls"},"content":"    public CcaName getName() {","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"jovyntls"},"content":"        return ccaName;","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"justintanyf"},"content":"     * Returns the cid of this CCA.","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"justintanyf"},"content":"     * @return the cid of this CCA","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"justintanyf"},"content":"    public int getCid() {","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"justintanyf"},"content":"        return this.cid;","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"justintanyf"},"content":"     * Sets the cid of this CCA.","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"justintanyf"},"content":"     * @param cid of this cca","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"justintanyf"},"content":"    public void setCid(int cid) {","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"justintanyf"},"content":"        this.cid \u003d cid;","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"jovyntls"},"content":"     * Returns true if both CCAs have the same ccaName.","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"jovyntls"},"content":"     * This defines a weaker notion of equality between two CCAs.","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":55,"author":{"gitId":"jovyntls"},"content":"    public boolean isSameCca(seedu.address.model.cca.Cca otherCca) {","lastModifiedDate":"2021-10-04"},{"lineNumber":56,"author":{"gitId":"jovyntls"},"content":"        if (otherCca \u003d\u003d this) {","lastModifiedDate":"2021-10-04"},{"lineNumber":57,"author":{"gitId":"jovyntls"},"content":"            return true;","lastModifiedDate":"2021-10-04"},{"lineNumber":58,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":59,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":60,"author":{"gitId":"jovyntls"},"content":"        return otherCca !\u003d null","lastModifiedDate":"2021-10-04"},{"lineNumber":61,"author":{"gitId":"jovyntls"},"content":"                \u0026\u0026 otherCca.getName().equals(getName());","lastModifiedDate":"2021-10-04"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":63,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":64,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":65,"author":{"gitId":"jovyntls"},"content":"     * Returns true if both CCAs have the same identity and data fields.","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"jovyntls"},"content":"     * This defines a stronger notion of equality between two CCAs.","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":68,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":69,"author":{"gitId":"jovyntls"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-04"},{"lineNumber":70,"author":{"gitId":"jovyntls"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-04"},{"lineNumber":71,"author":{"gitId":"jovyntls"},"content":"            return true;","lastModifiedDate":"2021-10-04"},{"lineNumber":72,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":73,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":74,"author":{"gitId":"jovyntls"},"content":"        if (!(other instanceof seedu.address.model.cca.Cca)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":75,"author":{"gitId":"jovyntls"},"content":"            return false;","lastModifiedDate":"2021-10-04"},{"lineNumber":76,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":77,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":78,"author":{"gitId":"jovyntls"},"content":"        seedu.address.model.cca.Cca otherCca \u003d (seedu.address.model.cca.Cca) other;","lastModifiedDate":"2021-10-04"},{"lineNumber":79,"author":{"gitId":"jovyntls"},"content":"        return otherCca.getName().equals(getName());","lastModifiedDate":"2021-10-04"},{"lineNumber":80,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":81,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":82,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":83,"author":{"gitId":"jovyntls"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-04"},{"lineNumber":84,"author":{"gitId":"jovyntls"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-04"},{"lineNumber":85,"author":{"gitId":"jovyntls"},"content":"        return Objects.hash(ccaName);","lastModifiedDate":"2021-10-04"},{"lineNumber":86,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":87,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":88,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":89,"author":{"gitId":"jovyntls"},"content":"    public String toString() {","lastModifiedDate":"2021-10-04"},{"lineNumber":90,"author":{"gitId":"jovyntls"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-04"},{"lineNumber":91,"author":{"gitId":"jovyntls"},"content":"        builder.append(getName());","lastModifiedDate":"2021-10-04"},{"lineNumber":92,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":93,"author":{"gitId":"jovyntls"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-04"},{"lineNumber":94,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":95,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":96,"author":{"gitId":"justintanyf"},"content":"    // Enrol a Person","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"justintanyf"},"content":"    public boolean enrolPerson(Person newPerson) {","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"justintanyf"},"content":"        return this.personArrayList.add(newPerson);","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"justintanyf"},"content":"    // Check if Person Exists but should not need as it is a Set\u003c\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"justintanyf"},"content":"    public boolean checkPerson(Person personToCheck) {","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"justintanyf"},"content":"        return this.personArrayList.contains(personToCheck);","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"justintanyf"},"content":"    // Expel a Person","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"justintanyf"},"content":"    public boolean expelPerson(Person personToExpel) {","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"justintanyf"},"content":"        return this.personArrayList.remove(personToExpel);","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"jovyntls"},"content":"}","lastModifiedDate":"2021-10-04"},{"lineNumber":111,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"justintanyf":42,"jovyntls":69}},{"path":"src/main/java/seedu/address/model/cca/CcaName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.model.cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"/**","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":" * Represents a CCA\u0027s name in the address book.","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":" */","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"public class CcaName {","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"jovyntls"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"    /*","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"jovyntls"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"    public final String fullName;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":"     * Constructs a {@code CcaName}.","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"jovyntls"},"content":"     *","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"     * @param name A valid name.","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":"    public CcaName(String name) {","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"jovyntls"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"jovyntls"},"content":"        fullName \u003d name;","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"jovyntls"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":37,"author":{"gitId":"jovyntls"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"jovyntls"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-04"},{"lineNumber":39,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":40,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":42,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"jovyntls"},"content":"    public String toString() {","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"jovyntls"},"content":"        return fullName;","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":46,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":47,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":48,"author":{"gitId":"jovyntls"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-04"},{"lineNumber":49,"author":{"gitId":"jovyntls"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-04"},{"lineNumber":50,"author":{"gitId":"jovyntls"},"content":"                || (other instanceof CcaName // instanceof handles nulls","lastModifiedDate":"2021-10-04"},{"lineNumber":51,"author":{"gitId":"jovyntls"},"content":"                \u0026\u0026 fullName.equals(((CcaName) other).fullName)); // state check","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":53,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":54,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":55,"author":{"gitId":"jovyntls"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-04"},{"lineNumber":56,"author":{"gitId":"jovyntls"},"content":"        return fullName.hashCode();","lastModifiedDate":"2021-10-04"},{"lineNumber":57,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":58,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":59,"author":{"gitId":"jovyntls"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"jovyntls":59}},{"path":"src/main/java/seedu/address/model/cca/UniqueCcaList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.model.cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"import java.util.List;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.exceptions.CcaNotFoundException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.exceptions.DuplicateCcaException;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"/**","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":" * A list of CCas that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"jovyntls"},"content":" * A CCa is considered unique by comparing using {@code Cca#isSameCca(Cca)}. As such, adding and updating of","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":" * CCas uses Cca#isSameCca(Cca) for equality so as to ensure that the CCa being added or updated is","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":" * unique in terms of identity in the UniqueCcaList. However, the removal of a CCa uses Cca#equals(Object) so","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":" * as to ensure that the CCa with exactly the same fields will be removed.","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":" *","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":" *","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":" * @see Cca#isSameCca(Cca)","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":" */","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"jovyntls"},"content":"public class UniqueCcaList implements Iterable\u003cCca\u003e {","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":"    private final ObservableList\u003cCca\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":"    private final ObservableList\u003cCca\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"justintanyf"},"content":"     * Returns the current largest cid","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"justintanyf"},"content":"     * @return the current largest cid","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"justintanyf"},"content":"    public int getCurrentIndex() {","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"justintanyf"},"content":"        if (this.internalList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"justintanyf"},"content":"            return 0;","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"justintanyf"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"justintanyf"},"content":"            return this.internalList.get(this.internalList.size() - 1).getCid();","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"jovyntls"},"content":"     * Returns true if the list contains an equivalent CCA as the given argument.","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"jovyntls"},"content":"    public boolean contains(Cca toCheck) {","lastModifiedDate":"2021-10-04"},{"lineNumber":46,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-04"},{"lineNumber":47,"author":{"gitId":"jovyntls"},"content":"        return internalList.stream().anyMatch(toCheck::isSameCca);","lastModifiedDate":"2021-10-04"},{"lineNumber":48,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":49,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":50,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":51,"author":{"gitId":"jovyntls"},"content":"     * Adds a CCA to the list.","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"jovyntls"},"content":"     * The CCA must not already exist in the list.","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":54,"author":{"gitId":"jovyntls"},"content":"    public void add(Cca toAdd) {","lastModifiedDate":"2021-10-04"},{"lineNumber":55,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-10-04"},{"lineNumber":56,"author":{"gitId":"jovyntls"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":57,"author":{"gitId":"jovyntls"},"content":"            throw new DuplicateCcaException();","lastModifiedDate":"2021-10-04"},{"lineNumber":58,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":59,"author":{"gitId":"jovyntls"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-10-04"},{"lineNumber":60,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":61,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":63,"author":{"gitId":"jovyntls"},"content":"     * Replaces the CCA {@code target} in the list with {@code editedCca}.","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"jovyntls"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-04"},{"lineNumber":65,"author":{"gitId":"jovyntls"},"content":"     * The CCA identity of {@code editedCca} must not be the same as another existing CCA in the list.","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":67,"author":{"gitId":"jovyntls"},"content":"    public void setCca(Cca target, Cca editedCca) {","lastModifiedDate":"2021-10-04"},{"lineNumber":68,"author":{"gitId":"jovyntls"},"content":"        requireAllNonNull(target, editedCca);","lastModifiedDate":"2021-10-04"},{"lineNumber":69,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":70,"author":{"gitId":"jovyntls"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-10-04"},{"lineNumber":71,"author":{"gitId":"jovyntls"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-04"},{"lineNumber":72,"author":{"gitId":"jovyntls"},"content":"            throw new CcaNotFoundException();","lastModifiedDate":"2021-10-04"},{"lineNumber":73,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":74,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":75,"author":{"gitId":"jovyntls"},"content":"        if (!target.isSameCca(editedCca) \u0026\u0026 contains(editedCca)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":76,"author":{"gitId":"jovyntls"},"content":"            throw new DuplicateCcaException();","lastModifiedDate":"2021-10-04"},{"lineNumber":77,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":78,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":79,"author":{"gitId":"jovyntls"},"content":"        internalList.set(index, editedCca);","lastModifiedDate":"2021-10-04"},{"lineNumber":80,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":81,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":82,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":83,"author":{"gitId":"jovyntls"},"content":"     * Removes the equivalent CCA from the list.","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"jovyntls"},"content":"     * The CCA must exist in the list.","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":86,"author":{"gitId":"jovyntls"},"content":"    public void remove(Cca toRemove) {","lastModifiedDate":"2021-10-04"},{"lineNumber":87,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-10-04"},{"lineNumber":88,"author":{"gitId":"jovyntls"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":89,"author":{"gitId":"jovyntls"},"content":"            throw new CcaNotFoundException();","lastModifiedDate":"2021-10-04"},{"lineNumber":90,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":91,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":92,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":93,"author":{"gitId":"jovyntls"},"content":"    public void setCcas(UniqueCcaList replacement) {","lastModifiedDate":"2021-10-04"},{"lineNumber":94,"author":{"gitId":"jovyntls"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-10-04"},{"lineNumber":95,"author":{"gitId":"jovyntls"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-10-04"},{"lineNumber":96,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":97,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":98,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":99,"author":{"gitId":"jovyntls"},"content":"     * Replaces the contents of this list with {@code CCAs}.","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"jovyntls"},"content":"     * {@code CCAs} must not contain duplicate CCAs.","lastModifiedDate":"2021-10-06"},{"lineNumber":101,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":102,"author":{"gitId":"jovyntls"},"content":"    public void setCcas(List\u003cCca\u003e ccas) {","lastModifiedDate":"2021-10-04"},{"lineNumber":103,"author":{"gitId":"jovyntls"},"content":"        requireAllNonNull(ccas);","lastModifiedDate":"2021-10-04"},{"lineNumber":104,"author":{"gitId":"jovyntls"},"content":"        if (!ccasAreUnique(ccas)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":105,"author":{"gitId":"jovyntls"},"content":"            throw new DuplicateCcaException();","lastModifiedDate":"2021-10-04"},{"lineNumber":106,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":107,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":108,"author":{"gitId":"jovyntls"},"content":"        internalList.setAll(ccas);","lastModifiedDate":"2021-10-04"},{"lineNumber":109,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":110,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":111,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":112,"author":{"gitId":"jovyntls"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-10-04"},{"lineNumber":113,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":114,"author":{"gitId":"jovyntls"},"content":"    public ObservableList\u003cCca\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-04"},{"lineNumber":115,"author":{"gitId":"jovyntls"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-10-04"},{"lineNumber":116,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":117,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":118,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":119,"author":{"gitId":"jovyntls"},"content":"    public Iterator\u003cCca\u003e iterator() {","lastModifiedDate":"2021-10-04"},{"lineNumber":120,"author":{"gitId":"jovyntls"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-10-04"},{"lineNumber":121,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":122,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":123,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":124,"author":{"gitId":"jovyntls"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-04"},{"lineNumber":125,"author":{"gitId":"jovyntls"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-04"},{"lineNumber":126,"author":{"gitId":"jovyntls"},"content":"                || (other instanceof seedu.address.model.cca.UniqueCcaList // instanceof handles nulls","lastModifiedDate":"2021-10-04"},{"lineNumber":127,"author":{"gitId":"jovyntls"},"content":"                        \u0026\u0026 internalList.equals(((seedu.address.model.cca.UniqueCcaList) other).internalList));","lastModifiedDate":"2021-10-04"},{"lineNumber":128,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":129,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":130,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":131,"author":{"gitId":"jovyntls"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-04"},{"lineNumber":132,"author":{"gitId":"jovyntls"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-10-04"},{"lineNumber":133,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":134,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":135,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":136,"author":{"gitId":"jovyntls"},"content":"     * Returns true if {@code CCAs} contains only unique ccas.","lastModifiedDate":"2021-10-06"},{"lineNumber":137,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":138,"author":{"gitId":"jovyntls"},"content":"    private boolean ccasAreUnique(List\u003cCca\u003e ccas) {","lastModifiedDate":"2021-10-04"},{"lineNumber":139,"author":{"gitId":"jovyntls"},"content":"        for (int i \u003d 0; i \u003c ccas.size() - 1; i++) {","lastModifiedDate":"2021-10-04"},{"lineNumber":140,"author":{"gitId":"jovyntls"},"content":"            for (int j \u003d i + 1; j \u003c ccas.size(); j++) {","lastModifiedDate":"2021-10-04"},{"lineNumber":141,"author":{"gitId":"jovyntls"},"content":"                if (ccas.get(i).isSameCca(ccas.get(j))) {","lastModifiedDate":"2021-10-04"},{"lineNumber":142,"author":{"gitId":"jovyntls"},"content":"                    return false;","lastModifiedDate":"2021-10-04"},{"lineNumber":143,"author":{"gitId":"jovyntls"},"content":"                }","lastModifiedDate":"2021-10-04"},{"lineNumber":144,"author":{"gitId":"jovyntls"},"content":"            }","lastModifiedDate":"2021-10-04"},{"lineNumber":145,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":146,"author":{"gitId":"jovyntls"},"content":"        return true;","lastModifiedDate":"2021-10-04"},{"lineNumber":147,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":148,"author":{"gitId":"jovyntls"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"justintanyf":11,"jovyntls":137}},{"path":"src/main/java/seedu/address/model/cca/exceptions/CcaNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.model.cca.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"/**","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":" */","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"public class CcaNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"jovyntls":6}},{"path":"src/main/java/seedu/address/model/cca/exceptions/DuplicateCcaException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.model.cca.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"/**","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":" * identity).","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":" */","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"public class DuplicateCcaException extends RuntimeException {","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"    public DuplicateCcaException() {","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":"        super(\"Operation would result in duplicate CCAs\");","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"jovyntls":11}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":" * Tests that a {@code Person}\u0027s {@code CcaName} matches any of the keywords given.","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":30,"jovyntls":1}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"justintanyf"},"content":"    private int pid;","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"justintanyf"},"content":"     * Set pid for this person.","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"justintanyf"},"content":"     * @param pid for this person","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"justintanyf"},"content":"    public void setPid(int pid) {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"justintanyf"},"content":"        this.pid \u003d pid;","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"justintanyf"},"content":"     * Returns the pid for this person.","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"justintanyf"},"content":"     * @return the pid of this person","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"justintanyf"},"content":"    public int getPid() {","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"justintanyf"},"content":"        return this.pid;","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"justintanyf":17,"-":123}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":" * unique in terms of identity in the UniqueCcaList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"justintanyf"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"justintanyf"},"content":"     * Returns the current largest pid","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"justintanyf"},"content":"     * @return the current largest pid","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"justintanyf"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"justintanyf"},"content":"    public int getCurrentIndex() {","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"justintanyf"},"content":"        if (this.internalList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"justintanyf"},"content":"            return 0;","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"justintanyf"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"justintanyf"},"content":"            return this.internalList.get(this.internalList.size() - 1).getPid();","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"justintanyf"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"justintanyf":12,"-":136,"jovyntls":1}},{"path":"src/main/java/seedu/address/model/reminder/Reminder.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"weiquu"},"content":"package seedu.address.model.reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"weiquu"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"weiquu"},"content":"public class Reminder {","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"weiquu"},"content":"    // Identity fields","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"weiquu"},"content":"    private final ReminderName reminderName;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"weiquu"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"weiquu"},"content":"    public Reminder(ReminderName reminderName) {","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"weiquu"},"content":"        requireAllNonNull(reminderName);","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"weiquu"},"content":"        this.reminderName \u003d reminderName;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"weiquu"},"content":"    public ReminderName getName() {","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"weiquu"},"content":"        return reminderName;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"weiquu"},"content":"     * Returns true if both Reminders have the same reminderName.","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"weiquu"},"content":"     * This defines a weaker notion of equality between two Reminders.","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"weiquu"},"content":"    public boolean isSameReminder(seedu.address.model.reminder.Reminder otherReminder) {","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"weiquu"},"content":"        if (otherReminder \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"weiquu"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"weiquu"},"content":"        return otherReminder !\u003d null","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"weiquu"},"content":"                \u0026\u0026 otherReminder.getName().equals(getName());","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"weiquu"},"content":"     * Returns true if both Reminders have the same identity and data fields.","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"weiquu"},"content":"     * This defines a stronger notion of equality between two Reminders.","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"weiquu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"weiquu"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"weiquu"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"weiquu"},"content":"        if (!(other instanceof seedu.address.model.reminder.Reminder)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"weiquu"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"weiquu"},"content":"        seedu.address.model.reminder.Reminder otherReminder \u003d (seedu.address.model.reminder.Reminder) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"weiquu"},"content":"        return otherReminder.getName().equals(getName());","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"weiquu"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"weiquu"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"weiquu"},"content":"        return Objects.hash(reminderName);","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"weiquu"},"content":"    public String toString() {","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"weiquu"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"weiquu"},"content":"        builder.append(getName());","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"weiquu"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"weiquu"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"weiquu":67}},{"path":"src/main/java/seedu/address/model/reminder/ReminderName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"weiquu"},"content":"package seedu.address.model.reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"weiquu"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"weiquu"},"content":"public class ReminderName {","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"weiquu"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"weiquu"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"weiquu"},"content":"    /*","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"weiquu"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"weiquu"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"weiquu"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"weiquu"},"content":"    public final String fullName;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"weiquu"},"content":"     * Constructs a {@code ReminderName}.","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"weiquu"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"weiquu"},"content":"     * @param name A valid name.","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"weiquu"},"content":"    public ReminderName(String name) {","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"weiquu"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"weiquu"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"weiquu"},"content":"        fullName \u003d name;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"weiquu"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"weiquu"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"weiquu"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"weiquu"},"content":"    public String toString() {","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"weiquu"},"content":"        return fullName;","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"weiquu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"weiquu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"weiquu"},"content":"                || (other instanceof ReminderName // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"weiquu"},"content":"                \u0026\u0026 fullName.equals(((ReminderName) other).fullName)); // state check","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"weiquu"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"weiquu"},"content":"        return fullName.hashCode();","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"weiquu"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"weiquu":53}},{"path":"src/main/java/seedu/address/model/reminder/UniqueReminderList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"weiquu"},"content":"package seedu.address.model.reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"weiquu"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"weiquu"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"weiquu"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"weiquu"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"weiquu"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"weiquu"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"weiquu"},"content":" * A list of Reminders that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"weiquu"},"content":" * A Reminder is considered unique by comparing using {@code Reminder#isSameReminder(Reminder)}. As such, adding and","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"weiquu"},"content":" * updating of Reminder uses Reminder#isSameReminder(Reminder) for equality so as to ensure that the Reminder being","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"weiquu"},"content":" * added or updated is unique in terms of identity in the UniqueReminderList. However, the removal of a Reminder uses","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"weiquu"},"content":" * Reminder#equals(Object) so as to ensure that the Reminder with exactly the same fields will be removed.","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"weiquu"},"content":" *","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"weiquu"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"weiquu"},"content":" *","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"weiquu"},"content":" * @see Reminder#isSameReminder(Reminder)","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"weiquu"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"weiquu"},"content":"public class UniqueReminderList implements Iterable\u003cReminder\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"weiquu"},"content":"    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"weiquu"},"content":"    private final ObservableList\u003cReminder\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"weiquu"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"weiquu"},"content":"     * Returns true if the list contains an equivalent Reminder as the given argument.","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"weiquu"},"content":"    public boolean contains(Reminder toCheck) {","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"weiquu"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"weiquu"},"content":"        return internalList.stream().anyMatch(toCheck::isSameReminder);","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"weiquu"},"content":"     * Adds a Reminder to the list.","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"weiquu"},"content":"     * The Reminder must not already exist in the list.","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"weiquu"},"content":"    public void add(Reminder toAdd) {","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"weiquu"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"weiquu"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"weiquu"},"content":"            throw new DuplicateReminderException();","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"weiquu"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"weiquu"},"content":"     * Replaces the Reminder {@code target} in the list with {@code editedReminder}.","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"weiquu"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"weiquu"},"content":"     * The Reminder identity of {@code editedReminder} must not be the same as another existing Reminder in the list.","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"weiquu"},"content":"    public void setReminder(Reminder target, Reminder editedReminder) {","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"weiquu"},"content":"        requireAllNonNull(target, editedReminder);","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"weiquu"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"weiquu"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"weiquu"},"content":"            throw new ReminderNotFoundException();","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"weiquu"},"content":"        if (!target.isSameReminder(editedReminder) \u0026\u0026 contains(editedReminder)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"weiquu"},"content":"            throw new DuplicateReminderException();","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"weiquu"},"content":"        internalList.set(index, editedReminder);","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"weiquu"},"content":"     * Removes the equivalent Reminder from the list.","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"weiquu"},"content":"     * The Reminder must exist in the list.","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"weiquu"},"content":"    public void remove(Reminder toRemove) {","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"weiquu"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"weiquu"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"weiquu"},"content":"            throw new ReminderNotFoundException();","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"weiquu"},"content":"    public void setReminders(UniqueReminderList replacement) {","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"weiquu"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"weiquu"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"weiquu"},"content":"     * Replaces the contents of this list with {@code Reminders}.","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"weiquu"},"content":"     * {@code Reminders} must not contain duplicate Reminders.","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"weiquu"},"content":"    public void setReminders(List\u003cReminder\u003e reminders) {","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"weiquu"},"content":"        requireAllNonNull(reminders);","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"weiquu"},"content":"        if (!remindersAreUnique(reminders)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"weiquu"},"content":"            throw new DuplicateReminderException();","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"weiquu"},"content":"        internalList.setAll(reminders);","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"weiquu"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"weiquu"},"content":"    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"weiquu"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"weiquu"},"content":"    public Iterator\u003cReminder\u003e iterator() {","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"weiquu"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"weiquu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"weiquu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"weiquu"},"content":"                || (other instanceof seedu.address.model.reminder.UniqueReminderList // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"weiquu"},"content":"                \u0026\u0026 internalList.equals(((seedu.address.model.reminder.UniqueReminderList) other).internalList));","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"weiquu"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"weiquu"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"weiquu"},"content":"     * Returns true if {@code Reminders} contains only unique reminders.","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":127,"author":{"gitId":"weiquu"},"content":"    private boolean remindersAreUnique(List\u003cReminder\u003e reminders) {","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"weiquu"},"content":"        for (int i \u003d 0; i \u003c reminders.size() - 1; i++) {","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"weiquu"},"content":"            for (int j \u003d i + 1; j \u003c reminders.size(); j++) {","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"weiquu"},"content":"                if (reminders.get(i).isSameReminder(reminders.get(j))) {","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"weiquu"},"content":"                    return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"weiquu"},"content":"                }","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"weiquu"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"weiquu"},"content":"        return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"weiquu"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"weiquu":137}},{"path":"src/main/java/seedu/address/model/reminder/exceptions/DuplicateReminderException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"weiquu"},"content":"package seedu.address.model.reminder.exceptions;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"weiquu"},"content":" * Signals that the operation will result in duplicate Reminders (Reminders are considered duplicates if they have the","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"weiquu"},"content":" * same identity).","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"weiquu"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"weiquu"},"content":"public class DuplicateReminderException extends RuntimeException {","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"weiquu"},"content":"    public DuplicateReminderException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"weiquu"},"content":"        super(\"Operation would result in duplicate Reminders\");","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"weiquu"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"weiquu":11}},{"path":"src/main/java/seedu/address/model/reminder/exceptions/ReminderNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"weiquu"},"content":"package seedu.address.model.reminder.exceptions;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"weiquu"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"weiquu"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"weiquu"},"content":"public class ReminderNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"weiquu":6}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedCca.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"okyntary"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"okyntary"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"okyntary"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"okyntary"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"okyntary"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"okyntary"},"content":"import seedu.address.model.cca.CcaName;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"okyntary"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"okyntary"},"content":" * Jackson-friendly version of {@link Cca}.","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"okyntary"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"okyntary"},"content":"public class JsonAdaptedCca {","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"okyntary"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Cca\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"okyntary"},"content":"    private final String name;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"okyntary"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"okyntary"},"content":"     * Constructs a {@code JsonAdaptedCca} with the given cca details.","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"okyntary"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"okyntary"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"okyntary"},"content":"    public JsonAdaptedCca(@JsonProperty(\"name\") String name) {","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"okyntary"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"okyntary"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"okyntary"},"content":"     * Converts a given {@code Cca} into this class for Jackson use.","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"okyntary"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"okyntary"},"content":"    public JsonAdaptedCca(Cca source) {","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"okyntary"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"okyntary"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"okyntary"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Cca} object.","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"okyntary"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"okyntary"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"okyntary"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"okyntary"},"content":"    public Cca toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"okyntary"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"okyntary"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, CcaName.class.getSimpleName()));","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"okyntary"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"okyntary"},"content":"        if (!CcaName.isValidName(name)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"okyntary"},"content":"            throw new IllegalValueException(CcaName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"okyntary"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"okyntary"},"content":"        final CcaName modelName \u003d new CcaName(name);","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"okyntary"},"content":"        return new Cca(modelName);","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"okyntary"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"okyntary":50}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"okyntary"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"okyntary"},"content":"    public static final String MESSAGE_DUPLICATE_CCA \u003d \"Ccas list contains duplicate cca(s).\";","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"okyntary"},"content":"    private final List\u003cJsonAdaptedCca\u003e ccas \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"okyntary"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"okyntary"},"content":"                                       @JsonProperty(\"ccas\") List\u003cJsonAdaptedCca\u003e ccas) {","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"okyntary"},"content":"        this.ccas.addAll(ccas);","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"okyntary"},"content":"        ccas.addAll(source.getCcaList().stream().map(JsonAdaptedCca::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"okyntary"},"content":"        for (JsonAdaptedCca jsonAdaptedCca : ccas ) {","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"okyntary"},"content":"            Cca cca \u003d jsonAdaptedCca.toModelType();","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"okyntary"},"content":"            if (addressBook.hasCca(cca)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"okyntary"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_CCA);","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"okyntary"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"okyntary"},"content":"            addressBook.addCca(cca);","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"okyntary"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":59,"okyntary":14}},{"path":"src/main/java/seedu/address/ui/CcaCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"import javafx.beans.binding.Bindings;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"weiquu"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"weiquu"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"jovyntls"},"content":"/**","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":" * An UI component that displays information of a {@code Cca}.","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":" */","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"public class CcaCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"    private static final String FXML \u003d \"CcaListCard.fxml\";","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"jovyntls"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":"     *","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"jovyntls"},"content":"    public final Cca cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"    @FXML","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"jovyntls"},"content":"    @FXML","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"jovyntls"},"content":"    private Label name;","lastModifiedDate":"2021-10-04"},{"lineNumber":37,"author":{"gitId":"jovyntls"},"content":"    @FXML","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"jovyntls"},"content":"    private Label id;","lastModifiedDate":"2021-10-04"},{"lineNumber":39,"author":{"gitId":"weiquu"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"weiquu"},"content":"    private Label numPeople;","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"weiquu"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"weiquu"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"jovyntls"},"content":"     * Creates a {@code CcaCode} with the given {@code Cca} and index to display.","lastModifiedDate":"2021-10-04"},{"lineNumber":46,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":47,"author":{"gitId":"jovyntls"},"content":"    public CcaCard(Cca cca, int displayedIndex) {","lastModifiedDate":"2021-10-04"},{"lineNumber":48,"author":{"gitId":"jovyntls"},"content":"        super(FXML);","lastModifiedDate":"2021-10-04"},{"lineNumber":49,"author":{"gitId":"jovyntls"},"content":"        this.cca \u003d cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":50,"author":{"gitId":"jovyntls"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-10-04"},{"lineNumber":51,"author":{"gitId":"jovyntls"},"content":"        this.name.setText(cca.getName().fullName);","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"weiquu"},"content":"        this.numPeople.setText(\"No. of people: 3\");","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"weiquu"},"content":"        // can consider having tags for CCAs","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"weiquu"},"content":"        Label tempLabel \u003d new Label(\"Music\");","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"weiquu"},"content":"        tempLabel.backgroundProperty().bind(Bindings.createObjectBinding(() -\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"weiquu"},"content":"            BackgroundFill fill \u003d new BackgroundFill(Color.RED, CornerRadii.EMPTY, Insets.EMPTY);","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"weiquu"},"content":"            return new Background(fill);","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"weiquu"},"content":"        }));","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"weiquu"},"content":"        tags.getChildren().add(tempLabel);","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":63,"author":{"gitId":"jovyntls"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":64,"author":{"gitId":"jovyntls"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-04"},{"lineNumber":65,"author":{"gitId":"jovyntls"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-04"},{"lineNumber":66,"author":{"gitId":"jovyntls"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-04"},{"lineNumber":67,"author":{"gitId":"jovyntls"},"content":"            return true;","lastModifiedDate":"2021-10-04"},{"lineNumber":68,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":69,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":70,"author":{"gitId":"jovyntls"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-04"},{"lineNumber":71,"author":{"gitId":"jovyntls"},"content":"        if (!(other instanceof CcaCard)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":72,"author":{"gitId":"jovyntls"},"content":"            return false;","lastModifiedDate":"2021-10-04"},{"lineNumber":73,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":74,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":75,"author":{"gitId":"jovyntls"},"content":"        // state check","lastModifiedDate":"2021-10-04"},{"lineNumber":76,"author":{"gitId":"jovyntls"},"content":"        CcaCard card \u003d (CcaCard) other;","lastModifiedDate":"2021-10-04"},{"lineNumber":77,"author":{"gitId":"jovyntls"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-10-04"},{"lineNumber":78,"author":{"gitId":"jovyntls"},"content":"                \u0026\u0026 cca.equals(card.cca);","lastModifiedDate":"2021-10-04"},{"lineNumber":79,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":80,"author":{"gitId":"jovyntls"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"weiquu":20,"jovyntls":60}},{"path":"src/main/java/seedu/address/ui/CcaListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"jovyntls"},"content":"public class CcaListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"    private static final String FXML \u003d \"CcaListPanel.fxml\";","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CcaListPanel.class);","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"    @FXML","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"    private ListView\u003cCca\u003e ccaListView;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"     * Creates a {@code CcaListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"    public CcaListPanel(ObservableList\u003cCca\u003e ccaList) {","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":"        super(FXML);","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"jovyntls"},"content":"        ccaListView.setItems(ccaList);","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"        ccaListView.setCellFactory(listView -\u003e new CcaListPanel.CcaListViewCell());","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"jovyntls"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Cca} using a {@code CcaCard}.","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"jovyntls"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"jovyntls"},"content":"    class CcaListViewCell extends ListCell\u003cCca\u003e {","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"        @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"        protected void updateItem(Cca cca, boolean empty) {","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"jovyntls"},"content":"            super.updateItem(cca, empty);","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":37,"author":{"gitId":"jovyntls"},"content":"            if (empty || cca \u003d\u003d null) {","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"jovyntls"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-04"},{"lineNumber":39,"author":{"gitId":"jovyntls"},"content":"                setText(null);","lastModifiedDate":"2021-10-04"},{"lineNumber":40,"author":{"gitId":"jovyntls"},"content":"            } else {","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"jovyntls"},"content":"                setGraphic(new CcaCard(cca, getIndex() + 1).getRoot());","lastModifiedDate":"2021-10-04"},{"lineNumber":42,"author":{"gitId":"jovyntls"},"content":"            }","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"jovyntls"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"jovyntls"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"jovyntls":45}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"jovyntls"},"content":"    private CcaListPanel ccaListPanel;","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"weiquu"},"content":"    private ReminderListPanel reminderListPanel;","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"jovyntls"},"content":"    @FXML","lastModifiedDate":"2021-10-04"},{"lineNumber":50,"author":{"gitId":"jovyntls"},"content":"    private StackPane ccaListPanelPlaceholder;","lastModifiedDate":"2021-10-04"},{"lineNumber":51,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"weiquu"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"weiquu"},"content":"    private StackPane reminderListPanelPlaceholder;","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"jovyntls"},"content":"        ccaListPanel \u003d new CcaListPanel(logic.getFilteredCcaList());","lastModifiedDate":"2021-10-04"},{"lineNumber":125,"author":{"gitId":"jovyntls"},"content":"        ccaListPanelPlaceholder.getChildren().add(ccaListPanel.getRoot());","lastModifiedDate":"2021-10-04"},{"lineNumber":126,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":127,"author":{"gitId":"weiquu"},"content":"        reminderListPanel \u003d new ReminderListPanel(logic.getFilteredReminderList());","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"weiquu"},"content":"        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"weiquu":7,"-":196,"jovyntls":7}},{"path":"src/main/java/seedu/address/ui/ReminderCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"weiquu"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"import java.util.Hashtable;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"weiquu"},"content":"import javafx.beans.binding.Bindings;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"weiquu"},"content":"import javafx.beans.binding.ObjectBinding;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"weiquu"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"weiquu"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"weiquu"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"weiquu"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.Reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"weiquu"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"weiquu"},"content":" * An UI component that displays information of a {@code Reminder}.","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"weiquu"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"weiquu"},"content":"public class ReminderCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"weiquu"},"content":"    private static final String FXML \u003d \"ReminderListCard.fxml\";","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"weiquu"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"weiquu"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"weiquu"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"weiquu"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"weiquu"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"weiquu"},"content":"    public final Reminder reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"weiquu"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"weiquu"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"weiquu"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"weiquu"},"content":"    private Label name;","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"weiquu"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"weiquu"},"content":"    private Label id;","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"weiquu"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"weiquu"},"content":"    private Label frequency;","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"weiquu"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"weiquu"},"content":"    private Label occurrences;","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"weiquu"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"weiquu"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"weiquu"},"content":"     * Creates a {@code ReminderCode} with the given {@code Reminder} and index to display.","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"weiquu"},"content":"    public ReminderCard(Reminder reminder, int displayedIndex) {","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"weiquu"},"content":"        super(FXML);","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"weiquu"},"content":"        this.reminder \u003d reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"weiquu"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"weiquu"},"content":"        this.name.setText(reminder.getName().fullName);","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"weiquu"},"content":"        this.frequency.setText(\"\"); // to test if this shows up as an empty line","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"weiquu"},"content":"        this.occurrences.setText(\"temp occ\");","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"weiquu"},"content":"        // each CCA has a field for color? can do an enum","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"weiquu"},"content":"        // then mapping from enum value to the binding","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"weiquu"},"content":"        // should include a default value in the enum","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"weiquu"},"content":"        // example mapping (with int in place of enum value):","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"weiquu"},"content":"        Hashtable\u003cInteger, ObjectBinding\u003cBackground\u003e\u003e backgrounds \u003d new Hashtable\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"weiquu"},"content":"        backgrounds.put(1, Bindings.createObjectBinding(() -\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"weiquu"},"content":"            BackgroundFill fill \u003d new BackgroundFill(Color.RED, CornerRadii.EMPTY, Insets.EMPTY);","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"weiquu"},"content":"            return new Background(fill);","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"weiquu"},"content":"        })); // so 1 \u003d red","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"weiquu"},"content":"        Label tempLabel \u003d new Label(\"NUSSO\");","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"weiquu"},"content":"        tempLabel.backgroundProperty().bind(backgrounds.get(1));","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"weiquu"},"content":"        tags.getChildren().add(tempLabel);","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"weiquu"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"weiquu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"weiquu"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"weiquu"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"weiquu"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"weiquu"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"weiquu"},"content":"        if (!(other instanceof CcaCard)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"weiquu"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"weiquu"},"content":"        // state check","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"weiquu"},"content":"        ReminderCard card \u003d (ReminderCard) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"weiquu"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"weiquu"},"content":"                \u0026\u0026 reminder.equals(card.reminder);","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"weiquu"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"weiquu":91}},{"path":"src/main/java/seedu/address/ui/ReminderListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"weiquu"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"weiquu"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"weiquu"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"weiquu"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"weiquu"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"weiquu"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"weiquu"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.Reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"weiquu"},"content":"public class ReminderListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"weiquu"},"content":"    private static final String FXML \u003d \"ReminderListPanel.fxml\";","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"weiquu"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"weiquu"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"weiquu"},"content":"    private ListView\u003cReminder\u003e reminderListView;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"weiquu"},"content":"     * Creates a {@code ReminderListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"weiquu"},"content":"    public ReminderListPanel(ObservableList\u003cReminder\u003e reminderList) {","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"weiquu"},"content":"        super(FXML);","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"weiquu"},"content":"        reminderListView.setItems(reminderList);","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"weiquu"},"content":"        reminderListView.setCellFactory(listView -\u003e new ReminderListPanel.ReminderListViewCell());","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"weiquu"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"weiquu"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Reminder} using a {@code ReminderCard}.","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"weiquu"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"weiquu"},"content":"    class ReminderListViewCell extends ListCell\u003cReminder\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"weiquu"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"weiquu"},"content":"        protected void updateItem(Reminder reminder, boolean empty) {","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"weiquu"},"content":"            super.updateItem(reminder, empty);","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"weiquu"},"content":"            if (empty || reminder \u003d\u003d null) {","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"weiquu"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"weiquu"},"content":"                setText(null);","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"weiquu"},"content":"            } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"weiquu"},"content":"                setGraphic(new ReminderCard(reminder, getIndex() + 1).getRoot());","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"weiquu"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"weiquu"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"weiquu"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"weiquu":45}},{"path":"src/main/resources/view/CcaListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jovyntls"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"jovyntls"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"jovyntls"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"jovyntls"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"jovyntls"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"weiquu"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"weiquu"},"content":"            \u003cLabel fx:id\u003d\"numPeople\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$numPeople\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"jovyntls"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"weiquu":2,"jovyntls":32}},{"path":"src/main/resources/view/CcaListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jovyntls"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jovyntls"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jovyntls"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"jovyntls"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"    \u003cListView fx:id\u003d\"ccaListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"jovyntls"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"jovyntls":8}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"weiquu"},"content":"         title\u003d\"Address App\" minWidth\u003d\"920\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\"/\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":51,"author":{"gitId":"weiquu"},"content":"        \u003cHBox fx:id\u003d\"lists\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"weiquu"},"content":"          \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"300\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":63,"author":{"gitId":"weiquu"},"content":"          \u003cVBox fx:id\u003d\"ccaList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"300\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"jovyntls"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":65,"author":{"gitId":"jovyntls"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":66,"author":{"gitId":"jovyntls"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":67,"author":{"gitId":"jovyntls"},"content":"            \u003cStackPane fx:id\u003d\"ccaListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":68,"author":{"gitId":"jovyntls"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":69,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":70,"author":{"gitId":"weiquu"},"content":"          \u003cVBox fx:id\u003d\"reminderList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"300\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"weiquu"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"weiquu"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"weiquu"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"weiquu"},"content":"            \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"weiquu"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"weiquu"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"weiquu":13,"-":63,"jovyntls":6}},{"path":"src/main/resources/view/ReminderListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"weiquu"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"weiquu"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"weiquu"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"weiquu"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"weiquu"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"weiquu"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"weiquu"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"weiquu"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"weiquu"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"weiquu"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"weiquu"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"weiquu"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"weiquu"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"weiquu"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"weiquu"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"weiquu"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"weiquu"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"weiquu"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"weiquu"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"weiquu"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"weiquu"},"content":"            \u003cLabel fx:id\u003d\"frequency\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$frequency\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"weiquu"},"content":"            \u003cLabel fx:id\u003d\"occurrences\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$occurrences\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"weiquu"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"weiquu"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"weiquu"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"weiquu":35}},{"path":"src/main/resources/view/ReminderListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"weiquu"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"weiquu"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"weiquu"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"weiquu"},"content":"    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"weiquu"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"weiquu":8}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"okyntary"},"content":"  } ],","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"okyntary"},"content":"  \"ccas\": [","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"okyntary"},"content":"  ]","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":13,"okyntary":4}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"okyntary"},"content":"  } ],","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"okyntary"},"content":"  \"ccas\": [","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"okyntary"},"content":"  ]","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":7,"okyntary":4}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"okyntary"},"content":"  } ],","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"okyntary"},"content":"  \"ccas\": [","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"okyntary"},"content":"  ]","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":45,"okyntary":4}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonAddCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"jivesh"},"content":"        String deleteCommand \u003d \"deletep 9\";","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"jovyntls"},"content":"        String addCommand \u003d PersonAddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"jivesh":1,"-":159,"jovyntls":2}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"jovyntls"},"content":"    public static final PersonEditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"    public static final PersonEditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"-":126,"jovyntls":3}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"-":57,"jovyntls":1}},{"path":"src/test/java/seedu/address/logic/commands/PersonAddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonAddCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":" * Contains integration tests (interaction with the Model) for {@code PersonAddCommand}.","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"public class PersonAddCommandIntegrationTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"jovyntls"},"content":"        assertCommandSuccess(new PersonAddCommand(validPerson), model,","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"jovyntls"},"content":"                String.format(PersonAddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"jovyntls"},"content":"        assertCommandFailure(new PersonAddCommand(personInList), model, PersonAddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"-":40,"jovyntls":6}},{"path":"src/test/java/seedu/address/logic/commands/PersonAddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":19,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonAddCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.Reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"public class PersonAddCommandTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PersonAddCommand(null));","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"jovyntls"},"content":"        CommandResult commandResult \u003d new PersonAddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"jovyntls"},"content":"        assertEquals(String.format(PersonAddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"jovyntls"},"content":"        PersonAddCommand personAddCommand \u003d new PersonAddCommand(validPerson);","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"jovyntls"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"jovyntls"},"content":"            PersonAddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e personAddCommand.execute(modelStub));","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"jovyntls"},"content":"        PersonAddCommand addAliceCommand \u003d new PersonAddCommand(alice);","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"        PersonAddCommand addBobCommand \u003d new PersonAddCommand(bob);","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"jovyntls"},"content":"        PersonAddCommand addAliceCommandCopy \u003d new PersonAddCommand(alice);","lastModifiedDate":"2021-10-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"jovyntls"},"content":"        @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"jovyntls"},"content":"        public void addCca(Cca person) {","lastModifiedDate":"2021-10-05"},{"lineNumber":122,"author":{"gitId":"jovyntls"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-05"},{"lineNumber":123,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":124,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":160,"author":{"gitId":"jovyntls"},"content":"        @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":161,"author":{"gitId":"jovyntls"},"content":"        public boolean hasCca(Cca cca) {","lastModifiedDate":"2021-10-05"},{"lineNumber":162,"author":{"gitId":"jovyntls"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-05"},{"lineNumber":163,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":164,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":165,"author":{"gitId":"jovyntls"},"content":"        @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":166,"author":{"gitId":"jovyntls"},"content":"        public void deleteCca(Cca target) {","lastModifiedDate":"2021-10-05"},{"lineNumber":167,"author":{"gitId":"jovyntls"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-05"},{"lineNumber":168,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":169,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":170,"author":{"gitId":"jovyntls"},"content":"        @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":171,"author":{"gitId":"jovyntls"},"content":"        public void setCca(Cca target, Cca editedCca) {","lastModifiedDate":"2021-10-05"},{"lineNumber":172,"author":{"gitId":"jovyntls"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-05"},{"lineNumber":173,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":174,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":175,"author":{"gitId":"jovyntls"},"content":"        @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":176,"author":{"gitId":"jovyntls"},"content":"        public ObservableList\u003cCca\u003e getFilteredCcaList() {","lastModifiedDate":"2021-10-05"},{"lineNumber":177,"author":{"gitId":"jovyntls"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-05"},{"lineNumber":178,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":179,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":180,"author":{"gitId":"jovyntls"},"content":"        @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":181,"author":{"gitId":"jovyntls"},"content":"        public void updateFilteredCcaList(Predicate\u003cCca\u003e predicate) {","lastModifiedDate":"2021-10-05"},{"lineNumber":182,"author":{"gitId":"jovyntls"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-05"},{"lineNumber":183,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":184,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":185,"author":{"gitId":"justintanyf"},"content":"        /**","lastModifiedDate":"2021-10-07"},{"lineNumber":186,"author":{"gitId":"justintanyf"},"content":"         * Enrols a person into a CCA","lastModifiedDate":"2021-10-07"},{"lineNumber":187,"author":{"gitId":"justintanyf"},"content":"         *","lastModifiedDate":"2021-10-08"},{"lineNumber":188,"author":{"gitId":"justintanyf"},"content":"         *  @param ccaToEnrolInto CCA to enrol into","lastModifiedDate":"2021-10-08"},{"lineNumber":189,"author":{"gitId":"justintanyf"},"content":"         * @param personToEnrol person enrolling into CCA","lastModifiedDate":"2021-10-08"},{"lineNumber":190,"author":{"gitId":"justintanyf"},"content":"         */","lastModifiedDate":"2021-10-07"},{"lineNumber":191,"author":{"gitId":"justintanyf"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":192,"author":{"gitId":"justintanyf"},"content":"        public boolean enrolPersonIntoCca(Cca ccaToEnrolInto, Person personToEnrol) {","lastModifiedDate":"2021-10-08"},{"lineNumber":193,"author":{"gitId":"justintanyf"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":194,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":195,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":196,"author":{"gitId":"justintanyf"},"content":"        /**","lastModifiedDate":"2021-10-08"},{"lineNumber":197,"author":{"gitId":"justintanyf"},"content":"         * Expels a person from a CCA","lastModifiedDate":"2021-10-08"},{"lineNumber":198,"author":{"gitId":"justintanyf"},"content":"         *","lastModifiedDate":"2021-10-08"},{"lineNumber":199,"author":{"gitId":"justintanyf"},"content":"         * @param ccaToExpelFrom CCA to expel from","lastModifiedDate":"2021-10-08"},{"lineNumber":200,"author":{"gitId":"justintanyf"},"content":"         * @param personToExpel Person to be expelled from CCA","lastModifiedDate":"2021-10-08"},{"lineNumber":201,"author":{"gitId":"justintanyf"},"content":"         */","lastModifiedDate":"2021-10-08"},{"lineNumber":202,"author":{"gitId":"justintanyf"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":203,"author":{"gitId":"justintanyf"},"content":"        public boolean expelPersonFromCca(Cca ccaToExpelFrom, Person personToExpel) {","lastModifiedDate":"2021-10-08"},{"lineNumber":204,"author":{"gitId":"justintanyf"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":205,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":206,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":207,"author":{"gitId":"justintanyf"},"content":"        /**","lastModifiedDate":"2021-10-07"},{"lineNumber":208,"author":{"gitId":"justintanyf"},"content":"         * Finds a CCA based on the cid","lastModifiedDate":"2021-10-07"},{"lineNumber":209,"author":{"gitId":"justintanyf"},"content":"         *","lastModifiedDate":"2021-10-07"},{"lineNumber":210,"author":{"gitId":"justintanyf"},"content":"         * @param cid cid of CCA to be found","lastModifiedDate":"2021-10-08"},{"lineNumber":211,"author":{"gitId":"justintanyf"},"content":"         */","lastModifiedDate":"2021-10-07"},{"lineNumber":212,"author":{"gitId":"justintanyf"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":213,"author":{"gitId":"justintanyf"},"content":"        public Cca findCcaFromCid(int cid) {","lastModifiedDate":"2021-10-07"},{"lineNumber":214,"author":{"gitId":"justintanyf"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":215,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":216,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":217,"author":{"gitId":"justintanyf"},"content":"        /**","lastModifiedDate":"2021-10-07"},{"lineNumber":218,"author":{"gitId":"justintanyf"},"content":"         * Finds a Person based on the pid","lastModifiedDate":"2021-10-07"},{"lineNumber":219,"author":{"gitId":"justintanyf"},"content":"         *","lastModifiedDate":"2021-10-07"},{"lineNumber":220,"author":{"gitId":"justintanyf"},"content":"         * @param pid pid of Person to be found","lastModifiedDate":"2021-10-08"},{"lineNumber":221,"author":{"gitId":"justintanyf"},"content":"         */","lastModifiedDate":"2021-10-07"},{"lineNumber":222,"author":{"gitId":"justintanyf"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":223,"author":{"gitId":"justintanyf"},"content":"        public Person findPersonFromPid(int pid) {","lastModifiedDate":"2021-10-07"},{"lineNumber":224,"author":{"gitId":"justintanyf"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-08"},{"lineNumber":225,"author":{"gitId":"justintanyf"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":226,"author":{"gitId":"justintanyf"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":227,"author":{"gitId":"weiquu"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":228,"author":{"gitId":"weiquu"},"content":"        public ObservableList\u003cReminder\u003e getFilteredReminderList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":229,"author":{"gitId":"weiquu"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-07"},{"lineNumber":230,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":252,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":271,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"justintanyf":42,"weiquu":6,"-":185,"jovyntls":42}},{"path":"src/test/java/seedu/address/logic/commands/PersonDeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonDeleteCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":" * {@code PersonDeleteCommand}.","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"public class PersonDeleteCommandTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"        PersonDeleteCommand personDeleteCommand \u003d new PersonDeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"jovyntls"},"content":"        String expectedMessage \u003d String.format(PersonDeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"jovyntls"},"content":"        assertCommandSuccess(personDeleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"jovyntls"},"content":"        PersonDeleteCommand personDeleteCommand \u003d new PersonDeleteCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"jovyntls"},"content":"        assertCommandFailure(personDeleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"jovyntls"},"content":"        PersonDeleteCommand personDeleteCommand \u003d new PersonDeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"jovyntls"},"content":"        String expectedMessage \u003d String.format(PersonDeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"jovyntls"},"content":"        assertCommandSuccess(personDeleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"jovyntls"},"content":"        PersonDeleteCommand personDeleteCommand \u003d new PersonDeleteCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"jovyntls"},"content":"        assertCommandFailure(personDeleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"jovyntls"},"content":"        PersonDeleteCommand deleteFirstCommand \u003d new PersonDeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"jovyntls"},"content":"        PersonDeleteCommand deleteSecondCommand \u003d new PersonDeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"jovyntls"},"content":"        PersonDeleteCommand deleteFirstCommandCopy \u003d new PersonDeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"-":94,"jovyntls":16}},{"path":"src/test/java/seedu/address/logic/commands/PersonEditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"jovyntls"},"content":" * Contains integration tests (interaction with the Model) and unit tests for PersonEditCommand.","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"public class PersonEditCommandTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand personEditCommand \u003d new PersonEditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"jovyntls"},"content":"        String expectedMessage \u003d String.format(PersonEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"jovyntls"},"content":"        assertCommandSuccess(personEditCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand personEditCommand \u003d new PersonEditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"jovyntls"},"content":"        String expectedMessage \u003d String.format(PersonEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"jovyntls"},"content":"        assertCommandSuccess(personEditCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand personEditCommand \u003d new PersonEditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"jovyntls"},"content":"        String expectedMessage \u003d String.format(PersonEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"jovyntls"},"content":"        assertCommandSuccess(personEditCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand personEditCommand \u003d new PersonEditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"jovyntls"},"content":"        String expectedMessage \u003d String.format(PersonEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"jovyntls"},"content":"        assertCommandSuccess(personEditCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand personEditCommand \u003d new PersonEditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"jovyntls"},"content":"        assertCommandFailure(personEditCommand, model, PersonEditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand personEditCommand \u003d new PersonEditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"jovyntls"},"content":"        assertCommandFailure(personEditCommand, model, PersonEditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand personEditCommand \u003d new PersonEditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"jovyntls"},"content":"        assertCommandFailure(personEditCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand personEditCommand \u003d new PersonEditCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"jovyntls"},"content":"        assertCommandFailure(personEditCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"jovyntls"},"content":"        final PersonEditCommand standardCommand \u003d new PersonEditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2021-10-05"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand commandWithSameValues \u003d new PersonEditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"jovyntls"},"content":"        assertFalse(standardCommand.equals(new PersonEditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2021-10-05"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"jovyntls"},"content":"        assertFalse(standardCommand.equals(new PersonEditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2021-10-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"-":146,"jovyntls":28}},{"path":"src/test/java/seedu/address/logic/commands/PersonFindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonFindCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"jovyntls"},"content":" * Contains integration tests (interaction with the Model) for {@code PersonFindCommand}.","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"jovyntls"},"content":"public class PersonFindCommandTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"jovyntls"},"content":"        PersonFindCommand findFirstCommand \u003d new PersonFindCommand(firstPredicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"jovyntls"},"content":"        PersonFindCommand findSecondCommand \u003d new PersonFindCommand(secondPredicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"jovyntls"},"content":"        PersonFindCommand findFirstCommandCopy \u003d new PersonFindCommand(firstPredicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"        PersonFindCommand command \u003d new PersonFindCommand(predicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"jovyntls"},"content":"        PersonFindCommand command \u003d new PersonFindCommand(predicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":76,"jovyntls":8}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonAddCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonDeleteCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonFindCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"jovyntls"},"content":"        PersonAddCommand command \u003d (PersonAddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"jovyntls"},"content":"        assertEquals(new PersonAddCommand(person), command);","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"jovyntls"},"content":"        PersonDeleteCommand command \u003d (PersonDeleteCommand) parser.parseCommand(","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"jovyntls"},"content":"                PersonDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"jovyntls"},"content":"        assertEquals(new PersonDeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand command \u003d (PersonEditCommand) parser.parseCommand(PersonEditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"        assertEquals(new PersonEditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"jovyntls"},"content":"        PersonFindCommand command \u003d (PersonFindCommand) parser.parseCommand(","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"jovyntls"},"content":"                PersonFindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"jovyntls"},"content":"        assertEquals(new PersonFindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"-":86,"jovyntls":15}},{"path":"src/test/java/seedu/address/logic/parser/PersonAddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonAddCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.person.PersonAddCommandParser;","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"jovyntls"},"content":"public class PersonAddCommandParserTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"jovyntls"},"content":"    private PersonAddCommandParser parser \u003d new PersonAddCommandParser();","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":53,"author":{"gitId":"jovyntls"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new PersonAddCommand(expectedPerson));","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"jovyntls"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new PersonAddCommand(expectedPerson));","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"jovyntls"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new PersonAddCommand(expectedPerson));","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"jovyntls"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new PersonAddCommand(expectedPerson));","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":69,"author":{"gitId":"jovyntls"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new PersonAddCommand(expectedPerson));","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"jovyntls"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new PersonAddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":83,"author":{"gitId":"jovyntls"},"content":"                new PersonAddCommand(expectedPerson));","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"jovyntls"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PersonAddCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":140,"author":{"gitId":"jovyntls"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PersonAddCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"-":129,"jovyntls":13}},{"path":"src/test/java/seedu/address/logic/parser/PersonDeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonDeleteCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.person.PersonDeleteCommandParser;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":" * outside of the PersonDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"jovyntls"},"content":" * same path through the PersonDeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"jovyntls"},"content":"public class PersonDeleteCommandParserTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"    private PersonDeleteCommandParser parser \u003d new PersonDeleteCommandParser();","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"jovyntls"},"content":"        assertParseSuccess(parser, \"1\", new PersonDeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"jovyntls"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"jovyntls"},"content":"            PersonDeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"-":25,"jovyntls":9}},{"path":"src/test/java/seedu/address/logic/parser/PersonEditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.person.PersonEditCommandParser;","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"jovyntls"},"content":"public class PersonEditCommandParserTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"jovyntls"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PersonEditCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"jovyntls"},"content":"    private PersonEditCommandParser parser \u003d new PersonEditCommandParser();","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"jovyntls"},"content":"        assertParseFailure(parser, \"1\", PersonEditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"jovyntls"},"content":"        expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"jovyntls"},"content":"        expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"jovyntls"},"content":"        expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"jovyntls"},"content":"        expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"jovyntls"},"content":"        expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"jovyntls"},"content":"        PersonEditCommand expectedCommand \u003d new PersonEditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-05"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"-":194,"jovyntls":18}},{"path":"src/test/java/seedu/address/logic/parser/PersonFindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonFindCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.parser.person.PersonFindCommandParser;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"jovyntls"},"content":"public class PersonFindCommandParserTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"jovyntls"},"content":"    private PersonFindCommandParser parser \u003d new PersonFindCommandParser();","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"jovyntls"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"            PersonFindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"jovyntls"},"content":"        PersonFindCommand expectedPersonFindCommand \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"jovyntls"},"content":"                new PersonFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"jovyntls"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedPersonFindCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"jovyntls"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedPersonFindCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"-":26,"jovyntls":10}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"okyntary"},"content":"import static seedu.address.testutil.TypicalCcas.NUSSO;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"jovyntls"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":25,"author":{"gitId":"weiquu"},"content":"import seedu.address.model.reminder.Reminder;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"okyntary"},"content":"import seedu.address.testutil.CcaBuilder;","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"okyntary"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"okyntary"},"content":"    public void hasCca_ccaWithSameNameFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"okyntary"},"content":"        addressBook.addCca(NUSSO);","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"okyntary"},"content":"        Cca editedCca \u003d new CcaBuilder(NUSSO).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"okyntary"},"content":"        assertTrue(addressBook.hasCca(editedCca));","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"jovyntls"},"content":"        private final ObservableList\u003cCca\u003e ccas \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-05"},{"lineNumber":103,"author":{"gitId":"weiquu"},"content":"        private final ObservableList\u003cReminder\u003e reminders \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"jovyntls"},"content":"            // TODO: add something for CCAs?","lastModifiedDate":"2021-10-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":114,"author":{"gitId":"jovyntls"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":115,"author":{"gitId":"jovyntls"},"content":"        @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":116,"author":{"gitId":"jovyntls"},"content":"        public ObservableList\u003cCca\u003e getCcaList() {","lastModifiedDate":"2021-10-05"},{"lineNumber":117,"author":{"gitId":"jovyntls"},"content":"            return ccas;","lastModifiedDate":"2021-10-05"},{"lineNumber":118,"author":{"gitId":"jovyntls"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":119,"author":{"gitId":"weiquu"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"weiquu"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"weiquu"},"content":"        public ObservableList\u003cReminder\u003e getReminderList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"weiquu"},"content":"            return reminders;","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"weiquu"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"weiquu":7,"-":102,"jovyntls":8,"okyntary":9}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedCcaTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"okyntary"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"okyntary"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"okyntary"},"content":"import static seedu.address.testutil.TypicalCcas.NUSSO;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"okyntary"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"okyntary"},"content":"class JsonAdaptedCcaTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"okyntary"},"content":"    private static final String VALID_NAME \u003d NUSSO.getName().toString();","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"okyntary"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"okyntary"},"content":"    public void toModelType_validCcaDetails_returnsCca() throws Exception {","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"okyntary"},"content":"        JsonAdaptedCca cca \u003d new JsonAdaptedCca(NUSSO);","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"okyntary"},"content":"        assertEquals(NUSSO, cca.toModelType());","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"okyntary"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"okyntary":18}},{"path":"src/test/java/seedu/address/testutil/CcaBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"okyntary"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"okyntary"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"okyntary"},"content":"import seedu.address.model.cca.CcaName;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"okyntary"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"okyntary"},"content":" * A utility class to help with building Cca objects.","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"okyntary"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"okyntary"},"content":"public class CcaBuilder {","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"okyntary"},"content":"    public static final String DEFAULT_NAME \u003d \"NUSSO\";","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"okyntary"},"content":"    private CcaName name;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"okyntary"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"okyntary"},"content":"     * Creates a {@code Cca} with the default details.","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"okyntary"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"okyntary"},"content":"    public CcaBuilder() {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"okyntary"},"content":"        name \u003d new CcaName(DEFAULT_NAME);","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"okyntary"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"okyntary"},"content":"     * Initializes the CcaBuilder with the data of {@code CcaToCopy}.","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"okyntary"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"okyntary"},"content":"    public CcaBuilder(Cca ccaToCopy) {","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"okyntary"},"content":"        name \u003d ccaToCopy.getName();","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"okyntary"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"okyntary"},"content":"     * Sets the {@code CcaName} of the {@code Cca} that we are building.","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"okyntary"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"okyntary"},"content":"    public CcaBuilder withName(String name) {","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"okyntary"},"content":"        this.name \u003d new CcaName(name);","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"okyntary"},"content":"        return this;","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"okyntary"},"content":"    public Cca build() {","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"okyntary"},"content":"        return new Cca(name);","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"okyntary"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"okyntary":40}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"jovyntls"},"content":"     * Sets the {@code CcaName} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"-":85,"jovyntls":2}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"jovyntls"},"content":"     * Sets the {@code CcaName} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new Person(name, phone, email, address, tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"-":95,"jovyntls":1}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonAddCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jovyntls"},"content":"import seedu.address.logic.commands.person.PersonEditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"jovyntls"},"content":"        return PersonAddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"-":59,"jovyntls":3}},{"path":"src/test/java/seedu/address/testutil/TypicalCcas.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"okyntary"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"okyntary"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"okyntary"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"okyntary"},"content":"import java.util.List;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"okyntary"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"okyntary"},"content":"import seedu.address.model.cca.Cca;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"okyntary"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"okyntary"},"content":" * A utility class containing a list of {@code Cca} objects to be used in tests.","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"okyntary"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"okyntary"},"content":"public class TypicalCcas {","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"okyntary"},"content":"    public static final Cca NUSSO \u003d new CcaBuilder().withName(\"NUSSO\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"okyntary"},"content":"    public static final Cca USKICK \u003d new CcaBuilder().withName(\"USKick\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"okyntary"},"content":"    // Manually added","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"okyntary"},"content":"    public static final Cca USCOFFEE \u003d new CcaBuilder().withName(\"USCoffee\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"okyntary"},"content":"    public static final Cca USC \u003d new CcaBuilder().withName(\"USC\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"okyntary"},"content":"    // Manually added - CCA\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"okyntary"},"content":"    // TODO - too lazy to add for now","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"okyntary"},"content":"    public static final String KEYWORD_MATCHING_NUSSO \u003d \"NUSSO\"; // A keyword that matches MEIER","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"okyntary"},"content":"    private TypicalCcas() {} // prevents instantiation","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"okyntary"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"okyntary"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"okyntary"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"okyntary"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"okyntary"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"okyntary"},"content":"        for (Cca cca : getTypicalCcas()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"okyntary"},"content":"            ab.addCca(cca);","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"okyntary"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"okyntary"},"content":"        return ab;","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"okyntary"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"okyntary"},"content":"    public static List\u003cCca\u003e getTypicalCcas() {","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"okyntary"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(NUSSO, USKICK));","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"okyntary"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"okyntary"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"okyntary":43}}]
