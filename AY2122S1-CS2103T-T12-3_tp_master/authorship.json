[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-T12-3/tp/actions)","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"PlaceBook (PB) is a desktop app for managing contacts and appointments, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, PB can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"YaleChen299":4,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"mainClassName \u003d \u0027seedu.placebook.Main\u0027","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"run {","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"    implementation \u0027junit:junit:4.12\u0027","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2018-04-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"YaleChen299":6,"-":71}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"### Chai Yew Meng","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"\u003cimg src\u003d\"images/necrowolf28.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":"[[github](https://github.com/NecroWolf28)]","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":"* Role: Developer","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"* Responsibilities: Proof-reading and Documentation","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"### Chen Yanyu","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"\u003cimg src\u003d\"images/yalechen299.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"[[github](http://github.com/jYaleChen299)]","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"[[portfolio](team/yalechen299.md)]","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"* Role: UI design and implementation","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"* Responsibilities: Merging PRs and implement UI.","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"### Li Lehao","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"\u003cimg src\u003d\"images/li-lehao.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"[[github](https://github.com/Li-Lehao)] [[portfolio](team/li-lehao.md)]","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"* Responsibilities: ..","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"### Nicholas","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"\u003cimg src\u003d\"images/nwhloo99.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"[[github](http://github.com/nwhloo)]","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"* Responsibilities: Creating Commands","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"### Teng Chiong","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"tchiong"},"content":"\u003cimg src\u003d\"images/tchiong.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"[[github](http://github.com/tchiong)]","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"* Responsibilities: Testing","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"Li-Lehao":2,"tchiong":3,"YaleChen299":11,"nwhloo99":3,"-":36,"NecroWolf28":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"Li-Lehao"},"content":"* stores appointment data in `Appointment` objects (which contain `UniquePersonList` for clients, `Address` for location, `TimePeriod` for time period during which the appointment occurs, `String` for description)","lastModifiedDate":"2021-11-03"},{"lineNumber":128,"author":{"gitId":"nwhloo99"},"content":"* stores the schedule data i.e., all `Appointment` objects.","lastModifiedDate":"2021-10-20"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"nwhloo99"},"content":"* can save address book data, schedule data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-10-20"},{"lineNumber":146,"author":{"gitId":"nwhloo99"},"content":"* inherits from both `AddressBookStorage`, `ScheduleStorage` and `UserPrefStorage`, which means it can be treated as any (if only the functionality of only one is needed).","lastModifiedDate":"2021-10-20"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"YaleChen299"},"content":"Classes used by multiple components are in the `seedu.placebook.commons` package.","lastModifiedDate":"2021-10-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"Li-Lehao"},"content":"### TimePeriod Class","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":161,"author":{"gitId":"tchiong"},"content":"#### Implementation","lastModifiedDate":"2021-10-29"},{"lineNumber":162,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":163,"author":{"gitId":"Li-Lehao"},"content":"The feature is a variable contained within the `Appointment` class. `TimePeriod` tracks the start and end time","lastModifiedDate":"2021-11-03"},{"lineNumber":164,"author":{"gitId":"Li-Lehao"},"content":"of the Appointment and contains functions to check if two appointments have clashing TimePeriods and thus","lastModifiedDate":"2021-11-03"},{"lineNumber":165,"author":{"gitId":"Li-Lehao"},"content":"cannot both happen. Each `Appointment` class has a `TimePeriod` class, which represents the time period during ","lastModifiedDate":"2021-11-03"},{"lineNumber":166,"author":{"gitId":"Li-Lehao"},"content":"which this appointment occurs. The `TimePeriod` class provides a function to check whether a time period overlaps","lastModifiedDate":"2021-11-03"},{"lineNumber":167,"author":{"gitId":"Li-Lehao"},"content":"with another time period. `TimePeriod` is also used to calculate the urgency of the appointment, assigning the","lastModifiedDate":"2021-11-03"},{"lineNumber":168,"author":{"gitId":"tchiong"},"content":"appointment either `High`, `Medium` or `Low` urgency.","lastModifiedDate":"2021-10-29"},{"lineNumber":169,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":170,"author":{"gitId":"tchiong"},"content":"### AddApp feature","lastModifiedDate":"2021-10-20"},{"lineNumber":171,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":172,"author":{"gitId":"tchiong"},"content":"#### Implementation","lastModifiedDate":"2021-10-20"},{"lineNumber":173,"author":{"gitId":"nwhloo99"},"content":"The feature allows users to create an appointment with any number of clients (`Person`), ","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"tchiong"},"content":"along with a location (`Address`), a time period (`timePeriod`) and a description (`String`).","lastModifiedDate":"2021-10-29"},{"lineNumber":175,"author":{"gitId":"tchiong"},"content":"The addApp mechanism is facilitated by `Schedule`.","lastModifiedDate":"2021-10-20"},{"lineNumber":176,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":177,"author":{"gitId":"nwhloo99"},"content":"`Schedule` contains an Observable List of `Appointment` that we can add appointments to. These appointments will be","lastModifiedDate":"2021-10-21"},{"lineNumber":178,"author":{"gitId":"tchiong"},"content":"generated from the inputs entered by the user using the `AddAppCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":179,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":180,"author":{"gitId":"tchiong"},"content":"Given below is an example usage scenario and how the addApp mechanism behaves at each step.","lastModifiedDate":"2021-10-29"},{"lineNumber":181,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":182,"author":{"gitId":"tchiong"},"content":"Step 1. The user launches the application. Placebook will be initialized with a `LogicManager`, a `StorageManage`, a `UiManager`","lastModifiedDate":"2021-10-29"},{"lineNumber":183,"author":{"gitId":"tchiong"},"content":"and a `ModelManager`. `StorageManager` contains an `AddressBookStorage` an a `ScheduleStorage` which manages","lastModifiedDate":"2021-10-29"},{"lineNumber":184,"author":{"gitId":"tchiong"},"content":"the specific saved data. `StorageManager` will attempt to read data from a saved json file and loads the ","lastModifiedDate":"2021-10-29"},{"lineNumber":185,"author":{"gitId":"tchiong"},"content":"data into `ModelManager` when the class is initialized","lastModifiedDate":"2021-10-29"},{"lineNumber":186,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":187,"author":{"gitId":"tchiong"},"content":"![AddAppStep1](images/AddAppStep1.png)","lastModifiedDate":"2021-10-29"},{"lineNumber":188,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":189,"author":{"gitId":"tchiong"},"content":"Step 2. The user inputs the addApp command with `addApp id/1,2,3 a/Starbucks @ Raffles City start/01-01-2021 1400 end/01-01-2021 1500 ds/discuss marketing strategies`","lastModifiedDate":"2021-10-29"},{"lineNumber":190,"author":{"gitId":"tchiong"},"content":"The `logicManager`, which has been initialized with an `AddressBookParser`, will use that class to create and return an `addAppCommand` with the appropriate inputs to be executed by `LogicManger`","lastModifiedDate":"2021-10-29"},{"lineNumber":191,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":192,"author":{"gitId":"tchiong"},"content":"![AddAppStep2](images/AddAppStep2.png)","lastModifiedDate":"2021-10-29"},{"lineNumber":193,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":194,"author":{"gitId":"tchiong"},"content":"Step 3. On the execution of the command, the command will retrieve the list of persons and appointments from","lastModifiedDate":"2021-10-29"},{"lineNumber":195,"author":{"gitId":"tchiong"},"content":"`ModelManager` and create a new `UniquePersonList`. The new `UniquePersonList` will then be populated with the","lastModifiedDate":"2021-10-29"},{"lineNumber":196,"author":{"gitId":"tchiong"},"content":"appropriate client or clients retrieved from the list of persons according to the input index or indexes.","lastModifiedDate":"2021-10-29"},{"lineNumber":197,"author":{"gitId":"tchiong"},"content":"A new Appointment will then be created and added to the `ModelManager`. It is at this stage the input will","lastModifiedDate":"2021-10-29"},{"lineNumber":198,"author":{"gitId":"tchiong"},"content":"be checked to ensure that there are no duplicates or clashes with other appointments.","lastModifiedDate":"2021-10-29"},{"lineNumber":199,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":200,"author":{"gitId":"tchiong"},"content":"##INSERT UML HERE","lastModifiedDate":"2021-10-29"},{"lineNumber":201,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":202,"author":{"gitId":"tchiong"},"content":"Step 4. After execution, the CommandResult is passed upwards to the UI so that it can return a status message","lastModifiedDate":"2021-10-29"},{"lineNumber":203,"author":{"gitId":"tchiong"},"content":"and update the display to match the updated model","lastModifiedDate":"2021-10-29"},{"lineNumber":204,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":205,"author":{"gitId":"tchiong"},"content":"##@Yanyu im not 100% sure how the UI interacts with the overall model, if you see any issues could you help me correct them?","lastModifiedDate":"2021-10-29"},{"lineNumber":206,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":207,"author":{"gitId":"tchiong"},"content":"The following sequence diagram shows how the addAppCommand operation works:","lastModifiedDate":"2021-10-29"},{"lineNumber":208,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":209,"author":{"gitId":"tchiong"},"content":"![AddAppSequenceDiagram](images/AddAppSequenceDiagram.png)","lastModifiedDate":"2021-10-29"},{"lineNumber":210,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":211,"author":{"gitId":"nwhloo99"},"content":"####Design considerations","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"nwhloo99"},"content":"* **Alternative 1 (current choice):** User selects `Person` in `Appointment` through indexes of the displayed list.","lastModifiedDate":"2021-10-21"},{"lineNumber":213,"author":{"gitId":"nwhloo99"},"content":"    * Pros: Easy to implement, every `Person` in the displayed list will have a unique index.","lastModifiedDate":"2021-10-21"},{"lineNumber":214,"author":{"gitId":"nwhloo99"},"content":"    * Cons: As the user filters the displayed list, the indexes may change and be re-ordered, causing some confusion to the user.","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"nwhloo99"},"content":"* **Alternative 2:** User selects `Person` in `Appointment` through the name field in `Person`","lastModifiedDate":"2021-10-21"},{"lineNumber":216,"author":{"gitId":"nwhloo99"},"content":"    * Pros: The user will have greater confidence that they are adding the correct person.","lastModifiedDate":"2021-10-21"},{"lineNumber":217,"author":{"gitId":"nwhloo99"},"content":"    * Cons: Longer command lines, especially if multiple `Person` added to the same `Appointment`. One spelling mistake in the name will cause an error. There the possibility that there are multiple `Person` with the same name.","lastModifiedDate":"2021-10-21"},{"lineNumber":218,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":219,"author":{"gitId":"tchiong"},"content":"### Filter \u0026 Sort Feature","lastModifiedDate":"2021-10-29"},{"lineNumber":220,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":221,"author":{"gitId":"tchiong"},"content":"#### Implementation","lastModifiedDate":"2021-10-29"},{"lineNumber":222,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":223,"author":{"gitId":"tchiong"},"content":"##### Filtering","lastModifiedDate":"2021-10-29"},{"lineNumber":224,"author":{"gitId":"tchiong"},"content":"The feature allows users to filter using `findApp` . The input of the command will be passed down through the parser into ","lastModifiedDate":"2021-10-29"},{"lineNumber":225,"author":{"gitId":"tchiong"},"content":"the findAppCommand as a `DescriptionContainsKeywordsPredicate`, where on execution, this predicate is passed","lastModifiedDate":"2021-10-29"},{"lineNumber":226,"author":{"gitId":"tchiong"},"content":"into the initialized `ModelManager` filters the list of Appointments by setting this predicate in a ","lastModifiedDate":"2021-10-29"},{"lineNumber":227,"author":{"gitId":"tchiong"},"content":"FilteredList of Appointments, updating it to be displayed by the UI.","lastModifiedDate":"2021-10-29"},{"lineNumber":228,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":229,"author":{"gitId":"tchiong"},"content":"##### Sorting","lastModifiedDate":"2021-10-29"},{"lineNumber":230,"author":{"gitId":"tchiong"},"content":"The feature allows sort using one of two metrics, time of appointment or description, and return to the original list.","lastModifiedDate":"2021-10-29"},{"lineNumber":231,"author":{"gitId":"tchiong"},"content":"Using `listApp Time` or `listApp Description` will sort the list, and `listApp` will return the list of appointments to","lastModifiedDate":"2021-10-29"},{"lineNumber":232,"author":{"gitId":"tchiong"},"content":"its original display. This is also done through the `ModelManager`. The parser will first determine what type of `listApp`","lastModifiedDate":"2021-10-29"},{"lineNumber":233,"author":{"gitId":"tchiong"},"content":"is being input by the user, before passing it into `listAppCommand`. On execution, `listAppComand` will call `ModelManager`","lastModifiedDate":"2021-10-29"},{"lineNumber":234,"author":{"gitId":"tchiong"},"content":"functions to sort the list according to input and update the displayed list to be displayed by the UI","lastModifiedDate":"2021-10-29"},{"lineNumber":235,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":236,"author":{"gitId":"YaleChen299"},"content":"### Delete feature","lastModifiedDate":"2021-10-22"},{"lineNumber":237,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":238,"author":{"gitId":"YaleChen299"},"content":"#### Implementation","lastModifiedDate":"2021-10-22"},{"lineNumber":239,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":240,"author":{"gitId":"YaleChen299"},"content":"The delete feature deletes a person from the storage by specifying an index shown on the display list.","lastModifiedDate":"2021-10-22"},{"lineNumber":241,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":242,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":243,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":244,"author":{"gitId":"YaleChen299"},"content":"####Design considerations","lastModifiedDate":"2021-10-22"},{"lineNumber":245,"author":{"gitId":"YaleChen299"},"content":"* This will likely be break the current data relations as those appointments that refer to this person will","lastModifiedDate":"2021-10-22"},{"lineNumber":246,"author":{"gitId":"YaleChen299"},"content":"no longer be able to query information about this person.","lastModifiedDate":"2021-10-22"},{"lineNumber":247,"author":{"gitId":"YaleChen299"},"content":"* Thus, we either:  ","lastModifiedDate":"2021-10-22"},{"lineNumber":248,"author":{"gitId":"YaleChen299"},"content":"    1. implement a soft delete, which marks the data as \u0027deleted\u0027, so it will not be shown on the person list and keep ","lastModifiedDate":"2021-10-22"},{"lineNumber":249,"author":{"gitId":"YaleChen299"},"content":"    showing information about the person in the related appointment.","lastModifiedDate":"2021-10-22"},{"lineNumber":250,"author":{"gitId":"YaleChen299"},"content":"    2. remove the person from related appointments and delete the appointment if it has no more related client","lastModifiedDate":"2021-10-22"},{"lineNumber":251,"author":{"gitId":"YaleChen299"},"content":"* We chose the second one, and gives a warning message to user when they try to delete. As we think that, it makes ","lastModifiedDate":"2021-10-22"},{"lineNumber":252,"author":{"gitId":"YaleChen299"},"content":"little sense in this case to keep the person related to appointments show up event after they deletes the person. Moreover,","lastModifiedDate":"2021-10-22"},{"lineNumber":253,"author":{"gitId":"YaleChen299"},"content":"  it makes the code harder to maintain, as we will need to consider whether the person is mark as deleted for every other ","lastModifiedDate":"2021-10-22"},{"lineNumber":254,"author":{"gitId":"YaleChen299"},"content":"  query.","lastModifiedDate":"2021-10-22"},{"lineNumber":255,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":346,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":347,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":348,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":349,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"YaleChen299"},"content":"* Marketing Professional","lastModifiedDate":"2021-09-29"},{"lineNumber":360,"author":{"gitId":"YaleChen299"},"content":"* Meets many people everyday","lastModifiedDate":"2021-09-29"},{"lineNumber":361,"author":{"gitId":"YaleChen299"},"content":"* Have to send a lot of emails","lastModifiedDate":"2021-09-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":366,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":369,"author":{"gitId":"YaleChen299"},"content":"**Value proposition**: ","lastModifiedDate":"2021-09-29"},{"lineNumber":370,"author":{"gitId":"YaleChen299"},"content":"Our product aims to ease the process of adding many addresses every day, ","lastModifiedDate":"2021-09-29"},{"lineNumber":371,"author":{"gitId":"YaleChen299"},"content":"help to create template emails from the addresses and generate emails in batches for a target group of people. ","lastModifiedDate":"2021-09-29"},{"lineNumber":372,"author":{"gitId":"YaleChen299"},"content":"The product also keeps track of appointments and in the future, we look to potentially link to gmail.","lastModifiedDate":"2021-09-29"},{"lineNumber":373,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | add a new person               |                                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | delete a person                | remove entries that I no longer need                                   |","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"nwhloo99"},"content":"| `* * *`  | marketeer                                  | add appointments with clients  |                                                                        |","lastModifiedDate":"2021-09-29"},{"lineNumber":387,"author":{"gitId":"nwhloo99"},"content":"| `* * *`  | marketeer                                  | delete appointments            | remove cancelled/finished appointments                                 |","lastModifiedDate":"2021-09-29"},{"lineNumber":388,"author":{"gitId":"nwhloo99"},"content":"| `* * *`  | new user                                   | view some example contacts     | have an idea of what contact info will look like                       |","lastModifiedDate":"2021-09-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"| `*`      | user with many persons in the address book | sort persons by name           | locate a person easily                                                 |","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"nwhloo99"},"content":"| `* *`   | marketeer\t\t                            | list appointments with clients  | view and plan my week and meet clients in a timely manner             |","lastModifiedDate":"2021-09-29"},{"lineNumber":391,"author":{"gitId":"nwhloo99"},"content":"| `* *`   | user\t\t                                | view my list of contacts\t      | see who is already inside and contact clients that are forgotten      |","lastModifiedDate":"2021-09-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"nwhloo99"},"content":"(For all use cases below, the **System** is the `PlaceBook(PB)` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-09-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC01 - Add a person**","lastModifiedDate":"2021-10-28"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"nwhloo99"},"content":"1. User requests to add a new person.","lastModifiedDate":"2021-10-28"},{"lineNumber":404,"author":{"gitId":"nwhloo99"},"content":"2. PB adds the person.","lastModifiedDate":"2021-10-28"},{"lineNumber":405,"author":{"gitId":"nwhloo99"},"content":"3. PB displays success message and shows the updated list of persons.","lastModifiedDate":"2021-10-28"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"nwhloo99"},"content":"* 1a. The command format is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":412,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":413,"author":{"gitId":"nwhloo99"},"content":"    * 1a1. PB displays an error message, and gives an example of the correct format.","lastModifiedDate":"2021-10-28"},{"lineNumber":414,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":415,"author":{"gitId":"nwhloo99"},"content":"      Use case resumes on step 1.","lastModifiedDate":"2021-10-28"},{"lineNumber":416,"author":{"gitId":"nwhloo99"},"content":"      ","lastModifiedDate":"2021-10-28"},{"lineNumber":417,"author":{"gitId":"nwhloo99"},"content":"* 1b. The input parameters are invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":418,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":419,"author":{"gitId":"nwhloo99"},"content":"    * 1b1. PB displays an error message, informing user what the valid input format should be.","lastModifiedDate":"2021-10-28"},{"lineNumber":420,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":421,"author":{"gitId":"nwhloo99"},"content":"      Use case resumes on step 1.","lastModifiedDate":"2021-10-28"},{"lineNumber":422,"author":{"gitId":"nwhloo99"},"content":"      ","lastModifiedDate":"2021-10-28"},{"lineNumber":423,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC02 - List all persons**","lastModifiedDate":"2021-10-28"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":425,"author":{"gitId":"nwhloo99"},"content":"**MSS**","lastModifiedDate":"2021-10-28"},{"lineNumber":426,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":427,"author":{"gitId":"nwhloo99"},"content":"1. User requests to list all persons.","lastModifiedDate":"2021-10-28"},{"lineNumber":428,"author":{"gitId":"nwhloo99"},"content":"2. PB shows the list of persons.","lastModifiedDate":"2021-10-28"},{"lineNumber":429,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":430,"author":{"gitId":"nwhloo99"},"content":"**Extensions**","lastModifiedDate":"2021-10-28"},{"lineNumber":431,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":432,"author":{"gitId":"nwhloo99"},"content":"* 1a. The list is empty.","lastModifiedDate":"2021-10-28"},{"lineNumber":433,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"nwhloo99"},"content":"    * 2a1. PB informs the user that the list is empty.","lastModifiedDate":"2021-10-28"},{"lineNumber":435,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":436,"author":{"gitId":"nwhloo99"},"content":"      Use case ends. ","lastModifiedDate":"2021-10-28"},{"lineNumber":437,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":438,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC03 - Edit a person**","lastModifiedDate":"2021-10-28"},{"lineNumber":439,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":440,"author":{"gitId":"nwhloo99"},"content":"**MSS**","lastModifiedDate":"2021-10-28"},{"lineNumber":441,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":442,"author":{"gitId":"nwhloo99"},"content":"1. User \u003cins\u003erequests to list persons(UC02).\u003cins/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":443,"author":{"gitId":"nwhloo99"},"content":"2. User requests to edit a specific person in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":444,"author":{"gitId":"nwhloo99"},"content":"3. PB edits the person.","lastModifiedDate":"2021-10-28"},{"lineNumber":445,"author":{"gitId":"nwhloo99"},"content":"4. PB displays success message and shows updated list of persons.","lastModifiedDate":"2021-10-28"},{"lineNumber":446,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":447,"author":{"gitId":"nwhloo99"},"content":"**Extensions**","lastModifiedDate":"2021-10-28"},{"lineNumber":448,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":449,"author":{"gitId":"nwhloo99"},"content":"* 2a. The command format is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":450,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":451,"author":{"gitId":"nwhloo99"},"content":"    * 2a1. PB displays an error message, and gives an example of the correct format.","lastModifiedDate":"2021-10-28"},{"lineNumber":452,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":453,"author":{"gitId":"nwhloo99"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-28"},{"lineNumber":454,"author":{"gitId":"nwhloo99"},"content":"   ","lastModifiedDate":"2021-10-28"},{"lineNumber":455,"author":{"gitId":"nwhloo99"},"content":"* 2b. The input parameters are invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":456,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":457,"author":{"gitId":"nwhloo99"},"content":"    * 2b1. PB displays an error message, informing user what the valid input format should be.","lastModifiedDate":"2021-10-28"},{"lineNumber":458,"author":{"gitId":"nwhloo99"},"content":"      ","lastModifiedDate":"2021-10-28"},{"lineNumber":459,"author":{"gitId":"nwhloo99"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-28"},{"lineNumber":460,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":461,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC04 - Delete a person**","lastModifiedDate":"2021-10-28"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":463,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-10-28"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":465,"author":{"gitId":"nwhloo99"},"content":"1. User \u003cins\u003erequests to list persons(UC02).\u003cins/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":466,"author":{"gitId":"nwhloo99"},"content":"2. User requests to delete a specific person in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":467,"author":{"gitId":"nwhloo99"},"content":"3. PB displays a pop up window with asking for user confirmation to delete.","lastModifiedDate":"2021-10-28"},{"lineNumber":468,"author":{"gitId":"nwhloo99"},"content":"4. User confirms they want to delete.","lastModifiedDate":"2021-10-28"},{"lineNumber":469,"author":{"gitId":"nwhloo99"},"content":"5. PB deletes the person.","lastModifiedDate":"2021-10-28"},{"lineNumber":470,"author":{"gitId":"nwhloo99"},"content":"6. PB displays success message and shows updated list of persons.","lastModifiedDate":"2021-10-28"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":472,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2021-10-28"},{"lineNumber":475,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":476,"author":{"gitId":"nwhloo99"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":477,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"nwhloo99"},"content":"    * 2a1. PB displays an error message.","lastModifiedDate":"2021-10-28"},{"lineNumber":479,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"      ","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"nwhloo99"},"content":"* 4a. User indicates that they do not want to delete.","lastModifiedDate":"2021-10-28"},{"lineNumber":483,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":484,"author":{"gitId":"nwhloo99"},"content":"    Use case ends.","lastModifiedDate":"2021-10-28"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":486,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC05 - Find persons by name**","lastModifiedDate":"2021-10-28"},{"lineNumber":487,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":488,"author":{"gitId":"NecroWolf28"},"content":"**MSS**","lastModifiedDate":"2021-10-24"},{"lineNumber":489,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":490,"author":{"gitId":"nwhloo99"},"content":"1.  User inputs the find command with keywords to search for.","lastModifiedDate":"2021-10-28"},{"lineNumber":491,"author":{"gitId":"nwhloo99"},"content":"2.  PB shows a list of persons whose names match the given keywords.","lastModifiedDate":"2021-10-28"},{"lineNumber":492,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":493,"author":{"gitId":"NecroWolf28"},"content":"    Use case ends.","lastModifiedDate":"2021-10-24"},{"lineNumber":494,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":495,"author":{"gitId":"NecroWolf28"},"content":"**Extensions**","lastModifiedDate":"2021-10-24"},{"lineNumber":496,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":497,"author":{"gitId":"nwhloo99"},"content":"* 1a. PB cannot find any matching Person.","lastModifiedDate":"2021-10-28"},{"lineNumber":498,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":499,"author":{"gitId":"nwhloo99"},"content":"    * PB displays an empty list.","lastModifiedDate":"2021-10-28"},{"lineNumber":500,"author":{"gitId":"NecroWolf28"},"content":"        ","lastModifiedDate":"2021-10-24"},{"lineNumber":501,"author":{"gitId":"NecroWolf28"},"content":"      Use case ends.","lastModifiedDate":"2021-10-24"},{"lineNumber":502,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":503,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC06 - Find persons by tags**","lastModifiedDate":"2021-10-28"},{"lineNumber":504,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":505,"author":{"gitId":"nwhloo99"},"content":"**MSS**","lastModifiedDate":"2021-10-28"},{"lineNumber":506,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":507,"author":{"gitId":"nwhloo99"},"content":"1. User inputs the find tags command with keywords to search for.","lastModifiedDate":"2021-10-28"},{"lineNumber":508,"author":{"gitId":"nwhloo99"},"content":"2. PB shows a list of persons whose tags match the given keywords.","lastModifiedDate":"2021-10-28"},{"lineNumber":509,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":510,"author":{"gitId":"nwhloo99"},"content":"    Use case ends.","lastModifiedDate":"2021-10-28"},{"lineNumber":511,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":512,"author":{"gitId":"nwhloo99"},"content":"**Extensions**","lastModifiedDate":"2021-10-28"},{"lineNumber":513,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":514,"author":{"gitId":"nwhloo99"},"content":"* 1a. PB cannot find any matching tags with any Person.","lastModifiedDate":"2021-10-28"},{"lineNumber":515,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":516,"author":{"gitId":"nwhloo99"},"content":"    * PB displays an empty list.","lastModifiedDate":"2021-10-28"},{"lineNumber":517,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":518,"author":{"gitId":"nwhloo99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-28"},{"lineNumber":519,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":520,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC07 - Add appointment**","lastModifiedDate":"2021-10-28"},{"lineNumber":521,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":522,"author":{"gitId":"nwhloo99"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":524,"author":{"gitId":"nwhloo99"},"content":"1. User enters add appointment command specifying the index or indexes of persons, address, start and end datetimes and description of the appointment.","lastModifiedDate":"2021-10-28"},{"lineNumber":525,"author":{"gitId":"nwhloo99"},"content":"2. PB adds the appointment.","lastModifiedDate":"2021-10-28"},{"lineNumber":526,"author":{"gitId":"nwhloo99"},"content":"3. PB displays success message and shows the updated list of appointments.","lastModifiedDate":"2021-10-28"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":528,"author":{"gitId":"nwhloo99"},"content":"    Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":529,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":530,"author":{"gitId":"nwhloo99"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":531,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":532,"author":{"gitId":"nwhloo99"},"content":"* 1a. PB detects an error in command format.","lastModifiedDate":"2021-10-28"},{"lineNumber":533,"author":{"gitId":"nwhloo99"},"content":"    * 1a1. PB displays an error message, showing an example of the correct format.","lastModifiedDate":"2021-09-29"},{"lineNumber":534,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-09-29"},{"lineNumber":535,"author":{"gitId":"nwhloo99"},"content":"\t  Use case resumes at step 1.","lastModifiedDate":"2021-09-29"},{"lineNumber":536,"author":{"gitId":"nwhloo99"},"content":"\t","lastModifiedDate":"2021-09-29"},{"lineNumber":537,"author":{"gitId":"nwhloo99"},"content":"* 1b. PB detects an error in input format.","lastModifiedDate":"2021-10-28"},{"lineNumber":538,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":539,"author":{"gitId":"nwhloo99"},"content":"    * 1b1. PB displays an error message, informing user what the valid input format should be.","lastModifiedDate":"2021-10-28"},{"lineNumber":540,"author":{"gitId":"nwhloo99"},"content":"\t","lastModifiedDate":"2021-10-28"},{"lineNumber":541,"author":{"gitId":"nwhloo99"},"content":"* 1c. PB does not have the specified person in the contact list.","lastModifiedDate":"2021-10-28"},{"lineNumber":542,"author":{"gitId":"nwhloo99"},"content":"\t    ","lastModifiedDate":"2021-09-29"},{"lineNumber":543,"author":{"gitId":"nwhloo99"},"content":"\t * 1c1. PB informs the user that the person does not exist.","lastModifiedDate":"2021-10-28"},{"lineNumber":544,"author":{"gitId":"nwhloo99"},"content":"        ","lastModifiedDate":"2021-09-29"},{"lineNumber":545,"author":{"gitId":"nwhloo99"},"content":"       Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":546,"author":{"gitId":"nwhloo99"},"content":"        ","lastModifiedDate":"2021-09-29"},{"lineNumber":547,"author":{"gitId":"nwhloo99"},"content":"* 1d. PB detects a collision in the time period of appointment to be added with previously added appointments.","lastModifiedDate":"2021-10-28"},{"lineNumber":548,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":549,"author":{"gitId":"nwhloo99"},"content":"    * 1d1. PB informs the user that there is a clash.","lastModifiedDate":"2021-10-28"},{"lineNumber":550,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":551,"author":{"gitId":"nwhloo99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-28"},{"lineNumber":552,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":553,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC08 - List appointments**","lastModifiedDate":"2021-10-28"},{"lineNumber":554,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":555,"author":{"gitId":"nwhloo99"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":556,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":557,"author":{"gitId":"nwhloo99"},"content":"1. User enters the list appointments command.","lastModifiedDate":"2021-10-28"},{"lineNumber":558,"author":{"gitId":"nwhloo99"},"content":"2. PB displays a list of all currently added appointments.","lastModifiedDate":"2021-10-28"},{"lineNumber":559,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":560,"author":{"gitId":"nwhloo99"},"content":"Use case ends.","lastModifiedDate":"2021-10-28"},{"lineNumber":561,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":562,"author":{"gitId":"nwhloo99"},"content":"**Extensions**","lastModifiedDate":"2021-10-28"},{"lineNumber":563,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":564,"author":{"gitId":"nwhloo99"},"content":"* 1a. PB detects that there are no appointments added.","lastModifiedDate":"2021-10-28"},{"lineNumber":565,"author":{"gitId":"nwhloo99"},"content":"    * 1a1. PB informs the user that there are no appointments added yet.","lastModifiedDate":"2021-10-28"},{"lineNumber":566,"author":{"gitId":"nwhloo99"},"content":"\t","lastModifiedDate":"2021-09-29"},{"lineNumber":567,"author":{"gitId":"nwhloo99"},"content":"      Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":568,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-09-29"},{"lineNumber":569,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC09 - List appointments by Time**","lastModifiedDate":"2021-10-28"},{"lineNumber":570,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":571,"author":{"gitId":"nwhloo99"},"content":"**MSS**","lastModifiedDate":"2021-10-28"},{"lineNumber":572,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":573,"author":{"gitId":"nwhloo99"},"content":"1. User requests to list the appointments sorted by time.","lastModifiedDate":"2021-10-28"},{"lineNumber":574,"author":{"gitId":"nwhloo99"},"content":"2. PB displays a list of all currently added appointments sorted by time.","lastModifiedDate":"2021-10-28"},{"lineNumber":575,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":576,"author":{"gitId":"nwhloo99"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":577,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":578,"author":{"gitId":"nwhloo99"},"content":"* 1a. PB detects that there are no appointments added.","lastModifiedDate":"2021-10-28"},{"lineNumber":579,"author":{"gitId":"nwhloo99"},"content":"    * 1a1. PB informs the user that there are no appointments added yet.","lastModifiedDate":"2021-09-29"},{"lineNumber":580,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":581,"author":{"gitId":"nwhloo99"},"content":"      Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":582,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":583,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC10 - List appointments by Description**","lastModifiedDate":"2021-10-28"},{"lineNumber":584,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":585,"author":{"gitId":"nwhloo99"},"content":"**MSS**","lastModifiedDate":"2021-10-28"},{"lineNumber":586,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":587,"author":{"gitId":"nwhloo99"},"content":"1. User requests to list the appointments sorted by description.","lastModifiedDate":"2021-10-28"},{"lineNumber":588,"author":{"gitId":"nwhloo99"},"content":"2. PB displays a list of all currently added appointments sorted by description.","lastModifiedDate":"2021-10-28"},{"lineNumber":589,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":590,"author":{"gitId":"nwhloo99"},"content":"**Extensions**","lastModifiedDate":"2021-10-28"},{"lineNumber":591,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":592,"author":{"gitId":"nwhloo99"},"content":"* 1a. PB detects that there are no appointments added.","lastModifiedDate":"2021-10-28"},{"lineNumber":593,"author":{"gitId":"nwhloo99"},"content":"    * 1a1. PB informs the user that there are no appointments added yet.","lastModifiedDate":"2021-10-28"},{"lineNumber":594,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":595,"author":{"gitId":"nwhloo99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-28"},{"lineNumber":596,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":597,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC11 - Delete appointment**","lastModifiedDate":"2021-10-28"},{"lineNumber":598,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":599,"author":{"gitId":"nwhloo99"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":600,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":601,"author":{"gitId":"nwhloo99"},"content":"1. User \u003cins\u003erequests to list appointments (UC08)\u003cins/\u003e.","lastModifiedDate":"2021-10-28"},{"lineNumber":602,"author":{"gitId":"nwhloo99"},"content":"2. User enters delete appointment command indicating the index of the appointment to be deleted.","lastModifiedDate":"2021-10-28"},{"lineNumber":603,"author":{"gitId":"nwhloo99"},"content":"3. PB displays a pop up window with asking for user confirmation to delete.","lastModifiedDate":"2021-10-28"},{"lineNumber":604,"author":{"gitId":"nwhloo99"},"content":"4. User confirms they want to delete.","lastModifiedDate":"2021-10-28"},{"lineNumber":605,"author":{"gitId":"nwhloo99"},"content":"5. PB deletes the appointment and displays a successful message. ","lastModifiedDate":"2021-10-28"},{"lineNumber":606,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":607,"author":{"gitId":"nwhloo99"},"content":"Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":608,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":609,"author":{"gitId":"nwhloo99"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":610,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":611,"author":{"gitId":"nwhloo99"},"content":"* 2a. PB detects that the inputted index is out of range.","lastModifiedDate":"2021-10-28"},{"lineNumber":612,"author":{"gitId":"nwhloo99"},"content":"    * 2a1. PB informs the user that the index is out of range.","lastModifiedDate":"2021-10-28"},{"lineNumber":613,"author":{"gitId":"nwhloo99"},"content":"\t ","lastModifiedDate":"2021-09-29"},{"lineNumber":614,"author":{"gitId":"nwhloo99"},"content":"\t Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":615,"author":{"gitId":"nwhloo99"},"content":"\t ","lastModifiedDate":"2021-09-29"},{"lineNumber":616,"author":{"gitId":"nwhloo99"},"content":"* 4a. User indicates that they do not want to delete.","lastModifiedDate":"2021-10-28"},{"lineNumber":617,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":618,"author":{"gitId":"nwhloo99"},"content":"    Use case ends.","lastModifiedDate":"2021-10-28"},{"lineNumber":619,"author":{"gitId":"nwhloo99"},"content":"\t\t","lastModifiedDate":"2021-10-28"},{"lineNumber":620,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC12 - Edit an appointment**","lastModifiedDate":"2021-10-28"},{"lineNumber":621,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":622,"author":{"gitId":"nwhloo99"},"content":"**MSS**","lastModifiedDate":"2021-10-28"},{"lineNumber":623,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":624,"author":{"gitId":"nwhloo99"},"content":"1. User \u003cins\u003erequests to list appointments(UC08).\u003cins/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":625,"author":{"gitId":"nwhloo99"},"content":"2. User requests to edit a specific appointment in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":626,"author":{"gitId":"nwhloo99"},"content":"3. PB edits the appointment.","lastModifiedDate":"2021-10-28"},{"lineNumber":627,"author":{"gitId":"nwhloo99"},"content":"4. PB displays success message and shows updated list of appointments.","lastModifiedDate":"2021-10-28"},{"lineNumber":628,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":629,"author":{"gitId":"nwhloo99"},"content":"    Use case ends.","lastModifiedDate":"2021-10-28"},{"lineNumber":630,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":631,"author":{"gitId":"nwhloo99"},"content":"**Extensions**","lastModifiedDate":"2021-10-28"},{"lineNumber":632,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":633,"author":{"gitId":"nwhloo99"},"content":"* 2a. The command format is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":634,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":635,"author":{"gitId":"nwhloo99"},"content":"    * 2a1. PB shows an error message, and gives an example of the correct format.","lastModifiedDate":"2021-10-28"},{"lineNumber":636,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":637,"author":{"gitId":"nwhloo99"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-28"},{"lineNumber":638,"author":{"gitId":"nwhloo99"},"content":"   ","lastModifiedDate":"2021-10-28"},{"lineNumber":639,"author":{"gitId":"nwhloo99"},"content":"* 2b. The input parameters are invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":640,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":641,"author":{"gitId":"nwhloo99"},"content":"    * 2b1. PB shows an error message, informing user what the valid input format should be.","lastModifiedDate":"2021-10-28"},{"lineNumber":642,"author":{"gitId":"nwhloo99"},"content":"      ","lastModifiedDate":"2021-10-28"},{"lineNumber":643,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-10-28"},{"lineNumber":644,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":645,"author":{"gitId":"nwhloo99"},"content":"**Use case: UC13 - Find Appointment by description**","lastModifiedDate":"2021-10-28"},{"lineNumber":646,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":647,"author":{"gitId":"nwhloo99"},"content":"**MSS**","lastModifiedDate":"2021-10-28"},{"lineNumber":648,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":649,"author":{"gitId":"nwhloo99"},"content":"1.  User inputs the find command with keywords to search for.","lastModifiedDate":"2021-10-28"},{"lineNumber":650,"author":{"gitId":"nwhloo99"},"content":"2.  PB shows a list of persons whose names match the given keywords.","lastModifiedDate":"2021-10-28"},{"lineNumber":651,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":652,"author":{"gitId":"nwhloo99"},"content":"    Use case ends.","lastModifiedDate":"2021-10-28"},{"lineNumber":653,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":654,"author":{"gitId":"nwhloo99"},"content":"**Extensions**","lastModifiedDate":"2021-10-28"},{"lineNumber":655,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":656,"author":{"gitId":"nwhloo99"},"content":"* 2a. PB cannot find any matching Person.","lastModifiedDate":"2021-10-28"},{"lineNumber":657,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":658,"author":{"gitId":"nwhloo99"},"content":"    * PB displays an empty list.","lastModifiedDate":"2021-10-28"},{"lineNumber":659,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":660,"author":{"gitId":"nwhloo99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-28"},{"lineNumber":661,"author":{"gitId":"nwhloo99"},"content":"\t\t","lastModifiedDate":"2021-09-29"},{"lineNumber":662,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":663,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":664,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":665,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":666,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":667,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":668,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":669,"author":{"gitId":"nwhloo99"},"content":"4.  The system is not required to handle sending emails to contacts.","lastModifiedDate":"2021-09-29"},{"lineNumber":670,"author":{"gitId":"nwhloo99"},"content":"5.  Users can see previously written commands in the same session.","lastModifiedDate":"2021-09-29"},{"lineNumber":671,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":672,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":673,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":674,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":675,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":676,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":677,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":678,"author":{"gitId":"NecroWolf28"},"content":"### Commands","lastModifiedDate":"2021-10-29"},{"lineNumber":679,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":680,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":681,"author":{"gitId":"NecroWolf28"},"content":"`GeneralCommands`","lastModifiedDate":"2021-10-29"},{"lineNumber":682,"author":{"gitId":"NecroWolf28"},"content":"* `ClearCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":683,"author":{"gitId":"NecroWolf28"},"content":"* `ExitCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":684,"author":{"gitId":"NecroWolf28"},"content":"* `HelpCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":685,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":686,"author":{"gitId":"NecroWolf28"},"content":"`PersonCommands`","lastModifiedDate":"2021-10-29"},{"lineNumber":687,"author":{"gitId":"NecroWolf28"},"content":"* `AddCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":688,"author":{"gitId":"NecroWolf28"},"content":"* `DeleteCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":689,"author":{"gitId":"NecroWolf28"},"content":"* `EditCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":690,"author":{"gitId":"NecroWolf28"},"content":"* `FindCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":691,"author":{"gitId":"NecroWolf28"},"content":"* `FindTagsCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":692,"author":{"gitId":"NecroWolf28"},"content":"* `ListCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":693,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":694,"author":{"gitId":"NecroWolf28"},"content":"`AppointmentCommands`","lastModifiedDate":"2021-10-29"},{"lineNumber":695,"author":{"gitId":"NecroWolf28"},"content":"* `AddAppCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":696,"author":{"gitId":"NecroWolf28"},"content":"* `DelAppCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":697,"author":{"gitId":"NecroWolf28"},"content":"* `EditAppCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":698,"author":{"gitId":"NecroWolf28"},"content":"* `FindAppCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":699,"author":{"gitId":"YaleChen299"},"content":"* `ListAppCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":700,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":701,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":702,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":703,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":704,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":705,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":706,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":707,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":708,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":709,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":710,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":712,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":713,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":714,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":715,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":716,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":717,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":718,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":719,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":720,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":721,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":722,"author":{"gitId":"tchiong"},"content":"2. Saving window preferences","lastModifiedDate":"2021-10-28"},{"lineNumber":723,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":724,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":725,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":726,"author":{"gitId":"tchiong"},"content":"   2. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":727,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":728,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":729,"author":{"gitId":"tchiong"},"content":"### Adding a person","lastModifiedDate":"2021-10-28"},{"lineNumber":730,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":731,"author":{"gitId":"tchiong"},"content":"1. Adding a person to the list of people","lastModifiedDate":"2021-10-28"},{"lineNumber":732,"author":{"gitId":"tchiong"},"content":"   1. Test case: `add n/Susan p/90090099 e/susan@example.com a/serangoon t/Housewife` \u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":733,"author":{"gitId":"tchiong"},"content":"      Expected: New person Susan is added to the list. Details of the person will be as displayed in the","lastModifiedDate":"2021-10-28"},{"lineNumber":734,"author":{"gitId":"tchiong"},"content":"      UI under the person list, as well as the status message","lastModifiedDate":"2021-10-28"},{"lineNumber":735,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":736,"author":{"gitId":"tchiong"},"content":"   2. Test case: `add n/Susan p/90090099 e/susan@example.com a/serangoon t/Housewife` then ","lastModifiedDate":"2021-10-28"},{"lineNumber":737,"author":{"gitId":"tchiong"},"content":"      `add n/Susan p/90090099 e/susan@example.com a/serangoon t/Housewife` again \u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":738,"author":{"gitId":"tchiong"},"content":"      Expected: No person is added. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2021-10-28"},{"lineNumber":739,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":740,"author":{"gitId":"tchiong"},"content":"   3. Other incorrect add commands to try: `add`, `add Susan`, `add n/Susan` and other incomplete `add` commands.","lastModifiedDate":"2021-10-28"},{"lineNumber":741,"author":{"gitId":"tchiong"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2021-10-28"},{"lineNumber":742,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":743,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":744,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":745,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":746,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":747,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":748,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":749,"author":{"gitId":"tchiong"},"content":"   2. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":750,"author":{"gitId":"tchiong"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message.","lastModifiedDate":"2021-10-28"},{"lineNumber":751,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":752,"author":{"gitId":"tchiong"},"content":"   5. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":753,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":754,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":755,"author":{"gitId":"tchiong"},"content":"   6. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":756,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2021-10-28"},{"lineNumber":757,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":758,"author":{"gitId":"tchiong"},"content":"### Adding an Appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":759,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":760,"author":{"gitId":"tchiong"},"content":"1. Adding an Appointment to the list of Appointments","lastModifiedDate":"2021-10-28"},{"lineNumber":761,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":762,"author":{"gitId":"tchiong"},"content":"   1. Prerequisites: List all persons using the `list` command. At least two people in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":763,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":764,"author":{"gitId":"tchiong"},"content":"   2. Test case: `addApp id/1 a/Starbucks @ Raffles City start/01-01-2021 1400 end/01-01-2021 1500 ds/discuss marketing strategies` \u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":765,"author":{"gitId":"tchiong"},"content":"      Expected: New Appointment discuss marketing strategies is added to the list. Details of the Appointment will be as shown in the","lastModifiedDate":"2021-10-28"},{"lineNumber":766,"author":{"gitId":"tchiong"},"content":"      UI under the Appointment list, and details of the person can be viewed as well. This will also be displayed in the status message.","lastModifiedDate":"2021-10-28"},{"lineNumber":767,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":768,"author":{"gitId":"tchiong"},"content":"   3. Test case: `addApp id/1,2 a/Starbucks @ Nex start/01-01-2021 1500 end/01-01-2021 1600 ds/sell product` \u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":769,"author":{"gitId":"tchiong"},"content":"      Expected: New Appointment discuss marketing strategies is added to the list. Details of the Appointment will be as shown in the","lastModifiedDate":"2021-10-28"},{"lineNumber":770,"author":{"gitId":"tchiong"},"content":"      UI under the Appointment list, and details of the two people added can be viewed as well. This will also be displayed in the status message.","lastModifiedDate":"2021-10-28"},{"lineNumber":771,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":772,"author":{"gitId":"tchiong"},"content":"   4. Test case: `addApp id/1 a/Starbucks @ Raffles City start/01-01-2021 1400 end/01-01-2021 1500 ds/discuss marketing strategies` then","lastModifiedDate":"2021-10-28"},{"lineNumber":773,"author":{"gitId":"tchiong"},"content":"      `addApp id/2 a/Starbucks @ Raffles City start/01-01-2021 1400 end/01-01-2021 1500 ds/sell product`\u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":774,"author":{"gitId":"tchiong"},"content":"      Expected: No Appointment is added due to clashing time period. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2021-10-28"},{"lineNumber":775,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":776,"author":{"gitId":"tchiong"},"content":"   5. Other incorrect add commands to try: `addApp`, `addApp Susan`, `addApp n/Susan` and incomplete `addApp` commands.","lastModifiedDate":"2021-10-28"},{"lineNumber":777,"author":{"gitId":"tchiong"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2021-10-28"},{"lineNumber":778,"author":{"gitId":"tchiong"},"content":"   ","lastModifiedDate":"2021-10-28"},{"lineNumber":779,"author":{"gitId":"tchiong"},"content":"### Deleting an Appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":780,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":781,"author":{"gitId":"tchiong"},"content":"1. Deleting an Appointment while all Appointments are being shown","lastModifiedDate":"2021-10-28"},{"lineNumber":782,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":783,"author":{"gitId":"tchiong"},"content":"    1. Prerequisites: List all persons using the `listApp` command. Multiple Appointments in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":784,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":785,"author":{"gitId":"tchiong"},"content":"    2. Test case: `delApp 1`\u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":786,"author":{"gitId":"tchiong"},"content":"       Expected: First Appointment is deleted from the list. Details of the deleted Appointment shown in the status message.","lastModifiedDate":"2021-10-28"},{"lineNumber":787,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":788,"author":{"gitId":"tchiong"},"content":"    3. Test case: `delApp 0`\u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":789,"author":{"gitId":"tchiong"},"content":"       Expected: No Appointment is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2021-10-28"},{"lineNumber":790,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":791,"author":{"gitId":"tchiong"},"content":"    4. Other incorrect delete commands to try: `delApp`, `delApp x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":792,"author":{"gitId":"-"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":793,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":794,"author":{"gitId":"tchiong"},"content":"### Editing an Appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":795,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":796,"author":{"gitId":"tchiong"},"content":"1. Editing an existing Appointment while all Appointments are being shown","lastModifiedDate":"2021-10-28"},{"lineNumber":797,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":798,"author":{"gitId":"tchiong"},"content":"   1. Prerequisites: List all persons using the `listApp` command. Multiple Appointments in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":799,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":800,"author":{"gitId":"tchiong"},"content":"   2. Test case: `editApp 1 a/Earth` \u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":801,"author":{"gitId":"tchiong"},"content":"      Expected: The appointment at index 1 will have its address changed to Earth. Details of the edited Appointment shown in the status message.","lastModifiedDate":"2021-10-28"},{"lineNumber":802,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":803,"author":{"gitId":"tchiong"},"content":"   3. Incorrect edit commands to try: `editApp`, `editApp 1`, `editApp x a/address` (where x is larger than the list size)","lastModifiedDate":"2021-10-28"},{"lineNumber":804,"author":{"gitId":"tchiong"},"content":"      `editApp 1 edit` and other incorrect edited inputs \u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":805,"author":{"gitId":"tchiong"},"content":"      Expected: No Appointment is edited. Error details shown in the status message. Status bar remains the same","lastModifiedDate":"2021-10-28"},{"lineNumber":806,"author":{"gitId":"-"},"content":"      ","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Li-Lehao":7,"tchiong":122,"YaleChen299":31,"nwhloo99":245,"-":366,"NecroWolf28":35}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"   1. Run the `seedu.placebook.Main` and try a few commands.","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"YaleChen299":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"   e.g. `seedu.placebook.commons.StringUtilTest`","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"   e.g. `seedu.placebook.storage.StorageManagerTest`","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"   e.g. `seedu.placebook.logic.LogicManagerTest`","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"YaleChen299":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"**PlaceBook (PB) is a desktop app for managing contacts and appointments, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI).** If you can type fast, PB can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"NecroWolf28"},"content":"It is most beneficial to Sales or Marketing staff who have to manage various appointments with potential clients and customers on a daily basis.","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"1. Download the latest `placebook.jar` from [here](https://github.com/AY2122S1-CS2103T-T12-3/tp/releases).","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your PlaceBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the PlaceBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"## Reading the document","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"This purpose of this section is to provide you with definitions of syntax, data formats that would be used in ","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"the next section [Features](#features) which contains detailed information on all the commands provided in PlaceBook.","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"### Syntax and symbols","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"The table below contains definitions of syntax used in the command format.","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"Syntax | Definition","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"-------|-----------","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"nwhloo99"},"content":"`n/, p/, etc...` | Words or letters followed by a slash refer to parameter tags. \u003cbr\u003e e.g. `n/` refers to the name parameter.","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"`UPPER_CASE` | Words in `UPPER_CASE` are the parameters to be supplied by the user. \u003cbr\u003e e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"nwhloo99"},"content":"`[]` | Words in square brackets are optional. \u003cbr\u003e  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"NecroWolf28"},"content":"`...` | Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e e.g. `[t/TAG]…​` does not need to be present and can be omitted (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2021-11-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"### Data format","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"The table below contains definitions of data formats used in various parameters in the command format.","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"Parameter | Data format","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"----------|------------","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"`INDEX` | Positive integers, e.g. 1,2,3, ...","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"tchiong"},"content":"`DATETIME` | dd-MM-yyyy HHmm, e.g. 03-11-2021 1730 represents 3 November 2021 5.30 pm \u003cbr\u003e **Notes:** The format uses the 24 hour clock formats. Don\u0027t forget that there are only 12 months in a year","lastModifiedDate":"2021-11-01"},{"lineNumber":68,"author":{"gitId":"nwhloo99"},"content":"`EMAIL` | Emails should be of the format local-part@domain. e.g. Johnny@gmail.com","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"nwhloo99"},"content":"`Others` | All other parameters will take any alphanumeric characters and special characters as input. ","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"nwhloo99"},"content":"### Additional notes","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2021-02-03"},{"lineNumber":82,"author":{"gitId":"nwhloo99"},"content":"* If there is any error in command format, PlaceBook will notify you and show you the correct format, and provide an example.","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":84,"author":{"gitId":"nwhloo99"},"content":"* Some commands will have some command specific errors, which will be elaborated on in [Features](#features), to help you troubleshoot.","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"nwhloo99"},"content":"  ","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"nwhloo99"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"nwhloo99"},"content":"## Features","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"Li-Lehao"},"content":"### **Contact Features**","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"nwhloo99"},"content":"This section contains information on features related to adding contacts to the contact list.","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"Li-Lehao"},"content":"#### Adding a person: `add`","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"YaleChen299"},"content":"Adds a person to the PlaceBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"nwhloo99"},"content":"Error Messages:","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"nwhloo99"},"content":"* Emails should be of the format local-part@domain...","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"nwhloo99"},"content":"    * This error occurs when an invalid email format is entered. ","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"nwhloo99"},"content":"    * Please enter the correct email format, e.g. Johnny@gmail.com.","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"nwhloo99"},"content":"* Tag names should be alphanumeric","lastModifiedDate":"2021-10-28"},{"lineNumber":113,"author":{"gitId":"nwhloo99"},"content":"    * There may be some special characters in the tag input, e.g.!@#*","lastModifiedDate":"2021-10-28"},{"lineNumber":114,"author":{"gitId":"nwhloo99"},"content":"    * There should be no spaces in tags, e.g. close friend, is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":115,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":116,"author":{"gitId":"Li-Lehao"},"content":"#### Listing all persons : `list`","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"YaleChen299"},"content":"Shows a list of all persons in the PlaceBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"Li-Lehao"},"content":"#### Editing a person : `edit`","lastModifiedDate":"2021-11-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"YaleChen299"},"content":"Edits an existing person in the PlaceBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"nwhloo99"},"content":"Error Messages:","lastModifiedDate":"2021-10-28"},{"lineNumber":140,"author":{"gitId":"nwhloo99"},"content":"* Emails should be of the format local-part@domain...","lastModifiedDate":"2021-10-28"},{"lineNumber":141,"author":{"gitId":"nwhloo99"},"content":"    * This error occurs when an invalid email format is entered.","lastModifiedDate":"2021-10-28"},{"lineNumber":142,"author":{"gitId":"nwhloo99"},"content":"    * Please enter the correct email format, e.g. Johnny@gmail.com.","lastModifiedDate":"2021-10-28"},{"lineNumber":143,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":144,"author":{"gitId":"nwhloo99"},"content":"* Tag names should be alphanumeric","lastModifiedDate":"2021-10-28"},{"lineNumber":145,"author":{"gitId":"nwhloo99"},"content":"    * There may be some special characters in the tag input, e.g.!@#*","lastModifiedDate":"2021-10-28"},{"lineNumber":146,"author":{"gitId":"nwhloo99"},"content":"    * There should be no spaces in tags, e.g. close friend, is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":147,"author":{"gitId":"nwhloo99"},"content":"    ","lastModifiedDate":"2021-10-28"},{"lineNumber":148,"author":{"gitId":"nwhloo99"},"content":"* The person index provided is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":149,"author":{"gitId":"nwhloo99"},"content":"    * The index inputted may be out of the range of the displayed list indexes.","lastModifiedDate":"2021-10-28"},{"lineNumber":150,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":151,"author":{"gitId":"Li-Lehao"},"content":"#### Locating persons by name: `find`","lastModifiedDate":"2021-11-03"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"nwhloo99"},"content":"* `find alex` returns `Alex Yeoh`\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"YaleChen299"},"content":"  ","lastModifiedDate":"2021-10-23"},{"lineNumber":167,"author":{"gitId":"nwhloo99"},"content":"![result for \u0027find alex\u0027](images/findAlexResult.png)","lastModifiedDate":"2021-10-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"Li-Lehao"},"content":"#### Locating persons by tags: `findTags`","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"NecroWolf28"},"content":"Finds persons whose tags contain any of the given keywords.","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"NecroWolf28"},"content":"Format: `findTags KEYWORD [MORE_KEYWORDS]…​`","lastModifiedDate":"2021-11-01"},{"lineNumber":174,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"NecroWolf28"},"content":"* The search is case-insensitive. e.g `fRieNds` will match `friends`","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"NecroWolf28"},"content":"* Only the tags are searched.","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"NecroWolf28"},"content":"* Only full words will be matched e.g. `colleague` will not match `colleagues`","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"NecroWolf28"},"content":"* Persons matching at least one tag keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"NecroWolf28"},"content":"  e.g. `friends colleagues` will return persons with either `friends`, `colleagues` or both tags","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"NecroWolf28"},"content":"Examples:","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"NecroWolf28"},"content":"* `findTags friends` returns `Alex Yeoh` and `Bernice Yu`, who both have the `friends` tag","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"NecroWolf28"},"content":"![result for \u0027findTags friends\u0027](images/findTagsFriendsResult.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"NecroWolf28"},"content":"* `findTags friends colleagues` returns `Alex Yeoh`, `Bernice Yu` and `Roy Balakrishnan`, who all have either","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"NecroWolf28"},"content":"one or both of the `friends` and `colleagues` tags","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"NecroWolf28"},"content":"![result for \u0027findTags friends colleagues\u0027](images/findTagsFriendsColleaguesResult.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"Li-Lehao"},"content":"#### Deleting a person : `delete`","lastModifiedDate":"2021-11-03"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"YaleChen299"},"content":"Deletes the specified person from the PlaceBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"nwhloo99"},"content":"Error messages:","lastModifiedDate":"2021-10-28"},{"lineNumber":200,"author":{"gitId":"nwhloo99"},"content":"* The person index provided is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":201,"author":{"gitId":"nwhloo99"},"content":"    * The index inputted may be out of the range of the displayed list indexes.","lastModifiedDate":"2021-10-28"},{"lineNumber":202,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":203,"author":{"gitId":"nwhloo99"},"content":"\u003e **Note:** The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2021-10-28"},{"lineNumber":204,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":205,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"YaleChen299"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the PlaceBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"Li-Lehao"},"content":"### **Appointment Features**","lastModifiedDate":"2021-11-03"},{"lineNumber":210,"author":{"gitId":"nwhloo99"},"content":"This section contains information on features related to adding appointments to the appointment list.","lastModifiedDate":"2021-10-28"},{"lineNumber":211,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":212,"author":{"gitId":"Li-Lehao"},"content":"#### Adding an appointment: `addApp`","lastModifiedDate":"2021-11-03"},{"lineNumber":213,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":214,"author":{"gitId":"tchiong"},"content":"Adds an appointment for the specified person or persons identified using a list of index(es) with ","lastModifiedDate":"2021-10-20"},{"lineNumber":215,"author":{"gitId":"tchiong"},"content":"the datetime field(dd-MM-yyyy HHmm), with time being in the 24-hour format e.g. 1530, ","lastModifiedDate":"2021-11-01"},{"lineNumber":216,"author":{"gitId":"tchiong"},"content":"and description to the appointment list.","lastModifiedDate":"2021-11-01"},{"lineNumber":217,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":218,"author":{"gitId":"NecroWolf28"},"content":"Format: `addApp id/INDEX[INDEX,INDEX,INDEX…​] a/ADDRESS start/DATETIME end/DATETIME ds/DESCRIPTION`","lastModifiedDate":"2021-11-01"},{"lineNumber":219,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":220,"author":{"gitId":"nwhloo99"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":221,"author":{"gitId":"Li-Lehao"},"content":"* `addApp id/1,5 a/Starbucks @ Raffles City start/14-12-2021 1400 end/14-12-2021 1500 ds/discuss marketing strategies`","lastModifiedDate":"2021-10-29"},{"lineNumber":222,"author":{"gitId":"nwhloo99"},"content":"creates an appointment with Alex Yeoh and Irfan Ibrahim on 14-12-2021 at 1400 hrs to discuss marketing strategies","lastModifiedDate":"2021-10-22"},{"lineNumber":223,"author":{"gitId":"NecroWolf28"},"content":"![result for \u0027addApp\u0027](images/addAppResult.png)","lastModifiedDate":"2021-11-01"},{"lineNumber":224,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":225,"author":{"gitId":"nwhloo99"},"content":"Error messages:","lastModifiedDate":"2021-10-28"},{"lineNumber":226,"author":{"gitId":"nwhloo99"},"content":"* The person index provided is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":227,"author":{"gitId":"nwhloo99"},"content":"    * The index inputted may be out of the range of the displayed list indexes.","lastModifiedDate":"2021-10-28"},{"lineNumber":228,"author":{"gitId":"nwhloo99"},"content":"* DateTime format should be \"dd-MM-yyyy HHmm\"","lastModifiedDate":"2021-10-28"},{"lineNumber":229,"author":{"gitId":"nwhloo99"},"content":"    * A common error would be not putting a 0 before numbers less than 10, e.g. 3rd March 2022 9.05 am should be represented as 03-03-2022 0905.","lastModifiedDate":"2021-10-28"},{"lineNumber":230,"author":{"gitId":"nwhloo99"},"content":"    * Ensure there is a space between the date section and the time section.","lastModifiedDate":"2021-10-28"},{"lineNumber":231,"author":{"gitId":"nwhloo99"},"content":"* Clashing appointment Timings","lastModifiedDate":"2021-10-28"},{"lineNumber":232,"author":{"gitId":"nwhloo99"},"content":"    * The appointment you are trying to add clashes with an existing appointment.","lastModifiedDate":"2021-10-28"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":234,"author":{"gitId":"Li-Lehao"},"content":"#### Editing an appointment: `editApp`","lastModifiedDate":"2021-11-03"},{"lineNumber":235,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":236,"author":{"gitId":"NecroWolf28"},"content":"Edits an appointment in PlaceBook.","lastModifiedDate":"2021-11-01"},{"lineNumber":237,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":238,"author":{"gitId":"NecroWolf28"},"content":"Format: `editApp INDEX [a/ADDRESS] [start/DATETIME] [end/DATETIME] [ds/DESCRIPTION]`","lastModifiedDate":"2021-11-01"},{"lineNumber":239,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":240,"author":{"gitId":"NecroWolf28"},"content":"* Edits the appointment at the specified `INDEX`.","lastModifiedDate":"2021-09-28"},{"lineNumber":241,"author":{"gitId":"NecroWolf28"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-11-01"},{"lineNumber":242,"author":{"gitId":"NecroWolf28"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-11-01"},{"lineNumber":243,"author":{"gitId":"NecroWolf28"},"content":"* The persons in the appointment will remain the same.","lastModifiedDate":"2021-10-26"},{"lineNumber":244,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":245,"author":{"gitId":"NecroWolf28"},"content":"Examples:","lastModifiedDate":"2021-09-28"},{"lineNumber":246,"author":{"gitId":"NecroWolf28"},"content":"* `editApp 6 a/Utown` edits the details of a prior created group appointment, changing it to meet at UTown, while the other fields remain","lastModifiedDate":"2021-11-01"},{"lineNumber":247,"author":{"gitId":"NecroWolf28"},"content":"the same","lastModifiedDate":"2021-11-01"},{"lineNumber":248,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":249,"author":{"gitId":"NecroWolf28"},"content":"Before:","lastModifiedDate":"2021-11-01"},{"lineNumber":250,"author":{"gitId":"NecroWolf28"},"content":"![result for \u0027editApp\u0027 before change](images/editAppResultBefore.png)","lastModifiedDate":"2021-11-01"},{"lineNumber":251,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":252,"author":{"gitId":"NecroWolf28"},"content":"After:","lastModifiedDate":"2021-11-01"},{"lineNumber":253,"author":{"gitId":"NecroWolf28"},"content":"![result for \u0027editApp\u0027 after change](images/editAppResultAfter.png)","lastModifiedDate":"2021-11-01"},{"lineNumber":254,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":255,"author":{"gitId":"nwhloo99"},"content":"Error messages:","lastModifiedDate":"2021-10-28"},{"lineNumber":256,"author":{"gitId":"nwhloo99"},"content":"* The appointment index provided is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":257,"author":{"gitId":"nwhloo99"},"content":"    * The index inputted may be out of the range of the displayed list indexes.","lastModifiedDate":"2021-10-28"},{"lineNumber":258,"author":{"gitId":"nwhloo99"},"content":"* DateTime format should be \"dd-MM-yyyy HHmm\"","lastModifiedDate":"2021-10-28"},{"lineNumber":259,"author":{"gitId":"nwhloo99"},"content":"    * A common error would be not putting a 0 before numbers less than 10, e.g. 3rd March 2022 9.05 am should be represented as 03-03-2022 0905.","lastModifiedDate":"2021-10-28"},{"lineNumber":260,"author":{"gitId":"nwhloo99"},"content":"    * Ensure there is a space between the date section and the time section.","lastModifiedDate":"2021-10-28"},{"lineNumber":261,"author":{"gitId":"nwhloo99"},"content":"* Clashing appointment Timings","lastModifiedDate":"2021-10-28"},{"lineNumber":262,"author":{"gitId":"NecroWolf28"},"content":"    * The appointment timing you are trying to edit clashes with an existing appointment.","lastModifiedDate":"2021-11-01"},{"lineNumber":263,"author":{"gitId":"NecroWolf28"},"content":"* End time before Start time","lastModifiedDate":"2021-11-01"},{"lineNumber":264,"author":{"gitId":"NecroWolf28"},"content":"    * The appointment timing you are trying to edit has an End time which is earlier than the Start time.","lastModifiedDate":"2021-11-01"},{"lineNumber":265,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":266,"author":{"gitId":"Li-Lehao"},"content":"#### Deleting an appointment: `delApp`","lastModifiedDate":"2021-11-03"},{"lineNumber":267,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":268,"author":{"gitId":"tchiong"},"content":"* Deletes an appointment at the specified `INDEX`","lastModifiedDate":"2021-09-27"},{"lineNumber":269,"author":{"gitId":"NecroWolf28"},"content":"* A popup will appear asking for confirmation before actually deleting the appointment.","lastModifiedDate":"2021-10-26"},{"lineNumber":270,"author":{"gitId":"NecroWolf28"},"content":"* If the user chooses to cancel the deletion, the appointment will not be deleted.","lastModifiedDate":"2021-10-26"},{"lineNumber":271,"author":{"gitId":"tchiong"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2021-09-27"},{"lineNumber":272,"author":{"gitId":"tchiong"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-09-27"},{"lineNumber":273,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":274,"author":{"gitId":"tchiong"},"content":"Format: delApp INDEX","lastModifiedDate":"2021-09-27"},{"lineNumber":275,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":276,"author":{"gitId":"tchiong"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":277,"author":{"gitId":"Li-Lehao"},"content":"* `delApp 6` and the user selects \u0027OK\u0027 in the popup","lastModifiedDate":"2021-10-29"},{"lineNumber":278,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":279,"author":{"gitId":"nwhloo99"},"content":"Error messages:","lastModifiedDate":"2021-10-28"},{"lineNumber":280,"author":{"gitId":"nwhloo99"},"content":"* The appointment index provided is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":281,"author":{"gitId":"nwhloo99"},"content":"    * The index inputted may be out of the range of the displayed list indexes.","lastModifiedDate":"2021-10-28"},{"lineNumber":282,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":283,"author":{"gitId":"NecroWolf28"},"content":"Before:","lastModifiedDate":"2021-10-26"},{"lineNumber":284,"author":{"gitId":"NecroWolf28"},"content":"![result for \u0027delApp\u0027 before change](images/delAppResultBefore.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":285,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":286,"author":{"gitId":"NecroWolf28"},"content":"Confirmation:","lastModifiedDate":"2021-10-26"},{"lineNumber":287,"author":{"gitId":"NecroWolf28"},"content":"![result for \u0027delApp\u0027 confirmation stage](images/delAppResultConfirmation.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":288,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":289,"author":{"gitId":"NecroWolf28"},"content":"After:","lastModifiedDate":"2021-10-26"},{"lineNumber":290,"author":{"gitId":"NecroWolf28"},"content":"![result for \u0027delApp\u0027 after change](images/delAppResultAfter.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":291,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":292,"author":{"gitId":"Li-Lehao"},"content":"#### Locating appointments by description: `findApp`","lastModifiedDate":"2021-11-03"},{"lineNumber":293,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":294,"author":{"gitId":"YaleChen299"},"content":"Finds appointments whose descriptions contain any of the given keywords.","lastModifiedDate":"2021-10-21"},{"lineNumber":295,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":296,"author":{"gitId":"YaleChen299"},"content":"Format: `findApp KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2021-10-21"},{"lineNumber":297,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":298,"author":{"gitId":"YaleChen299"},"content":"* The search is case-insensitive. e.g `meeting` will match `Meeting`","lastModifiedDate":"2021-10-21"},{"lineNumber":299,"author":{"gitId":"YaleChen299"},"content":"* The order of the keywords does not matter. e.g. `Meeting online` will match `online meeting`","lastModifiedDate":"2021-10-21"},{"lineNumber":300,"author":{"gitId":"YaleChen299"},"content":"* Only the description is searched.","lastModifiedDate":"2021-10-21"},{"lineNumber":301,"author":{"gitId":"YaleChen299"},"content":"* Only full words will be matched e.g. `meet` will not match `meeting`","lastModifiedDate":"2021-10-21"},{"lineNumber":302,"author":{"gitId":"YaleChen299"},"content":"* Appointments matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2021-10-21"},{"lineNumber":303,"author":{"gitId":"YaleChen299"},"content":"  e.g. `Zoom meeting` will return `Zoom talk`, `offline meeting`","lastModifiedDate":"2021-10-21"},{"lineNumber":304,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":305,"author":{"gitId":"YaleChen299"},"content":"Examples:","lastModifiedDate":"2021-10-21"},{"lineNumber":306,"author":{"gitId":"YaleChen299"},"content":"* `findApp zoom` returns `Zoom` and `Zoom meeting`","lastModifiedDate":"2021-10-21"},{"lineNumber":307,"author":{"gitId":"YaleChen299"},"content":"* `findApp meeting talk` returns `sales talk`, `urgent meeting`\u003cbr\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":308,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":309,"author":{"gitId":"YaleChen299"},"content":"#### Listing all appointments : `listApp` ","lastModifiedDate":"2021-11-04"},{"lineNumber":310,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":311,"author":{"gitId":"Li-Lehao"},"content":"Show all the appointments in the appointment list currently.","lastModifiedDate":"2021-09-27"},{"lineNumber":312,"author":{"gitId":"tchiong"},"content":"List is sorted by Date, Time and Description baseline. Can optionally add a condition","lastModifiedDate":"2021-10-20"},{"lineNumber":313,"author":{"gitId":"tchiong"},"content":"to sort List by, if an invalid condition is input, it will sort by baseline conditions","lastModifiedDate":"2021-10-20"},{"lineNumber":314,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":315,"author":{"gitId":"YaleChen299"},"content":"Format: `listApp` Optional: `listApp Time` or `listApp Description`","lastModifiedDate":"2021-11-04"},{"lineNumber":316,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":317,"author":{"gitId":"Li-Lehao"},"content":"#### Undo the previous command : `undo`","lastModifiedDate":"2021-11-06"},{"lineNumber":318,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":319,"author":{"gitId":"Li-Lehao"},"content":"If you execute a command by mistake, such as accidentally deleting a person or an appointment,","lastModifiedDate":"2021-11-06"},{"lineNumber":320,"author":{"gitId":"Li-Lehao"},"content":"you can easily undo this command and go back to where you were before executing that command","lastModifiedDate":"2021-11-06"},{"lineNumber":321,"author":{"gitId":"Li-Lehao"},"content":"by typing `undo` in the text box and pressing enter.","lastModifiedDate":"2021-11-06"},{"lineNumber":322,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":323,"author":{"gitId":"Li-Lehao"},"content":"Format: `undo`","lastModifiedDate":"2021-11-06"},{"lineNumber":324,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":325,"author":{"gitId":"Li-Lehao"},"content":"Error messages:","lastModifiedDate":"2021-11-06"},{"lineNumber":326,"author":{"gitId":"Li-Lehao"},"content":"* No history states.","lastModifiedDate":"2021-11-06"},{"lineNumber":327,"author":{"gitId":"Li-Lehao"},"content":"    * It means there are no more commands to undo, and you are at the initial state.","lastModifiedDate":"2021-11-06"},{"lineNumber":328,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":329,"author":{"gitId":"Li-Lehao"},"content":"### **Other Features**","lastModifiedDate":"2021-11-03"},{"lineNumber":330,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":331,"author":{"gitId":"Li-Lehao"},"content":"#### Clearing all entries : `clear`","lastModifiedDate":"2021-11-03"},{"lineNumber":332,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":333,"author":{"gitId":"nwhloo99"},"content":"Clears all contacts and appointments from PlaceBook.","lastModifiedDate":"2021-11-03"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":335,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2021-11-03"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":337,"author":{"gitId":"Li-Lehao"},"content":"#### Command history navigation","lastModifiedDate":"2021-11-03"},{"lineNumber":338,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":339,"author":{"gitId":"YaleChen299"},"content":"Using the keyboard `UP` and `DOWN` arrow buttons, you can easily navigate through the command that you previously entered.","lastModifiedDate":"2021-10-29"},{"lineNumber":340,"author":{"gitId":"YaleChen299"},"content":"This can be very helpful when you are doing repetitive task such as adding multiple person or appointment.","lastModifiedDate":"2021-10-29"},{"lineNumber":341,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":342,"author":{"gitId":"YaleChen299"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-29"},{"lineNumber":343,"author":{"gitId":"YaleChen299"},"content":"Please note that the command history will not be saved in the data file. ","lastModifiedDate":"2021-10-29"},{"lineNumber":344,"author":{"gitId":"YaleChen299"},"content":"So you will not be able to get your command history if you exit PlaceBook and open it again.","lastModifiedDate":"2021-10-29"},{"lineNumber":345,"author":{"gitId":"YaleChen299"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":346,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":347,"author":{"gitId":"Li-Lehao"},"content":"#### Viewing help : `help`","lastModifiedDate":"2021-11-03"},{"lineNumber":348,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":349,"author":{"gitId":"nwhloo99"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2021-10-28"},{"lineNumber":350,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":351,"author":{"gitId":"nwhloo99"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":352,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":353,"author":{"gitId":"nwhloo99"},"content":"Format: `help`","lastModifiedDate":"2021-10-28"},{"lineNumber":354,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":355,"author":{"gitId":"Li-Lehao"},"content":"#### Changing Dark and Light Theme","lastModifiedDate":"2021-11-03"},{"lineNumber":356,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":357,"author":{"gitId":"YaleChen299"},"content":"You may notice the \u0027sun\u0027 or \u0027moon\u0027 button located at the top right of PlaceBook.","lastModifiedDate":"2021-10-29"},{"lineNumber":358,"author":{"gitId":"YaleChen299"},"content":"Simply click that to toggle PlaceBook between Dark and Light Theme.","lastModifiedDate":"2021-10-29"},{"lineNumber":359,"author":{"gitId":"YaleChen299"},"content":"PlaceBook aims to support your work in different lighting environments and boost your productivity.","lastModifiedDate":"2021-10-29"},{"lineNumber":360,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":361,"author":{"gitId":"NecroWolf28"},"content":" Light Theme","lastModifiedDate":"2021-11-01"},{"lineNumber":362,"author":{"gitId":"Li-Lehao"},"content":" ![light theme](images/lightTheme.png)","lastModifiedDate":"2021-10-29"},{"lineNumber":363,"author":{"gitId":"NecroWolf28"},"content":" Dark Theme","lastModifiedDate":"2021-11-01"},{"lineNumber":364,"author":{"gitId":"Li-Lehao"},"content":" ![dark theme](images/darkTheme.png)","lastModifiedDate":"2021-10-29"},{"lineNumber":365,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":366,"author":{"gitId":"Li-Lehao"},"content":"#### Exiting the program : `exit`","lastModifiedDate":"2021-11-03"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"Li-Lehao"},"content":"#### Saving the data","lastModifiedDate":"2021-11-03"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"nwhloo99"},"content":"PlaceBook data will be saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-10-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"Li-Lehao"},"content":"#### Editing the data file","lastModifiedDate":"2021-11-03"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":378,"author":{"gitId":"nwhloo99"},"content":"Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-11-01"},{"lineNumber":379,"author":{"gitId":"nwhloo99"},"content":"PlaceBook Person and Appointment data will be saved in two separate JSON files, locations in the table below.","lastModifiedDate":"2021-11-01"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":381,"author":{"gitId":"nwhloo99"},"content":"Data | File Location","lastModifiedDate":"2021-11-01"},{"lineNumber":382,"author":{"gitId":"nwhloo99"},"content":"-----|--------------","lastModifiedDate":"2021-11-01"},{"lineNumber":383,"author":{"gitId":"nwhloo99"},"content":"Person | `[JAR file location]/data/contacts.json`","lastModifiedDate":"2021-11-01"},{"lineNumber":384,"author":{"gitId":"nwhloo99"},"content":"Appointment | `[JAR file location]/data/schedule.json`","lastModifiedDate":"2021-11-01"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":386,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":387,"author":{"gitId":"nwhloo99"},"content":"If your changes to the data file makes its format invalid, PlaceBook will discard all data and start with an empty data file at the next run.\u003cbr\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":388,"author":{"gitId":"nwhloo99"},"content":"Invalid changes include creating duplicate entries in any of the JSON files, or creating Appointments with time conflicts in the `schedule.json` file","lastModifiedDate":"2021-11-01"},{"lineNumber":389,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":391,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-11-03"},{"lineNumber":392,"author":{"gitId":"nwhloo99"},"content":"In the case that PlaceBook cannot find any data files, PlaceBook will attempt to create Sample data for the user.\u003cbr\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":393,"author":{"gitId":"nwhloo99"},"content":"If the schedule.json file is missing but the contacts.json file is correctly read, there will not be any Sample schedule made.\u003cbr\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":394,"author":{"gitId":"nwhloo99"},"content":"In all other cases (i.e. both files missing, or only contacts.json missing), both Sample contacts and Sample schedule will be created.","lastModifiedDate":"2021-11-03"},{"lineNumber":395,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":397,"author":{"gitId":"Li-Lehao"},"content":"#### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2021-11-03"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":406,"author":{"gitId":"NecroWolf28"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains ","lastModifiedDate":"2021-10-29"},{"lineNumber":407,"author":{"gitId":"NecroWolf28"},"content":"the data of your previous PlaceBook home folder.","lastModifiedDate":"2021-10-29"},{"lineNumber":408,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":409,"author":{"gitId":"NecroWolf28"},"content":"**Q**: Will I be notified if I edit an appointment and the timing clashes with another appointment?\u003cbr\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":410,"author":{"gitId":"NecroWolf28"},"content":"**A**: Yes, there will be a message saying that there is an existing conflicting appointment.","lastModifiedDate":"2021-10-29"},{"lineNumber":411,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":412,"author":{"gitId":"NecroWolf28"},"content":"**Q**: Can I still use my mouse when using PlaceBook?\u003cbr\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":413,"author":{"gitId":"NecroWolf28"},"content":"**A**: Yes, you are still able to use your mouse for certain functionalities such as scrolling lists.","lastModifiedDate":"2021-10-29"},{"lineNumber":414,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":415,"author":{"gitId":"NecroWolf28"},"content":"**Q**: Is there a way for me to share my PlaceBook data with other people?\u003cbr\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":416,"author":{"gitId":"NecroWolf28"},"content":"**A**: Yes, similarly to how you transfer data from one computer to another, you can simply send the data file to ","lastModifiedDate":"2021-10-29"},{"lineNumber":417,"author":{"gitId":"NecroWolf28"},"content":"others, and then get them to download another PlaceBook jar file, then replace the data file with the one you sent.","lastModifiedDate":"2021-10-29"},{"lineNumber":418,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":419,"author":{"gitId":"NecroWolf28"},"content":"**Q**: Is there a way we can see all our appointments in a calendar grid view?\u003cbr\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":420,"author":{"gitId":"NecroWolf28"},"content":"**A**: We do not currently have a calendar view function, but we are looking into implementing it in the future. ","lastModifiedDate":"2021-10-29"},{"lineNumber":421,"author":{"gitId":"NecroWolf28"},"content":"However, we remain adamant that Listview is better than Calenderview because it allows all appointments to be seen ","lastModifiedDate":"2021-11-01"},{"lineNumber":422,"author":{"gitId":"NecroWolf28"},"content":"clearly at one centralized place.","lastModifiedDate":"2021-11-01"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"tchiong"},"content":"**AddApp** | `addApp id/INDEX[INDEX,INDEX,INDEX...] a/ADDRESS start/DATETIME ti/DATETIME ds/DESCRIPTION` \u003cbr\u003e e.g., `addApp id/1,2,3 a/Starbucks @ Raffles City start/01-01-2021 1400 end/01-01-2021 1500 ds/discuss marketing strategies`","lastModifiedDate":"2021-11-01"},{"lineNumber":432,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"tchiong"},"content":"**DelApp** | `delApp INDEX` \u003cbr\u003e e.g., `delApp 1`","lastModifiedDate":"2021-10-21"},{"lineNumber":435,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2020-05-23"},{"lineNumber":436,"author":{"gitId":"NecroWolf28"},"content":"**EditApp** | `editApp INDEX [a/ADDRESS] [start/DATETIME] [end/DATETIME] [ds/DESCRIPTION]` \u003cbr\u003e e.g., `editApp 1 a/UTown start/10-11-2021 1400 ds/discuss UG and DG stuff`","lastModifiedDate":"2021-11-01"},{"lineNumber":437,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"NecroWolf28"},"content":"**FindTags** | `findTags KEYWORD [MORE_KEYWORDS]` \u003cbr\u003e e.g., `findTags friends`","lastModifiedDate":"2021-10-26"},{"lineNumber":439,"author":{"gitId":"YaleChen299"},"content":"**FindApp** | `findApp KEYWORD [MORE KEYWORDS`\u003cbr\u003e e.g., `findApp Zoom Meeting`","lastModifiedDate":"2021-10-21"},{"lineNumber":440,"author":{"gitId":"-"},"content":"**List** | `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"tchiong"},"content":"**ListApp** | `listapp [Date / Duration]`","lastModifiedDate":"2021-10-21"},{"lineNumber":442,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"tchiong":19,"Li-Lehao":42,"YaleChen299":44,"nwhloo99":104,"-":156,"NecroWolf28":78}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"YaleChen299"},"content":"    content: \"PlaceBook\";","lastModifiedDate":"2021-10-21"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"YaleChen299":1,"-":294}},{"path":"docs/diagrams/AddAppSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tchiong"},"content":"@startuml","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"!include style.puml","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"tchiong"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":"participant \":AddAppCommandParser\" as AddAppCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"participant \"AddAppCommand\" as AddAppCommand LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"end box","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"end box","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"[-\u003e LogicManager : execute(\"addApp ...\")","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"activate LogicManager","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"addApp ...\")","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"activate AddressBookParser","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"create AddAppCommandParser","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"AddressBookParser -\u003e AddAppCommandParser","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"tchiong"},"content":"activate AddAppCommandParser","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"AddAppCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"deactivate AddAppCommandParser","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"AddressBookParser -\u003e AddAppCommandParser : parse(\"...\")","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"activate AddAppCommandParser","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"create AddAppCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"AddAppCommandParser -\u003e AddAppCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"activate AddAppCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"tchiong"},"content":"AddAppCommand --\u003e AddAppCommandParser","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"tchiong"},"content":"deactivate AddAppCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"AddAppCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"tchiong"},"content":"deactivate AddAppCommandParser","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"tchiong"},"content":"AddAppCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"tchiong"},"content":"destroy AddAppCommandParser","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"tchiong"},"content":"AddressBookParser --\u003e LogicManager","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"LogicManager -\u003e AddAppCommand : execute()","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"tchiong"},"content":"activate AddAppCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"tchiong"},"content":"AddAppCommand -\u003e Model : addApp","lastModifiedDate":"2021-10-29"},{"lineNumber":52,"author":{"gitId":"tchiong"},"content":"activate Model","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"tchiong"},"content":"Model --\u003e AddAppCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"deactivate Model","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"tchiong"},"content":"create CommandResult","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"tchiong"},"content":"AddAppCommand -\u003e CommandResult","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"activate CommandResult","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"tchiong"},"content":"CommandResult --\u003e AddAppCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"tchiong"},"content":"deactivate CommandResult","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"AddAppCommand --\u003e LogicManager : result","lastModifiedDate":"2021-10-29"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"deactivate AddAppCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":66,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":67,"author":{"gitId":"tchiong"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-10-29"},{"lineNumber":68,"author":{"gitId":"tchiong"},"content":"deactivate LogicManager","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"tchiong"},"content":"@enduml","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"tchiong":69}},{"path":"docs/diagrams/AddAppStep1.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tchiong"},"content":"@startuml","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"!include \u003coffice/Users/user\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"!include style.puml","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"Package \" \"\u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"    Class UiManager UI_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":"    Class LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"    Class StorageManager STORAGE_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"    Class ModelManager MODEL_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"    Class Main #grey","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"Class \"\u003c$user\u003e\" as User MODEL_COLOR_T2","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"Main -[#grey]-\u003e UiManager","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"Main -[#grey]-\u003e LogicManager","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"Main -[#grey]-\u003e StorageManager","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"Main -[#grey]-\u003e ModelManager","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"User -\u003e Main","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"@enduml","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"tchiong":21}},{"path":"docs/diagrams/AddAppStep2.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tchiong"},"content":"@startuml","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"!include style.puml","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"tchiong"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"Participant \":UI\" as ui UI_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":"Participant \":AddressBookParser\" as addressBookParser LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"Participant \":AddAppCommandParser\" as addAppCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"user -[USER_COLOR]\u003e ui : \"addApp ...\"","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"activate ui UI_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"ui -[UI_COLOR]\u003e logic : executeCommand(\"addApp ...\")","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"logic -[LOGIC_COLOR]\u003e addressBookParser : parseCommand(\"addApp ...\")","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"activate addressBookParser LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"addressBookParser -[LOGIC_COLOR]\u003e addAppCommandParser : parse(\"...\")","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"activate addAppCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"addAppCommandParser --[LOGIC_COLOR]\u003e addressBookParser: AddAppCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"deactivate addAppCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"addressBookParser --[LOGIC_COLOR]\u003e logic: AddAppCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"deactivate addressBookParser LOGIC_COLOR","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"@enduml","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"tchiong":28}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"Interface ReadOnlySchedule \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-05-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class AddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class Model","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"Class Schedule","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"Class Appointment","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"Class TimePeriod","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"Class Urgency \u003c\u003cEnumeration\u003e\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"Schedule .up.|\u003e ReadOnlySchedule","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Model .left.\u003e ReadOnlyAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"Model .right.\u003e ReadOnlySchedule","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"ModelManager -left-\u003e \"1\" AddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"ModelManager -right-\u003e \"1\" Schedule","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"AddressBook *-left-\u003e \"1\" UniquePersonList","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"UniquePersonList --\u003e \"~* all\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Person *--\u003e Name","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"Person *--\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"Person *--\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Person *--\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"Schedule --\u003e \"~* all\" Appointment","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"Appointment -left-\u003e\"~* clients\" Person","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"Appointment *--\u003e Address","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"Appointment *--\u003e \"1\" TimePeriod","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"Appointment *--\u003e \"description\" String","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"Appointment ..\u003e Urgency","lastModifiedDate":"2021-10-29"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"TimePeriod --\u003e\"start time\" LocalDateTIme","lastModifiedDate":"2021-10-29"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"TimePeriod --\u003e\"end time\" LocalDateTIme","lastModifiedDate":"2021-10-29"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"ModelManager --\u003e\"~* filtered\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"ModelManager --\u003e\"~* filtered\" Appointment","lastModifiedDate":"2021-10-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"YaleChen299":21,"-":53}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Interface Storage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"package \"AddressBook Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class JsonAddressBookStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"package \"Schedule Storage\" #F4F6F6{","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"Interface ScheduleStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"Class JsonScheduleStorage","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"Class JsonSerializableSchedule","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"Class JsonAdaptedAppointment","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"StorageManager -up-\u003e \"1\" ScheduleStorage","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"Storage -left-|\u003e AddressBookStorage","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"Storage -right-|\u003e ScheduleStorage","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"JsonAddressBookStorage .up.|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"JsonAddressBookStorage ..\u003e JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"JsonScheduleStorage .up.|\u003e ScheduleStorage","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"JsonScheduleStorage ..\u003e JsonSerializableSchedule","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"JsonSerializableSchedule --\u003e \"*\" JsonAdaptedAppointment","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"JsonAdaptedAppointment --\u003e \"*\" JsonAdaptedPerson","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"YaleChen299":16,"-":41}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"title: Placebook","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-T12-3/tp/actions)","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-T12-3/tp/branch/master/graph/badge.svg?token\u003dOZEX1OJ121)](https://codecov.io/gh/AY2122S1-CS2103T-T12-3/tp)","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"**PlaceBook (PB) is a desktop app for managing contacts and appointments, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI).** If you can type fast, PB can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"YaleChen299":5,"-":13}},{"path":"docs/team/li-lehao.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Li-Lehao"},"content":"---","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"layout: page","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"title: Li Lehao\u0027s Project Portfolio Page","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"---","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"Li-Lehao"},"content":"### Project: PlackBook","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":"PlaceBook (PB) is a desktop app for managing contacts and appointments designed for salesperson and marketing person,","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"Li-Lehao"},"content":"optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"If you can type fast, PB can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":"* **New Feature**: Added the ability to undo previous commands.","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"Li-Lehao"},"content":"  * What it does: allows the user to enter an `undo` command, which let the PlackBook undo the previous command","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"    and go back to the state before executing the previous command.","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"  * Justification: This feature improves the user experience significantly because the user ","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"    can make mistakes in commands, such as deleting a contact accidentally, ","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"    and the app should provide a convenient way to rectify them. ","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"  * Highlights: This enhancement affects almost all existing commands and commands to be added in future. ","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"    It required an in-depth analysis of design alternatives. ","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"    The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"Li-Lehao"},"content":"* **New Feature**: Added the `listApp` command.","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"  * What it does: the `listApp` command allows the user to let PlackBook display a list of all the appointments.","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"    In addition, users can also add keywords such as `time` and `description` after the `listApp` command,","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"    to request PlackBook to display the list sorted according to certain keywords.","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"  * Justification: This feature improves the user experience significantly because the user need a command","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"Li-Lehao"},"content":"    to go back to the original appointment list after they use `findApp` command and some other commands.","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"Li-Lehao"},"content":"    In addition, sorting the appointment list according to certain keywords significantly improves the convenience","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"Li-Lehao"},"content":"    for users to look through the appointment list.","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"* **New Feature**: Implement the `TimePeriod` class so that PlaceBook can check potential time conflicts among the appointments.","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"  * What it does: each `TimePeriod` object represent a specific period of time. ","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"    It ensures that the recorded time period must be valid, that is, ","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"    the start date and time are valid, ","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"Li-Lehao"},"content":"    the end date and time are valid, ","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"    and the end time must be after the start time. ","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"Li-Lehao"},"content":"    At the same time, it provides a way to check whether there is a conflict between two time periods.","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"  * Justification: This feature is important because it allows PlaceBook to check potential time conflicts among all the","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"Li-Lehao"},"content":"    appointments in the schedule, and checking time conflict is an essential feature of PlaceBook.","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"Li-Lehao"},"content":"* **Other significant contribution**: Implement some test utilities such as `AppointmentBuilder` and `TypicalAppointments`.","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"Li-Lehao"},"content":"  * What it does: These test utilities provide a way to quickly and concisely generate many meaningful appointment objects.","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"Li-Lehao"},"content":"  * Justification: These test utilities are important because","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"Li-Lehao"},"content":"    it is often necessary to create a lot of appointments during testing.","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"Li-Lehao"},"content":"    These tools allow people to quickly create many meaningful appointment instances,","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"Li-Lehao"},"content":"    avoiding the confusion and duplication of creating different instances everywhere.","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"Li-Lehao"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-09-17\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"Li-Lehao"},"content":"* **Project management**:","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"Li-Lehao"},"content":"    * Record some important contents of the weekly team meeting.","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"Li-Lehao"},"content":"    * Updated the `Appointment` and `Schedule` class, allowing them to detact and remove the appointment","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"Li-Lehao"},"content":"      with empty client list.","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"Li-Lehao"},"content":"    * Wrote additional tests for `Appointment` class.","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"Li-Lehao"},"content":"* **Documentation**:","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"Li-Lehao"},"content":"    * User Guide:","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"Li-Lehao"},"content":"        * Added screenshots to better display the product interface and better guide the users how to operate. [#136](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/136)","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"Li-Lehao"},"content":"        * Edited the `addApp` example to better show users how to use this command","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"Li-Lehao"},"content":"    * Developer Guide:","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"Li-Lehao"},"content":"        * Added implementation details of the `TimePeriod` feature. [#193](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/193)","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"Li-Lehao"},"content":"        * Added implementation details of the `undo` feature.","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"Li-Lehao"},"content":"* **Community**:","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"Li-Lehao"},"content":"    * Reviewed PRs","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"Li-Lehao"},"content":"    * Reported bugs and suggestions for other teams in the class ","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"Li-Lehao"},"content":"      (examples: [Reported bugs in group W11-3\u0027s team project during mock PE](https://github.com/Li-Lehao/ped/issues?q\u003dis:issue+is:open))","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"Li-Lehao":70}},{"path":"docs/team/yalechen299.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"---","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"layout: page","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"title: Chen Yanyu\u0027s Project Portfolio Page","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"---","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"### Project: PlaceBook","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"PlaceBook (PB) is a desktop app for managing contacts and appointments, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI).** If you can type fast, PB can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"* **New Feature**: Added Light Theme/ Dark Theme toggle function","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"  * What it does: allows the user to change the theme fo the application.","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"  * Justification: This feature improves the user experience as it allows users to work with greater eye comfort in various","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"    lighting situation, such as bright office, outdoor, or dark cafe. This may be especially needed by our target audience: ","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    sales and management executive, due to their volatile work environment.","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"  * Highlights: This enhancement is implemented with another .css stylesheet. So each style can be adjusted independently ","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    in each stylesheet. Moreover, in the light theme stylesheet, I used css global variables, so it will be easier to add ","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"    even more themes in the future just by changing the values of each global variable without needing to adjust the color ","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"    of each class separately. I believe this will improve the maintainability of the UI design.","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"  * What it does: allows the user to navigate to previous or next commands using up/down keys.","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"  * Justification: This feature improves the user experience as it improves user\u0027s efficiency in repetitive tasks such as ","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"    adding or deleting multiple appointments/clients.","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"  * Highlights: This enhancement is quite independent of the existing system, and it is implemented in a way that adds ","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"    minimal dependencies. This makes this feature and the whole system easily maintainable in the future.","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"  * Credits: I reused parts of the code from my own CS2103T independent project.","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"* **New Feature**: Urgency display in appointment list","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"  * What it does: allows the user to view appointments with different colors for different levels of urgency.","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"  * Justification: This feature will help the user better visualise the priority of their appointments.","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"  * Highlights: the implementation sets translucent background for each appointment card, so the theme of ","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"    software can be seen. This reduces future developers\u0027 need to specify new urgency colors for each theme, which ","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"    improves maintainability.","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"* **New Feature**: `findApp`","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"  * What it does: allows the user to find appointments with the given keyword.","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"  * Justification: this is a must-have feature for users to find specific appointments in the list easily.","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"  * Credits: the implementation is largely similar to the AB-3 find feature.","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"* **Other significant contribution**: implement UI for appointment list with dropdown list for clients in each appointment.","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"  * What I did: refactored the UI components, added appointment list, added dropdown list for clients in each appointment.","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"  * Justification: re-organise the layout to give a business outlook. The addition of the dropdown list is also essential ","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"    as it helps users to prepare for the meeting easily without going back to the client list to find the clients.","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"  ","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"* **Project management**:","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"  * Set up GitHub organisation and many other administrative structures such as milestones, issues and CI.","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"  * Proposed agenda for weekly meeting and conduct weekly meeting with active contribution.","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"  * Managed releases `v1.3` `v1.3b` (2 releases) on GitHub","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"  ","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"  ","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-11-02"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"  * Updated the UI layout","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"  * (to be edited)Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-11-02"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"* **Documentation**:","lastModifiedDate":"2021-11-02"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"  * (to be edited)","lastModifiedDate":"2021-11-02"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"  * User Guide:","lastModifiedDate":"2021-11-02"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"    * Added documentation for the feature `findApp`[\\#101](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/101)","lastModifiedDate":"2021-11-02"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"    * Added documentation for the features `command history navigation` and `theme toggle`.[\\#140](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/140)","lastModifiedDate":"2021-11-02"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"  * Developer Guide:","lastModifiedDate":"2021-11-02"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"    * Added implementation details of the `delete` feature. [\\#106](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/106)","lastModifiedDate":"2021-11-02"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"    * Update uml for model and storage. [\\#134](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/134)","lastModifiedDate":"2021-11-02"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"* **Community**:","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"  * (to be edited)","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"  * PRs reviewed (with non-trivial review comments): ","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"    [\\#84](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/84), ","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"    [\\#116](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/116), ","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"    [\\#117](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/117), ","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"    [\\#69](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/69), ","lastModifiedDate":"2021-11-02"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":"    [\\#185](https://github.com/AY2122S1-CS2103T-T12-3/tp/pull/185), ","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"YaleChen299"},"content":"  * Contributed to forum discussions (examples: [1](https://github.com/nus-cs2103-AY2122S1/forum/issues/158#issuecomment-909827199), [2](), [3](), [4]())","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"YaleChen299"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"YaleChen299"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"Li-Lehao":2,"YaleChen299":81}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"YaleChen299"},"content":"Create a `RemarkCommandParser` class in the `seedu.placebook.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2021-10-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"YaleChen299"},"content":"Create a new `Remark` in `seedu.placebook.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2021-10-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"YaleChen299"},"content":"Simply add the following to [`seedu.placebook.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2021-10-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2021-08-01"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"YaleChen299":6,"-":395}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"The `address` field in `Person` is actually an instance of the `seedu.placebook.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"YaleChen299":1,"-":111}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.placebook.logic.Logic`.","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"A quick look at the `seedu.placebook.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2021-10-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"YaleChen299":2,"-":299}},{"path":"src/main/java/seedu/placebook/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.FileUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"YaleChen299":3,"-":61}},{"path":"src/main/java/seedu/placebook/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"YaleChen299":1,"-":24}},{"path":"src/main/java/seedu/placebook/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Config;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Version;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.ConfigUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.StringUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.Logic;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.LogicManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.storage.ContactsStorage;","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.storage.JsonContactsStorage;","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.storage.JsonScheduleStorage;","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.storage.ScheduleStorage;","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.storage.Storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.storage.StorageManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.storage.UserPrefsStorage;","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.UiManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PLaceBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"tchiong"},"content":"        ContactsStorage contactsStorage \u003d new JsonContactsStorage(userPrefs.getContactsFilePath());","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"        ScheduleStorage scheduleStorage \u003d new JsonScheduleStorage(userPrefs.getScheduleFilePath());","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"        storage \u003d new StorageManager(contactsStorage, userPrefsStorage, scheduleStorage);","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"        // this is to provide logic the power of window creation","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"        // while maintaining testability for confirmation windows.","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"        logic.setUi(ui);","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"tchiong"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s Placebook and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"tchiong"},"content":"     * The data from the sample Placebook will be used instead if {@code storage}\u0027s Placebook is not found,","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"tchiong"},"content":"     * or an empty Placebook will be used instead if errors occur when reading {@code storage}\u0027s Placebook.","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":86,"author":{"gitId":"tchiong"},"content":"        Optional\u003cReadOnlyContacts\u003e contactsOptional;","lastModifiedDate":"2021-11-04"},{"lineNumber":87,"author":{"gitId":"nwhloo99"},"content":"        Optional\u003cReadOnlySchedule\u003e scheduleOptional;","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"tchiong"},"content":"        ReadOnlyContacts initialContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"nwhloo99"},"content":"        ReadOnlySchedule initialSchedule;","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"nwhloo99"},"content":"        boolean usingSampleSchedule \u003d false;","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"nwhloo99"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"nwhloo99"},"content":"            scheduleOptional \u003d storage.readSchedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"YaleChen299"},"content":"            if (!scheduleOptional.isPresent()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":95,"author":{"gitId":"YaleChen299"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Schedule\");","lastModifiedDate":"2021-10-29"},{"lineNumber":96,"author":{"gitId":"nwhloo99"},"content":"                usingSampleSchedule \u003d true;","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"YaleChen299"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":98,"author":{"gitId":"YaleChen299"},"content":"            initialSchedule \u003d scheduleOptional.orElseGet(SampleDataUtil::getSampleSchedule);","lastModifiedDate":"2021-10-29"},{"lineNumber":99,"author":{"gitId":"nwhloo99"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"nwhloo99"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Schedule\");","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"nwhloo99"},"content":"            initialSchedule \u003d new Schedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"nwhloo99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"nwhloo99"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Schedule\");","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"nwhloo99"},"content":"            initialSchedule \u003d new Schedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"tchiong"},"content":"            contactsOptional \u003d storage.readContacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"tchiong"},"content":"            if (!contactsOptional.isPresent()) {","lastModifiedDate":"2021-11-04"},{"lineNumber":110,"author":{"gitId":"tchiong"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Contacts\");","lastModifiedDate":"2021-11-04"},{"lineNumber":111,"author":{"gitId":"nwhloo99"},"content":"                initialSchedule \u003d SampleDataUtil.getSampleSchedule();","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"nwhloo99"},"content":"            } else if (usingSampleSchedule) {","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"tchiong"},"content":"                // Sample Schedule data would most likely not match non-sample Schedule","lastModifiedDate":"2021-11-04"},{"lineNumber":114,"author":{"gitId":"nwhloo99"},"content":"                // In this case, we will wipe schedule data","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"tchiong"},"content":"                logger.info(\"Contacts data found, wiping sample Schedule\");","lastModifiedDate":"2021-11-04"},{"lineNumber":116,"author":{"gitId":"nwhloo99"},"content":"                initialSchedule \u003d new Schedule();","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":118,"author":{"gitId":"tchiong"},"content":"            initialContacts \u003d contactsOptional.orElseGet(SampleDataUtil::getSampleContacts);","lastModifiedDate":"2021-11-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":120,"author":{"gitId":"tchiong"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Contacts\");","lastModifiedDate":"2021-11-04"},{"lineNumber":121,"author":{"gitId":"tchiong"},"content":"            initialContacts \u003d new Contacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"nwhloo99"},"content":"            initialSchedule \u003d new Schedule();","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"tchiong"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Contacts\");","lastModifiedDate":"2021-11-04"},{"lineNumber":125,"author":{"gitId":"tchiong"},"content":"            initialContacts \u003d new Contacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":126,"author":{"gitId":"nwhloo99"},"content":"            initialSchedule \u003d new Schedule();","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"tchiong"},"content":"        return new ModelManager(initialContacts, userPrefs, initialSchedule);","lastModifiedDate":"2021-11-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"tchiong"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Placebook\");","lastModifiedDate":"2021-11-04"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"YaleChen299"},"content":"        logger.info(\"Starting PlaceBook \" + MainApp.VERSION);","lastModifiedDate":"2021-10-06"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"YaleChen299"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PlaceBook ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-10-06"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tchiong":23,"YaleChen299":35,"nwhloo99":21,"-":140}},{"path":"src/main/java/seedu/placebook/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.core;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":1,"-":62}},{"path":"src/main/java/seedu/placebook/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.core;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"        sb.append(\"Width : \").append(windowWidth).append(\"\\n\");","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"        sb.append(\"Height : \").append(windowHeight).append(\"\\n\");","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"        sb.append(\"Position : \").append(windowCoordinates);","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":4,"-":75}},{"path":"src/main/java/seedu/placebook/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.core;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"    private static final String LOG_FILE \u003d \"placebook.log\";","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tchiong":1,"YaleChen299":1,"-":110}},{"path":"src/main/java/seedu/placebook/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.core;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"            \"The appointment index provided is invalid\";","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"    public static final String MESSAGE_APPOINTMENTS_LISTED_OVERVIEW \u003d \"%1$d appointments listed!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"nwhloo99"},"content":"    public static final String MESSAGE_APPOINTMENTS_DUPLICATE_PERSON_ADDED \u003d \"Duplicated Person not allowed!\";","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"    public static final String MESSAGE_APPOINTMENTS_DUPLICATE_APPOINTMENT_ADDED \u003d \"Duplicated Appointment not allowed\";","lastModifiedDate":"2021-11-01"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"    public static final String MESSAGE_APPOINTMENTS_CLASHING_APPOINTMENT_ADDED \u003d","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"            \"Clashing Appointment not allowed. Clash at:\\n\";","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"    public static final String MESSAGE_APPOINTMENTS_END_TIME_BEFORE_START_TIME \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"            \"End time should be after start time\";","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":2,"Li-Lehao":2,"YaleChen299":5,"nwhloo99":1,"-":11}},{"path":"src/main/java/seedu/placebook/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.core;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":1,"-":115}},{"path":"src/main/java/seedu/placebook/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.core.index;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"YaleChen299":1,"-":53}},{"path":"src/main/java/seedu/placebook/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.exceptions;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":1,"-":10}},{"path":"src/main/java/seedu/placebook/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.exceptions;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"YaleChen299":1,"-":20}},{"path":"src/main/java/seedu/placebook/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.MainApp;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"YaleChen299":2,"-":40}},{"path":"src/main/java/seedu/placebook/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"YaleChen299":1,"-":34}},{"path":"src/main/java/seedu/placebook/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Config;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"YaleChen299":3,"-":20}},{"path":"src/main/java/seedu/placebook/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":1,"-":82}},{"path":"src/main/java/seedu/placebook/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":3,"-":140}},{"path":"src/main/java/seedu/placebook/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import java.util.List;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import java.util.function.Function;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"     * Returns the String representation of fields of the list, joined by delimiter.","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"     * @param list the list to be converted to String","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"     * @param function function to get the field of each item","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"     * @param delimiter delimiter to join the String","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"     * @param \u003cT\u003e the type of the item in the List","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"     * @return the result String","lastModifiedDate":"2021-11-02"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"YaleChen299"},"content":"    public static \u003cT\u003e String listToString(List\u003cT\u003e list, Function\u003cT, String\u003e function, String delimiter) {","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"YaleChen299"},"content":"        requireNonNull(list);","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"YaleChen299"},"content":"        requireNonNull(function);","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"YaleChen299"},"content":"        requireNonNull(delimiter);","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"YaleChen299"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-11-02"},{"lineNumber":86,"author":{"gitId":"YaleChen299"},"content":"        for (T t : list) {","lastModifiedDate":"2021-11-02"},{"lineNumber":87,"author":{"gitId":"YaleChen299"},"content":"            stringBuilder.append(function.apply(t)).append(delimiter);","lastModifiedDate":"2021-11-02"},{"lineNumber":88,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":89,"author":{"gitId":"YaleChen299"},"content":"        return stringBuilder.substring(0, Math.max(stringBuilder.length() - delimiter.length(), 0));","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":25,"-":66}},{"path":"src/main/java/seedu/placebook/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.CommandResult;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"    void setUi(Ui ui);","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"     * Returns contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"     * @see seedu.placebook.model.Model#getContacts()","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"    ReadOnlyContacts getContacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"tchiong"},"content":"     * Returns the user prefs\u0027 contacts file path.","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"    Path getContactsFilePath();","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"tchiong":6,"YaleChen299":13,"-":38}},{"path":"src/main/java/seedu/placebook/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.Command;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.CommandResult;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.logic.parser.PlacebookParser;","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.storage.Storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"    private Ui ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"    private final PlacebookParser placebookParser;","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"tchiong"},"content":"        placebookParser \u003d new PlacebookParser();","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"     * Sets the ui for logic to create new windows.","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"    public void setUi(Ui ui) {","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"        if (ui \u003d\u003d null) {","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"            logger.info(\"Ui is not given to logic for window creation!\");","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"            throw new CommandException(\"Fatal Error: Ui not given. Please restart PlaceBook again!\");","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"tchiong"},"content":"        Command command \u003d placebookParser.parseCommand(commandText);","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"        commandResult \u003d command.execute(model, ui);","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"            storage.saveContacts(model.getContacts());","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"            storage.saveSchedule(model.getSchedule());","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":75,"author":{"gitId":"tchiong"},"content":"    public ReadOnlyContacts getContacts() {","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"tchiong"},"content":"        return model.getContacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":84,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"YaleChen299"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"YaleChen299"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"tchiong"},"content":"    public Path getContactsFilePath() {","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"tchiong"},"content":"        return model.getContactsFilePath();","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"tchiong":10,"YaleChen299":32,"nwhloo99":1,"-":60}},{"path":"src/main/java/seedu/placebook/logic/commands/AddAppCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"nwhloo99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ENDDATETIME;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_INDEXES;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_STARTDATETIME;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"nwhloo99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.UniquePersonList;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.TimePeriod;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.schedule.exceptions.ClashingAppointmentsException;","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.schedule.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2021-11-01"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.model.schedule.exceptions.EndTimeBeforeStartTimeException;","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":" * Creates an appointment with an existing person in PlaceBook","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"public class AddAppCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"    public static final String COMMAND_WORD \u003d \"addApp\";","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to PlaceBook. \"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"            + PREFIX_INDEXES + \"INDEX,INDEX \"","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_STARTDATETIME + \"DATE (dd-MM-yyyy) TIME (HHmm) \"","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_ENDDATETIME + \"DATE (dd-MM-yyyy) TIME (HHmm) \"","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"            + \"\\nExample: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_INDEXES + \"1,2,3 \"","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_ADDRESS + \"Starbucks @ Raffles City \"","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_STARTDATETIME + \"01-11-2021 1400 \"","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_ENDDATETIME + \"01-11-2021 1500 \"","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_DESCRIPTION + \"discuss marketing strategies\";","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"    private final List\u003cIndex\u003e indexes;","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"    private final Address location;","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"    private final LocalDateTime startDateTime;","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"    private final LocalDateTime endDateTime;","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"    private final String description;","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"Li-Lehao"},"content":"     * Creates an AddAppCommand.","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"Li-Lehao"},"content":"     * @param indexes The indexes of the person to be met during the appointment.","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"Li-Lehao"},"content":"     * @param location The location of the appointment.","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"Li-Lehao"},"content":"     * @param startDateTime The start date and time of the appointment.","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"Li-Lehao"},"content":"     * @param endDateTime The end date and time of the appointment.","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"Li-Lehao"},"content":"     * @param description The description of the appointment.","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"Li-Lehao"},"content":"    public AddAppCommand(List\u003cIndex\u003e indexes, Address location, LocalDateTime startDateTime,","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"Li-Lehao"},"content":"                         LocalDateTime endDateTime, String description) {","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(indexes);","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(location);","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"Li-Lehao"},"content":"        requireNonNull(startDateTime);","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"Li-Lehao"},"content":"        requireNonNull(endDateTime);","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"nwhloo99"},"content":"        this.indexes \u003d indexes;","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"nwhloo99"},"content":"        this.location \u003d location;","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"Li-Lehao"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"Li-Lehao"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"nwhloo99"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"nwhloo99"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"tchiong"},"content":"        List\u003cAppointment\u003e lastShownAppList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"nwhloo99"},"content":"        UniquePersonList clients \u003d new UniquePersonList();","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"nwhloo99"},"content":"        for (Index index : indexes) {","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"nwhloo99"},"content":"            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"nwhloo99"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"nwhloo99"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"nwhloo99"},"content":"            Person client \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"nwhloo99"},"content":"            try {","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"nwhloo99"},"content":"                clients.add(client);","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"nwhloo99"},"content":"            } catch (DuplicatePersonException e) {","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"nwhloo99"},"content":"                throw new CommandException(Messages.MESSAGE_APPOINTMENTS_DUPLICATE_PERSON_ADDED);","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"nwhloo99"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":97,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointmentToAdd;","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":100,"author":{"gitId":"tchiong"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":101,"author":{"gitId":"Li-Lehao"},"content":"            TimePeriod timePeriod \u003d new TimePeriod(this.startDateTime, endDateTime);","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"Li-Lehao"},"content":"            appointmentToAdd \u003d new Appointment(clients, location, timePeriod, description);","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"Li-Lehao"},"content":"            model.addAppointment(appointmentToAdd);","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"tchiong"},"content":"        } catch (ClashingAppointmentsException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":105,"author":{"gitId":"YaleChen299"},"content":"            String clashingAppointments \u003d e.getClashingAppointmentAsString();","lastModifiedDate":"2021-11-02"},{"lineNumber":106,"author":{"gitId":"YaleChen299"},"content":"            throw new CommandException(Messages.MESSAGE_APPOINTMENTS_CLASHING_APPOINTMENT_ADDED + clashingAppointments);","lastModifiedDate":"2021-11-02"},{"lineNumber":107,"author":{"gitId":"tchiong"},"content":"        } catch (DuplicateAppointmentException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"tchiong"},"content":"            throw new CommandException(Messages.MESSAGE_APPOINTMENTS_DUPLICATE_APPOINTMENT_ADDED);","lastModifiedDate":"2021-11-01"},{"lineNumber":109,"author":{"gitId":"Li-Lehao"},"content":"        } catch (EndTimeBeforeStartTimeException e) {","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"Li-Lehao"},"content":"            throw new CommandException(Messages.MESSAGE_APPOINTMENTS_END_TIME_BEFORE_START_TIME);","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":112,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":114,"author":{"gitId":"Li-Lehao"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, appointmentToAdd));","lastModifiedDate":"2021-10-28"},{"lineNumber":115,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"nwhloo99"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"nwhloo99"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"nwhloo99"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"nwhloo99"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"nwhloo99"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"nwhloo99"},"content":"        if (!(other instanceof AddAppCommand)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"nwhloo99"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":127,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"nwhloo99"},"content":"        AddAppCommand aa \u003d (AddAppCommand) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"nwhloo99"},"content":"        return this.indexes.equals(aa.indexes)","lastModifiedDate":"2021-10-20"},{"lineNumber":131,"author":{"gitId":"nwhloo99"},"content":"                \u0026\u0026 this.location.equals(aa.location)","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"Li-Lehao"},"content":"                \u0026\u0026 this.startDateTime.equals(aa.startDateTime)","lastModifiedDate":"2021-11-03"},{"lineNumber":133,"author":{"gitId":"Li-Lehao"},"content":"                \u0026\u0026 this.endDateTime.equals(aa.endDateTime)","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"nwhloo99"},"content":"                \u0026\u0026 this.description.equals(aa.description);","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Li-Lehao":26,"tchiong":10,"YaleChen299":22,"nwhloo99":78}},{"path":"src/main/java/seedu/placebook/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":" * Adds a person to contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to contacts. \"","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"tchiong"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the Contacts\";","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":3,"Li-Lehao":1,"YaleChen299":11,"-":54}},{"path":"src/main/java/seedu/placebook/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"nwhloo99"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":" * Clears the contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Contacts has been cleared!\";","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) {","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"        model.setContact(new Contacts());","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"        model.setSchedule(new Schedule());","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":4,"Li-Lehao":1,"YaleChen299":4,"nwhloo99":2,"-":16}},{"path":"src/main/java/seedu/placebook/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"     * @param ui {@code Ui} which the logic creates windows with.","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    public abstract CommandResult execute(Model model, Ui ui) throws CommandException;","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"YaleChen299":6,"-":16}},{"path":"src/main/java/seedu/placebook/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"    /** The main window should load the filtered list again. */","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"    private final boolean undo;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean undo) {","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"Li-Lehao"},"content":"        this.undo \u003d undo;","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"        this(feedbackToUser, false, false, false);","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"    public boolean isUndo() {","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"        return undo;","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Li-Lehao":10,"YaleChen299":1,"-":68}},{"path":"src/main/java/seedu/placebook/logic/commands/DelAppCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"NecroWolf28"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"NecroWolf28"},"content":"import java.util.List;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":" * Deletes an existing appointment in the schedule","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"NecroWolf28"},"content":"public class DelAppCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":"    public static final String COMMAND_WORD \u003d \"delApp\";","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an existing appointment from PlaceBook. \"","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"NecroWolf28"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"NecroWolf28"},"content":"            + \"INDEX \"","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"NecroWolf28"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"            + \"4\";","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Appointment deleted: %1$s\";","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_NO_APPOINTMENT_DELETED \u003d \"No appointment deleted.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_WARNING \u003d \"You are about to delete:\\n\";","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"NecroWolf28"},"content":"    private final Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"NecroWolf28"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"NecroWolf28"},"content":"     * Creates an DelAppCommand","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"NecroWolf28"},"content":"     * @param index The index of the appointment to be deleted","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"NecroWolf28"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"NecroWolf28"},"content":"    public DelAppCommand(Index index) {","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"NecroWolf28"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"NecroWolf28"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"NecroWolf28"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"NecroWolf28"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"NecroWolf28"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"NecroWolf28"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"NecroWolf28"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"NecroWolf28"},"content":"        Appointment appointmentToDelete \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"NecroWolf28"},"content":"        String deleteWarning \u003d MESSAGE_DELETE_APPOINTMENT_WARNING + appointmentToDelete;","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"        if (ui.showDeleteDialogAndWait(deleteWarning)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"NecroWolf28"},"content":"            model.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"Li-Lehao"},"content":"            model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"NecroWolf28"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, appointmentToDelete));","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"NecroWolf28"},"content":"            return new CommandResult(MESSAGE_NO_APPOINTMENT_DELETED);","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"NecroWolf28"},"content":"    @Override","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"NecroWolf28"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"NecroWolf28"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"NecroWolf28"},"content":"                || (other instanceof DelAppCommand // instanceof handles nulls","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"NecroWolf28"},"content":"                \u0026\u0026 index.equals(((DelAppCommand) other).index)); // state check","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Li-Lehao":1,"YaleChen299":12,"NecroWolf28":60}},{"path":"src/main/java/seedu/placebook/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":" * Deletes a person identified using it\u0027s displayed index from contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_NO_PERSON_DELETED \u003d \"No person deleted.\";","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    public static final String MESSAGE_DELETE_PERSON_WARNING \u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"            \"The following appointments related to the client will be deleted as well:\\n\";","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"        String relatedAppointment \u003d MESSAGE_DELETE_PERSON_WARNING","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"Li-Lehao"},"content":"                + model.getAppointmentsThatOnlyHaveThisClientAsString(personToDelete);","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"        if (ui.showDeleteDialogAndWait(relatedAppointment)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"            model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"NecroWolf28"},"content":"            return new CommandResult(MESSAGE_NO_PERSON_DELETED);","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":1,"Li-Lehao":2,"YaleChen299":16,"-":45,"NecroWolf28":3}},{"path":"src/main/java/seedu/placebook/logic/commands/EditAppCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"NecroWolf28"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ENDDATETIME;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_STARTDATETIME;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"NecroWolf28"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"NecroWolf28"},"content":"import java.util.List;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.UniquePersonList;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.TimePeriod;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.model.schedule.exceptions.EndTimeBeforeStartTimeException;","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"public class EditAppCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"    public static final String COMMAND_WORD \u003d \"editApp\";","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the appointment identified \"","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"            + \"by the index number used in the displayed appointment list. \"","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"NecroWolf28"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"NecroWolf28"},"content":"            + \"[\" + PREFIX_STARTDATETIME + \"DATE (dd-MM-yyyy) TIME (HHmm) ] \"","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"NecroWolf28"},"content":"            + \"[\" + PREFIX_ENDDATETIME + \"DATE (dd-MM-yyyy) TIME (HHmm) ] \"","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"NecroWolf28"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \"","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"NecroWolf28"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"NecroWolf28"},"content":"            + PREFIX_ADDRESS + \"Starbucks @ Raffles City \"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_STARTDATETIME + \"14-12-2021 1600\"","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"            + PREFIX_ENDDATETIME + \"14-12-2021 1800\"","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"NecroWolf28"},"content":"            + PREFIX_DESCRIPTION + \"discuss marketing strategies\";","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Edited Appointment: %1$s\";","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_CLASHING_TIMINGS \u003d \"This appointment clashes with another appointment!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_END_BEFORE_START \u003d \"End time must be after Start time!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"NecroWolf28"},"content":"    private final Index index;","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"NecroWolf28"},"content":"    private final EditAppCommand.EditAppDescriptor editAppDescriptor;","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"NecroWolf28"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"NecroWolf28"},"content":"     * @param index of the appointment in the filtered appointment list to edit","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"NecroWolf28"},"content":"     * @param editAppDescriptor details to edit the appointment with","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"NecroWolf28"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"NecroWolf28"},"content":"    public EditAppCommand(Index index, EditAppCommand.EditAppDescriptor editAppDescriptor) {","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"NecroWolf28"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"NecroWolf28"},"content":"        requireNonNull(editAppDescriptor);","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"NecroWolf28"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"NecroWolf28"},"content":"        this.editAppDescriptor \u003d new EditAppCommand.EditAppDescriptor(editAppDescriptor);","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"NecroWolf28"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"NecroWolf28"},"content":"    public CommandResult execute(Model model, Ui ui) throws CommandException, EndTimeBeforeStartTimeException {","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"NecroWolf28"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"NecroWolf28"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"NecroWolf28"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"NecroWolf28"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-29"},{"lineNumber":71,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"NecroWolf28"},"content":"        Appointment appointmentToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-29"},{"lineNumber":74,"author":{"gitId":"NecroWolf28"},"content":"        Appointment editedAppointment \u003d createEditedAppointment(appointmentToEdit, editAppDescriptor);","lastModifiedDate":"2021-10-29"},{"lineNumber":75,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":76,"author":{"gitId":"NecroWolf28"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"NecroWolf28"},"content":"            TimePeriod testTimePeriod \u003d new TimePeriod(editedAppointment.getStart(), editedAppointment.getEnd());","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"NecroWolf28"},"content":"        } catch (EndTimeBeforeStartTimeException e) {","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"NecroWolf28"},"content":"            throw new CommandException(MESSAGE_END_BEFORE_START);","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"NecroWolf28"},"content":"        List\u003cAppointment\u003e clashingAppointmentsList \u003d model.getClashingAppointments(editedAppointment);","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"NecroWolf28"},"content":"        clashingAppointmentsList.remove(appointmentToEdit);","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"NecroWolf28"},"content":"        // If clashing appointment list is not empty","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"NecroWolf28"},"content":"        if (!clashingAppointmentsList.isEmpty()) {","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"NecroWolf28"},"content":"            StringBuilder clashingAppointmentsString \u003d new StringBuilder();","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"NecroWolf28"},"content":"            for (Appointment app : clashingAppointmentsList) {","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"NecroWolf28"},"content":"                clashingAppointmentsString.append(app + \"\\n\");","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"Li-Lehao"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"NecroWolf28"},"content":"            throw new CommandException(MESSAGE_CLASHING_TIMINGS","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"NecroWolf28"},"content":"                    + \u0027\\n\u0027 + clashingAppointmentsString);","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":97,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":98,"author":{"gitId":"NecroWolf28"},"content":"        model.setAppointment(appointmentToEdit, editedAppointment);","lastModifiedDate":"2021-10-29"},{"lineNumber":99,"author":{"gitId":"NecroWolf28"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-29"},{"lineNumber":100,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":101,"author":{"gitId":"NecroWolf28"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedAppointment));","lastModifiedDate":"2021-10-29"},{"lineNumber":102,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":103,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"NecroWolf28"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":105,"author":{"gitId":"NecroWolf28"},"content":"     * Creates and returns an {@code Appointment} with the details of {@code appointmentToEdit}","lastModifiedDate":"2021-10-29"},{"lineNumber":106,"author":{"gitId":"NecroWolf28"},"content":"     * edited with {@code editAppDescriptor}.","lastModifiedDate":"2021-10-29"},{"lineNumber":107,"author":{"gitId":"NecroWolf28"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":108,"author":{"gitId":"NecroWolf28"},"content":"    private static Appointment createEditedAppointment(Appointment appointmentToEdit,","lastModifiedDate":"2021-10-29"},{"lineNumber":109,"author":{"gitId":"NecroWolf28"},"content":"                                                       EditAppDescriptor editAppDescriptor)","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"NecroWolf28"},"content":"            throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"NecroWolf28"},"content":"        assert appointmentToEdit !\u003d null;","lastModifiedDate":"2021-10-29"},{"lineNumber":112,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":113,"author":{"gitId":"NecroWolf28"},"content":"        UniquePersonList clients \u003d appointmentToEdit.getClients();","lastModifiedDate":"2021-10-29"},{"lineNumber":114,"author":{"gitId":"NecroWolf28"},"content":"        Address updatedLocation \u003d editAppDescriptor.getLocation().orElse(appointmentToEdit.getLocation());","lastModifiedDate":"2021-10-29"},{"lineNumber":115,"author":{"gitId":"NecroWolf28"},"content":"        LocalDateTime updatedStart \u003d editAppDescriptor.getStart().orElse(appointmentToEdit.getStart());","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"NecroWolf28"},"content":"        LocalDateTime updatedEnd \u003d editAppDescriptor.getEnd().orElse(appointmentToEdit.getEnd());","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"NecroWolf28"},"content":"        String updatedDescription \u003d editAppDescriptor.getDescription().orElse(appointmentToEdit.getDescription());","lastModifiedDate":"2021-10-29"},{"lineNumber":118,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":119,"author":{"gitId":"NecroWolf28"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"NecroWolf28"},"content":"            new TimePeriod(updatedStart, updatedEnd);","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"NecroWolf28"},"content":"        } catch (EndTimeBeforeStartTimeException e) {","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"NecroWolf28"},"content":"            throw new CommandException(MESSAGE_END_BEFORE_START);","lastModifiedDate":"2021-11-03"},{"lineNumber":123,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":124,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":125,"author":{"gitId":"NecroWolf28"},"content":"        TimePeriod updatedTimePeriod \u003d new TimePeriod(updatedStart, updatedEnd);","lastModifiedDate":"2021-11-03"},{"lineNumber":126,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":127,"author":{"gitId":"NecroWolf28"},"content":"        return new Appointment(clients, updatedLocation, updatedTimePeriod, updatedDescription);","lastModifiedDate":"2021-10-29"},{"lineNumber":128,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"NecroWolf28"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"NecroWolf28"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"NecroWolf28"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"NecroWolf28"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"NecroWolf28"},"content":"            return true;","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"NecroWolf28"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"NecroWolf28"},"content":"        if (!(other instanceof EditAppCommand)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"NecroWolf28"},"content":"            return false;","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"NecroWolf28"},"content":"        // state check","lastModifiedDate":"2021-10-29"},{"lineNumber":143,"author":{"gitId":"NecroWolf28"},"content":"        EditAppCommand e \u003d (EditAppCommand) other;","lastModifiedDate":"2021-10-29"},{"lineNumber":144,"author":{"gitId":"NecroWolf28"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-29"},{"lineNumber":145,"author":{"gitId":"NecroWolf28"},"content":"                \u0026\u0026 editAppDescriptor.equals(e.editAppDescriptor);","lastModifiedDate":"2021-10-29"},{"lineNumber":146,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":147,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":148,"author":{"gitId":"NecroWolf28"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":149,"author":{"gitId":"NecroWolf28"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will replace the","lastModifiedDate":"2021-10-29"},{"lineNumber":150,"author":{"gitId":"NecroWolf28"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2021-10-29"},{"lineNumber":151,"author":{"gitId":"NecroWolf28"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":152,"author":{"gitId":"NecroWolf28"},"content":"    public static class EditAppDescriptor {","lastModifiedDate":"2021-10-29"},{"lineNumber":153,"author":{"gitId":"NecroWolf28"},"content":"        private UniquePersonList clients;","lastModifiedDate":"2021-10-29"},{"lineNumber":154,"author":{"gitId":"NecroWolf28"},"content":"        private Address location;","lastModifiedDate":"2021-10-29"},{"lineNumber":155,"author":{"gitId":"NecroWolf28"},"content":"        private LocalDateTime start;","lastModifiedDate":"2021-11-03"},{"lineNumber":156,"author":{"gitId":"NecroWolf28"},"content":"        private LocalDateTime end;","lastModifiedDate":"2021-11-03"},{"lineNumber":157,"author":{"gitId":"NecroWolf28"},"content":"        private String description;","lastModifiedDate":"2021-10-29"},{"lineNumber":158,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":159,"author":{"gitId":"NecroWolf28"},"content":"        public EditAppDescriptor() {}","lastModifiedDate":"2021-10-29"},{"lineNumber":160,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":161,"author":{"gitId":"NecroWolf28"},"content":"        /**","lastModifiedDate":"2021-10-29"},{"lineNumber":162,"author":{"gitId":"NecroWolf28"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-29"},{"lineNumber":163,"author":{"gitId":"NecroWolf28"},"content":"         */","lastModifiedDate":"2021-10-29"},{"lineNumber":164,"author":{"gitId":"NecroWolf28"},"content":"        public EditAppDescriptor(EditAppCommand.EditAppDescriptor toCopy) {","lastModifiedDate":"2021-10-29"},{"lineNumber":165,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":166,"author":{"gitId":"NecroWolf28"},"content":"            setClients(toCopy.clients);","lastModifiedDate":"2021-10-29"},{"lineNumber":167,"author":{"gitId":"NecroWolf28"},"content":"            setLocation(toCopy.location);","lastModifiedDate":"2021-10-29"},{"lineNumber":168,"author":{"gitId":"NecroWolf28"},"content":"            setStart(toCopy.start);","lastModifiedDate":"2021-11-03"},{"lineNumber":169,"author":{"gitId":"NecroWolf28"},"content":"            setEnd(toCopy.end);","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"NecroWolf28"},"content":"            setDescription(toCopy.description);","lastModifiedDate":"2021-10-29"},{"lineNumber":171,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":172,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":173,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":174,"author":{"gitId":"NecroWolf28"},"content":"        /**","lastModifiedDate":"2021-10-29"},{"lineNumber":175,"author":{"gitId":"NecroWolf28"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-10-29"},{"lineNumber":176,"author":{"gitId":"NecroWolf28"},"content":"         */","lastModifiedDate":"2021-10-29"},{"lineNumber":177,"author":{"gitId":"NecroWolf28"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-10-29"},{"lineNumber":178,"author":{"gitId":"NecroWolf28"},"content":"            return CollectionUtil","lastModifiedDate":"2021-10-29"},{"lineNumber":179,"author":{"gitId":"NecroWolf28"},"content":"                    .isAnyNonNull(location, start, end, description);","lastModifiedDate":"2021-11-03"},{"lineNumber":180,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":181,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":182,"author":{"gitId":"NecroWolf28"},"content":"        public void setClients(UniquePersonList clients) {","lastModifiedDate":"2021-10-29"},{"lineNumber":183,"author":{"gitId":"NecroWolf28"},"content":"            this.clients \u003d clients;","lastModifiedDate":"2021-10-29"},{"lineNumber":184,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":185,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":186,"author":{"gitId":"NecroWolf28"},"content":"        public UniquePersonList getClients() {","lastModifiedDate":"2021-10-29"},{"lineNumber":187,"author":{"gitId":"NecroWolf28"},"content":"            return clients;","lastModifiedDate":"2021-10-29"},{"lineNumber":188,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":189,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":190,"author":{"gitId":"NecroWolf28"},"content":"        public void setLocation(Address location) {","lastModifiedDate":"2021-10-29"},{"lineNumber":191,"author":{"gitId":"NecroWolf28"},"content":"            this.location \u003d location;","lastModifiedDate":"2021-10-29"},{"lineNumber":192,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":193,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":194,"author":{"gitId":"NecroWolf28"},"content":"        public Optional\u003cAddress\u003e getLocation() {","lastModifiedDate":"2021-10-29"},{"lineNumber":195,"author":{"gitId":"NecroWolf28"},"content":"            return Optional.ofNullable(location);","lastModifiedDate":"2021-10-29"},{"lineNumber":196,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":197,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":198,"author":{"gitId":"NecroWolf28"},"content":"        public void setStart(LocalDateTime start) {","lastModifiedDate":"2021-11-03"},{"lineNumber":199,"author":{"gitId":"NecroWolf28"},"content":"            this.start \u003d start;","lastModifiedDate":"2021-11-03"},{"lineNumber":200,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":201,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":202,"author":{"gitId":"NecroWolf28"},"content":"        public Optional\u003cLocalDateTime\u003e getStart() {","lastModifiedDate":"2021-11-03"},{"lineNumber":203,"author":{"gitId":"NecroWolf28"},"content":"            return Optional.ofNullable(start);","lastModifiedDate":"2021-11-03"},{"lineNumber":204,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":205,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":206,"author":{"gitId":"NecroWolf28"},"content":"        public void setEnd(LocalDateTime end) {","lastModifiedDate":"2021-11-03"},{"lineNumber":207,"author":{"gitId":"NecroWolf28"},"content":"            this.end \u003d end;","lastModifiedDate":"2021-11-03"},{"lineNumber":208,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":209,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":210,"author":{"gitId":"NecroWolf28"},"content":"        public Optional\u003cLocalDateTime\u003e getEnd() {","lastModifiedDate":"2021-11-03"},{"lineNumber":211,"author":{"gitId":"NecroWolf28"},"content":"            return Optional.ofNullable(end);","lastModifiedDate":"2021-11-03"},{"lineNumber":212,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":213,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":214,"author":{"gitId":"NecroWolf28"},"content":"        public void setDescription(String description) {","lastModifiedDate":"2021-10-29"},{"lineNumber":215,"author":{"gitId":"NecroWolf28"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-10-29"},{"lineNumber":216,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":217,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":218,"author":{"gitId":"NecroWolf28"},"content":"        public Optional\u003cString\u003e getDescription() {","lastModifiedDate":"2021-10-29"},{"lineNumber":219,"author":{"gitId":"NecroWolf28"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2021-10-29"},{"lineNumber":220,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":221,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":222,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":223,"author":{"gitId":"NecroWolf28"},"content":"        @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":224,"author":{"gitId":"NecroWolf28"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-29"},{"lineNumber":225,"author":{"gitId":"NecroWolf28"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-29"},{"lineNumber":226,"author":{"gitId":"NecroWolf28"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-29"},{"lineNumber":227,"author":{"gitId":"NecroWolf28"},"content":"                return true;","lastModifiedDate":"2021-10-29"},{"lineNumber":228,"author":{"gitId":"NecroWolf28"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":229,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":230,"author":{"gitId":"NecroWolf28"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-29"},{"lineNumber":231,"author":{"gitId":"NecroWolf28"},"content":"            if (!(other instanceof EditAppCommand.EditAppDescriptor)) {","lastModifiedDate":"2021-10-29"},{"lineNumber":232,"author":{"gitId":"NecroWolf28"},"content":"                return false;","lastModifiedDate":"2021-10-29"},{"lineNumber":233,"author":{"gitId":"NecroWolf28"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":234,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":235,"author":{"gitId":"NecroWolf28"},"content":"            // state check","lastModifiedDate":"2021-10-29"},{"lineNumber":236,"author":{"gitId":"NecroWolf28"},"content":"            EditAppCommand.EditAppDescriptor e \u003d (EditAppCommand.EditAppDescriptor) other;","lastModifiedDate":"2021-10-29"},{"lineNumber":237,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":238,"author":{"gitId":"NecroWolf28"},"content":"            return getClients().equals(e.getClients())","lastModifiedDate":"2021-10-29"},{"lineNumber":239,"author":{"gitId":"NecroWolf28"},"content":"                    \u0026\u0026 getLocation().equals(e.getLocation())","lastModifiedDate":"2021-10-29"},{"lineNumber":240,"author":{"gitId":"NecroWolf28"},"content":"                    \u0026\u0026 getStart().equals(e.getStart())","lastModifiedDate":"2021-11-03"},{"lineNumber":241,"author":{"gitId":"NecroWolf28"},"content":"                    \u0026\u0026 getEnd().equals(e.getEnd())","lastModifiedDate":"2021-11-03"},{"lineNumber":242,"author":{"gitId":"NecroWolf28"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription());","lastModifiedDate":"2021-10-29"},{"lineNumber":243,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":244,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":245,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":246,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"Li-Lehao":2,"YaleChen299":16,"nwhloo99":2,"NecroWolf28":226}},{"path":"src/main/java/seedu/placebook/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":" * Edits the details of an existing person in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"tchiong"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in contacts.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"Li-Lehao"},"content":"        model.updateEditedClientInAppointments(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);","lastModifiedDate":"2017-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":191,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":192,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":193,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"tchiong":2,"Li-Lehao":2,"YaleChen299":20,"-":205}},{"path":"src/main/java/seedu/placebook/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Placebook as requested ...\";","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) {","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"tchiong":1,"Li-Lehao":2,"YaleChen299":4,"-":14}},{"path":"src/main/java/seedu/placebook/logic/commands/FindAppCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.DescriptionContainsKeywordsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":" * Finds and lists all appointments in Placebook whose description contains any of the argument keywords.","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"public class FindAppCommand extends Command {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"    public static final String COMMAND_WORD \u003d \"findApp\";","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"            + \": Finds all appointments whose description contain any of \"","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"            + \"Example: \" + COMMAND_WORD + \" meeting\";","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"    private final DescriptionContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"    public FindAppCommand(DescriptionContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) {","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"        model.updateFilteredAppointmentList(predicate);","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"        return new CommandResult(","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"                String.format(Messages.MESSAGE_APPOINTMENTS_LISTED_OVERVIEW,","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"                        model.getFilteredAppointmentList().size()));","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"                || (other instanceof FindAppCommand // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"                \u0026\u0026 predicate.equals(((FindAppCommand) other).predicate)); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"tchiong":1,"Li-Lehao":1,"YaleChen299":44}},{"path":"src/main/java/seedu/placebook/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":" * Finds and lists all persons in Placebook whose name contains any of the argument keywords.","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) {","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"tchiong":1,"Li-Lehao":1,"YaleChen299":6,"-":36}},{"path":"src/main/java/seedu/placebook/logic/commands/FindTagsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"NecroWolf28"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.PersonHasTagsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"NecroWolf28"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":" * Finds and lists all persons in Placebook whose name contains any of the argument keywords.","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"public class FindTagsCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":"    public static final String COMMAND_WORD \u003d \"findTags\";","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"NecroWolf28"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose tags contain any of \"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"NecroWolf28"},"content":"            + \"Example: \" + COMMAND_WORD + \" CompanyA HR Married\";","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"NecroWolf28"},"content":"    private final PersonHasTagsPredicate predicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"    public FindTagsCommand(PersonHasTagsPredicate predicate) {","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) {","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"        return new CommandResult(","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"NecroWolf28"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"NecroWolf28"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"NecroWolf28"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"NecroWolf28"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"NecroWolf28"},"content":"                || (other instanceof FindTagsCommand // instanceof handles nulls","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"NecroWolf28"},"content":"                \u0026\u0026 predicate.equals(((FindTagsCommand) other).predicate)); // state check","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"tchiong":1,"Li-Lehao":1,"YaleChen299":6,"NecroWolf28":36}},{"path":"src/main/java/seedu/placebook/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) {","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Li-Lehao":2,"YaleChen299":4,"-":17}},{"path":"src/main/java/seedu/placebook/logic/commands/ListAppCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"Li-Lehao"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":" * List all appointments in PlaceBook to the user.","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"public class ListAppCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":"    public static final String COMMAND_WORD \u003d \"listApp\";","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all Appointments\";","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"    private final String sortBy;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"    public ListAppCommand(String sortBy) {","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"        this.sortBy \u003d sortBy;","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) {","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"        model.sortFilteredAppointmentList(sortBy);","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"Li-Lehao"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"                || (other instanceof ListAppCommand // instanceof handles nulls","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"                \u0026\u0026 sortBy.equals(((ListAppCommand) other).sortBy)); // state check","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Li-Lehao":17,"tchiong":9,"YaleChen299":12}},{"path":"src/main/java/seedu/placebook/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":" * Lists all persons in the contacts to the user.","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) {","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"        model.updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":1,"Li-Lehao":1,"YaleChen299":5,"-":19}},{"path":"src/main/java/seedu/placebook/logic/commands/UndoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.historystates.exceptions.NoHistoryStatesException;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":"public class UndoCommand extends Command {","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"Li-Lehao"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success\";","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Cannot undo: No history states\";","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"    public CommandResult execute(Model model, Ui ui) throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"        try {","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"            model.undo();","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"        } catch (NoHistoryStatesException e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"            throw new CommandException(MESSAGE_FAILURE);","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false, true);","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"Li-Lehao":15,"YaleChen299":8}},{"path":"src/main/java/seedu/placebook/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands.exceptions;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"YaleChen299":1,"-":16}},{"path":"src/main/java/seedu/placebook/logic/parser/AddAppCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ENDDATETIME;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_INDEXES;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_STARTDATETIME;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"nwhloo99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"nwhloo99"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.AddAppCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"public class AddAppCommandParser implements Parser\u003cAddAppCommand\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"nwhloo99"},"content":"    public AddAppCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"tchiong"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_INDEXES, PREFIX_ADDRESS, PREFIX_STARTDATETIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"                        PREFIX_ENDDATETIME, PREFIX_DESCRIPTION);","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_INDEXES, PREFIX_ADDRESS, PREFIX_STARTDATETIME, PREFIX_ENDDATETIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"                PREFIX_DESCRIPTION)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"        List\u003cIndex\u003e indexes \u003d ParserUtil.parseIndexes(argMultimap.getValue(PREFIX_INDEXES).get());","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"        LocalDateTime startDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_STARTDATETIME).get());","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"        LocalDateTime endDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_ENDDATETIME).get());","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"        String description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"        return new AddAppCommand(indexes, address, startDateTime, endDateTime, description);","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"tchiong":6,"Li-Lehao":1,"YaleChen299":11,"nwhloo99":30}},{"path":"src/main/java/seedu/placebook/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.AddCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"     * and returns an AddCommand object for execution","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"     * @return AddCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"tchiong":3,"YaleChen299":15,"-":43}},{"path":"src/main/java/seedu/placebook/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"YaleChen299":1,"-":59}},{"path":"src/main/java/seedu/placebook/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"YaleChen299":1,"-":147}},{"path":"src/main/java/seedu/placebook/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"    public static final Prefix PREFIX_STARTDATETIME \u003d new Prefix(\"start/\");","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"    public static final Prefix PREFIX_ENDDATETIME \u003d new Prefix(\"end/\");","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"nwhloo99"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"ds/\");","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"nwhloo99"},"content":"    public static final Prefix PREFIX_INDEXES \u003d new Prefix(\"id/\");","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"tchiong":2,"YaleChen299":1,"nwhloo99":2,"-":14}},{"path":"src/main/java/seedu/placebook/logic/parser/DelAppCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.DelAppCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"/**","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":" * Parses input arguments and creates a new DelAppCommand object","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":" */","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":"public class DelAppCommandParser implements Parser\u003cDelAppCommand\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"     * Parses the given {@code String} of arguments in the context of the DelAppCommand","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"     * and returns a DelAppCommand object for execution.","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"     * @return DelAppCommand","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"NecroWolf28"},"content":"    public DelAppCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"NecroWolf28"},"content":"        Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"            index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelAppCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"        return new DelAppCommand(index);","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"tchiong":9,"YaleChen299":5,"NecroWolf28":20}},{"path":"src/main/java/seedu/placebook/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.DeleteCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"     * @return DeleteCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"tchiong":2,"YaleChen299":5,"-":23}},{"path":"src/main/java/seedu/placebook/logic/parser/EditAppCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ENDDATETIME;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_STARTDATETIME;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditAppCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.model.schedule.exceptions.EndTimeBeforeStartTimeException;","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":" * Parses input arguments and creates a new EditAppCommand object","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"NecroWolf28"},"content":"public class EditAppCommandParser implements Parser\u003cEditAppCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"    public EditAppCommand parse(String args) throws ParseException, EndTimeBeforeStartTimeException {","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"NecroWolf28"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"NecroWolf28"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_ADDRESS, PREFIX_STARTDATETIME,","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"                        PREFIX_ENDDATETIME, PREFIX_DESCRIPTION);","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"        Index index;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"        try {","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"NecroWolf28"},"content":"        EditAppCommand.EditAppDescriptor editAppDescriptor \u003d new EditAppCommand.EditAppDescriptor();","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"NecroWolf28"},"content":"            editAppDescriptor.setLocation(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"NecroWolf28"},"content":"        if (argMultimap.getValue(PREFIX_STARTDATETIME).isPresent()) {","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"NecroWolf28"},"content":"            editAppDescriptor.setStart(ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_STARTDATETIME).get()));","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"NecroWolf28"},"content":"        if (argMultimap.getValue(PREFIX_ENDDATETIME).isPresent()) {","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"NecroWolf28"},"content":"            editAppDescriptor.setEnd(ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_ENDDATETIME).get()));","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"NecroWolf28"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"NecroWolf28"},"content":"            editAppDescriptor.setDescription(ParserUtil","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"NecroWolf28"},"content":"                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"NecroWolf28"},"content":"        if (!editAppDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"NecroWolf28"},"content":"            throw new ParseException(EditAppCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"NecroWolf28"},"content":"        return new EditAppCommand(index, editAppDescriptor);","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"YaleChen299":9,"nwhloo99":1,"NecroWolf28":45}},{"path":"src/main/java/seedu/placebook/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"     * @return EditCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"tchiong":2,"YaleChen299":12,"-":69}},{"path":"src/main/java/seedu/placebook/logic/parser/FindAppCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.FindAppCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.DescriptionContainsKeywordsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":" * Parses input arguments and creates a new FindAppCommand object","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"public class FindAppCommandParser implements Parser\u003cFindAppCommand\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"     * Parses the given {@code String} of arguments in the context of the FindAppCommand","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"     * and returns a FindAppCommand object for execution.","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"     * @return FindAppCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"    public FindAppCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAppCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"        return new FindAppCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"tchiong":2,"YaleChen299":32}},{"path":"src/main/java/seedu/placebook/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.FindCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"     * @return FindCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"tchiong":1,"YaleChen299":6,"-":27}},{"path":"src/main/java/seedu/placebook/logic/parser/FindTagsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"NecroWolf28"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.FindTagsCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.PersonHasTagsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"NecroWolf28"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":" * Parses input arguments and creates a new FindTagsCommand object","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"public class FindTagsCommandParser implements Parser\u003cFindTagsCommand\u003e {","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"NecroWolf28"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTagsCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"NecroWolf28"},"content":"     * and returns a FindTagsCommand object for execution.","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":"     * @return FindTagsCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"NecroWolf28"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"NecroWolf28"},"content":"    public FindTagsCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"NecroWolf28"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"NecroWolf28"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagsCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"        String[] tagsKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"        return new FindTagsCommand(new PersonHasTagsPredicate(Arrays.asList(tagsKeywords)));","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"YaleChen299":5,"NecroWolf28":29}},{"path":"src/main/java/seedu/placebook/logic/parser/ListAppCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.ListAppCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":" * Parses input arguments and creates a new FindAppCommand object","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"public class ListAppCommandParser implements Parser\u003cListAppCommand\u003e {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":"     * Parses the given {@code String} of arguments in the context of the FindAppCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"     * and returns a FindAppCommand object for execution.","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"     * @return ListAppCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"    public ListAppCommand parse (String args) throws ParseException {","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"        String sortBy \u003d args.trim();","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"        return new ListAppCommand(sortBy);","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"tchiong":20,"YaleChen299":3}},{"path":"src/main/java/seedu/placebook/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.Command;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"     * @return Command","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"     * @throws ParseException if {@code userInput} does not conform to the expected format","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"tchiong":1,"YaleChen299":4,"-":12}},{"path":"src/main/java/seedu/placebook/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"nwhloo99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"nwhloo99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.StringUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"            + \"Please note that index should be less than 2^31.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"     * Parses {@code oneBasedIndexes} into a {@code List\u003cIndex\u003e} and returns it.","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"     * @throws ParseException if the any index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws ParseException {","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"        String trimmedIndexes \u003d oneBasedIndexes.trim();","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"        String[] indexesArray \u003d trimmedIndexes.split(\",\");","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"nwhloo99"},"content":"        List\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"        for (String oneBasedIndex : indexesArray) {","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"nwhloo99"},"content":"            indexes.add(parseIndex(oneBasedIndex));","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"nwhloo99"},"content":"        return indexes;","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":147,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":149,"author":{"gitId":"nwhloo99"},"content":"     * Parses a {@code String date} into a {@Code LocalDate}","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"nwhloo99"},"content":"     * Leading and trailing whitespaces will be removed.","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"nwhloo99"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"nwhloo99"},"content":"     * @throws ParseException if the given {@Code LocalDate} is invalid","lastModifiedDate":"2021-10-07"},{"lineNumber":153,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":154,"author":{"gitId":"nwhloo99"},"content":"    public static LocalDate parseDate(String date) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"nwhloo99"},"content":"        String trimmedDate \u003d date.trim();","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"nwhloo99"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"nwhloo99"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"nwhloo99"},"content":"            return LocalDate.parse(trimmedDate, formatter);","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"nwhloo99"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-07"},{"lineNumber":161,"author":{"gitId":"nwhloo99"},"content":"            throw new ParseException(\"Date format should be dd-MM-yyyy\");","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"nwhloo99"},"content":"     * Parses a {@code String time} into a {@Code LocalTime}","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"nwhloo99"},"content":"     * Leading and trailing whitespaces will be removed.","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"nwhloo99"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"nwhloo99"},"content":"     * @throws ParseException if the given {@Code LocalTime} is invalid","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"nwhloo99"},"content":"    public static LocalTime parseTime(String time) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(time);","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"nwhloo99"},"content":"        String trimmedTime \u003d time.trim();","lastModifiedDate":"2021-10-07"},{"lineNumber":174,"author":{"gitId":"nwhloo99"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"nwhloo99"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"nwhloo99"},"content":"            return LocalTime.parse(trimmedTime, formatter);","lastModifiedDate":"2021-10-07"},{"lineNumber":177,"author":{"gitId":"nwhloo99"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-07"},{"lineNumber":178,"author":{"gitId":"nwhloo99"},"content":"            throw new ParseException(\"Time format should be HHMM\");","lastModifiedDate":"2021-10-07"},{"lineNumber":179,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":180,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":181,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":182,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"tchiong"},"content":"     * Parses a {@code String time} into a {@Code LocalTime}","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"tchiong"},"content":"     * Leading and trailing whitespaces will be removed.","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"tchiong"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"tchiong"},"content":"     * @throws ParseException if the given {@Code LocalTime} is invalid","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"tchiong"},"content":"    public static LocalDateTime parseDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"tchiong"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"tchiong"},"content":"        String trimmedDateTime \u003d dateTime.trim();","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"nwhloo99"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"tchiong"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"tchiong"},"content":"            return LocalDateTime.parse(trimmedDateTime, formatter);","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"tchiong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":195,"author":{"gitId":"tchiong"},"content":"            throw new ParseException(\"DateTime format should be \\\"dd-MM-yyyy HHmm\\\".\"","lastModifiedDate":"2021-11-01"},{"lineNumber":196,"author":{"gitId":"tchiong"},"content":"                    + \" Don\u0027t forget that there are only 12 months in a year!\");","lastModifiedDate":"2021-11-01"},{"lineNumber":197,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":198,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":201,"author":{"gitId":"nwhloo99"},"content":"     * Parses a {@code String description} by removing leading and trailing whitespaces.","lastModifiedDate":"2021-10-07"},{"lineNumber":202,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":203,"author":{"gitId":"nwhloo99"},"content":"    public static String parseDescription(String description) {","lastModifiedDate":"2021-10-07"},{"lineNumber":204,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-10-07"},{"lineNumber":205,"author":{"gitId":"nwhloo99"},"content":"        String trimmedDescription \u003d description.trim();","lastModifiedDate":"2021-10-07"},{"lineNumber":206,"author":{"gitId":"nwhloo99"},"content":"        return trimmedDescription;","lastModifiedDate":"2021-10-07"},{"lineNumber":207,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"tchiong":18,"YaleChen299":11,"nwhloo99":65,"-":114}},{"path":"src/main/java/seedu/placebook/logic/parser/PlacebookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.AddAppCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.AddCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.Command;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.DelAppCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.DeleteCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditAppCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.FindAppCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.FindCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.FindTagsCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.ListAppCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.ListCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.UndoCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"public class PlacebookParser {","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":78,"author":{"gitId":"nwhloo99"},"content":"        case AddAppCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"nwhloo99"},"content":"            return new AddAppCommandParser().parse(arguments);","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"NecroWolf28"},"content":"        case DelAppCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"NecroWolf28"},"content":"            return new DelAppCommandParser().parse(arguments);","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"NecroWolf28"},"content":"        case EditAppCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"NecroWolf28"},"content":"            return new EditAppCommandParser().parse(arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"Li-Lehao"},"content":"        case ListAppCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"tchiong"},"content":"            return new ListAppCommandParser().parse(arguments);","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"YaleChen299"},"content":"        case FindAppCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"YaleChen299"},"content":"            return new FindAppCommandParser().parse(arguments);","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"NecroWolf28"},"content":"        case FindTagsCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"NecroWolf28"},"content":"            return new FindTagsCommandParser().parse(arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"Li-Lehao"},"content":"        case UndoCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-29"},{"lineNumber":97,"author":{"gitId":"Li-Lehao"},"content":"            return new UndoCommand();","lastModifiedDate":"2021-10-29"},{"lineNumber":98,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":2,"Li-Lehao":5,"YaleChen299":24,"nwhloo99":3,"-":61,"NecroWolf28":9}},{"path":"src/main/java/seedu/placebook/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"YaleChen299":1,"-":38}},{"path":"src/main/java/seedu/placebook/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser.exceptions;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"        super(message + \"\\n\" + cause.getMessage(), cause);","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"YaleChen299":3,"-":14}},{"path":"src/main/java/seedu/placebook/model/Contacts.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.UniquePersonList;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":" * Wraps all data at the Placebook level","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"public class Contacts implements ReadOnlyContacts {","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"    public Contacts() {}","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"     * Creates a Contacts using the Persons in the {@code toBeCopied}","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"tchiong"},"content":"    public Contacts(ReadOnlyContacts toBeCopied) {","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"tchiong"},"content":"     * Resets the existing data of this {@code contacts} with {@code newData}.","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"tchiong"},"content":"    public void resetData(ReadOnlyContacts newData) {","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"tchiong"},"content":"     * Returns true if a person with the same identity as {@code person} exists in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"tchiong"},"content":"     * Adds a person to contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"tchiong"},"content":"     * The person must not already exist in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"tchiong"},"content":"     * {@code target} must exist in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"tchiong"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":90,"author":{"gitId":"tchiong"},"content":"     * Removes {@code key} from this {@code contacts}.","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"tchiong"},"content":"     * {@code key} must exist in the contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"tchiong"},"content":"                || (other instanceof Contacts // instanceof handles nulls","lastModifiedDate":"2021-11-04"},{"lineNumber":114,"author":{"gitId":"tchiong"},"content":"                \u0026\u0026 persons.equals(((Contacts) other).persons));","lastModifiedDate":"2021-11-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tchiong":15,"YaleChen299":3,"nwhloo99":1,"-":101,"NecroWolf28":1}},{"path":"src/main/java/seedu/placebook/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"import java.util.List;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.historystates.exceptions.NoHistoryStatesException;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"tchiong"},"content":"     * Returns the user prefs\u0027 contacts file path.","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"    Path getContactsFilePath();","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"tchiong"},"content":"     * Sets the user prefs\u0027 contacts file path.","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"tchiong"},"content":"    void setContactsFilePath(Path contactsFilePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"tchiong"},"content":"     * Replaces PlaceBook data with the data in {@code contacts}.","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"    void setContact(ReadOnlyContacts contacts);","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"tchiong"},"content":"    /** Returns contacts */","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"    ReadOnlyContacts getContacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"     * Replaces PlaceBook schedule data with the data in {@code schedule}.","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"    void setSchedule(ReadOnlySchedule schedule);","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"    /** Returns the Schedule */","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"nwhloo99"},"content":"    ReadOnlySchedule getSchedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"NecroWolf28"},"content":"     * Returns true if a person with the same identity as {@code person} exists in PlaceBook.","lastModifiedDate":"2021-10-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"NecroWolf28"},"content":"     * The person must exist in PlaceBook.","lastModifiedDate":"2021-10-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"NecroWolf28"},"content":"     * {@code person} must not already exist in PlaceBook.","lastModifiedDate":"2021-10-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":88,"author":{"gitId":"tchiong"},"content":"     * {@code target} must exist in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"NecroWolf28"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in PlaceBook.","lastModifiedDate":"2021-10-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"tchiong"},"content":"     * Adds the given Appointment","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"tchiong"},"content":"    void addAppointment(Appointment a);","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"tchiong"},"content":"     * Removes the given Appointment","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"tchiong"},"content":"    void deleteAppointment(Appointment a);","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"Li-Lehao"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"Li-Lehao"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"tchiong"},"content":"    /** Returns a sorted unmodifiable view of the filtered appointment list */","lastModifiedDate":"2021-10-20"},{"lineNumber":116,"author":{"gitId":"tchiong"},"content":"    void sortFilteredAppointmentList(String sortBy);","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"Li-Lehao"},"content":"     * Updates the filter of the filtered appointments list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"Li-Lehao"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"Li-Lehao"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"Li-Lehao"},"content":"     * Returns the String representation of {@Code Appointment} that is related to the {@Code Person}.","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"YaleChen299"},"content":"     *","lastModifiedDate":"2021-10-20"},{"lineNumber":127,"author":{"gitId":"Li-Lehao"},"content":"     * @param client the person to search.","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"YaleChen299"},"content":"     * @return the String representation of the list of appointments related to the client.","lastModifiedDate":"2021-10-20"},{"lineNumber":129,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":130,"author":{"gitId":"YaleChen299"},"content":"    String getRelatedAppointmentsAsString(Person client);","lastModifiedDate":"2021-10-20"},{"lineNumber":131,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"Li-Lehao"},"content":"     * Returns the String representation of {@Code Appointment} that only have this {@Code client} in its client list.","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"Li-Lehao"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"Li-Lehao"},"content":"     * @param client the person to search.","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"Li-Lehao"},"content":"     * @return the String representation of the list of appointments that only have this client in its client list.","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"Li-Lehao"},"content":"    String getAppointmentsThatOnlyHaveThisClientAsString(Person client);","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"Li-Lehao"},"content":"     * Replace the client in the client list of the appointments by a new edited client.","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"Li-Lehao"},"content":"     * @param personToEdit the previous client.","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"Li-Lehao"},"content":"     * @param editedPerson the new client that created when edit person information.","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"Li-Lehao"},"content":"    void updateEditedClientInAppointments(Person personToEdit, Person editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"Li-Lehao"},"content":"     * Remove the given person from the client list of the appointments,","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"Li-Lehao"},"content":"     * if the appointment has no client after the deletion, the appointment will be removed from schedule.","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"Li-Lehao"},"content":"     * @param personToDelete the given person to delete.","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"Li-Lehao"},"content":"    void removePersonFromAppointments(Person personToDelete);","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":154,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":155,"author":{"gitId":"Li-Lehao"},"content":"     * Check whether there are appointments that has time conflicts","lastModifiedDate":"2021-10-28"},{"lineNumber":156,"author":{"gitId":"Li-Lehao"},"content":"     * with the given appointment in the current appointment list.","lastModifiedDate":"2021-10-28"},{"lineNumber":157,"author":{"gitId":"Li-Lehao"},"content":"     * @param appointment The given appointment to check.","lastModifiedDate":"2021-10-28"},{"lineNumber":158,"author":{"gitId":"Li-Lehao"},"content":"     * @return A list of appointments, the appointments that has time conflicts","lastModifiedDate":"2021-10-28"},{"lineNumber":159,"author":{"gitId":"Li-Lehao"},"content":"     * with the given appointment.","lastModifiedDate":"2021-10-28"},{"lineNumber":160,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":161,"author":{"gitId":"Li-Lehao"},"content":"    List\u003cAppointment\u003e getClashingAppointments(Appointment appointment);","lastModifiedDate":"2021-10-28"},{"lineNumber":162,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":163,"author":{"gitId":"NecroWolf28"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":164,"author":{"gitId":"NecroWolf28"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}.","lastModifiedDate":"2021-10-29"},{"lineNumber":165,"author":{"gitId":"tchiong"},"content":"     * {@code target} must exist in Placebook.","lastModifiedDate":"2021-11-04"},{"lineNumber":166,"author":{"gitId":"NecroWolf28"},"content":"     * The appointment identity of {@code editedAppointment}","lastModifiedDate":"2021-10-29"},{"lineNumber":167,"author":{"gitId":"NecroWolf28"},"content":"     * must not be the same as another existing appointment in PlaceBook.","lastModifiedDate":"2021-10-29"},{"lineNumber":168,"author":{"gitId":"NecroWolf28"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":169,"author":{"gitId":"NecroWolf28"},"content":"    void setAppointment(Appointment appointmentToEdit, Appointment editedAppointment);","lastModifiedDate":"2021-10-29"},{"lineNumber":170,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":171,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":172,"author":{"gitId":"Li-Lehao"},"content":"     * Go back to the previous state before executing a certain command.","lastModifiedDate":"2021-10-29"},{"lineNumber":173,"author":{"gitId":"Li-Lehao"},"content":"     * @throws NoHistoryStatesException Throw exception if there is no previous state.","lastModifiedDate":"2021-10-29"},{"lineNumber":174,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":175,"author":{"gitId":"Li-Lehao"},"content":"    void undo() throws NoHistoryStatesException;","lastModifiedDate":"2021-10-29"},{"lineNumber":176,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":177,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":178,"author":{"gitId":"Li-Lehao"},"content":"     * Add the current state into the history states.","lastModifiedDate":"2021-10-29"},{"lineNumber":179,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":180,"author":{"gitId":"Li-Lehao"},"content":"    public void updateState();","lastModifiedDate":"2021-10-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Li-Lehao":55,"tchiong":23,"YaleChen299":12,"nwhloo99":9,"-":71,"NecroWolf28":11}},{"path":"src/main/java/seedu/placebook/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import java.util.List;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.historystates.HistoryStates;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.historystates.State;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.historystates.exceptions.NoHistoryStatesException;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.exceptions.ClashingAppointmentsException;","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":" * Represents the in-memory model of the Placebook data.","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"    private Contacts contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"    private Schedule schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"    private FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"    private FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"    private final HistoryStates historyStates;","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"     * Initializes a ModelManager with the given contacts, userPrefs and schedule.","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"    public ModelManager(ReadOnlyContacts contacts, ReadOnlyUserPrefs userPrefs, ReadOnlySchedule schedule) {","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"tchiong"},"content":"        requireAllNonNull(contacts, userPrefs, schedule);","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"tchiong"},"content":"        logger.fine(\"Initializing with contacts: \" + contacts","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"                + \", user prefs \" + userPrefs + \" and schedule \" + schedule);","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"        this.contacts \u003d new Contacts(contacts);","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"        this.schedule \u003d new Schedule(schedule);","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"tchiong"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.contacts.getPersonList());","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.schedule.getSchedule());","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"        this.historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"tchiong"},"content":"        State originState \u003d new State(this.contacts, this.schedule);","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"Li-Lehao"},"content":"        this.historyStates.addNewState(originState);","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"        this(new Contacts(), new UserPrefs(), new Schedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"tchiong"},"content":"    public Path getContactsFilePath() {","lastModifiedDate":"2021-11-04"},{"lineNumber":88,"author":{"gitId":"tchiong"},"content":"        return userPrefs.getContactsFilePath();","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"tchiong"},"content":"    public void setContactsFilePath(Path contactsFilePath) {","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"tchiong"},"content":"        requireNonNull(contactsFilePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":94,"author":{"gitId":"tchiong"},"content":"        userPrefs.setContactsFilePath(contactsFilePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"tchiong"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Contacts \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-11-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":100,"author":{"gitId":"tchiong"},"content":"    public void setContact(ReadOnlyContacts contacts) {","lastModifiedDate":"2021-11-04"},{"lineNumber":101,"author":{"gitId":"tchiong"},"content":"        this.contacts.resetData(contacts);","lastModifiedDate":"2021-11-04"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":105,"author":{"gitId":"tchiong"},"content":"    public ReadOnlyContacts getContacts() {","lastModifiedDate":"2021-11-04"},{"lineNumber":106,"author":{"gitId":"tchiong"},"content":"        return contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"nwhloo99"},"content":"    public void setSchedule(ReadOnlySchedule schedule) {","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"nwhloo99"},"content":"        this.schedule.resetData(schedule);","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":115,"author":{"gitId":"nwhloo99"},"content":"    public ReadOnlySchedule getSchedule() {","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"nwhloo99"},"content":"        return schedule;","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":122,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":123,"author":{"gitId":"tchiong"},"content":"        return contacts.hasPerson(person);","lastModifiedDate":"2021-11-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":128,"author":{"gitId":"tchiong"},"content":"        contacts.removePerson(target);","lastModifiedDate":"2021-11-04"},{"lineNumber":129,"author":{"gitId":"YaleChen299"},"content":"        this.removePersonFromAppointments(target);","lastModifiedDate":"2021-11-03"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":134,"author":{"gitId":"tchiong"},"content":"        contacts.addPerson(person);","lastModifiedDate":"2021-11-04"},{"lineNumber":135,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":143,"author":{"gitId":"tchiong"},"content":"        contacts.setPerson(target, editedPerson);","lastModifiedDate":"2021-11-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":146,"author":{"gitId":"tchiong"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":147,"author":{"gitId":"YaleChen299"},"content":"    public void addAppointment(Appointment a) throws ClashingAppointmentsException, DuplicateAppointmentException {","lastModifiedDate":"2021-11-02"},{"lineNumber":148,"author":{"gitId":"tchiong"},"content":"        requireNonNull(a);","lastModifiedDate":"2021-10-07"},{"lineNumber":149,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":150,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(a);","lastModifiedDate":"2021-10-13"},{"lineNumber":151,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":153,"author":{"gitId":"tchiong"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":154,"author":{"gitId":"tchiong"},"content":"    public void deleteAppointment(Appointment a) {","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"tchiong"},"content":"        requireNonNull(a);","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":157,"author":{"gitId":"nwhloo99"},"content":"        schedule.deleteAppointment(a);","lastModifiedDate":"2021-10-13"},{"lineNumber":158,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":161,"author":{"gitId":"YaleChen299"},"content":"    public void setAppointment(Appointment appointmentToEdit, Appointment editedAppointment) {","lastModifiedDate":"2021-10-29"},{"lineNumber":162,"author":{"gitId":"YaleChen299"},"content":"        requireAllNonNull(appointmentToEdit, editedAppointment);","lastModifiedDate":"2021-10-29"},{"lineNumber":163,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":164,"author":{"gitId":"YaleChen299"},"content":"        schedule.setAppointment(appointmentToEdit, editedAppointment);","lastModifiedDate":"2021-10-29"},{"lineNumber":165,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":166,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":167,"author":{"gitId":"YaleChen299"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Query Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-20"},{"lineNumber":168,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":169,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":170,"author":{"gitId":"YaleChen299"},"content":"     * Returns the String representation of {@Code Appointment} that is related to the {@Code Person}","lastModifiedDate":"2021-10-20"},{"lineNumber":171,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":172,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":173,"author":{"gitId":"YaleChen299"},"content":"    public String getRelatedAppointmentsAsString(Person client) {","lastModifiedDate":"2021-10-20"},{"lineNumber":174,"author":{"gitId":"YaleChen299"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-10-20"},{"lineNumber":175,"author":{"gitId":"YaleChen299"},"content":"        List\u003cAppointment\u003e relatedAppointment \u003d getRelatedAppointments(client);","lastModifiedDate":"2021-10-20"},{"lineNumber":176,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":177,"author":{"gitId":"YaleChen299"},"content":"        for (Appointment appointment : relatedAppointment) {","lastModifiedDate":"2021-10-20"},{"lineNumber":178,"author":{"gitId":"YaleChen299"},"content":"            stringBuilder.append(appointment + \"\\n\");","lastModifiedDate":"2021-10-20"},{"lineNumber":179,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":180,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":181,"author":{"gitId":"YaleChen299"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-10-20"},{"lineNumber":182,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":183,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":184,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"Li-Lehao"},"content":"    public String getAppointmentsThatOnlyHaveThisClientAsString(Person client) {","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"Li-Lehao"},"content":"        List\u003cAppointment\u003e appointmentsThatOnlyHaveThisClient \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"Li-Lehao"},"content":"        for (Appointment appointment : getRelatedAppointments(client)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"Li-Lehao"},"content":"            if (appointment.isTheOnlyClient(client)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"Li-Lehao"},"content":"                appointmentsThatOnlyHaveThisClient.add(appointment);","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"Li-Lehao"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":193,"author":{"gitId":"Li-Lehao"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"Li-Lehao"},"content":"        for (Appointment appointment : appointmentsThatOnlyHaveThisClient) {","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"Li-Lehao"},"content":"            stringBuilder.append(appointment + \"\\n\");","lastModifiedDate":"2021-10-25"},{"lineNumber":196,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":198,"author":{"gitId":"Li-Lehao"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"Li-Lehao"},"content":"     * When a person is edited, update all the appointments in the appointment list that contains this person","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"Li-Lehao"},"content":"     * by replacing the {@Code personToEdit} with the new {@Code editedPerson} instance.","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"Li-Lehao"},"content":"     * @param personToEdit The person to be edited.","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"Li-Lehao"},"content":"     * @param editedPerson The new person instance created.","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"Li-Lehao"},"content":"    public void updateEditedClientInAppointments(Person personToEdit, Person editedPerson) {","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"Li-Lehao"},"content":"        List\u003cAppointment\u003e relatedAppointments \u003d getRelatedAppointments(personToEdit);","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"Li-Lehao"},"content":"        for (Appointment appointment : relatedAppointments) {","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"YaleChen299"},"content":"            appointment.setClient(personToEdit, editedPerson);","lastModifiedDate":"2021-10-29"},{"lineNumber":212,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":215,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"Li-Lehao"},"content":"     * Remove the given person from the client list of the appointments,","lastModifiedDate":"2021-10-26"},{"lineNumber":217,"author":{"gitId":"Li-Lehao"},"content":"     * if the appointment has no client after the deletion, the appointment will be removed from schedule.","lastModifiedDate":"2021-10-26"},{"lineNumber":218,"author":{"gitId":"Li-Lehao"},"content":"     * @param personToDelete the given person to delete.","lastModifiedDate":"2021-10-26"},{"lineNumber":219,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":220,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":221,"author":{"gitId":"Li-Lehao"},"content":"    public void removePersonFromAppointments(Person personToDelete) {","lastModifiedDate":"2021-10-26"},{"lineNumber":222,"author":{"gitId":"Li-Lehao"},"content":"        List\u003cAppointment\u003e relatedAppointments \u003d getRelatedAppointments(personToDelete);","lastModifiedDate":"2021-10-26"},{"lineNumber":223,"author":{"gitId":"Li-Lehao"},"content":"        for (Appointment appointment : relatedAppointments) {","lastModifiedDate":"2021-10-26"},{"lineNumber":224,"author":{"gitId":"Li-Lehao"},"content":"            appointment.removeClient(personToDelete);","lastModifiedDate":"2021-10-26"},{"lineNumber":225,"author":{"gitId":"Li-Lehao"},"content":"            if (appointment.isClientListEmpty()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":226,"author":{"gitId":"Li-Lehao"},"content":"                schedule.deleteAppointment(appointment);","lastModifiedDate":"2021-10-26"},{"lineNumber":227,"author":{"gitId":"Li-Lehao"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":228,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":229,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":231,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":232,"author":{"gitId":"YaleChen299"},"content":"     * Returns the Observablelist of {@Code Appointment} that is related to the {@Code Person}","lastModifiedDate":"2021-10-20"},{"lineNumber":233,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":234,"author":{"gitId":"YaleChen299"},"content":"    private List\u003cAppointment\u003e getRelatedAppointments(Person client) {","lastModifiedDate":"2021-10-20"},{"lineNumber":235,"author":{"gitId":"YaleChen299"},"content":"        return schedule.getRelatedAppointments(client);","lastModifiedDate":"2021-10-20"},{"lineNumber":236,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":237,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":241,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":242,"author":{"gitId":"tchiong"},"content":"     * {@code versionedPlacebook}","lastModifiedDate":"2021-11-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":252,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":256,"author":{"gitId":"Li-Lehao"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":257,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":258,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":259,"author":{"gitId":"Li-Lehao"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of","lastModifiedDate":"2021-10-07"},{"lineNumber":260,"author":{"gitId":"tchiong"},"content":"     * {@code versionedPlacebook}","lastModifiedDate":"2021-11-04"},{"lineNumber":261,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":262,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":263,"author":{"gitId":"Li-Lehao"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":264,"author":{"gitId":"Li-Lehao"},"content":"        return filteredAppointments;","lastModifiedDate":"2021-10-07"},{"lineNumber":265,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":266,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":267,"author":{"gitId":"tchiong"},"content":"    @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":268,"author":{"gitId":"tchiong"},"content":"    public void sortFilteredAppointmentList(String sortBy) {","lastModifiedDate":"2021-10-20"},{"lineNumber":269,"author":{"gitId":"nwhloo99"},"content":"        if (sortBy.equals(\"Time\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":270,"author":{"gitId":"tchiong"},"content":"            schedule.sortAppointmentByTimePeriod();","lastModifiedDate":"2021-10-26"},{"lineNumber":271,"author":{"gitId":"tchiong"},"content":"        } else if (sortBy.equals(\"Description\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":272,"author":{"gitId":"tchiong"},"content":"            schedule.sortAppointmentByDescription();","lastModifiedDate":"2021-10-20"},{"lineNumber":273,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":274,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":275,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":276,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":277,"author":{"gitId":"Li-Lehao"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2021-10-07"},{"lineNumber":278,"author":{"gitId":"Li-Lehao"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":279,"author":{"gitId":"Li-Lehao"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":280,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":281,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":296,"author":{"gitId":"tchiong"},"content":"        return contacts.equals(other.contacts)","lastModifiedDate":"2021-11-04"},{"lineNumber":297,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":298,"author":{"gitId":"nwhloo99"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2021-10-13"},{"lineNumber":299,"author":{"gitId":"nwhloo99"},"content":"                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);","lastModifiedDate":"2021-10-13"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":301,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":302,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":303,"author":{"gitId":"Li-Lehao"},"content":"     * Check whether there are appointments that has time conflicts","lastModifiedDate":"2021-10-28"},{"lineNumber":304,"author":{"gitId":"Li-Lehao"},"content":"     * with the given appointment in the current appointment list.","lastModifiedDate":"2021-10-28"},{"lineNumber":305,"author":{"gitId":"Li-Lehao"},"content":"     * @param appointment The given appointment to check.","lastModifiedDate":"2021-10-28"},{"lineNumber":306,"author":{"gitId":"Li-Lehao"},"content":"     * @return A list of appointments, the appointments that has time conflicts","lastModifiedDate":"2021-10-28"},{"lineNumber":307,"author":{"gitId":"Li-Lehao"},"content":"     * with the given appointment.","lastModifiedDate":"2021-10-28"},{"lineNumber":308,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":309,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":310,"author":{"gitId":"Li-Lehao"},"content":"    public List\u003cAppointment\u003e getClashingAppointments(Appointment appointment) {","lastModifiedDate":"2021-10-28"},{"lineNumber":311,"author":{"gitId":"Li-Lehao"},"content":"        List\u003cAppointment\u003e clashingAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":312,"author":{"gitId":"Li-Lehao"},"content":"        for (Appointment app : this.schedule) {","lastModifiedDate":"2021-10-28"},{"lineNumber":313,"author":{"gitId":"Li-Lehao"},"content":"            if (app.getTimePeriod().hasConflictWith(appointment.getTimePeriod())) {","lastModifiedDate":"2021-10-28"},{"lineNumber":314,"author":{"gitId":"Li-Lehao"},"content":"                clashingAppointments.add(app);","lastModifiedDate":"2021-10-28"},{"lineNumber":315,"author":{"gitId":"Li-Lehao"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":316,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":317,"author":{"gitId":"Li-Lehao"},"content":"        return clashingAppointments;","lastModifiedDate":"2021-10-28"},{"lineNumber":318,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":319,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":320,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":321,"author":{"gitId":"Li-Lehao"},"content":"     * Go back to the previous state before executing a certain command.","lastModifiedDate":"2021-10-29"},{"lineNumber":322,"author":{"gitId":"Li-Lehao"},"content":"     * @throws NoHistoryStatesException Throw exception if there is no previous state.","lastModifiedDate":"2021-10-29"},{"lineNumber":323,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":324,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":325,"author":{"gitId":"Li-Lehao"},"content":"    public void undo() throws NoHistoryStatesException {","lastModifiedDate":"2021-10-29"},{"lineNumber":326,"author":{"gitId":"Li-Lehao"},"content":"        if (!this.historyStates.hasHistoryStates()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":327,"author":{"gitId":"Li-Lehao"},"content":"            throw new NoHistoryStatesException();","lastModifiedDate":"2021-10-29"},{"lineNumber":328,"author":{"gitId":"Li-Lehao"},"content":"        } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":329,"author":{"gitId":"Li-Lehao"},"content":"            this.historyStates.undo();","lastModifiedDate":"2021-10-29"},{"lineNumber":330,"author":{"gitId":"Li-Lehao"},"content":"            State previousState \u003d this.historyStates.getCurrentState();","lastModifiedDate":"2021-10-29"},{"lineNumber":331,"author":{"gitId":"Li-Lehao"},"content":"            this.schedule \u003d previousState.getSchedule();","lastModifiedDate":"2021-10-29"},{"lineNumber":332,"author":{"gitId":"tchiong"},"content":"            this.contacts \u003d previousState.getContacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":333,"author":{"gitId":"tchiong"},"content":"            filteredPersons \u003d new FilteredList\u003c\u003e(this.contacts.getPersonList());","lastModifiedDate":"2021-11-04"},{"lineNumber":334,"author":{"gitId":"Li-Lehao"},"content":"            filteredAppointments \u003d new FilteredList\u003c\u003e(this.schedule.getSchedule());","lastModifiedDate":"2021-10-29"},{"lineNumber":335,"author":{"gitId":"tchiong"},"content":"            System.out.println(this.contacts.getPersonList().size() + \" \" + this.schedule.hashCode());","lastModifiedDate":"2021-11-04"},{"lineNumber":336,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":337,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":338,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":339,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":340,"author":{"gitId":"Li-Lehao"},"content":"     * Add the current state into the history states.","lastModifiedDate":"2021-10-29"},{"lineNumber":341,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":342,"author":{"gitId":"Li-Lehao"},"content":"    public void updateState() {","lastModifiedDate":"2021-10-29"},{"lineNumber":343,"author":{"gitId":"tchiong"},"content":"        State stateToUpdate \u003d new State(this.contacts, this.schedule);","lastModifiedDate":"2021-11-04"},{"lineNumber":344,"author":{"gitId":"Li-Lehao"},"content":"        this.historyStates.addNewState(stateToUpdate);","lastModifiedDate":"2021-10-29"},{"lineNumber":345,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Li-Lehao":110,"tchiong":49,"YaleChen299":54,"nwhloo99":17,"-":116}},{"path":"src/main/java/seedu/placebook/model/ReadOnlyContacts.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":" * Unmodifiable view of Contacts","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"public interface ReadOnlyContacts {","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tchiong":2,"YaleChen299":2,"-":12}},{"path":"src/main/java/seedu/placebook/model/ReadOnlySchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"nwhloo99"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"nwhloo99"},"content":"public interface ReadOnlySchedule {","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"     * Returns an unmodifiable view of the appointments list.","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"     * This list will not contain any duplicate appointments.","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"nwhloo99"},"content":"    ObservableList\u003cAppointment\u003e getSchedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"YaleChen299":2,"nwhloo99":11}},{"path":"src/main/java/seedu/placebook/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"    Path getContactsFilePath();","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"tchiong":1,"YaleChen299":2,"-":13}},{"path":"src/main/java/seedu/placebook/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"    private Path contactsFilePath \u003d Paths.get(\"data\" , \"contacts.json\");","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"    private Path scheduleFilePath \u003d Paths.get(\"data\" , \"schedule.json\");","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"        setContactsFilePath(newUserPrefs.getContactsFilePath());","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"tchiong"},"content":"    public Path getContactsFilePath() {","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"tchiong"},"content":"        return contactsFilePath;","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"    public void setContactsFilePath(Path contactsFilePath) {","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"        requireNonNull(contactsFilePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"tchiong"},"content":"        this.contactsFilePath \u003d contactsFilePath;","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"    public Path getScheduleFilePath() {","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"nwhloo99"},"content":"        return scheduleFilePath;","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"    public void setScheduleFilePath(Path scheduleFilePath) {","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(scheduleFilePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"        this.scheduleFilePath \u003d scheduleFilePath;","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"tchiong"},"content":"                \u0026\u0026 contactsFilePath.equals(o.contactsFilePath)","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"nwhloo99"},"content":"                \u0026\u0026 scheduleFilePath.equals(o.scheduleFilePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"tchiong"},"content":"        return Objects.hash(guiSettings, contactsFilePath, scheduleFilePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"tchiong"},"content":"        sb.append(\"\\nLocal Person data file location : \" + contactsFilePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":95,"author":{"gitId":"nwhloo99"},"content":"        sb.append(\"\\nLocal Schedule data file location: \" + scheduleFilePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tchiong":10,"YaleChen299":2,"nwhloo99":10,"-":77}},{"path":"src/main/java/seedu/placebook/model/historystates/HistoryStates.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.historystates;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.historystates.exceptions.NoHistoryStatesException;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":"public class HistoryStates {","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"Li-Lehao"},"content":"    /** The data structure to store the {@Code State}. */","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"    private final LinkedList\u003cState\u003e historyStates;","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":"     * Initialized a {@Code HistoryStates}.","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"Li-Lehao"},"content":"    public HistoryStates() {","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"        this.historyStates \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"     * Add a given {@Code State} to this {@Code HistoryStates}.","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"     * @param state The given state to add.","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"    public void addNewState(State state) {","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"Li-Lehao"},"content":"        this.historyStates.addLast(state);","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"     * Remove the last {@Code State} in the {@Code HistoryStates} and go back to the previous {@Code State}.","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"Li-Lehao"},"content":"     * Exception will be thrown if this {@Code HistoryStates} does not contain any {@Code State}.","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"Li-Lehao"},"content":"     * @throws NoHistoryStatesException Exception will be thrown if","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"Li-Lehao"},"content":"     * this {@Code HistoryStates} does not contain any {@Code State}.","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"    public void undo() throws NoHistoryStatesException {","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"        try {","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"            this.historyStates.removeLast();","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"        } catch (NoSuchElementException e) {","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"Li-Lehao"},"content":"            throw new NoHistoryStatesException();","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"Li-Lehao"},"content":"     * Get the last {@Code State} in the {@Code HistoryStates}. Exception will be thrown if","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"Li-Lehao"},"content":"     * this {@Code HistoryStates} does not contain any {@Code State}.","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"Li-Lehao"},"content":"     * @return The last {@Code State} in the {@Code HistoryStates}.","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"Li-Lehao"},"content":"     * @throws NoHistoryStatesException Exception will be thrown if","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"Li-Lehao"},"content":"     * this {@Code HistoryStates} does not contain any {@Code State}.","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"Li-Lehao"},"content":"    public State getCurrentState() throws NoHistoryStatesException {","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"Li-Lehao"},"content":"        try {","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"Li-Lehao"},"content":"            return this.historyStates.getLast();","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"Li-Lehao"},"content":"        } catch (NoSuchElementException e) {","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"Li-Lehao"},"content":"            throw new NoHistoryStatesException();","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"Li-Lehao"},"content":"     * Check whether there are at least one previous {@Code State} in the {@Code HistoryStates}.","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"Li-Lehao"},"content":"     * @return A boolean value, indicating whether there are {@Code State} in the {@Code HistoryStates}.","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"Li-Lehao"},"content":"    public Boolean hasHistoryStates() {","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"Li-Lehao"},"content":"        return this.historyStates.size() \u003e 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"Li-Lehao"},"content":"    public LinkedList\u003cState\u003e getHistoryStates() {","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"Li-Lehao"},"content":"        return new LinkedList\u003c\u003e(this.historyStates);","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"Li-Lehao":65,"YaleChen299":2}},{"path":"src/main/java/seedu/placebook/model/historystates/State.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.historystates;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"Li-Lehao"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":" * A State describes what the PlaceBook is like after executing a certain command.","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"Li-Lehao"},"content":"public class State {","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"    /** The {@Code Contacts} of the PlaceBook. */","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"    private final Contacts contacts;","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":"    /** The {@Code Schedule} of the PlaceBook. */","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":"    private final Schedule schedule;","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"     * A constructor to initialize the {@Code State} with the given {@Code Contacts} and {@Code Schedule}.","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"     * The given {@Code Contacts} and {@Code Schedule} will be copied and store in this {@Code State}.","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"     * @param contacts The given {@Code contacts}.","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"     * @param schedule The given {@Code Schedule}.","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"    public State(Contacts contacts, Schedule schedule) {","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"        this.contacts \u003d new Contacts(contacts);","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"Li-Lehao"},"content":"        this.schedule \u003d new Schedule(schedule);","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"     * Get the {@Code Contacts} of this state.","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"Li-Lehao"},"content":"     * @return A copy of the {@Code Contacts} of this state.","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"    public Contacts getContacts() {","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"        return new Contacts(this.contacts);","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"     * Get the {@Code Schedule} of this state.","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"Li-Lehao"},"content":"     * @return A copy of the {@Code Schedule} of this state.","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"Li-Lehao"},"content":"    public Schedule getSchedule() {","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"        return new Schedule(this.schedule);","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"Li-Lehao":34,"tchiong":6,"YaleChen299":2}},{"path":"src/main/java/seedu/placebook/model/historystates/exceptions/NoHistoryStatesException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.historystates.exceptions;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"public class NoHistoryStatesException extends RuntimeException {","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"    public NoHistoryStatesException() {","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":"        super();","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"Li-Lehao":6,"YaleChen299":1}},{"path":"src/main/java/seedu/placebook/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":" * Represents a Person\u0027s address in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":1,"YaleChen299":2,"-":54}},{"path":"src/main/java/seedu/placebook/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":" * Represents a Person\u0027s email in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":1,"YaleChen299":2,"-":68}},{"path":"src/main/java/seedu/placebook/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":" * Represents a Person\u0027s name in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":1,"YaleChen299":2,"-":56}},{"path":"src/main/java/seedu/placebook/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.StringUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"YaleChen299":2,"-":29}},{"path":"src/main/java/seedu/placebook/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":" * Represents a Person in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":1,"YaleChen299":3,"-":119}},{"path":"src/main/java/seedu/placebook/model/person/PersonHasTagsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"NecroWolf28"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"NecroWolf28"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.StringUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"NecroWolf28"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"NecroWolf28"},"content":" * Tests that a {@code Person}\u0027s {@code Tags} matches any of the keywords given.","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"NecroWolf28"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":"public class PersonHasTagsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":"    public PersonHasTagsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"NecroWolf28"},"content":"        Tag[] tagArray \u003d new Tag[person.getTags().size()];","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"NecroWolf28"},"content":"        tagArray \u003d person.getTags().toArray(tagArray);","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"NecroWolf28"},"content":"        for (Tag tag : tagArray) {","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"NecroWolf28"},"content":"            String tagName \u003d tag.getTagName();","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"            if (keywords.stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(keyword, tagName))) {","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"                return true;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"        return false;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"NecroWolf28"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"NecroWolf28"},"content":"                || (other instanceof PersonHasTagsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"NecroWolf28"},"content":"                \u0026\u0026 keywords.equals(((PersonHasTagsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"YaleChen299":3,"NecroWolf28":36}},{"path":"src/main/java/seedu/placebook/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":" * Represents a Person\u0027s phone number in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"            \"Phone numbers should only contain numbers, it should be at least 3 digits long\"","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":"                    + \" and at most 20 digits long\";","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,20}\";","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"     * @param phone The given valid phone number.","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"        this.value \u003d phone;","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":1,"Li-Lehao":6,"YaleChen299":2,"-":43}},{"path":"src/main/java/seedu/placebook/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import javafx.beans.property.SimpleStringProperty;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import javafx.beans.property.StringProperty;","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.StringUtil;","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"    private final StringProperty personNames \u003d new SimpleStringProperty(\"\");","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"     * Returns the observable personNames.","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"     * @return the person names of the list.","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"    public StringProperty getPersonNames() {","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"        return this.personNames;","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"        personNames.set(this.toString());","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":82,"author":{"gitId":"YaleChen299"},"content":"        personNames.set(this.toString());","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"YaleChen299"},"content":"        personNames.set(this.toString());","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":100,"author":{"gitId":"YaleChen299"},"content":"        personNames.set(this.toString());","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":114,"author":{"gitId":"YaleChen299"},"content":"        personNames.set(this.toString());","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":117,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"Li-Lehao"},"content":"     * Checks whether this {@Code UniquePersonList} is empty.","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"Li-Lehao"},"content":"     * @return a boolean value indicting whether this {@Code UniquePersonList} is empty.","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"Li-Lehao"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"Li-Lehao"},"content":"        return this.internalList.isEmpty();","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":131,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":132,"author":{"gitId":"YaleChen299"},"content":"    public String toString() {","lastModifiedDate":"2021-10-20"},{"lineNumber":133,"author":{"gitId":"YaleChen299"},"content":"        return StringUtil.listToString(internalList, person -\u003e person.getName().fullName, \", \");","lastModifiedDate":"2021-11-02"},{"lineNumber":134,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":135,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Li-Lehao":7,"YaleChen299":26,"-":133}},{"path":"src/main/java/seedu/placebook/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person.exceptions;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"YaleChen299":1,"-":10}},{"path":"src/main/java/seedu/placebook/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person.exceptions;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"YaleChen299":1,"-":5}},{"path":"src/main/java/seedu/placebook/model/schedule/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"nwhloo99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"nwhloo99"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"nwhloo99"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.UniquePersonList;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"nwhloo99"},"content":"public class Appointment {","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"    private final UniquePersonList clients;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"nwhloo99"},"content":"    private final Address location;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"nwhloo99"},"content":"    private final TimePeriod timePeriod;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"nwhloo99"},"content":"    private String description;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":"     * Creates an Appointment class with a specified time.","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"    public Appointment(UniquePersonList clients, Address location, TimePeriod timePeriod, String description) {","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"        this.clients \u003d clients;","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"        this.location \u003d location;","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"        this.timePeriod \u003d timePeriod;","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"nwhloo99"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"    public UniquePersonList getClients() {","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"        return clients;","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"    public Address getLocation() {","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"        return location;","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"tchiong"},"content":"    public TimePeriod getTimePeriod() {","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"tchiong"},"content":"        return timePeriod;","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"    public String getDescription() {","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"        return description;","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"    public ObservableList\u003cPerson\u003e getClientList() {","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"        return clients.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"NecroWolf28"},"content":"    public LocalDateTime getStart() {","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"NecroWolf28"},"content":"        return this.getTimePeriod().getStartDateTime();","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"NecroWolf28"},"content":"    public LocalDateTime getEnd() {","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"NecroWolf28"},"content":"        return this.getTimePeriod().getEndDateTime();","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"nwhloo99"},"content":"     * Creates a string representation of the start timing.","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"    public String getStartDateTimeString() {","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"Li-Lehao"},"content":"        return this.timePeriod.getStartDateTimeAsString();","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"     * Creates a string representation of the end timing.","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"nwhloo99"},"content":"    public String getEndDateTimeString() {","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"Li-Lehao"},"content":"        return this.timePeriod.getEndDateTimeAsString();","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"     * Returns the urgency of this appointment.","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"     * Returns HIGH if appointment is in 2 days, MEDIUM if it is in a week and LOW otherwise","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"     * @return the urgency of this appointment.","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"    public Urgency getUrgency() {","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"nwhloo99"},"content":"        if (LocalDateTime.now().plusDays(2).isAfter(timePeriod.getStartDateTime())) {","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"            return Urgency.HIGH;","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"nwhloo99"},"content":"        } else if (LocalDateTime.now().plusDays(8).isAfter(timePeriod.getStartDateTime())) {","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"YaleChen299"},"content":"            return Urgency.MEDIUM;","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"YaleChen299"},"content":"        } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"YaleChen299"},"content":"            return Urgency.LOW;","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":87,"author":{"gitId":"nwhloo99"},"content":"     * Checks if this Appointment is conflicting with the given Appointment.","lastModifiedDate":"2021-11-01"},{"lineNumber":88,"author":{"gitId":"nwhloo99"},"content":"     * @param appointment the appointment to check against.","lastModifiedDate":"2021-11-01"},{"lineNumber":89,"author":{"gitId":"nwhloo99"},"content":"     * @return true if there is clash in time, false otherwise.","lastModifiedDate":"2021-11-01"},{"lineNumber":90,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":91,"author":{"gitId":"nwhloo99"},"content":"    public boolean isConflictingWith(Appointment appointment) {","lastModifiedDate":"2021-11-01"},{"lineNumber":92,"author":{"gitId":"nwhloo99"},"content":"        return this.timePeriod.hasConflictWith(appointment.getTimePeriod());","lastModifiedDate":"2021-11-01"},{"lineNumber":93,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":94,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":95,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"YaleChen299"},"content":"     * Checks if this appointment is related to the client.","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"YaleChen299"},"content":"     * @param person the client to check with.","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"YaleChen299"},"content":"     * @return true if the client is related and false otherwise.","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":100,"author":{"gitId":"YaleChen299"},"content":"    public boolean hasClient(Person person) {","lastModifiedDate":"2021-10-20"},{"lineNumber":101,"author":{"gitId":"nwhloo99"},"content":"        return this.clients.contains(person);","lastModifiedDate":"2021-10-20"},{"lineNumber":102,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":103,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":104,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"Li-Lehao"},"content":"     * Checks whether this {@Code Appointment}\u0027s client list is empty.","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"Li-Lehao"},"content":"     * @return A boolean value indicating whether the client list is empty.","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"Li-Lehao"},"content":"    public boolean isClientListEmpty() {","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"Li-Lehao"},"content":"        return this.clients.isEmpty();","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"Li-Lehao"},"content":"     * Remove a given person from the client list of this {@code Appointment}.","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"Li-Lehao"},"content":"     * @param personToRemove the given person to be removed.","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"Li-Lehao"},"content":"    public void removeClient(Person personToRemove) {","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"Li-Lehao"},"content":"        this.clients.remove(personToRemove);","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"Li-Lehao"},"content":"     * Add a given person to the client list of this {@Code Appointment}.","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"Li-Lehao"},"content":"     * @param personToAdd the given person to be added.","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"Li-Lehao"},"content":"    public void addClient(Person personToAdd) {","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"Li-Lehao"},"content":"        this.clients.add(personToAdd);","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":128,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":129,"author":{"gitId":"YaleChen299"},"content":"     * Sets the Client in the client list to the Edited Client.","lastModifiedDate":"2021-10-29"},{"lineNumber":130,"author":{"gitId":"YaleChen299"},"content":"     *","lastModifiedDate":"2021-10-29"},{"lineNumber":131,"author":{"gitId":"YaleChen299"},"content":"     * @param personToEdit the client to be edited.","lastModifiedDate":"2021-10-29"},{"lineNumber":132,"author":{"gitId":"YaleChen299"},"content":"     * @param editedPerson the edited client.","lastModifiedDate":"2021-10-29"},{"lineNumber":133,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":134,"author":{"gitId":"YaleChen299"},"content":"    public void setClient(Person personToEdit, Person editedPerson) {","lastModifiedDate":"2021-10-29"},{"lineNumber":135,"author":{"gitId":"YaleChen299"},"content":"        clients.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-29"},{"lineNumber":136,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":137,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":138,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":139,"author":{"gitId":"nwhloo99"},"content":"     * Returns true if both Appointments have the same fields.","lastModifiedDate":"2021-10-06"},{"lineNumber":140,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":141,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":142,"author":{"gitId":"nwhloo99"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-06"},{"lineNumber":143,"author":{"gitId":"nwhloo99"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-06"},{"lineNumber":144,"author":{"gitId":"nwhloo99"},"content":"            return true;","lastModifiedDate":"2021-10-06"},{"lineNumber":145,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":146,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":147,"author":{"gitId":"nwhloo99"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":148,"author":{"gitId":"nwhloo99"},"content":"            return false;","lastModifiedDate":"2021-10-06"},{"lineNumber":149,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":150,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":151,"author":{"gitId":"nwhloo99"},"content":"        Appointment otherApp \u003d (Appointment) other;","lastModifiedDate":"2021-10-06"},{"lineNumber":152,"author":{"gitId":"nwhloo99"},"content":"        return otherApp.getClients().equals(getClients())","lastModifiedDate":"2021-10-20"},{"lineNumber":153,"author":{"gitId":"nwhloo99"},"content":"                \u0026\u0026 otherApp.getLocation().equals(getLocation())","lastModifiedDate":"2021-10-06"},{"lineNumber":154,"author":{"gitId":"tchiong"},"content":"                \u0026\u0026 otherApp.getTimePeriod().equals(getTimePeriod())","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"tchiong"},"content":"                \u0026\u0026 otherApp.getDescription().equals(getDescription());","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":157,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":158,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"Li-Lehao"},"content":"     * Checks whether the given client is the only client in the client list of this {@Code Appointment}.","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"Li-Lehao"},"content":"     * @param client the given client.","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"Li-Lehao"},"content":"     * @return A boolean value indicating whether the given client is the only client.","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"Li-Lehao"},"content":"    public boolean isTheOnlyClient(Person client) {","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"Li-Lehao"},"content":"        return this.hasClient(client) \u0026\u0026 this.getClientList().size() \u003d\u003d 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":168,"author":{"gitId":"nwhloo99"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-06"},{"lineNumber":169,"author":{"gitId":"tchiong"},"content":"        return Objects.hash(clients, location, timePeriod, description);","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":171,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":172,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":173,"author":{"gitId":"nwhloo99"},"content":"    public String toString() {","lastModifiedDate":"2021-10-06"},{"lineNumber":174,"author":{"gitId":"nwhloo99"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-06"},{"lineNumber":175,"author":{"gitId":"YaleChen299"},"content":"        builder.append(getDescription())","lastModifiedDate":"2021-10-20"},{"lineNumber":176,"author":{"gitId":"YaleChen299"},"content":"                .append(\"; Clients: \")","lastModifiedDate":"2021-10-20"},{"lineNumber":177,"author":{"gitId":"YaleChen299"},"content":"                .append(getClients())","lastModifiedDate":"2021-10-20"},{"lineNumber":178,"author":{"gitId":"nwhloo99"},"content":"                .append(\"; Location: \")","lastModifiedDate":"2021-10-06"},{"lineNumber":179,"author":{"gitId":"nwhloo99"},"content":"                .append(getLocation())","lastModifiedDate":"2021-10-06"},{"lineNumber":180,"author":{"gitId":"tchiong"},"content":"                .append(\"; Time Period: \")","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"tchiong"},"content":"                .append(getTimePeriod());","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":183,"author":{"gitId":"nwhloo99"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":184,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":185,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":186,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":187,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"tchiong":10,"Li-Lehao":34,"YaleChen299":39,"nwhloo99":94,"NecroWolf28":10}},{"path":"src/main/java/seedu/placebook/model/schedule/DescriptionContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import java.util.List;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.StringUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":" * Tests that a {@code Appointment}\u0027s {@code Description} matches any of the keywords given.","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"public class DescriptionContainsKeywordsPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(appointment.getDescription(), keyword));","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"YaleChen299":31}},{"path":"src/main/java/seedu/placebook/model/schedule/Schedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"nwhloo99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.exceptions.ClashingAppointmentsException;","lastModifiedDate":"2021-11-01"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":" * A list of Appointments that enforces uniqueness among appointments to be added","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":" *","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"public class Schedule implements Iterable\u003cAppointment\u003e, ReadOnlySchedule {","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"tchiong"},"content":"    // Data Fields","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"    private final ObservableList\u003cAppointment\u003e appointmentList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"    private final ObservableList\u003cAppointment\u003e appointmentListUnModifiable \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"            FXCollections.unmodifiableObservableList(appointmentList);","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"    public Schedule() {};","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"     * Creates an Schedule using the Appointments in the {@code toBeCopied}","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"    public Schedule(ReadOnlySchedule toBeCopied) {","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"        this();","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"     * Replaces the contents of the person list with {@code appointments}.","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"     * {@code appointments} must not contain duplicate persons.","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"        this.appointmentList.setAll(appointments);","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"     * Resets the existing data of this {@code Schedule} with {@code newData}.","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"    public void resetData(ReadOnlySchedule newData) {","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"        setAppointments(newData.getSchedule());","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"tchiong"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"tchiong"},"content":"        return appointmentListUnModifiable;","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"     * Adds an Appointment to the list.","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"     * Appointment Must not already be in the list","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"    public void addAppointment(Appointment toAdd) throws DuplicateAppointmentException, ClashingAppointmentsException {","lastModifiedDate":"2021-11-01"},{"lineNumber":68,"author":{"gitId":"tchiong"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"tchiong"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"tchiong"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"Li-Lehao"},"content":"        List\u003cAppointment\u003e clashingAppointments \u003d getClashingAppointments(toAdd);","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"Li-Lehao"},"content":"        if (!clashingAppointments.isEmpty()) {","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"Li-Lehao"},"content":"            throw new ClashingAppointmentsException(clashingAppointments);","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":78,"author":{"gitId":"tchiong"},"content":"        appointmentList.add(toAdd);","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"tchiong"},"content":"        appointmentList.sort(Comparator.comparing(Appointment::getDescription));","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"tchiong"},"content":"        appointmentList.sort(Comparator.comparing(Appointment::getTimePeriod));","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":84,"author":{"gitId":"Li-Lehao"},"content":"     * Returns a list of appointments in the appointmentList that have time conflicts with","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"Li-Lehao"},"content":"     * the given appointment.","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"Li-Lehao"},"content":"     * @param appointmentToCheck The given appointment.","lastModifiedDate":"2021-11-01"},{"lineNumber":87,"author":{"gitId":"Li-Lehao"},"content":"     * @return A list of appointments that have time conflicts with the given appointment.","lastModifiedDate":"2021-11-01"},{"lineNumber":88,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":89,"author":{"gitId":"Li-Lehao"},"content":"    private List\u003cAppointment\u003e getClashingAppointments(Appointment appointmentToCheck) {","lastModifiedDate":"2021-11-01"},{"lineNumber":90,"author":{"gitId":"YaleChen299"},"content":"        return this.appointmentList","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"YaleChen299"},"content":"                .stream()","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"YaleChen299"},"content":"                .parallel()","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"YaleChen299"},"content":"                .filter(appointment -\u003e appointment.isConflictingWith(appointmentToCheck))","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"YaleChen299"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":96,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":97,"author":{"gitId":"tchiong"},"content":"    public void sortAppointmentByDescription() {","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"tchiong"},"content":"        appointmentList.sort(Comparator.comparing(Appointment::getDescription));","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":100,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":101,"author":{"gitId":"tchiong"},"content":"    public void sortAppointmentByTimePeriod() {","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"tchiong"},"content":"        appointmentList.sort(Comparator.comparing(Appointment::getTimePeriod));","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":105,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"tchiong"},"content":"     * Removes the equivalent Appointment from the list.","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"tchiong"},"content":"     * The Appointment must exist in the list.","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"nwhloo99"},"content":"    public void deleteAppointment(Appointment toRemove) {","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"tchiong"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"tchiong"},"content":"        if (!appointmentList.remove(toRemove)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"tchiong"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2021-10-06"},{"lineNumber":113,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":116,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"YaleChen299"},"content":"     * Returns the list of {@Code Appointment} that is related to the {@Code Person}","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"YaleChen299"},"content":"    public List\u003cAppointment\u003e getRelatedAppointments(Person client) {","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"YaleChen299"},"content":"        return appointmentListUnModifiable","lastModifiedDate":"2021-10-20"},{"lineNumber":121,"author":{"gitId":"YaleChen299"},"content":"                .stream()","lastModifiedDate":"2021-10-20"},{"lineNumber":122,"author":{"gitId":"YaleChen299"},"content":"                .parallel()","lastModifiedDate":"2021-10-20"},{"lineNumber":123,"author":{"gitId":"YaleChen299"},"content":"                .filter(appointment -\u003e appointment.hasClient(client))","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"YaleChen299"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":126,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":127,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"tchiong"},"content":"     * Check if appointmentList contains {@code Appointment}","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"tchiong"},"content":"     * @return boolean result","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"tchiong"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"tchiong"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"tchiong"},"content":"        return appointmentList.contains(toCheck);","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":137,"author":{"gitId":"nwhloo99"},"content":"     * Checks if the appointmentList contains a conflict {@code Appointment} with the {@code Appointment} to be checked.","lastModifiedDate":"2021-11-01"},{"lineNumber":138,"author":{"gitId":"nwhloo99"},"content":"     * @param toCheck The appointment to be checked for conflict.","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"nwhloo99"},"content":"     * @return true if there is a conflicting appointment, false if there is not.","lastModifiedDate":"2021-11-01"},{"lineNumber":140,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":141,"author":{"gitId":"nwhloo99"},"content":"    public boolean hasConflictingAppointment(Appointment toCheck) {","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-11-01"},{"lineNumber":143,"author":{"gitId":"nwhloo99"},"content":"        for (Appointment app : appointmentList) {","lastModifiedDate":"2021-11-01"},{"lineNumber":144,"author":{"gitId":"nwhloo99"},"content":"            if (app.isConflictingWith(toCheck)) {","lastModifiedDate":"2021-11-01"},{"lineNumber":145,"author":{"gitId":"nwhloo99"},"content":"                return true;","lastModifiedDate":"2021-11-01"},{"lineNumber":146,"author":{"gitId":"nwhloo99"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"nwhloo99"},"content":"        return false;","lastModifiedDate":"2021-11-01"},{"lineNumber":150,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":151,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":152,"author":{"gitId":"tchiong"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":153,"author":{"gitId":"tchiong"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2021-10-06"},{"lineNumber":154,"author":{"gitId":"tchiong"},"content":"        return appointmentList.iterator();","lastModifiedDate":"2021-10-06"},{"lineNumber":155,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":156,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":157,"author":{"gitId":"tchiong"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":158,"author":{"gitId":"tchiong"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-06"},{"lineNumber":159,"author":{"gitId":"tchiong"},"content":"        return appointmentList.hashCode();","lastModifiedDate":"2021-10-06"},{"lineNumber":160,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":161,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":162,"author":{"gitId":"tchiong"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":163,"author":{"gitId":"tchiong"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-06"},{"lineNumber":164,"author":{"gitId":"tchiong"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-06"},{"lineNumber":165,"author":{"gitId":"tchiong"},"content":"                || (other instanceof Schedule // instanceof handles nulls","lastModifiedDate":"2021-10-06"},{"lineNumber":166,"author":{"gitId":"tchiong"},"content":"                \u0026\u0026 appointmentList.equals(((Schedule) other).appointmentList));","lastModifiedDate":"2021-10-06"},{"lineNumber":167,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":168,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":169,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":170,"author":{"gitId":"nwhloo99"},"content":"    public ObservableList\u003cAppointment\u003e getSchedule() {","lastModifiedDate":"2021-10-13"},{"lineNumber":171,"author":{"gitId":"nwhloo99"},"content":"        return appointmentList;","lastModifiedDate":"2021-10-13"},{"lineNumber":172,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":173,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":174,"author":{"gitId":"NecroWolf28"},"content":"    public void setAppointment(Appointment appointmentToEdit, Appointment editedAppointment) {","lastModifiedDate":"2021-10-29"},{"lineNumber":175,"author":{"gitId":"NecroWolf28"},"content":"        requireNonNull(appointmentToEdit);","lastModifiedDate":"2021-10-29"},{"lineNumber":176,"author":{"gitId":"NecroWolf28"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2021-10-29"},{"lineNumber":177,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":178,"author":{"gitId":"YaleChen299"},"content":"        int index \u003d appointmentList.indexOf(appointmentToEdit);","lastModifiedDate":"2021-10-29"},{"lineNumber":179,"author":{"gitId":"YaleChen299"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-29"},{"lineNumber":180,"author":{"gitId":"NecroWolf28"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2021-11-03"},{"lineNumber":181,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":182,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":183,"author":{"gitId":"YaleChen299"},"content":"        appointmentList.set(index, editedAppointment);","lastModifiedDate":"2021-10-29"},{"lineNumber":184,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":185,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"tchiong":84,"Li-Lehao":12,"YaleChen299":32,"nwhloo99":50,"NecroWolf28":7}},{"path":"src/main/java/seedu/placebook/model/schedule/TimePeriod.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"nwhloo99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"import java.util.Objects;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.exceptions.EndTimeBeforeStartTimeException;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"public class TimePeriod implements Comparable\u003cTimePeriod\u003e {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"Li-Lehao"},"content":"    /** The start date and time of this {@code TimePeriod}. */","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"    private LocalDateTime startDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"    /** The end date and time of this {@code TimePeriod}. */","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"    private LocalDateTime endDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"     * A public constructor to initialize the {@code TimePeriod} with startDateTime and endDateTime.","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"     * @param startDateTime The given startDateTime.","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"Li-Lehao"},"content":"     * @param endDateTime The given endDateTIme.","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"     * @throws EndTimeBeforeStartTimeException","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"    public TimePeriod(LocalDateTime startDateTime, LocalDateTime endDateTime) throws EndTimeBeforeStartTimeException {","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"        if (endDateTime.isAfter(startDateTime)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"Li-Lehao"},"content":"            this.startDateTime \u003d startDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"Li-Lehao"},"content":"            this.endDateTime \u003d endDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"Li-Lehao"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"Li-Lehao"},"content":"            this.startDateTime \u003d startDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"            this.endDateTime \u003d startDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"            throw new EndTimeBeforeStartTimeException(\"EndDateTime has been set to startDateTime by default.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"Li-Lehao"},"content":"     * A public constructor to initialize the {@code TimePeriod} with startDate, startTime, endDate, endTime.","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"     * @param startDate The given startDate.","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"Li-Lehao"},"content":"     * @param startTime The given startTime.","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"Li-Lehao"},"content":"     * @param endDate The given endDate.","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"Li-Lehao"},"content":"     * @param endTime The given endTime.","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"Li-Lehao"},"content":"     * @throws EndTimeBeforeStartTimeException","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"Li-Lehao"},"content":"    public TimePeriod(LocalDate startDate, LocalTime startTime, LocalDate endDate, LocalTime endTime)","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"Li-Lehao"},"content":"            throws EndTimeBeforeStartTimeException {","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"Li-Lehao"},"content":"        LocalDateTime startDateTime \u003d LocalDateTime.of(","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"Li-Lehao"},"content":"                startDate.getYear(), startDate.getMonth(), startDate.getDayOfMonth(),","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"Li-Lehao"},"content":"                startTime.getHour(), startTime.getMinute()","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"Li-Lehao"},"content":"        );","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"Li-Lehao"},"content":"        LocalDateTime endDateTime \u003d LocalDateTime.of(","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"                endDate.getYear(), endDate.getMonth(), endDate.getDayOfMonth(),","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"                endTime.getHour(), endTime.getMinute()","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"Li-Lehao"},"content":"        );","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"Li-Lehao"},"content":"        new TimePeriod(startDateTime, endDateTime);","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"Li-Lehao"},"content":"     * A boolean method to check whether a moment is included in this {@code TimePeriod}.","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"Li-Lehao"},"content":"     * @param moment A LocalDateTime, the given moment.","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"Li-Lehao"},"content":"     * @return A boolean value indicating whether the moment is included.","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"Li-Lehao"},"content":"    public boolean containsMoment(LocalDateTime moment) {","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"        return (this.startDateTime.isBefore(moment) \u0026\u0026 this.endDateTime.isAfter(moment));","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"Li-Lehao"},"content":"     * A boolean method to check whether this {@code TimePeriod} has conflict with another {@code TimePeriod}.","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"Li-Lehao"},"content":"     * @param tp Another {@code TimePeriod}.","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"Li-Lehao"},"content":"     * @return A boolean value indicating whether the two {@TimePeriod} has conflicts.","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"Li-Lehao"},"content":"    public boolean hasConflictWith(TimePeriod tp) {","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"Li-Lehao"},"content":"        return this.containsMoment(tp.startDateTime) || this.containsMoment(tp.endDateTime)","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"nwhloo99"},"content":"                || tp.containsMoment(this.startDateTime) || tp.containsMoment(this.endDateTime)","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"nwhloo99"},"content":"                || (this.startDateTime.equals(tp.startDateTime) \u0026\u0026 this.endDateTime.equals(tp.endDateTime));","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"Li-Lehao"},"content":"     * Set the {@Code TimePeriod}\u0027s start date and time to the given date and time,","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"Li-Lehao"},"content":"     * exception will be thrown if the given start date and time is after the end date","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"Li-Lehao"},"content":"     * and time of the {@Code TimePeriod}.","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"Li-Lehao"},"content":"     * @param newStartDateTime The given start date and time.","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"Li-Lehao"},"content":"     * @throws EndTimeBeforeStartTimeException Exception will be thrown","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"Li-Lehao"},"content":"     * if the given start date and time is after the end date and time of the {@Code TimePeriod}.","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"Li-Lehao"},"content":"    public void setStartDateTime(LocalDateTime newStartDateTime) throws EndTimeBeforeStartTimeException {","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"Li-Lehao"},"content":"        if (this.endDateTime.isAfter(newStartDateTime)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"Li-Lehao"},"content":"            this.startDateTime \u003d newStartDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"Li-Lehao"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"Li-Lehao"},"content":"            throw new EndTimeBeforeStartTimeException(\"The operation to set startDateTime was not executed.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"Li-Lehao"},"content":"     * Set the {@Code TimePeriod}\u0027s end date and time to the given date and time,","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"Li-Lehao"},"content":"     * exception will be thrown if the given end date and time is before the start date","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"Li-Lehao"},"content":"     * and time of the {@Code TimePeriod}.","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"Li-Lehao"},"content":"     * @param newEndDateTime The given end date and time.","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"Li-Lehao"},"content":"     * @throws EndTimeBeforeStartTimeException Exception will be thrown","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"Li-Lehao"},"content":"     * if the given end date and time is before the start date and time of the {@Code TimePeriod}.","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"Li-Lehao"},"content":"    public void setEndDateTime(LocalDateTime newEndDateTime) throws EndTimeBeforeStartTimeException {","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"Li-Lehao"},"content":"        if (this.startDateTime.isBefore(newEndDateTime)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"Li-Lehao"},"content":"            this.endDateTime \u003d newEndDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"Li-Lehao"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"Li-Lehao"},"content":"            throw new EndTimeBeforeStartTimeException(\"The operation to set endDateTime was not executed.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":112,"author":{"gitId":"Li-Lehao"},"content":"     * Get the startDateTime of this {@Code TimePeriod}.","lastModifiedDate":"2021-10-29"},{"lineNumber":113,"author":{"gitId":"Li-Lehao"},"content":"     * @return A LocalDateTime, the startDateTime of this {@Code TimePeriod}.","lastModifiedDate":"2021-10-29"},{"lineNumber":114,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":115,"author":{"gitId":"Li-Lehao"},"content":"    public LocalDateTime getStartDateTime() {","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"Li-Lehao"},"content":"        return LocalDateTime.of(this.startDateTime.toLocalDate(), this.startDateTime.toLocalTime());","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":120,"author":{"gitId":"Li-Lehao"},"content":"     * Get the endDateTime of this {@Code TimePeriod}.","lastModifiedDate":"2021-10-29"},{"lineNumber":121,"author":{"gitId":"Li-Lehao"},"content":"     * @return Get the endDateTime of this {@Code TimePeriod}.","lastModifiedDate":"2021-10-29"},{"lineNumber":122,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":123,"author":{"gitId":"Li-Lehao"},"content":"    public LocalDateTime getEndDateTime() {","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"Li-Lehao"},"content":"        return LocalDateTime.of(this.endDateTime.toLocalDate(), this.endDateTime.toLocalTime());","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"nwhloo99"},"content":"     * Creates a string representation of the startDateTime using the formatter.","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"Li-Lehao"},"content":"    public String getStartDateTimeAsString() {","lastModifiedDate":"2021-11-03"},{"lineNumber":131,"author":{"gitId":"nwhloo99"},"content":"        return this.startDateTime.format(formatter);","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"nwhloo99"},"content":"     * Creates a string representation of the endDateTime using the formatter.","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"Li-Lehao"},"content":"    public String getEndDateTimeAsString() {","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"nwhloo99"},"content":"        return this.endDateTime.format(formatter);","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"Li-Lehao"},"content":"    public int compareTo(TimePeriod o) {","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"Li-Lehao"},"content":"        if (this.startDateTime.compareTo(o.startDateTime) \u003d\u003d 0) {","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"Li-Lehao"},"content":"            return this.endDateTime.compareTo(o.endDateTime);","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"Li-Lehao"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"Li-Lehao"},"content":"            return this.startDateTime.compareTo(o.startDateTime);","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"tchiong"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"tchiong"},"content":"    public String toString() {","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"tchiong"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"tchiong"},"content":"        builder.append(\"Start Time: \")","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"nwhloo99"},"content":"               .append(getStartDateTime().format(formatter))","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"tchiong"},"content":"               .append(\" End Time: \")","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"nwhloo99"},"content":"               .append(getEndDateTime().format(formatter));","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"tchiong"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"nwhloo99"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"nwhloo99"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"nwhloo99"},"content":"            return true;","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"nwhloo99"},"content":"        if (!(other instanceof TimePeriod)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"nwhloo99"},"content":"            return false;","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"nwhloo99"},"content":"        TimePeriod otherTimePeriod \u003d (TimePeriod) other;","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"nwhloo99"},"content":"        return otherTimePeriod.startDateTime.equals(startDateTime)","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"nwhloo99"},"content":"                \u0026\u0026 otherTimePeriod.endDateTime.equals(endDateTime);","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":176,"author":{"gitId":"Li-Lehao"},"content":"    @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":177,"author":{"gitId":"Li-Lehao"},"content":"    public int hashCode() {","lastModifiedDate":"2021-11-03"},{"lineNumber":178,"author":{"gitId":"Li-Lehao"},"content":"        return Objects.hash(this.startDateTime, this.endDateTime);","lastModifiedDate":"2021-11-03"},{"lineNumber":179,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":180,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"Li-Lehao":133,"tchiong":9,"YaleChen299":2,"nwhloo99":36}},{"path":"src/main/java/seedu/placebook/model/schedule/Urgency.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"public enum Urgency {","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"    HIGH, MEDIUM, LOW","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"YaleChen299":5}},{"path":"src/main/java/seedu/placebook/model/schedule/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule.exceptions;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"tchiong"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"public class AppointmentNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"tchiong":5,"YaleChen299":1}},{"path":"src/main/java/seedu/placebook/model/schedule/exceptions/ClashingAppointmentsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule.exceptions;","lastModifiedDate":"2021-11-01"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"import java.util.List;","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.StringUtil;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"/**","lastModifiedDate":"2021-11-01"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":" * Signals that the operation will result in an invalid {@code TimePeriod}.","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":" * The endTime of the time period is before the startTime of the time period.","lastModifiedDate":"2021-11-01"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":" */","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"public class ClashingAppointmentsException extends RuntimeException {","lastModifiedDate":"2021-11-01"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"    public static final String MESSAGE_CLASHING_APPOINTMENTS \u003d \"Clashing Appointments found.\";","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":"    private final List\u003cAppointment\u003e appointments;","lastModifiedDate":"2021-11-01"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"     * Constructs ClashingAppointmentsException.","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"     * @param appointments The list of appointments in the schedule that have time conflict","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"     *                      with the appointment to add.","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"    public ClashingAppointmentsException(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"        super(MESSAGE_CLASHING_APPOINTMENTS);","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"        this.appointments \u003d appointments;","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"     * Returns the clashing Appointments as String.","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"     * @return the String representation of the clashing Appointments.","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    public String getClashingAppointmentAsString() {","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"        return StringUtil.listToString(appointments, app -\u003e app.getTimePeriod().toString(), \"\\n\");","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-01"}],"authorContributionMap":{"Li-Lehao":7,"YaleChen299":26}},{"path":"src/main/java/seedu/placebook/model/schedule/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule.exceptions;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"/**","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":" * Signals that the operation will result in duplicate Appointments (Appointments are considered duplicates","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":" * if they have the same identity).","lastModifiedDate":"2021-11-01"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":" */","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"        super(\"Operation would result in duplicate Appointments\");","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"tchiong":7,"YaleChen299":4}},{"path":"src/main/java/seedu/placebook/model/schedule/exceptions/EndTimeBeforeStartTimeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule.exceptions;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":" * Signals that the operation will result in an invalid {@code TimePeriod}.","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":" * The endTime of the time period is before the startTime of the time period.","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"Li-Lehao"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"public class EndTimeBeforeStartTimeException extends RuntimeException {","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":"    public EndTimeBeforeStartTimeException(String message) {","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"Li-Lehao"},"content":"        super(\"Not a valid time period: endDateTime is before startDateTime.\" + message);","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"Li-Lehao":10,"YaleChen299":1}},{"path":"src/main/java/seedu/placebook/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":" * Represents a Tag in contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"NecroWolf28"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"NecroWolf28"},"content":"     * Returns the TagName.","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"NecroWolf28"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"NecroWolf28"},"content":"    public String getTagName() {","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"NecroWolf28"},"content":"        return tagName;","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tchiong":1,"YaleChen299":2,"-":51,"NecroWolf28":7}},{"path":"src/main/java/seedu/placebook/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.UniquePersonList;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.TimePeriod;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":" * Contains utility methods for populating {@code contacts} with sample data.","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"    private static UniquePersonList getFromSamplePersons(int... index) {","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"        UniquePersonList personList \u003d new UniquePersonList();","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"        for (int i : index) {","lastModifiedDate":"2021-10-29"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"            personList.add(getSamplePersons()[i]);","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"        return personList;","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"     * Returns the list of sample appointments","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"     * This depends on the above getSamplePersons() for the app the work correctly","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"     *","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"     * @return list of appointment","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"    private static Appointment[] getSampleAppointment() {","lastModifiedDate":"2021-10-29"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"        LocalDateTime now \u003d LocalDateTime.now();","lastModifiedDate":"2021-11-01"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"        TimePeriod urgent \u003d","lastModifiedDate":"2021-10-29"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"                new TimePeriod(now.plusHours(2), now.plusHours(4));","lastModifiedDate":"2021-11-01"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"        TimePeriod medium1 \u003d","lastModifiedDate":"2021-11-01"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"                new TimePeriod(now.plusDays(3), now.plusDays(3).plusHours(2));","lastModifiedDate":"2021-11-01"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"        TimePeriod medium2 \u003d","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"                new TimePeriod(now.plusDays(3).plusHours(3), now.plusDays(3).plusHours(4));","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"        TimePeriod low1 \u003d","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"                new TimePeriod(now.plusDays(9), now.plusDays(9).plusHours(2));","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"        TimePeriod low2 \u003d","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"                new TimePeriod(now.plusDays(9).plusHours(3), now.plusDays(9).plusHours(4));","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"        return new Appointment[] {","lastModifiedDate":"2021-10-29"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"            new Appointment(getFromSamplePersons(0, 1, 2),","lastModifiedDate":"2021-10-29"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"                    new Address(\"Vivo City\"), urgent, \"Team meeting\"),","lastModifiedDate":"2021-10-29"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":"            new Appointment(getFromSamplePersons(5),","lastModifiedDate":"2021-10-29"},{"lineNumber":80,"author":{"gitId":"YaleChen299"},"content":"                    new Address(\"ABC Office\"), medium1, \"Developer team meeting\"),","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"YaleChen299"},"content":"            new Appointment(getFromSamplePersons(4),","lastModifiedDate":"2021-10-29"},{"lineNumber":82,"author":{"gitId":"YaleChen299"},"content":"                    new Address(\"Zoom\"), medium2, \"Sales Update\"),","lastModifiedDate":"2021-11-01"},{"lineNumber":83,"author":{"gitId":"YaleChen299"},"content":"            new Appointment(getFromSamplePersons(3, 4),","lastModifiedDate":"2021-10-29"},{"lineNumber":84,"author":{"gitId":"YaleChen299"},"content":"                    new Address(\"XYZ Company\"), low1, \"Project meeting\"),","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"YaleChen299"},"content":"            new Appointment(getFromSamplePersons(2, 4, 5),","lastModifiedDate":"2021-10-29"},{"lineNumber":86,"author":{"gitId":"YaleChen299"},"content":"                    new Address(\"XYZ School\"), low2, \"Talk\"),","lastModifiedDate":"2021-11-01"},{"lineNumber":87,"author":{"gitId":"YaleChen299"},"content":"        };","lastModifiedDate":"2021-10-29"},{"lineNumber":88,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":89,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":90,"author":{"gitId":"tchiong"},"content":"    public static ReadOnlyContacts getSampleContacts() {","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"tchiong"},"content":"        Contacts sampleAb \u003d new Contacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":98,"author":{"gitId":"YaleChen299"},"content":"    public static ReadOnlySchedule getSampleSchedule() {","lastModifiedDate":"2021-10-29"},{"lineNumber":99,"author":{"gitId":"YaleChen299"},"content":"        Schedule sampleSch \u003d new Schedule();","lastModifiedDate":"2021-10-29"},{"lineNumber":100,"author":{"gitId":"YaleChen299"},"content":"        for (Appointment sampleAppointment : getSampleAppointment()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":101,"author":{"gitId":"YaleChen299"},"content":"            sampleSch.addAppointment(sampleAppointment);","lastModifiedDate":"2021-10-29"},{"lineNumber":102,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":103,"author":{"gitId":"YaleChen299"},"content":"        return sampleSch;","lastModifiedDate":"2021-10-29"},{"lineNumber":104,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":105,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"tchiong":5,"YaleChen299":62,"-":48}},{"path":"src/main/java/seedu/placebook/storage/ContactsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tchiong"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"tchiong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"import java.util.Optional;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"/**","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":" * Represents a storage for {@link Contacts}.","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":" */","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"public interface ContactsStorage {","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"    Path getContactsFilePath();","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"     * Returns Contacts data as a {@link ReadOnlyContacts}.","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"tchiong"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"    Optional\u003cReadOnlyContacts\u003e readContacts() throws DataConversionException, IOException;","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"     * @see #getContactsFilePath()","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"    Optional\u003cReadOnlyContacts\u003e readContacts(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"     * Saves the given {@link ReadOnlyContacts} to the storage.","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"tchiong"},"content":"     * @param contacts cannot be null.","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"tchiong"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"    void saveContacts(ReadOnlyContacts contacts) throws IOException;","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"tchiong"},"content":"     * @see #saveContacts(ReadOnlyContacts)","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"tchiong"},"content":"    void saveContacts(ReadOnlyContacts contacts, Path filePath) throws IOException;","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"tchiong":46}},{"path":"src/main/java/seedu/placebook/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"nwhloo99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"nwhloo99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"nwhloo99"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.UniquePersonList;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.TimePeriod;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"nwhloo99"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"nwhloo99"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Client list contains duplicate person(s).\";","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"nwhloo99"},"content":"    private final List\u003cJsonAdaptedPerson\u003e clients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"nwhloo99"},"content":"    private final String location;","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"    private final JsonAdaptedTimePeriod timePeriod;","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"    private final String description;","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details.","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"clients\") List\u003cJsonAdaptedPerson\u003e clients,","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"            @JsonProperty(\"location\") String location, @JsonProperty(\"timePeriod\") JsonAdaptedTimePeriod timePeriod,","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"tchiong"},"content":"            @JsonProperty(\"description\") String description) {","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(clients);","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"        this.clients.addAll(clients);","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"        this.location \u003d location;","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"        this.timePeriod \u003d timePeriod;","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"        clients.addAll(source.getClientList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"        location \u003d source.getLocation().toString();","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"        timePeriod \u003d new JsonAdaptedTimePeriod(source.getTimePeriod());","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"        description \u003d source.getDescription();","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"nwhloo99"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Appointment} object.","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"nwhloo99"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"nwhloo99"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment.","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"        if (clients.isEmpty()) {","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"        final UniquePersonList modelClients \u003d createModelClient(this.clients);","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"nwhloo99"},"content":"        if (location \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"nwhloo99"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"nwhloo99"},"content":"        if (!Address.isValidAddress(location)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"nwhloo99"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"nwhloo99"},"content":"        final Address modelLocation \u003d new Address(location);","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"tchiong"},"content":"        if (timePeriod \u003d\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"nwhloo99"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"nwhloo99"},"content":"                    TimePeriod.class.getSimpleName()));","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"nwhloo99"},"content":"        final TimePeriod modelTimePeriod \u003d timePeriod.toModelType();","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"nwhloo99"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"nwhloo99"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"nwhloo99"},"content":"        final String modelDescription \u003d description;","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"tchiong"},"content":"        return new Appointment(modelClients, modelLocation, modelTimePeriod, modelDescription);","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"nwhloo99"},"content":"    private UniquePersonList createModelClient(List\u003cJsonAdaptedPerson\u003e clients) throws IllegalValueException {","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"nwhloo99"},"content":"        UniquePersonList modelClients \u003d new UniquePersonList();","lastModifiedDate":"2021-10-20"},{"lineNumber":91,"author":{"gitId":"nwhloo99"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : clients) {","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"nwhloo99"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2021-10-20"},{"lineNumber":93,"author":{"gitId":"nwhloo99"},"content":"            if (modelClients.contains(person)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"nwhloo99"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-20"},{"lineNumber":95,"author":{"gitId":"nwhloo99"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"nwhloo99"},"content":"            modelClients.add(person);","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"nwhloo99"},"content":"        return modelClients;","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"tchiong":4,"YaleChen299":7,"nwhloo99":89}},{"path":"src/main/java/seedu/placebook/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"YaleChen299":8,"-":101}},{"path":"src/main/java/seedu/placebook/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"YaleChen299":3,"-":45}},{"path":"src/main/java/seedu/placebook/storage/JsonAdaptedTimePeriod.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"nwhloo99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"nwhloo99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"nwhloo99"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"nwhloo99"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.TimePeriod;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"nwhloo99"},"content":"public class JsonAdaptedTimePeriod {","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"nwhloo99"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"TimePeriod\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"nwhloo99"},"content":"    private final String startDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"nwhloo99"},"content":"    private final String endDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":"     * Constructs a {@code JsonAdaptedTimePeriod} with the given start and end DateTime.","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"nwhloo99"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"    public JsonAdaptedTimePeriod(@JsonProperty(\"startDateTime\") String startDateTime,","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"             @JsonProperty(\"endDateTime\") String endDateTime) {","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"nwhloo99"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"nwhloo99"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"     * Converts a given {@code TimePeriod} into this class for Jackson use.","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"    public JsonAdaptedTimePeriod(TimePeriod source) {","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"        this.startDateTime \u003d source.getStartDateTime().format(formatter);","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"        this.endDateTime \u003d source.getEndDateTime().format(formatter);","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code TimePeriod} object.","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted TimePeriod.","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"    public TimePeriod toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"        if (startDateTime \u003d\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"                    LocalDateTime.class.getSimpleName()));","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"        final LocalDateTime modelStartDateTime \u003d LocalDateTime.parse(startDateTime, formatter);","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"        if (endDateTime \u003d\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"nwhloo99"},"content":"                    LocalDateTime.class.getSimpleName()));","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"nwhloo99"},"content":"        final LocalDateTime modelEndDateTime \u003d LocalDateTime.parse(endDateTime, formatter);","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"nwhloo99"},"content":"        return new TimePeriod(modelStartDateTime, modelEndDateTime);","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"YaleChen299":3,"nwhloo99":57}},{"path":"src/main/java/seedu/placebook/storage/JsonContactsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.FileUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.JsonUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":" * A class to access Contact data stored as a json file on the hard disk.","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"public class JsonContactsStorage implements ContactsStorage {","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonContactsStorage.class);","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"    public JsonContactsStorage(Path filePath) {","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"    public Path getContactsFilePath() {","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"    public Optional\u003cReadOnlyContacts\u003e readContacts() throws DataConversionException {","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"tchiong"},"content":"        return readContacts(filePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"tchiong"},"content":"     * Similar to {@link #readContacts()}.","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"tchiong"},"content":"    public Optional\u003cReadOnlyContacts\u003e readContacts(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"        Optional\u003cJsonSerializableContacts\u003e jsonContacts \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"tchiong"},"content":"                filePath, JsonSerializableContacts.class);","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"tchiong"},"content":"        if (!jsonContacts.isPresent()) {","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"            return Optional.of(jsonContacts.get().toModelType());","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"tchiong"},"content":"    public void saveContacts(ReadOnlyContacts contacts) throws IOException {","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"        saveContacts(contacts, filePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"tchiong"},"content":"     * Similar to {@link #saveContacts(ReadOnlyContacts)}.","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"tchiong"},"content":"    public void saveContacts(ReadOnlyContacts contacts, Path filePath) throws IOException {","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"tchiong"},"content":"        requireNonNull(contacts);","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"tchiong"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableContacts(contacts), filePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tchiong":20,"YaleChen299":6,"-":54}},{"path":"src/main/java/seedu/placebook/storage/JsonScheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"nwhloo99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"nwhloo99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"nwhloo99"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"nwhloo99"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.FileUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.JsonUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"nwhloo99"},"content":"public class JsonScheduleStorage implements ScheduleStorage {","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonScheduleStorage.class);","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":"    private Path filePath;","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"nwhloo99"},"content":"    public JsonScheduleStorage(Path filePath) {","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"nwhloo99"},"content":"    public Path getScheduleFilePath() {","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"nwhloo99"},"content":"        return filePath;","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException {","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"        return readSchedule(filePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"     * Similar to {@link #readSchedule()}.","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"        Optional\u003cJsonSerializableSchedule\u003e jsonSchedule \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"                filePath, JsonSerializableSchedule.class);","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"        if (!jsonSchedule.isPresent()) {","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"            return Optional.empty();","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"            return Optional.of(jsonSchedule.get().toModelType());","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"nwhloo99"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"nwhloo99"},"content":"    public void saveSchedule(ReadOnlySchedule schedule) throws IOException {","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"        saveSchedule(schedule, filePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"     * Similar to {@link #saveSchedule(ReadOnlySchedule)}.","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"nwhloo99"},"content":"    public void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException {","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(schedule);","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"nwhloo99"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"nwhloo99"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"tchiong"},"content":"        logger.info(\"Saved to \" + filePath);","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"nwhloo99"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableSchedule(schedule), filePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"tchiong":1,"YaleChen299":7,"nwhloo99":69}},{"path":"src/main/java/seedu/placebook/storage/JsonSerializableContacts.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":" * Immutable Contacts that are serializable to JSON format.","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"@JsonRootName(value \u003d \"contacts\")","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"class JsonSerializableContacts {","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"     * Constructs a {@code JsonSerializableContacts} with the given persons.","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"    public JsonSerializableContacts(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"     * Converts a given {@code ReadOnlyContacts} into this class for Jackson use.","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"tchiong"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableContacts}.","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"    public JsonSerializableContacts(ReadOnlyContacts source) {","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"tchiong"},"content":"     * Converts this Contacts into the model\u0027s {@code Contacts} object.","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"    public Contacts toModelType() throws IllegalValueException {","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"tchiong"},"content":"        Contacts contacts \u003d new Contacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"tchiong"},"content":"            if (contacts.hasPerson(person)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"            contacts.addPerson(person);","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"tchiong"},"content":"        return contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tchiong":15,"YaleChen299":3,"nwhloo99":1,"-":41}},{"path":"src/main/java/seedu/placebook/storage/JsonSerializableSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"nwhloo99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"nwhloo99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"nwhloo99"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"nwhloo99"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"nwhloo99"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"nwhloo99"},"content":" * An Immutable Schedule that is serializable to JSON format.","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"@JsonRootName(value \u003d \"schedule\")","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":"public class JsonSerializableSchedule {","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"nwhloo99"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"Schedule contains duplicate appointment(s).\";","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"    public static final String MESSAGE_CONFLICTING_APPOINTMENT \u003d \"Schedule contains conflicting appointments.\";","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"nwhloo99"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"     * Constructs a {@code JsonSerializableSchedule} with the given appointments.","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"    public JsonSerializableSchedule(@JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"        this.appointments.addAll(appointments);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"tchiong"},"content":"     * Converts a given {@code ReadOnlySchedule} into this class for Jackson use.","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableSchedule}.","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"    public JsonSerializableSchedule(ReadOnlySchedule source) {","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"        appointments.addAll(source.getSchedule().stream().map(JsonAdaptedAppointment::new)","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"                    .collect(Collectors.toList()));","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"     * Converts this Schedule into the model\u0027s {@code Schedule} object.","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"    public Schedule toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"        Schedule schedule \u003d new Schedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"        for (JsonAdaptedAppointment jsonAdaptedSchedule : appointments) {","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"            Appointment appointment \u003d jsonAdaptedSchedule.toModelType();","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"nwhloo99"},"content":"            if (schedule.contains(appointment)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2021-11-01"},{"lineNumber":56,"author":{"gitId":"nwhloo99"},"content":"            }","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":58,"author":{"gitId":"nwhloo99"},"content":"            if (schedule.hasConflictingAppointment(appointment)) {","lastModifiedDate":"2021-11-01"},{"lineNumber":59,"author":{"gitId":"nwhloo99"},"content":"                throw new IllegalValueException(MESSAGE_CONFLICTING_APPOINTMENT);","lastModifiedDate":"2021-11-01"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"nwhloo99"},"content":"            schedule.addAppointment(appointment);","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"        return schedule;","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"tchiong":2,"YaleChen299":5,"nwhloo99":58}},{"path":"src/main/java/seedu/placebook/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.JsonUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"YaleChen299":5,"-":42}},{"path":"src/main/java/seedu/placebook/storage/ScheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"nwhloo99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"nwhloo99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"nwhloo99"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":" * Represents a storage for {@link seedu.placebook.model.schedule.Schedule}.","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"nwhloo99"},"content":"public interface ScheduleStorage {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"nwhloo99"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"    Path getScheduleFilePath();","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"     * Returns contact data as a {@link ReadOnlyContacts}.","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"nwhloo99"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"nwhloo99"},"content":"    Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException;","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"     * @see #getScheduleFilePath()","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"    Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"     * Saves the given {@link ReadOnlyContacts} to the storage.","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"     * @param schedule cannot be null.","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"    void saveSchedule(ReadOnlySchedule schedule) throws IOException;","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"     * @see #saveSchedule(ReadOnlySchedule)","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"    void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException;","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"tchiong":3,"YaleChen299":4,"nwhloo99":39}},{"path":"src/main/java/seedu/placebook/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"public interface Storage extends ContactsStorage, UserPrefsStorage, ScheduleStorage {","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"    Path getContactsFilePath();","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"    Optional\u003cReadOnlyContacts\u003e readContacts() throws DataConversionException, IOException;","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"    void saveContacts(ReadOnlyContacts contacts) throws IOException;","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"    Path getScheduleFilePath();","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"    Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException;","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"    void saveSchedule(ReadOnlySchedule schedule) throws IOException;","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"tchiong":5,"YaleChen299":5,"nwhloo99":8,"-":23}},{"path":"src/main/java/seedu/placebook/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":" * Manages storage of Placebook data in local storage.","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"    private ContactsStorage contactsStorage;","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"    private ScheduleStorage scheduleStorage;","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"     * Creates a {@code StorageManager} with the given {@code ContactsStorage},","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"     * {@code UserPrefStorage} and {@code ScheduleStorage}","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"     * and {@code ScheduleStorage}.","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"    public StorageManager(ContactsStorage contactsStorage, UserPrefsStorage userPrefsStorage,","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"                          ScheduleStorage scheduleStorage) {","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"        this.contactsStorage \u003d contactsStorage;","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"        this.scheduleStorage \u003d scheduleStorage;","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Contacts methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"    public Path getContactsFilePath() {","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"tchiong"},"content":"        return contactsStorage.getContactsFilePath();","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"    public Optional\u003cReadOnlyContacts\u003e readContacts() throws DataConversionException, IOException {","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"        return readContacts(contactsStorage.getContactsFilePath());","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"tchiong"},"content":"    public Optional\u003cReadOnlyContacts\u003e readContacts(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"tchiong"},"content":"        return contactsStorage.readContacts(filePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"tchiong"},"content":"    public void saveContacts(ReadOnlyContacts contacts) throws IOException {","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"tchiong"},"content":"        saveContacts(contacts, contactsStorage.getContactsFilePath());","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":80,"author":{"gitId":"tchiong"},"content":"    public void saveContacts(ReadOnlyContacts contacts, Path filePath) throws IOException {","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":82,"author":{"gitId":"tchiong"},"content":"        contactsStorage.saveContacts(contacts, filePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"nwhloo99"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":87,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"nwhloo99"},"content":"    public Path getScheduleFilePath() {","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"nwhloo99"},"content":"        return scheduleStorage.getScheduleFilePath();","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"nwhloo99"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException {","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"nwhloo99"},"content":"        return readSchedule(scheduleStorage.getScheduleFilePath());","lastModifiedDate":"2021-10-13"},{"lineNumber":95,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":97,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"nwhloo99"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"nwhloo99"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"nwhloo99"},"content":"        return scheduleStorage.readSchedule(filePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"nwhloo99"},"content":"    public void saveSchedule(ReadOnlySchedule schedule) throws IOException {","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"nwhloo99"},"content":"        saveSchedule(schedule, scheduleStorage.getScheduleFilePath());","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"nwhloo99"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"nwhloo99"},"content":"    public void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException {","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"nwhloo99"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"nwhloo99"},"content":"        scheduleStorage.saveSchedule(schedule, filePath);","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tchiong":18,"YaleChen299":6,"nwhloo99":32,"-":57}},{"path":"src/main/java/seedu/placebook/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":" * Represents a storage for {@link seedu.placebook.model.UserPrefs}.","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"     * Saves the given {@link seedu.placebook.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"YaleChen299":6,"-":30}},{"path":"src/main/java/seedu/placebook/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.control.TitledPane;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.layout.GridPane;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.UniquePersonList;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":" * An UI component that displays information of a {@code Appointment}.","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"    private static final BackgroundFill RED \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"            new BackgroundFill(Color.RED.deriveColor(0, 1, 1, 0.1), null, null);","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"    private static final BackgroundFill YELLOW \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"            new BackgroundFill(Color.ORANGE.deriveColor(0, 1, 1, 0.12), null, null);","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"    private static final BackgroundFill GREEN \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"            new BackgroundFill(Color.GREEN.deriveColor(0, 1, 1, 0.12), null, null);","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"    public final Appointment appointment;","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"    private HBox appointmentCardPane;","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"    private GridPane appointmentColorPane;","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"    private Label description;","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"    private Label id;","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"    private TitledPane clientsPane;","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"    private Text clientNames;","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"    private Label address;","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"    private Label startDate;","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"    private Label endDate;","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"     * Creates a {@code AppointmentCard} with the given {@code Appointment} and index to display.","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"        super(FXML);","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"        description.setText(appointment.getDescription());","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"        address.setText(appointment.getLocation().value);","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"        startDate.setText(appointment.getStartDateTimeString()); // Changed from date.setText","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"        endDate.setText(appointment.getEndDateTimeString());","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"        UniquePersonList clients \u003d appointment.getClients();","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"        clientNames.textProperty().bindBidirectional(clients.getPersonNames());","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"        appointmentCardPane.widthProperty().addListener((observable, oldValue, newValue) -\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"                clientNames.setWrappingWidth((Double) newValue * 3 / 4)","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"        );","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"        PersonListPanel clientsDetail \u003d new PersonListPanel(clients.asUnmodifiableObservableList());","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"        clientsPane.setContent(clientsDetail.getRoot());","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"YaleChen299"},"content":"        this.setUrgencyDisplay();","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"YaleChen299"},"content":"    private void setUrgencyDisplay() {","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"YaleChen299"},"content":"        switch (appointment.getUrgency()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"YaleChen299"},"content":"        case HIGH:","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"YaleChen299"},"content":"            appointmentColorPane.setBackground(new Background(RED));","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"YaleChen299"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"YaleChen299"},"content":"        case MEDIUM:","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"YaleChen299"},"content":"            appointmentColorPane.setBackground(new Background(YELLOW));","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"YaleChen299"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"YaleChen299"},"content":"        case LOW:","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"YaleChen299"},"content":"            appointmentColorPane.setBackground(new Background(GREEN));","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"YaleChen299"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"YaleChen299"},"content":"        default:","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"YaleChen299"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"YaleChen299"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"YaleChen299"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"YaleChen299"},"content":"            return true;","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"YaleChen299"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"YaleChen299"},"content":"        if (!(other instanceof AppointmentCard)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"YaleChen299"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"YaleChen299"},"content":"        // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"YaleChen299"},"content":"        AppointmentCard card \u003d (AppointmentCard) other;","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"YaleChen299"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"YaleChen299"},"content":"                \u0026\u0026 clientsPane.equals(card.clientsPane);","lastModifiedDate":"2021-10-20"},{"lineNumber":114,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"YaleChen299":114,"nwhloo99":1}},{"path":"src/main/java/seedu/placebook/ui/AppointmentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"/**","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":" * Panel containing the list of appointments.","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":" */","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"    private ListView\u003cAppointment\u003e appointmentListView;","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"        super(FXML);","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"        appointmentListView.setItems(appointmentList);","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"        @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"        protected void updateItem(Appointment appointment, boolean empty) {","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"            if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"                setText(null);","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"            } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"YaleChen299":49}},{"path":"src/main/java/seedu/placebook/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.CommandResult;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.util.CommandHistory;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"    private final CommandHistory history;","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"        this.history \u003d new CommandHistory();","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"            history.addCommand(commandText);","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"YaleChen299"},"content":"         * @see seedu.placebook.logic.Logic#execute(String)","lastModifiedDate":"2021-10-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"YaleChen299"},"content":"     * Gets the user input history and display to the text field.","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"YaleChen299"},"content":"     * Sets the caret position to the last position.","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"YaleChen299"},"content":"    private void handleTextFieldKeyPressed(KeyEvent event) {","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"YaleChen299"},"content":"        if (event.getCode() \u003d\u003d KeyCode.UP) {","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"YaleChen299"},"content":"            commandTextField.setText(history.getLastInput());","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"YaleChen299"},"content":"            commandTextField.positionCaret(commandTextField.getLength());","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"YaleChen299"},"content":"        if (event.getCode() \u003d\u003d KeyCode.DOWN) {","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"YaleChen299"},"content":"            commandTextField.setText(history.getNextInput());","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"YaleChen299"},"content":"            commandTextField.positionCaret(commandTextField.getLength());","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"YaleChen299":26,"-":80}},{"path":"src/main/java/seedu/placebook/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s1-cs2103t-t12-3.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"YaleChen299":2,"nwhloo99":1,"-":99}},{"path":"src/main/java/seedu/placebook/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.Logic;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.CommandResult;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.util.ThemeManager;","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"    private AppointmentListPanel appointmentListPanel;","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"    private ThemeManager themeManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"    private StackPane appointmentListPanelPlaceholder;","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"    private Button themeButton;","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"    public MainWindow(Stage primaryStage, Logic logic, ThemeManager themeManager) {","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":"        this.themeManager \u003d themeManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"YaleChen299"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"YaleChen299"},"content":"        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"tchiong"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getContactsFilePath());","lastModifiedDate":"2021-11-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":140,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":141,"author":{"gitId":"YaleChen299"},"content":"     * Fills up person list and appointment list again.","lastModifiedDate":"2021-11-06"},{"lineNumber":142,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":143,"author":{"gitId":"YaleChen299"},"content":"    void updateLists() {","lastModifiedDate":"2021-11-06"},{"lineNumber":144,"author":{"gitId":"YaleChen299"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2021-11-06"},{"lineNumber":145,"author":{"gitId":"YaleChen299"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2021-11-06"},{"lineNumber":146,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":147,"author":{"gitId":"YaleChen299"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());","lastModifiedDate":"2021-11-06"},{"lineNumber":148,"author":{"gitId":"YaleChen299"},"content":"        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());","lastModifiedDate":"2021-11-06"},{"lineNumber":149,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":150,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":176,"author":{"gitId":"YaleChen299"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2021-10-29"},{"lineNumber":177,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":178,"author":{"gitId":"YaleChen299"},"content":"    @FXML","lastModifiedDate":"2021-10-29"},{"lineNumber":179,"author":{"gitId":"YaleChen299"},"content":"    public void handleThemeChange() {","lastModifiedDate":"2021-10-29"},{"lineNumber":180,"author":{"gitId":"YaleChen299"},"content":"        themeManager.changeTheme(primaryStage, themeButton);","lastModifiedDate":"2021-10-29"},{"lineNumber":181,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":182,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"YaleChen299"},"content":"     * @see seedu.placebook.logic.Logic#execute(String)","lastModifiedDate":"2021-10-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"Li-Lehao"},"content":"            if (commandResult.isUndo()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":223,"author":{"gitId":"YaleChen299"},"content":"                updateLists();","lastModifiedDate":"2021-11-06"},{"lineNumber":224,"author":{"gitId":"Li-Lehao"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"tchiong":1,"Li-Lehao":2,"YaleChen299":43,"-":186}},{"path":"src/main/java/seedu/placebook/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"     * Creates a {@code PersonCard} with the given {@code Person} and index to display.","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"YaleChen299":3,"-":74}},{"path":"src/main/java/seedu/placebook/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    private static final double cellHeight \u003d 110;","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"        personListView.setPrefHeight(cellHeight * personList.size());","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"YaleChen299":5,"-":46}},{"path":"src/main/java/seedu/placebook/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"YaleChen299":1,"-":27}},{"path":"src/main/java/seedu/placebook/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":1,"-":27}},{"path":"src/main/java/seedu/placebook/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"    boolean showDeleteDialogAndWait(String contentText);","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"YaleChen299":2,"-":12}},{"path":"src/main/java/seedu/placebook/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.control.ButtonType;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.MainApp;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.LogsCenter;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.StringUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.Logic;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.util.ThemeManager;","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/placebook.png\";","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    private ThemeManager themeManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"        this.themeManager \u003d new ThemeManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic, themeManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"    private void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"        alert.getDialogPane().getStylesheets().add(themeManager.getCurrentStylesheet());","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":95,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"YaleChen299"},"content":"     * Shows a confirmation dialog to confirm the deletion of an object.","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"YaleChen299"},"content":"    @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"YaleChen299"},"content":"    public boolean showDeleteDialogAndWait(String contentText) {","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"YaleChen299"},"content":"        final Alert alert \u003d new Alert(AlertType.CONFIRMATION);","lastModifiedDate":"2021-10-20"},{"lineNumber":101,"author":{"gitId":"YaleChen299"},"content":"        alert.getDialogPane().getStylesheets().add(themeManager.getCurrentStylesheet());","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":103,"author":{"gitId":"YaleChen299"},"content":"        alert.setHeight(500);","lastModifiedDate":"2021-10-20"},{"lineNumber":104,"author":{"gitId":"YaleChen299"},"content":"        alert.setTitle(\"Confirmation Dialog\");","lastModifiedDate":"2021-10-20"},{"lineNumber":105,"author":{"gitId":"YaleChen299"},"content":"        alert.setHeaderText(\"Are you sure you want to delete?\");","lastModifiedDate":"2021-10-20"},{"lineNumber":106,"author":{"gitId":"YaleChen299"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2021-10-20"},{"lineNumber":107,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":108,"author":{"gitId":"YaleChen299"},"content":"        Optional\u003cButtonType\u003e result \u003d alert.showAndWait();","lastModifiedDate":"2021-10-20"},{"lineNumber":109,"author":{"gitId":"YaleChen299"},"content":"        return result.orElseGet(() -\u003e ButtonType.CANCEL) \u003d\u003d ButtonType.OK;","lastModifiedDate":"2021-10-20"},{"lineNumber":110,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":111,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"YaleChen299":32,"-":80}},{"path":"src/main/java/seedu/placebook/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.MainApp;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"YaleChen299":2,"-":86}},{"path":"src/main/java/seedu/placebook/ui/util/CommandHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui.util;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import java.util.List;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"public class CommandHistory {","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"    private final List\u003cString\u003e history;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"    private int historyIndex;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"     * Constructs the CommandHistory Class","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"    public CommandHistory() {","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"        this.history \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"        this.historyIndex \u003d 0;","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"     * Adds the command to the history","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"    public void addCommand(String commandString) {","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"        history.add(commandString);","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"        historyIndex \u003d history.size();","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"     * Gets the last user input in the history of this instance.","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"     * return the first input if there is no more last history.","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"     * @return a string of user input history","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"    public String getLastInput() {","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"            historyIndex \u003d Math.max(historyIndex - 1, 0);","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"            return history.get(historyIndex);","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"            return \"\";","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"     * Gets the next user input in the history of this instance.","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"     * return an empty string if there is no more next history.","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"     * @return a string of user input history","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"    public String getNextInput() {","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"            historyIndex \u003d Math.min(historyIndex + 1, history.size());","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"            return history.get(historyIndex);","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"            return \"\";","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"YaleChen299":56}},{"path":"src/main/java/seedu/placebook/ui/util/ThemeManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui.util;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"public class ThemeManager {","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"    private static final double size \u003d 30;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"    private static final String DARK_THEME_CSS \u003d \"view/DarkTheme.css\";","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"    private static final String LIGHT_THEME_CSS \u003d \"view/LightTheme.css\";","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"    private static final String SUN \u003d \"images/sun.png\";","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"    private static final String MOON \u003d \"images/moon.png\";","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"    private enum Theme { LIGHT, DARK }","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"    private Theme currentTheme;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"    private String currentStylesheet;","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    private String currentButtonImage;","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"     * Constructs ThemeManager","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"    public ThemeManager() {","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"        currentTheme \u003d Theme.LIGHT;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"        currentStylesheet \u003d LIGHT_THEME_CSS;","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"        currentButtonImage \u003d SUN;","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"     * Changes the current theme.","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"     *","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"     * @param primaryStage the primary stage","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"     * @param themeButton the theme button","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"    public void changeTheme(Stage primaryStage, Button themeButton) {","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"        primaryStage.getScene().getStylesheets().remove(currentStylesheet);","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"        toggle();","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"        primaryStage.getScene().getStylesheets().add(currentStylesheet);","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"        ImageView buttonGraphic \u003d new ImageView(currentButtonImage);","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"        buttonGraphic.setFitHeight(size);","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"        buttonGraphic.setFitWidth(size);","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"        themeButton.setGraphic(buttonGraphic);","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"    private void toggle() {","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"        switch (currentTheme) {","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"        case DARK:","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"            currentTheme \u003d Theme.LIGHT;","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"            currentStylesheet \u003d LIGHT_THEME_CSS;","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"            currentButtonImage \u003d SUN;","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"        case LIGHT:","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"            currentTheme \u003d Theme.DARK;","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"            currentStylesheet \u003d DARK_THEME_CSS;","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"            currentButtonImage \u003d MOON;","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"        default:","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"    public String getCurrentStylesheet() {","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"        return this.currentStylesheet;","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"YaleChen299":66}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.control.TitledPane?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"\u003cHBox id\u003d\"appointmentCardPane\" fx:id\u003d\"appointmentCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"    \u003cGridPane fx:id\u003d\"appointmentColorPane\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"15\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$description\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"            \u003cTitledPane fx:id\u003d\"clientsPane\" styleClass\u003d\"titled_pane\" expanded\u003d\"false\" maxHeight\u003d\"400\"\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"                \u003cgraphic\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"                    \u003cText fx:id\u003d\"clientNames\" styleClass\u003d\"client_names\" text\u003d\"\\$client names\" /\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"                \u003c/graphic\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"            \u003c/TitledPane\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"            \u003cHBox\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"                \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"                \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"  ~  \" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"                \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"YaleChen299":46}},{"path":"src/main/resources/view/AppointmentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"    \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"YaleChen299":8}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2018-04-01"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onKeyPressed\u003d\"#handleTextFieldKeyPressed\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"YaleChen299":1,"-":8}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: black;","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"    background-color: black; /* Used in the default.html file */","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"YaleChen299"},"content":".list-cell:empty {","lastModifiedDate":"2021-10-29"},{"lineNumber":111,"author":{"gitId":"YaleChen299"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2021-10-29"},{"lineNumber":112,"author":{"gitId":"YaleChen299"},"content":"    -fx-background: #383838;","lastModifiedDate":"2021-10-29"},{"lineNumber":113,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":114,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":150,"author":{"gitId":"YaleChen299"},"content":".titled_pane {","lastModifiedDate":"2021-10-08"},{"lineNumber":151,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-10-08"},{"lineNumber":152,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2021-10-08"},{"lineNumber":153,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-08"},{"lineNumber":154,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":155,"author":{"gitId":"YaleChen299"},"content":".titled_pane \u003e .title {","lastModifiedDate":"2021-10-08"},{"lineNumber":156,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-10-08"},{"lineNumber":157,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2021-10-08"},{"lineNumber":158,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-08"},{"lineNumber":159,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":160,"author":{"gitId":"YaleChen299"},"content":".titled_pane \u003e *.content  {","lastModifiedDate":"2021-10-08"},{"lineNumber":161,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-10-08"},{"lineNumber":162,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2021-10-08"},{"lineNumber":163,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-08"},{"lineNumber":164,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":280,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":284,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":305,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":307,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":312,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":315,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":317,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":321,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":323,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":325,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":327,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":329,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"YaleChen299"},"content":"#appointmentCardPane {","lastModifiedDate":"2021-10-08"},{"lineNumber":335,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-08"},{"lineNumber":336,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2021-10-08"},{"lineNumber":337,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-08"},{"lineNumber":338,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":339,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":342,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":344,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":353,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":355,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":357,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":359,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":362,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":364,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":367,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":369,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":376,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":377,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":378,"author":{"gitId":"YaleChen299"},"content":"#themeButton {","lastModifiedDate":"2021-10-29"},{"lineNumber":379,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":380,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":381,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":382,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":383,"author":{"gitId":"YaleChen299"},"content":".client_names {","lastModifiedDate":"2021-11-04"},{"lineNumber":384,"author":{"gitId":"YaleChen299"},"content":"    -fx-fill: white;","lastModifiedDate":"2021-11-04"},{"lineNumber":385,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"YaleChen299":36,"-":349}},{"path":"src/main/resources/view/LightTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"* {","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"    -grey4: #798EA0;","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"    -grey3: #D8DEE9;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"    -grey2: #E5E9F0;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"    -grey1: #ECEFF4;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"    -frost1: #cadeef;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"    -frost2: #0784b5;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"    -frost3: #81A1C1;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"    -frost4: #5E81AC;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"    -night: #2E3440;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":".background {","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-frost4, 20%);","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"    background-color: -frost4; /* Used in the default.html file */","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":".label {","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":".label-bright {","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":".label-header {","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":".text-field {","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":".tab-pane {","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":".table-view {","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"    -fx-base: -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"    -fx-control-inner-background: -frost4;","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -frost4;","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 5;","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":".table-view .column-header-background {","lastModifiedDate":"2021-10-29"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2021-10-29"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"    -fx-size: 35;","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color:","lastModifiedDate":"2021-10-29"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"        transparent","lastModifiedDate":"2021-10-29"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"        transparent","lastModifiedDate":"2021-10-29"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2021-10-29"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"        transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":".table-view .column-header .label {","lastModifiedDate":"2021-10-29"},{"lineNumber":80,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2021-10-29"},{"lineNumber":81,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-10-29"},{"lineNumber":82,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":83,"author":{"gitId":"YaleChen299"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2021-10-29"},{"lineNumber":84,"author":{"gitId":"YaleChen299"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":85,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":86,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":87,"author":{"gitId":"YaleChen299"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2021-10-29"},{"lineNumber":88,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-frost1, 50%);","lastModifiedDate":"2021-10-29"},{"lineNumber":89,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":90,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":91,"author":{"gitId":"YaleChen299"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2021-10-29"},{"lineNumber":92,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-grey1, 20%);","lastModifiedDate":"2021-10-29"},{"lineNumber":93,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: transparent transparent transparent -grey3;","lastModifiedDate":"2021-10-29"},{"lineNumber":94,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":95,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":96,"author":{"gitId":"YaleChen299"},"content":".split-pane {","lastModifiedDate":"2021-10-29"},{"lineNumber":97,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":98,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":99,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-grey1, 20%);","lastModifiedDate":"2021-10-29"},{"lineNumber":100,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":101,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":102,"author":{"gitId":"YaleChen299"},"content":".list-view {","lastModifiedDate":"2021-10-29"},{"lineNumber":103,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":104,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":105,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey4;","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":107,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":108,"author":{"gitId":"YaleChen299"},"content":".list-cell {","lastModifiedDate":"2021-10-29"},{"lineNumber":109,"author":{"gitId":"YaleChen299"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":110,"author":{"gitId":"YaleChen299"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":111,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":112,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":113,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":114,"author":{"gitId":"YaleChen299"},"content":".list-cell:filled:even {","lastModifiedDate":"2021-10-29"},{"lineNumber":115,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey3;","lastModifiedDate":"2021-10-29"},{"lineNumber":116,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":117,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":118,"author":{"gitId":"YaleChen299"},"content":".list-cell:filled:odd {","lastModifiedDate":"2021-10-29"},{"lineNumber":119,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":120,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":121,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":122,"author":{"gitId":"YaleChen299"},"content":".list-cell:empty {","lastModifiedDate":"2021-10-29"},{"lineNumber":123,"author":{"gitId":"YaleChen299"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2021-10-29"},{"lineNumber":124,"author":{"gitId":"YaleChen299"},"content":"    -fx-background: -grey4;","lastModifiedDate":"2021-10-29"},{"lineNumber":125,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":126,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":127,"author":{"gitId":"YaleChen299"},"content":".list-cell:filled:selected {","lastModifiedDate":"2021-10-29"},{"lineNumber":128,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-frost1, 30%);","lastModifiedDate":"2021-10-29"},{"lineNumber":129,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":130,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":131,"author":{"gitId":"YaleChen299"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2021-10-29"},{"lineNumber":132,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: -frost4;","lastModifiedDate":"2021-10-29"},{"lineNumber":133,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2021-10-29"},{"lineNumber":134,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":135,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":136,"author":{"gitId":"YaleChen299"},"content":".list-cell:filled:selected #appointmentCardPane {","lastModifiedDate":"2021-10-29"},{"lineNumber":137,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: -frost4;","lastModifiedDate":"2021-10-29"},{"lineNumber":138,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2021-10-29"},{"lineNumber":139,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":140,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":141,"author":{"gitId":"YaleChen299"},"content":".list-cell .label {","lastModifiedDate":"2021-10-29"},{"lineNumber":142,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":143,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":144,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":145,"author":{"gitId":"YaleChen299"},"content":".cell_big_label {","lastModifiedDate":"2021-10-29"},{"lineNumber":146,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-10-29"},{"lineNumber":147,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2021-10-29"},{"lineNumber":148,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-10-29"},{"lineNumber":149,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":150,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":151,"author":{"gitId":"YaleChen299"},"content":".cell_small_label {","lastModifiedDate":"2021-10-29"},{"lineNumber":152,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-10-29"},{"lineNumber":153,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2021-10-29"},{"lineNumber":154,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-10-29"},{"lineNumber":155,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":156,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":157,"author":{"gitId":"YaleChen299"},"content":".stack-pane {","lastModifiedDate":"2021-10-29"},{"lineNumber":158,"author":{"gitId":"YaleChen299"},"content":"     -fx-background-color: derive(-grey2, 20%);","lastModifiedDate":"2021-10-29"},{"lineNumber":159,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":160,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":161,"author":{"gitId":"YaleChen299"},"content":".pane-with-border {","lastModifiedDate":"2021-10-29"},{"lineNumber":162,"author":{"gitId":"YaleChen299"},"content":"     -fx-background-color: derive(-grey1, 20%);","lastModifiedDate":"2021-10-29"},{"lineNumber":163,"author":{"gitId":"YaleChen299"},"content":"     -fx-border-color: derive(-grey1, 10%);","lastModifiedDate":"2021-10-29"},{"lineNumber":164,"author":{"gitId":"YaleChen299"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2021-10-29"},{"lineNumber":165,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":166,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":167,"author":{"gitId":"YaleChen299"},"content":".titled_pane {","lastModifiedDate":"2021-10-29"},{"lineNumber":168,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":169,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2021-10-29"},{"lineNumber":170,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":171,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":172,"author":{"gitId":"YaleChen299"},"content":".titled_pane \u003e .title {","lastModifiedDate":"2021-10-29"},{"lineNumber":173,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-grey1, 20%);","lastModifiedDate":"2021-10-29"},{"lineNumber":174,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":175,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":176,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":177,"author":{"gitId":"YaleChen299"},"content":".titled_pane \u003e *.content  {","lastModifiedDate":"2021-10-29"},{"lineNumber":178,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-grey1, 20%);","lastModifiedDate":"2021-10-29"},{"lineNumber":179,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":180,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":181,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":182,"author":{"gitId":"YaleChen299"},"content":".status-bar {","lastModifiedDate":"2021-10-29"},{"lineNumber":183,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey3;","lastModifiedDate":"2021-10-29"},{"lineNumber":184,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":185,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":186,"author":{"gitId":"YaleChen299"},"content":".result-display {","lastModifiedDate":"2021-10-29"},{"lineNumber":187,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":188,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-10-29"},{"lineNumber":189,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2021-10-29"},{"lineNumber":190,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":191,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":192,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":193,"author":{"gitId":"YaleChen299"},"content":".result-display .label {","lastModifiedDate":"2021-10-29"},{"lineNumber":194,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night !important;","lastModifiedDate":"2021-10-29"},{"lineNumber":195,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":196,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":197,"author":{"gitId":"YaleChen299"},"content":".status-bar .label {","lastModifiedDate":"2021-10-29"},{"lineNumber":198,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-10-29"},{"lineNumber":199,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":200,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2021-10-29"},{"lineNumber":201,"author":{"gitId":"YaleChen299"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2021-10-29"},{"lineNumber":202,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":203,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":204,"author":{"gitId":"YaleChen299"},"content":".status-bar-with-border {","lastModifiedDate":"2021-10-29"},{"lineNumber":205,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-grey1, 30%);","lastModifiedDate":"2021-10-29"},{"lineNumber":206,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: derive(-grey1, 25%);","lastModifiedDate":"2021-10-29"},{"lineNumber":207,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2021-10-29"},{"lineNumber":208,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":209,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":210,"author":{"gitId":"YaleChen299"},"content":".status-bar-with-border .label {","lastModifiedDate":"2021-10-29"},{"lineNumber":211,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":212,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":213,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":214,"author":{"gitId":"YaleChen299"},"content":".grid-pane {","lastModifiedDate":"2021-10-29"},{"lineNumber":215,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-grey1, 30%);","lastModifiedDate":"2021-10-29"},{"lineNumber":216,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: derive(-grey1, 30%);","lastModifiedDate":"2021-10-29"},{"lineNumber":217,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2021-10-29"},{"lineNumber":218,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":219,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":220,"author":{"gitId":"YaleChen299"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2021-10-29"},{"lineNumber":221,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-grey1, 30%);","lastModifiedDate":"2021-10-29"},{"lineNumber":222,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":223,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":224,"author":{"gitId":"YaleChen299"},"content":".context-menu {","lastModifiedDate":"2021-10-29"},{"lineNumber":225,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":226,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":227,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":228,"author":{"gitId":"YaleChen299"},"content":".context-menu .label {","lastModifiedDate":"2021-10-29"},{"lineNumber":229,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":230,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":231,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":232,"author":{"gitId":"YaleChen299"},"content":".context-menu .label :focused {","lastModifiedDate":"2021-10-29"},{"lineNumber":233,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":234,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey4;","lastModifiedDate":"2021-10-29"},{"lineNumber":235,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":236,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":237,"author":{"gitId":"YaleChen299"},"content":".menu-bar {","lastModifiedDate":"2021-10-29"},{"lineNumber":238,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey3;","lastModifiedDate":"2021-10-29"},{"lineNumber":239,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":240,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":241,"author":{"gitId":"YaleChen299"},"content":".menu-bar .label {","lastModifiedDate":"2021-10-29"},{"lineNumber":242,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2021-10-29"},{"lineNumber":243,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-10-29"},{"lineNumber":244,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":245,"author":{"gitId":"YaleChen299"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2021-10-29"},{"lineNumber":246,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":247,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":248,"author":{"gitId":"YaleChen299"},"content":".menu .left-container {","lastModifiedDate":"2021-10-29"},{"lineNumber":249,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":250,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":251,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":252,"author":{"gitId":"YaleChen299"},"content":"/*","lastModifiedDate":"2021-10-29"},{"lineNumber":253,"author":{"gitId":"YaleChen299"},"content":" * Metro style Push Button","lastModifiedDate":"2021-10-29"},{"lineNumber":254,"author":{"gitId":"YaleChen299"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2021-10-29"},{"lineNumber":255,"author":{"gitId":"YaleChen299"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2021-10-29"},{"lineNumber":256,"author":{"gitId":"YaleChen299"},"content":" */","lastModifiedDate":"2021-10-29"},{"lineNumber":257,"author":{"gitId":"YaleChen299"},"content":".button {","lastModifiedDate":"2021-10-29"},{"lineNumber":258,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2021-10-29"},{"lineNumber":259,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2021-10-29"},{"lineNumber":260,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2021-10-29"},{"lineNumber":261,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":262,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":263,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-10-29"},{"lineNumber":264,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-10-29"},{"lineNumber":265,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2021-10-29"},{"lineNumber":266,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2021-10-29"},{"lineNumber":267,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":268,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":269,"author":{"gitId":"YaleChen299"},"content":".button:hover {","lastModifiedDate":"2021-10-29"},{"lineNumber":270,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2021-10-29"},{"lineNumber":271,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":272,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":273,"author":{"gitId":"YaleChen299"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2021-10-29"},{"lineNumber":274,"author":{"gitId":"YaleChen299"},"content":"  -fx-background-color: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":275,"author":{"gitId":"YaleChen299"},"content":"  -fx-text-fill: -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":276,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":277,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":278,"author":{"gitId":"YaleChen299"},"content":".button:focused {","lastModifiedDate":"2021-10-29"},{"lineNumber":279,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: -night, -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":280,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":281,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2021-10-29"},{"lineNumber":282,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":283,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":284,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":285,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":286,"author":{"gitId":"YaleChen299"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2021-10-29"},{"lineNumber":287,"author":{"gitId":"YaleChen299"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2021-10-29"},{"lineNumber":288,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":289,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":290,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":291,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":292,"author":{"gitId":"YaleChen299"},"content":".button:default {","lastModifiedDate":"2021-10-29"},{"lineNumber":293,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2021-10-29"},{"lineNumber":294,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2021-10-29"},{"lineNumber":295,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":296,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":297,"author":{"gitId":"YaleChen299"},"content":".button:default:hover {","lastModifiedDate":"2021-10-29"},{"lineNumber":298,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2021-10-29"},{"lineNumber":299,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":300,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":301,"author":{"gitId":"YaleChen299"},"content":".dialog-pane {","lastModifiedDate":"2021-10-29"},{"lineNumber":302,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":303,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":304,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":305,"author":{"gitId":"YaleChen299"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2021-10-29"},{"lineNumber":306,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":307,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":308,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":309,"author":{"gitId":"YaleChen299"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2021-10-29"},{"lineNumber":310,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2021-10-29"},{"lineNumber":311,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2021-10-29"},{"lineNumber":312,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":313,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":314,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":315,"author":{"gitId":"YaleChen299"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2021-10-29"},{"lineNumber":316,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-grey1, 25%);","lastModifiedDate":"2021-10-29"},{"lineNumber":317,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":318,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":319,"author":{"gitId":"YaleChen299"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2021-10-29"},{"lineNumber":320,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2021-10-29"},{"lineNumber":321,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2021-10-29"},{"lineNumber":322,"author":{"gitId":"YaleChen299"},"content":"    -fx-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":323,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":324,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":325,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":326,"author":{"gitId":"YaleChen299"},"content":".scroll-bar {","lastModifiedDate":"2021-10-29"},{"lineNumber":327,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-grey4, 10%);","lastModifiedDate":"2021-10-29"},{"lineNumber":328,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":329,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":330,"author":{"gitId":"YaleChen299"},"content":".scroll-bar .thumb {","lastModifiedDate":"2021-10-29"},{"lineNumber":331,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: derive(-grey4, 40%);","lastModifiedDate":"2021-10-29"},{"lineNumber":332,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2021-10-29"},{"lineNumber":333,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":334,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":335,"author":{"gitId":"YaleChen299"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2021-10-29"},{"lineNumber":336,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":337,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":338,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":339,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":340,"author":{"gitId":"YaleChen299"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2021-10-29"},{"lineNumber":341,"author":{"gitId":"YaleChen299"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2021-10-29"},{"lineNumber":342,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":343,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":344,"author":{"gitId":"YaleChen299"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2021-10-29"},{"lineNumber":345,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2021-10-29"},{"lineNumber":346,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":347,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":348,"author":{"gitId":"YaleChen299"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2021-10-29"},{"lineNumber":349,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":350,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":351,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":352,"author":{"gitId":"YaleChen299"},"content":"#cardPane {","lastModifiedDate":"2021-10-29"},{"lineNumber":353,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":354,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":355,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":356,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":357,"author":{"gitId":"YaleChen299"},"content":"#appointmentCardPane {","lastModifiedDate":"2021-10-29"},{"lineNumber":358,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-29"},{"lineNumber":359,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":360,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":361,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":362,"author":{"gitId":"YaleChen299"},"content":"#commandTypeLabel {","lastModifiedDate":"2021-10-29"},{"lineNumber":363,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2021-10-29"},{"lineNumber":364,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2021-10-29"},{"lineNumber":365,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":366,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":367,"author":{"gitId":"YaleChen299"},"content":"#commandTextField {","lastModifiedDate":"2021-10-29"},{"lineNumber":368,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: transparent -grey1 transparent -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":369,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":370,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-color: -grey4 -grey4 #383838 -grey4;","lastModifiedDate":"2021-10-29"},{"lineNumber":371,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":372,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":373,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-family: \"Open Sans\";","lastModifiedDate":"2021-10-29"},{"lineNumber":374,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2021-10-29"},{"lineNumber":375,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -night;","lastModifiedDate":"2021-10-29"},{"lineNumber":376,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":377,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":378,"author":{"gitId":"YaleChen299"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2021-10-29"},{"lineNumber":379,"author":{"gitId":"YaleChen299"},"content":"    -fx-effect: innershadow(gaussian, -night, 10, 0, 0, 0);","lastModifiedDate":"2021-10-29"},{"lineNumber":380,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":381,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":382,"author":{"gitId":"YaleChen299"},"content":"#resultDisplay .content {","lastModifiedDate":"2021-10-29"},{"lineNumber":383,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: transparent, -frost1, transparent, -frost1;","lastModifiedDate":"2021-10-29"},{"lineNumber":384,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":385,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":386,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":387,"author":{"gitId":"YaleChen299"},"content":"#tags {","lastModifiedDate":"2021-10-29"},{"lineNumber":388,"author":{"gitId":"YaleChen299"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2021-10-29"},{"lineNumber":389,"author":{"gitId":"YaleChen299"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2021-10-29"},{"lineNumber":390,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":391,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":392,"author":{"gitId":"YaleChen299"},"content":"#tags .label {","lastModifiedDate":"2021-10-29"},{"lineNumber":393,"author":{"gitId":"YaleChen299"},"content":"    -fx-text-fill: -grey1;","lastModifiedDate":"2021-10-29"},{"lineNumber":394,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2021-10-29"},{"lineNumber":395,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2021-10-29"},{"lineNumber":396,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2021-10-29"},{"lineNumber":397,"author":{"gitId":"YaleChen299"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2021-10-29"},{"lineNumber":398,"author":{"gitId":"YaleChen299"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2021-10-29"},{"lineNumber":399,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":400,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":401,"author":{"gitId":"YaleChen299"},"content":"#themeButton {","lastModifiedDate":"2021-10-29"},{"lineNumber":402,"author":{"gitId":"YaleChen299"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":403,"author":{"gitId":"YaleChen299"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2021-10-29"},{"lineNumber":404,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-29"},{"lineNumber":405,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":406,"author":{"gitId":"YaleChen299"},"content":".client_names {","lastModifiedDate":"2021-11-04"},{"lineNumber":407,"author":{"gitId":"YaleChen299"},"content":"    -fx-fill: black;","lastModifiedDate":"2021-11-04"},{"lineNumber":408,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"YaleChen299":408}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"         title\u003d\" PlaceBook -- manage your contacts and appointments in one place\" minWidth\u003d\"700\" minHeight\u003d\"700\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"    \u003cImage url\u003d\"@/images/placebook.png\" /\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\"/\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"        \u003cURL value\u003d\"@LightTheme.css\" /\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"        \u003cHBox\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"          \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"          \u003cButton styleClass\u003d\"themeButton\" fx:id\u003d\"themeButton\" onAction\u003d\"#handleThemeChange\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"34.0\" prefWidth\u003d\"34.0\"\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"            \u003cgraphic\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"              \u003cImageView fitHeight\u003d\"30\" fitWidth\u003d\"30\"\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"                \u003cImage url\u003d\"@/images/sun.png\"/\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"              \u003c/ImageView\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"            \u003c/graphic\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"          \u003c/Button\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"        \u003cVBox minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"          \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"            \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"5\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"              \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"            \u003cVBox fx:id\u003d\"appointmentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"              \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"                   minHeight\u003d\"140\" prefHeight\u003d\"180\" \u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"            \u003cInsets top\u003d\"4\" right\u003d\"10\" bottom\u003d\"2\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"            \u003cInsets top\u003d\"2\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"YaleChen299":36,"-":48}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2017-06-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"YaleChen299":1,"-":8}},{"path":"src/test/java/seedu/placebook/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"YaleChen299":1,"-":57}},{"path":"src/test/java/seedu/placebook/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.core;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"    public void getLogLevelMethod() {","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(defaultConfig.getLogLevel(), Level.INFO);","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    public void setLogLevel_differentLevels_getLogLevelUpdated() {","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"        // test for all different levels of log used","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(Level.INFO, defaultConfig.getLogLevel());","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"        defaultConfig.setLogLevel(Level.SEVERE);","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(Level.SEVERE, defaultConfig.getLogLevel());","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"        defaultConfig.setLogLevel(Level.FINE);","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(Level.FINE, defaultConfig.getLogLevel());","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"        defaultConfig.setLogLevel(Level.WARNING);","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(Level.WARNING, defaultConfig.getLogLevel());","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"    public void getUserPrefsFilePathMethod() {","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(Paths.get(\"preferences.json\"), defaultConfig.getUserPrefsFilePath());","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"        // assertEquals will call equals() method","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"        Config currentConfig \u003d new Config();","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(defaultConfig, defaultConfig);","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(defaultConfig, currentConfig);","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"        // different log level -\u003e not equal","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"        currentConfig.setLogLevel(Level.FINE);","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(defaultConfig, currentConfig);","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"        currentConfig.setLogLevel(defaultConfig.getLogLevel());","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(defaultConfig, currentConfig);","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"        //different userPrefsFilePath -\u003e not equal","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"        currentConfig.setUserPrefsFilePath(Paths.get(\"config/preferences.json\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(defaultConfig, currentConfig);","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"        currentConfig.setUserPrefsFilePath(defaultConfig.getUserPrefsFilePath());","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(defaultConfig, currentConfig);","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"        // both attribute different -\u003e not equal","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"        currentConfig.setLogLevel(Level.FINE);","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"        currentConfig.setUserPrefsFilePath(Paths.get(\"config/preferences.json\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(defaultConfig, currentConfig);","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"        // different type","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(defaultConfig.equals(Level.INFO));","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(defaultConfig.equals(Paths.get(\"config/preferences.json\")));","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"YaleChen299":56,"-":24}},{"path":"src/test/java/seedu/placebook/commons/core/GuiSettingsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.core;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import java.awt.Point;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import java.util.Objects;","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"class GuiSettingsTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"    void getWindowWidthMethod() {","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings defaultGuiSettings \u003d new GuiSettings();","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(DEFAULT_WIDTH, defaultGuiSettings.getWindowWidth());","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(10, 20, 1, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(10, guiSettings.getWindowWidth());","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    void getWindowHeightMethod() {","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings defaultGuiSettings \u003d new GuiSettings();","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(DEFAULT_HEIGHT, defaultGuiSettings.getWindowHeight());","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(10, 20, 1, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(20, guiSettings.getWindowHeight());","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"    void getWindowCoordinatesMethod() {","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings defaultGuiSettings \u003d new GuiSettings();","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"        assertNull(defaultGuiSettings.getWindowCoordinates());","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(10, 20, 1, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(new Point(1, 2), guiSettings.getWindowCoordinates());","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"    void equalsMethod() {","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"        // assertEquals will call equals() method","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings defaultGuiSettings \u003d new GuiSettings();","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"        assertNotNull(defaultGuiSettings);","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(defaultGuiSettings, defaultGuiSettings);","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(defaultGuiSettings, guiSettings);","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings expectedGuiSettings \u003d new GuiSettings(10, 20, 1, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings sameGuiSettings \u003d new GuiSettings(10, 20, 1, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(expectedGuiSettings, sameGuiSettings);","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"        // different width -\u003e not equal","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings widthDifferentSetting \u003d new GuiSettings(9, 20, 1, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(expectedGuiSettings, widthDifferentSetting);","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"        //different height -\u003e not equal","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings heightDifferentSetting \u003d new GuiSettings(10, 19, 1, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(expectedGuiSettings, heightDifferentSetting);","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"        //different x -\u003e not equal","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings xDifferentSetting \u003d new GuiSettings(10, 20, 0, 2);","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(expectedGuiSettings, xDifferentSetting);","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"        //different y -\u003e not equal","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings yDifferentSetting \u003d new GuiSettings(10, 20, 1, 1);","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(expectedGuiSettings, yDifferentSetting);","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"        // different type","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(defaultGuiSettings.equals(new Point(1, 2)));","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(defaultGuiSettings.equals(DEFAULT_HEIGHT));","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"YaleChen299"},"content":"    void hashCodeMethod() {","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings defaultGuiSettings \u003d new GuiSettings();","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":85,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(Objects.hash(","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"YaleChen299"},"content":"                defaultGuiSettings.getWindowWidth(),","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"YaleChen299"},"content":"                defaultGuiSettings.getWindowHeight(),","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"YaleChen299"},"content":"                defaultGuiSettings.getWindowCoordinates()),","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"YaleChen299"},"content":"                defaultGuiSettings.hashCode());","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"YaleChen299"},"content":"    void testToString() {","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"YaleChen299"},"content":"        GuiSettings defaultGuiSettings \u003d new GuiSettings();","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"Width : 740.0\\n\"","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"YaleChen299"},"content":"                        + \"Height : 600.0\\n\"","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"YaleChen299"},"content":"                        + \"Position : null\",","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"YaleChen299"},"content":"                defaultGuiSettings.toString());","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"YaleChen299":101}},{"path":"src/test/java/seedu/placebook/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.core;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(version.isEarlyAccess());","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":109,"author":{"gitId":"YaleChen299"},"content":"        // Tests early access same version","lastModifiedDate":"2021-11-05"},{"lineNumber":110,"author":{"gitId":"YaleChen299"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"YaleChen299"},"content":"        another \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"YaleChen299"},"content":"        // assert equal will call equals method","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(another, one);","lastModifiedDate":"2021-11-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(another, one);","lastModifiedDate":"2021-11-05"},{"lineNumber":137,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":138,"author":{"gitId":"YaleChen299"},"content":"        one \u003d new Version(99, 191, 275, true);","lastModifiedDate":"2021-11-05"},{"lineNumber":139,"author":{"gitId":"YaleChen299"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2021-11-05"},{"lineNumber":140,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(another, one);","lastModifiedDate":"2021-11-05"},{"lineNumber":141,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":142,"author":{"gitId":"YaleChen299"},"content":"        one \u003d new Version(100, 190, 275, true);","lastModifiedDate":"2021-11-05"},{"lineNumber":143,"author":{"gitId":"YaleChen299"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2021-11-05"},{"lineNumber":144,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(another, one);","lastModifiedDate":"2021-11-05"},{"lineNumber":145,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":146,"author":{"gitId":"YaleChen299"},"content":"        one \u003d new Version(100, 191, 276, true);","lastModifiedDate":"2021-11-05"},{"lineNumber":147,"author":{"gitId":"YaleChen299"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2021-11-05"},{"lineNumber":148,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(another, one);","lastModifiedDate":"2021-11-05"},{"lineNumber":149,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":150,"author":{"gitId":"YaleChen299"},"content":"        one \u003d new Version(100, 191, 275, false);","lastModifiedDate":"2021-11-05"},{"lineNumber":151,"author":{"gitId":"YaleChen299"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2021-11-05"},{"lineNumber":152,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(another, one);","lastModifiedDate":"2021-11-05"},{"lineNumber":153,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":154,"author":{"gitId":"YaleChen299"},"content":"        assertNotEquals(null, one);","lastModifiedDate":"2021-11-05"},{"lineNumber":155,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(one.equals(1));","lastModifiedDate":"2021-11-05"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":32,"-":130}},{"path":"src/test/java/seedu/placebook/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.core.index;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"YaleChen299":2,"-":58}},{"path":"src/test/java/seedu/placebook/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"        assertNotNull(AppUtil.getImage(\"/images/placebook.png\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"YaleChen299":3,"-":33}},{"path":"src/test/java/seedu/placebook/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"YaleChen299":3,"-":105}},{"path":"src/test/java/seedu/placebook/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Config;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"YaleChen299":4,"-":112}},{"path":"src/test/java/seedu/placebook/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":2,"-":21}},{"path":"src/test/java/seedu/placebook/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.SerializableTestClass;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.TestUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":3,"-":42}},{"path":"src/test/java/seedu/placebook/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.commons.util;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalAppointments;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalPersons;","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import java.util.List;","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import java.util.function.Function;","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"    private static final Function\u003cString, String\u003e IDENTITY \u003d x -\u003e x;","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"    private static final Function\u003cAppointment, String\u003e GET_TIME_PERIOD \u003d app -\u003e app.getTimePeriod().toString();","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"    private static final Function\u003cPerson, String\u003e GET_NAME \u003d p -\u003e p.getName().fullName;","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"    private static final List\u003cString\u003e STRING_LIST \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"    private static final List\u003cAppointment\u003e APPOINTMENT_LIST \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"    private static final List\u003cPerson\u003e PERSON_LIST \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"    @BeforeAll","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"    public static void setUp() {","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"        STRING_LIST.add(\"a\");","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"        STRING_LIST.add(\"abc\");","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"        STRING_LIST.add(\"123\");","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"        STRING_LIST.add(\"XYZ abc\");","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"        STRING_LIST.add(\"abc,xyz\");","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"        APPOINTMENT_LIST.addAll(getTypicalAppointments());","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"        PERSON_LIST.addAll(getTypicalPersons());","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":174,"author":{"gitId":"YaleChen299"},"content":"    //---------------- Tests for listToString --------------------------------------","lastModifiedDate":"2021-11-02"},{"lineNumber":175,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":176,"author":{"gitId":"YaleChen299"},"content":"    /*","lastModifiedDate":"2021-11-02"},{"lineNumber":177,"author":{"gitId":"YaleChen299"},"content":"     * Equivalence Partitions:","lastModifiedDate":"2021-11-02"},{"lineNumber":178,"author":{"gitId":"YaleChen299"},"content":"     * list: null, non-null","lastModifiedDate":"2021-11-02"},{"lineNumber":179,"author":{"gitId":"YaleChen299"},"content":"     * T: String, Appointment, Person","lastModifiedDate":"2021-11-02"},{"lineNumber":180,"author":{"gitId":"YaleChen299"},"content":"     * function: identity, appointment.getTimePeriod, Person.getName","lastModifiedDate":"2021-11-02"},{"lineNumber":181,"author":{"gitId":"YaleChen299"},"content":"     * delimiter: null, \"\", \" \", \",\", \"\\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":182,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":183,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":184,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":185,"author":{"gitId":"YaleChen299"},"content":"    public void listToString_simpleInputs_success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":186,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"\", StringUtil.listToString(new ArrayList\u003c\u003e(), IDENTITY, \"\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":187,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":188,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":189,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":190,"author":{"gitId":"YaleChen299"},"content":"    public void listToString_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2021-11-02"},{"lineNumber":191,"author":{"gitId":"YaleChen299"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.listToString(null, IDENTITY, \"\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":192,"author":{"gitId":"YaleChen299"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.listToString(STRING_LIST, null, \"\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":193,"author":{"gitId":"YaleChen299"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.listToString(STRING_LIST, IDENTITY, null));","lastModifiedDate":"2021-11-02"},{"lineNumber":194,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":195,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":196,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":197,"author":{"gitId":"YaleChen299"},"content":"    public void listToString_inputStringList_success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":198,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"aabc123XYZ abcabc,xyz\", StringUtil.listToString(STRING_LIST, IDENTITY, \"\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":199,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(String.join(\"\", STRING_LIST), StringUtil.listToString(STRING_LIST, IDENTITY, \"\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":200,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(String.join(\",\", STRING_LIST), StringUtil.listToString(STRING_LIST, IDENTITY, \",\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":201,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(String.join(\" \", STRING_LIST), StringUtil.listToString(STRING_LIST, IDENTITY, \" \"));","lastModifiedDate":"2021-11-02"},{"lineNumber":202,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(String.join(\"\\n\", STRING_LIST), StringUtil.listToString(STRING_LIST, IDENTITY, \"\\n\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":203,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":204,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":205,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":206,"author":{"gitId":"YaleChen299"},"content":"    public void listToString_inputAppointmentList_success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":207,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(","lastModifiedDate":"2021-11-02"},{"lineNumber":208,"author":{"gitId":"YaleChen299"},"content":"                \"Start Time: 25-12-2021 1000 End Time: 25-12-2021 1100\"","lastModifiedDate":"2021-11-02"},{"lineNumber":209,"author":{"gitId":"YaleChen299"},"content":"                + \"Start Time: 25-12-2022 1000 End Time: 25-12-2022 1100\",","lastModifiedDate":"2021-11-02"},{"lineNumber":210,"author":{"gitId":"YaleChen299"},"content":"                StringUtil.listToString(APPOINTMENT_LIST, GET_TIME_PERIOD, \"\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":211,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(","lastModifiedDate":"2021-11-02"},{"lineNumber":212,"author":{"gitId":"YaleChen299"},"content":"                APPOINTMENT_LIST.stream().map(GET_TIME_PERIOD).collect(Collectors.joining(\"\")),","lastModifiedDate":"2021-11-02"},{"lineNumber":213,"author":{"gitId":"YaleChen299"},"content":"                StringUtil.listToString(APPOINTMENT_LIST, GET_TIME_PERIOD, \"\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":214,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(","lastModifiedDate":"2021-11-02"},{"lineNumber":215,"author":{"gitId":"YaleChen299"},"content":"                APPOINTMENT_LIST.stream().map(GET_TIME_PERIOD).collect(Collectors.joining(\",\")),","lastModifiedDate":"2021-11-02"},{"lineNumber":216,"author":{"gitId":"YaleChen299"},"content":"                StringUtil.listToString(APPOINTMENT_LIST, GET_TIME_PERIOD, \",\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":217,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(","lastModifiedDate":"2021-11-02"},{"lineNumber":218,"author":{"gitId":"YaleChen299"},"content":"                APPOINTMENT_LIST.stream().map(GET_TIME_PERIOD).collect(Collectors.joining(\" \")),","lastModifiedDate":"2021-11-02"},{"lineNumber":219,"author":{"gitId":"YaleChen299"},"content":"                StringUtil.listToString(APPOINTMENT_LIST, GET_TIME_PERIOD, \" \"));","lastModifiedDate":"2021-11-02"},{"lineNumber":220,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(","lastModifiedDate":"2021-11-02"},{"lineNumber":221,"author":{"gitId":"YaleChen299"},"content":"                APPOINTMENT_LIST.stream().map(GET_TIME_PERIOD).collect(Collectors.joining(\"\\n\")),","lastModifiedDate":"2021-11-02"},{"lineNumber":222,"author":{"gitId":"YaleChen299"},"content":"                StringUtil.listToString(APPOINTMENT_LIST, GET_TIME_PERIOD, \"\\n\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":223,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":224,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":225,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":226,"author":{"gitId":"YaleChen299"},"content":"    public void listToString_inputPersonList_success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":227,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(","lastModifiedDate":"2021-11-02"},{"lineNumber":228,"author":{"gitId":"YaleChen299"},"content":"                \"Alice PaulineBenson MeierCarl KurzDaniel MeierElle MeyerFiona KunzGeorge Best\",","lastModifiedDate":"2021-11-02"},{"lineNumber":229,"author":{"gitId":"YaleChen299"},"content":"                StringUtil.listToString(PERSON_LIST, GET_NAME, \"\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":230,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(","lastModifiedDate":"2021-11-02"},{"lineNumber":231,"author":{"gitId":"YaleChen299"},"content":"                PERSON_LIST.stream().map(GET_NAME).collect(Collectors.joining(\"\")),","lastModifiedDate":"2021-11-02"},{"lineNumber":232,"author":{"gitId":"YaleChen299"},"content":"                StringUtil.listToString(PERSON_LIST, GET_NAME, \"\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":233,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(","lastModifiedDate":"2021-11-02"},{"lineNumber":234,"author":{"gitId":"YaleChen299"},"content":"                PERSON_LIST.stream().map(GET_NAME).collect(Collectors.joining(\",\")),","lastModifiedDate":"2021-11-02"},{"lineNumber":235,"author":{"gitId":"YaleChen299"},"content":"                StringUtil.listToString(PERSON_LIST, GET_NAME, \",\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":236,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(","lastModifiedDate":"2021-11-02"},{"lineNumber":237,"author":{"gitId":"YaleChen299"},"content":"                PERSON_LIST.stream().map(GET_NAME).collect(Collectors.joining(\" \")),","lastModifiedDate":"2021-11-02"},{"lineNumber":238,"author":{"gitId":"YaleChen299"},"content":"                StringUtil.listToString(PERSON_LIST, GET_NAME, \" \"));","lastModifiedDate":"2021-11-02"},{"lineNumber":239,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(","lastModifiedDate":"2021-11-02"},{"lineNumber":240,"author":{"gitId":"YaleChen299"},"content":"                PERSON_LIST.stream().map(GET_NAME).collect(Collectors.joining(\"\\n\")),","lastModifiedDate":"2021-11-02"},{"lineNumber":241,"author":{"gitId":"YaleChen299"},"content":"                StringUtil.listToString(PERSON_LIST, GET_NAME, \"\\n\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":242,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":243,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"YaleChen299":102,"-":141}},{"path":"src/test/java/seedu/placebook/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.AddCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.CommandResult;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.ListCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.storage.JsonContactsStorage;","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.storage.JsonScheduleStorage;","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.storage.StorageManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"tchiong"},"content":"        JsonContactsStorage contactsStorage \u003d","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"                new JsonContactsStorage(temporaryFolder.resolve(\"contacts.json\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"        JsonScheduleStorage scheduleStorage \u003d new JsonScheduleStorage(temporaryFolder.resolve(\"schedule.json\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"tchiong"},"content":"        StorageManager storage \u003d new StorageManager(contactsStorage, userPrefsStorage, scheduleStorage);","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"        logic.setUi(UiStubFactory.getUiStub(true));","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"tchiong"},"content":"        // Setup LogicManager with JsonContactIoExceptionThrowingStub","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"tchiong"},"content":"        JsonContactsStorage contactsStorage \u003d","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"tchiong"},"content":"                new JsonContactsIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionContacts.json\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":81,"author":{"gitId":"nwhloo99"},"content":"        JsonScheduleStorage scheduleStorage \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"nwhloo99"},"content":"                new JsonScheduleStorage(temporaryFolder.resolve(\"ioExceptionSchedule.json\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"tchiong"},"content":"        StorageManager storage \u003d new StorageManager(contactsStorage, userPrefsStorage, scheduleStorage);","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"YaleChen299"},"content":"        logic.setUi(UiStubFactory.getUiStub(true));","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"tchiong"},"content":"        Model expectedModel \u003d new ModelManager(model.getContacts(), new UserPrefs(), model.getSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"tchiong"},"content":"    private static class JsonContactsIoExceptionThrowingStub extends JsonContactsStorage {","lastModifiedDate":"2021-11-04"},{"lineNumber":159,"author":{"gitId":"tchiong"},"content":"        private JsonContactsIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2021-11-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"tchiong"},"content":"        public void saveContacts(ReadOnlyContacts contacts, Path filePath) throws IOException {","lastModifiedDate":"2021-11-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"tchiong":13,"YaleChen299":24,"nwhloo99":3,"-":128}},{"path":"src/test/java/seedu/placebook/logic/UiStubFactory.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"public class UiStubFactory {","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"    private static class PositiveConfirmationUi implements Ui {","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"        @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"        public void start(Stage primaryStage) {","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"        @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"        public boolean showDeleteDialogAndWait(String contentText) {","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"            return true;","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    private static class NegativeConfirmationUi implements Ui {","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"        @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"        public void start(Stage primaryStage) {","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"        @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"        public boolean showDeleteDialogAndWait(String contentText) {","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"            return false;","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"    private static final Ui POSITIVE_CONFIRMATION_UI \u003d new PositiveConfirmationUi();","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"    private static final Ui NEGATIVE_CONFIRMATION_UI \u003d new NegativeConfirmationUi();","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"    public static Ui getUiStub(boolean expectedConfirmation) {","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"        if (expectedConfirmation) {","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"            return POSITIVE_CONFIRMATION_UI;","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"        } else {","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"            return NEGATIVE_CONFIRMATION_UI;","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"YaleChen299":43}},{"path":"src/test/java/seedu/placebook/logic/commands/AddAppCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"tchiong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"import java.util.List;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.AppointmentBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"tchiong"},"content":"public class AddAppCommandTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect AddAppCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"tchiong"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"Li-Lehao"},"content":"            -\u003e new AddAppCommand(null, null, null, null, null));","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"tchiong"},"content":"    public void constructor_invalidAppointmentInvalidTime_throwsDateTimeException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"tchiong"},"content":"        indexes.add(Index.fromZeroBased(2));","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"tchiong"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"tchiong"},"content":"        modelStub.addPerson(new PersonBuilder().withName(\"ALICE\").build());","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"tchiong"},"content":"        assertThrows(DateTimeException.class, () -\u003e new AddAppCommand(","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"tchiong"},"content":"                indexes,","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 13, 20, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2022, 1, 21, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"tchiong"},"content":"    public void constructor_invalidAppointmentEmptyAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"tchiong"},"content":"        indexes.add(Index.fromZeroBased(2));","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"        modelStub.addPerson(new PersonBuilder().withName(\"ALICE\").build());","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"tchiong"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new AddAppCommand(","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"tchiong"},"content":"                        indexes,","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"tchiong"},"content":"                        new Address(\"\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"tchiong"},"content":"                        LocalDateTime.of(2021, 1, 20, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"tchiong"},"content":"                        LocalDateTime.of(2021, 1, 21, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"tchiong"},"content":"                        \"Halloween Sales\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"nwhloo99"},"content":"    public void execute_validAppointmentSinglePerson_returnSuccess() throws Exception {","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"nwhloo99"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"nwhloo99"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"tchiong"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"tchiong"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"tchiong"},"content":"        modelStub.addPerson(new PersonBuilder().withName(\"ALICE\").build());","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"tchiong"},"content":"        CommandResult commandResult \u003d new AddAppCommand(","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"nwhloo99"},"content":"                indexes,","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 12, 25, 21, 30),","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 12, 25, 22, 30),","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"YaleChen299"},"content":"                \"Halloween Sales\").execute(modelStub, uiStub);","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"tchiong"},"content":"        assertEquals(String.format(AddAppCommand.MESSAGE_SUCCESS, validAppointment), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"nwhloo99"},"content":"    public void execute_validAppointmentTwoPerson_returnSuccess() throws Exception {","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"nwhloo99"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"nwhloo99"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"nwhloo99"},"content":"        indexes.add(Index.fromZeroBased(1));","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"nwhloo99"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2021-10-23"},{"lineNumber":97,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":98,"author":{"gitId":"nwhloo99"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().addClient(\"BOB\").build();","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"nwhloo99"},"content":"        modelStub.addPerson(new PersonBuilder().withName(\"ALICE\").build());","lastModifiedDate":"2021-10-23"},{"lineNumber":100,"author":{"gitId":"nwhloo99"},"content":"        modelStub.addPerson(new PersonBuilder().withName(\"BOB\").build());","lastModifiedDate":"2021-10-23"},{"lineNumber":101,"author":{"gitId":"nwhloo99"},"content":"        CommandResult commandResult \u003d new AddAppCommand(","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"nwhloo99"},"content":"                indexes,","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"nwhloo99"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 12, 25, 21, 30),","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 12, 25, 22, 30),","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"YaleChen299"},"content":"                \"Halloween Sales\").execute(modelStub, uiStub);","lastModifiedDate":"2021-11-03"},{"lineNumber":107,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(String.format(AddAppCommand.MESSAGE_SUCCESS, validAppointment), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":110,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":111,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"tchiong"},"content":"    public void execute_invalidAppointmentInvalidPerson_returnInvalid() {","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"nwhloo99"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":114,"author":{"gitId":"nwhloo99"},"content":"        indexes.add(Index.fromZeroBased(2));","lastModifiedDate":"2021-10-20"},{"lineNumber":115,"author":{"gitId":"tchiong"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"tchiong"},"content":"        modelStub.addPerson(new PersonBuilder().withName(\"ALICE\").build());","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"tchiong"},"content":"        Command commandResult \u003d new AddAppCommand(","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"nwhloo99"},"content":"                indexes,","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-10-13"},{"lineNumber":120,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 2, 10, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-10-13"},{"lineNumber":123,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":124,"author":{"gitId":"tchiong"},"content":"        assertThrows(CommandException.class, ()","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"YaleChen299"},"content":"            -\u003e commandResult.execute(modelStub, uiStub));","lastModifiedDate":"2021-11-03"},{"lineNumber":126,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":127,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":128,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"nwhloo99"},"content":"    public void execute_duplicatePerson_returnInvalid() {","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"nwhloo99"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-23"},{"lineNumber":131,"author":{"gitId":"nwhloo99"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-10-23"},{"lineNumber":132,"author":{"gitId":"nwhloo99"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-10-23"},{"lineNumber":133,"author":{"gitId":"nwhloo99"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2021-10-23"},{"lineNumber":134,"author":{"gitId":"nwhloo99"},"content":"        modelStub.addPerson(new PersonBuilder().withName(\"ALICE\").build());","lastModifiedDate":"2021-10-23"},{"lineNumber":135,"author":{"gitId":"nwhloo99"},"content":"        modelStub.addPerson(new PersonBuilder().withName(\"BOB\").build());","lastModifiedDate":"2021-10-23"},{"lineNumber":136,"author":{"gitId":"nwhloo99"},"content":"        Command commandResult \u003d new AddAppCommand(","lastModifiedDate":"2021-10-23"},{"lineNumber":137,"author":{"gitId":"nwhloo99"},"content":"                indexes,","lastModifiedDate":"2021-10-23"},{"lineNumber":138,"author":{"gitId":"nwhloo99"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-10-23"},{"lineNumber":139,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":140,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 2, 10, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"nwhloo99"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-10-23"},{"lineNumber":142,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":143,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(CommandException.class, ()","lastModifiedDate":"2021-10-23"},{"lineNumber":144,"author":{"gitId":"YaleChen299"},"content":"            -\u003e commandResult.execute(modelStub, uiStub));","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":146,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":147,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":148,"author":{"gitId":"tchiong"},"content":"    public void execute_endTimeBeforeStartTime_returnInvalid() {","lastModifiedDate":"2021-11-05"},{"lineNumber":149,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":150,"author":{"gitId":"tchiong"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-05"},{"lineNumber":151,"author":{"gitId":"tchiong"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2021-11-05"},{"lineNumber":152,"author":{"gitId":"tchiong"},"content":"        modelStub.addPerson(new PersonBuilder().withName(\"ALICE\").build());","lastModifiedDate":"2021-11-05"},{"lineNumber":153,"author":{"gitId":"tchiong"},"content":"        Command commandResult \u003d new AddAppCommand(","lastModifiedDate":"2021-11-05"},{"lineNumber":154,"author":{"gitId":"tchiong"},"content":"                indexes,","lastModifiedDate":"2021-11-05"},{"lineNumber":155,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":156,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 2, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":157,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":158,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-05"},{"lineNumber":159,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":160,"author":{"gitId":"tchiong"},"content":"        assertThrows(CommandException.class, ()","lastModifiedDate":"2021-11-05"},{"lineNumber":161,"author":{"gitId":"tchiong"},"content":"            -\u003e commandResult.execute(modelStub, uiStub));","lastModifiedDate":"2021-11-05"},{"lineNumber":162,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":163,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":164,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"tchiong"},"content":"    public void execute_duplicateAppointmentTime_returnInvalid() {","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"YaleChen299"},"content":"        // use ModelManager instead of Stub for integration test","lastModifiedDate":"2021-11-02"},{"lineNumber":167,"author":{"gitId":"YaleChen299"},"content":"        ModelManager modelTester \u003d new ModelManager();","lastModifiedDate":"2021-11-02"},{"lineNumber":168,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":169,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e indexOne \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"tchiong"},"content":"        indexOne.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e indexTwo \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"tchiong"},"content":"        indexTwo.add(Index.fromZeroBased(1));","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"tchiong"},"content":"        modelTester.addPerson(new PersonBuilder().withName(\"ALICE\").build());","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"tchiong"},"content":"        modelTester.addPerson(new PersonBuilder().withName(\"BOB\").build());","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"tchiong"},"content":"        Command initialCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"tchiong"},"content":"                indexOne,","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":179,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 2, 10, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":180,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"tchiong"},"content":"        Command commandResult \u003d new AddAppCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"tchiong"},"content":"                indexTwo,","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":185,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 2, 10, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":186,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"tchiong"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"YaleChen299"},"content":"            initialCommand.execute(modelTester, uiStub);","lastModifiedDate":"2021-11-03"},{"lineNumber":189,"author":{"gitId":"tchiong"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"tchiong"},"content":"        assertThrows(CommandException.class, ()","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"YaleChen299"},"content":"            -\u003e commandResult.execute(modelTester, uiStub));","lastModifiedDate":"2021-11-03"},{"lineNumber":195,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":196,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":197,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":198,"author":{"gitId":"tchiong"},"content":"    public void execute_duplicateAppointment_returnInvalid() {","lastModifiedDate":"2021-11-05"},{"lineNumber":199,"author":{"gitId":"tchiong"},"content":"        // use ModelManager instead of Stub for integration test","lastModifiedDate":"2021-11-05"},{"lineNumber":200,"author":{"gitId":"tchiong"},"content":"        ModelManager modelTester \u003d new ModelManager();","lastModifiedDate":"2021-11-05"},{"lineNumber":201,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":202,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e index \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":203,"author":{"gitId":"tchiong"},"content":"        index.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-05"},{"lineNumber":204,"author":{"gitId":"tchiong"},"content":"        modelTester.addPerson(new PersonBuilder().withName(\"ALICE\").build());","lastModifiedDate":"2021-11-05"},{"lineNumber":205,"author":{"gitId":"tchiong"},"content":"        modelTester.addPerson(new PersonBuilder().withName(\"BOB\").build());","lastModifiedDate":"2021-11-05"},{"lineNumber":206,"author":{"gitId":"tchiong"},"content":"        Command initialCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-05"},{"lineNumber":207,"author":{"gitId":"tchiong"},"content":"                index,","lastModifiedDate":"2021-11-05"},{"lineNumber":208,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":209,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":210,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 2, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":211,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-05"},{"lineNumber":212,"author":{"gitId":"tchiong"},"content":"        Command commandResult \u003d new AddAppCommand(","lastModifiedDate":"2021-11-05"},{"lineNumber":213,"author":{"gitId":"tchiong"},"content":"                index,","lastModifiedDate":"2021-11-05"},{"lineNumber":214,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":215,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":216,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 2, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":217,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-05"},{"lineNumber":218,"author":{"gitId":"tchiong"},"content":"        try {","lastModifiedDate":"2021-11-05"},{"lineNumber":219,"author":{"gitId":"tchiong"},"content":"            initialCommand.execute(modelTester, uiStub);","lastModifiedDate":"2021-11-05"},{"lineNumber":220,"author":{"gitId":"tchiong"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2021-11-05"},{"lineNumber":221,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-05"},{"lineNumber":222,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":223,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":224,"author":{"gitId":"tchiong"},"content":"        assertThrows(CommandException.class, ()","lastModifiedDate":"2021-11-05"},{"lineNumber":225,"author":{"gitId":"tchiong"},"content":"            -\u003e commandResult.execute(modelTester, uiStub));","lastModifiedDate":"2021-11-05"},{"lineNumber":226,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":227,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":228,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":229,"author":{"gitId":"nwhloo99"},"content":"    public void execute_conflictingAppointmentTime_returnInvalid() {","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"YaleChen299"},"content":"        // use ModelManager instead of Stub for integration test","lastModifiedDate":"2021-11-02"},{"lineNumber":231,"author":{"gitId":"YaleChen299"},"content":"        ModelManager modelTester \u003d new ModelManager();","lastModifiedDate":"2021-11-02"},{"lineNumber":232,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":233,"author":{"gitId":"nwhloo99"},"content":"        ArrayList\u003cIndex\u003e indexOne \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":234,"author":{"gitId":"nwhloo99"},"content":"        indexOne.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-10-26"},{"lineNumber":235,"author":{"gitId":"nwhloo99"},"content":"        ArrayList\u003cIndex\u003e indexTwo \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":236,"author":{"gitId":"nwhloo99"},"content":"        indexTwo.add(Index.fromZeroBased(1));","lastModifiedDate":"2021-10-26"},{"lineNumber":237,"author":{"gitId":"nwhloo99"},"content":"        modelTester.addPerson(new PersonBuilder().withName(\"ALICE\").build());","lastModifiedDate":"2021-10-26"},{"lineNumber":238,"author":{"gitId":"nwhloo99"},"content":"        modelTester.addPerson(new PersonBuilder().withName(\"BOB\").build());","lastModifiedDate":"2021-10-26"},{"lineNumber":239,"author":{"gitId":"nwhloo99"},"content":"        Command initialCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":240,"author":{"gitId":"nwhloo99"},"content":"                indexOne,","lastModifiedDate":"2021-10-26"},{"lineNumber":241,"author":{"gitId":"nwhloo99"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-10-26"},{"lineNumber":242,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":243,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":244,"author":{"gitId":"nwhloo99"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-10-26"},{"lineNumber":245,"author":{"gitId":"nwhloo99"},"content":"        Command commandResult \u003d new AddAppCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":246,"author":{"gitId":"nwhloo99"},"content":"                indexTwo,","lastModifiedDate":"2021-10-26"},{"lineNumber":247,"author":{"gitId":"nwhloo99"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-10-26"},{"lineNumber":248,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 1, 11, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":249,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.of(2021, 1, 1, 13, 0),","lastModifiedDate":"2021-11-03"},{"lineNumber":250,"author":{"gitId":"nwhloo99"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-10-26"},{"lineNumber":251,"author":{"gitId":"nwhloo99"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":252,"author":{"gitId":"YaleChen299"},"content":"            initialCommand.execute(modelTester, uiStub);","lastModifiedDate":"2021-11-03"},{"lineNumber":253,"author":{"gitId":"nwhloo99"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":254,"author":{"gitId":"nwhloo99"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":255,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":256,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":257,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(CommandException.class, ()","lastModifiedDate":"2021-10-26"},{"lineNumber":258,"author":{"gitId":"YaleChen299"},"content":"            -\u003e commandResult.execute(modelTester, uiStub));","lastModifiedDate":"2021-11-03"},{"lineNumber":259,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":260,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":261,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":262,"author":{"gitId":"tchiong"},"content":"    public void equals_sameAddAppCommand_returnTrue() {","lastModifiedDate":"2021-11-05"},{"lineNumber":263,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":264,"author":{"gitId":"tchiong"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-05"},{"lineNumber":265,"author":{"gitId":"tchiong"},"content":"        Command initialCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-05"},{"lineNumber":266,"author":{"gitId":"tchiong"},"content":"                indexes,","lastModifiedDate":"2021-11-05"},{"lineNumber":267,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":268,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":269,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":270,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-05"},{"lineNumber":271,"author":{"gitId":"tchiong"},"content":"        Command compareCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-05"},{"lineNumber":272,"author":{"gitId":"tchiong"},"content":"                indexes,","lastModifiedDate":"2021-11-05"},{"lineNumber":273,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":274,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":275,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":276,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-05"},{"lineNumber":277,"author":{"gitId":"tchiong"},"content":"        assertEquals(initialCommand, compareCommand);","lastModifiedDate":"2021-11-05"},{"lineNumber":278,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(initialCommand, initialCommand);","lastModifiedDate":"2021-11-06"},{"lineNumber":279,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":280,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":281,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":282,"author":{"gitId":"tchiong"},"content":"    public void equals_nullAddAppCommand_returnFalse() {","lastModifiedDate":"2021-11-05"},{"lineNumber":283,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":284,"author":{"gitId":"tchiong"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-05"},{"lineNumber":285,"author":{"gitId":"tchiong"},"content":"        Command initialCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-05"},{"lineNumber":286,"author":{"gitId":"tchiong"},"content":"                indexes,","lastModifiedDate":"2021-11-05"},{"lineNumber":287,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":288,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":289,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":290,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-05"},{"lineNumber":291,"author":{"gitId":"tchiong"},"content":"        Command compareCommand \u003d null;","lastModifiedDate":"2021-11-05"},{"lineNumber":292,"author":{"gitId":"tchiong"},"content":"        assertFalse(() -\u003e initialCommand.equals(compareCommand));","lastModifiedDate":"2021-11-05"},{"lineNumber":293,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":294,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":295,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":296,"author":{"gitId":"tchiong"},"content":"    public void equals_differentDescriptionAddAppCommand_returnFalse() {","lastModifiedDate":"2021-11-05"},{"lineNumber":297,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":298,"author":{"gitId":"tchiong"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-05"},{"lineNumber":299,"author":{"gitId":"tchiong"},"content":"        Command initialCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-05"},{"lineNumber":300,"author":{"gitId":"tchiong"},"content":"                indexes,","lastModifiedDate":"2021-11-05"},{"lineNumber":301,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":302,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":303,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":304,"author":{"gitId":"tchiong"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-05"},{"lineNumber":305,"author":{"gitId":"tchiong"},"content":"        Command compareCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-05"},{"lineNumber":306,"author":{"gitId":"tchiong"},"content":"                indexes,","lastModifiedDate":"2021-11-05"},{"lineNumber":307,"author":{"gitId":"tchiong"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":308,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":309,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":310,"author":{"gitId":"tchiong"},"content":"                \"Halloween Purchase\");","lastModifiedDate":"2021-11-05"},{"lineNumber":311,"author":{"gitId":"tchiong"},"content":"        assertFalse(() -\u003e initialCommand.equals(compareCommand));","lastModifiedDate":"2021-11-05"},{"lineNumber":312,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":313,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":314,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":315,"author":{"gitId":"YaleChen299"},"content":"    public void equals_differentIndexAddAppCommand_returnFalse() {","lastModifiedDate":"2021-11-06"},{"lineNumber":316,"author":{"gitId":"YaleChen299"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":317,"author":{"gitId":"YaleChen299"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-06"},{"lineNumber":318,"author":{"gitId":"YaleChen299"},"content":"        Command initialCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-06"},{"lineNumber":319,"author":{"gitId":"YaleChen299"},"content":"                indexes,","lastModifiedDate":"2021-11-06"},{"lineNumber":320,"author":{"gitId":"YaleChen299"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-06"},{"lineNumber":321,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":322,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":323,"author":{"gitId":"YaleChen299"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-06"},{"lineNumber":324,"author":{"gitId":"YaleChen299"},"content":"        Command compareCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-06"},{"lineNumber":325,"author":{"gitId":"YaleChen299"},"content":"                new ArrayList\u003c\u003e(),","lastModifiedDate":"2021-11-06"},{"lineNumber":326,"author":{"gitId":"YaleChen299"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-06"},{"lineNumber":327,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":328,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":329,"author":{"gitId":"YaleChen299"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-06"},{"lineNumber":330,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(() -\u003e initialCommand.equals(compareCommand));","lastModifiedDate":"2021-11-06"},{"lineNumber":331,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":332,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":333,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":334,"author":{"gitId":"YaleChen299"},"content":"    public void equals_differentAddressAddAppCommand_returnFalse() {","lastModifiedDate":"2021-11-06"},{"lineNumber":335,"author":{"gitId":"YaleChen299"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":336,"author":{"gitId":"YaleChen299"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-06"},{"lineNumber":337,"author":{"gitId":"YaleChen299"},"content":"        Command initialCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-06"},{"lineNumber":338,"author":{"gitId":"YaleChen299"},"content":"                indexes,","lastModifiedDate":"2021-11-06"},{"lineNumber":339,"author":{"gitId":"YaleChen299"},"content":"                new Address(\"vivocity level 1\"),","lastModifiedDate":"2021-11-06"},{"lineNumber":340,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":341,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":342,"author":{"gitId":"YaleChen299"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-06"},{"lineNumber":343,"author":{"gitId":"YaleChen299"},"content":"        Command compareCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-06"},{"lineNumber":344,"author":{"gitId":"YaleChen299"},"content":"                indexes,","lastModifiedDate":"2021-11-06"},{"lineNumber":345,"author":{"gitId":"YaleChen299"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-06"},{"lineNumber":346,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":347,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":348,"author":{"gitId":"YaleChen299"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-06"},{"lineNumber":349,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(() -\u003e initialCommand.equals(compareCommand));","lastModifiedDate":"2021-11-06"},{"lineNumber":350,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":351,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":352,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":353,"author":{"gitId":"YaleChen299"},"content":"    public void equals_differentStartTimeAddAppCommand_returnFalse() {","lastModifiedDate":"2021-11-06"},{"lineNumber":354,"author":{"gitId":"YaleChen299"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":355,"author":{"gitId":"YaleChen299"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-06"},{"lineNumber":356,"author":{"gitId":"YaleChen299"},"content":"        Command initialCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-06"},{"lineNumber":357,"author":{"gitId":"YaleChen299"},"content":"                indexes,","lastModifiedDate":"2021-11-06"},{"lineNumber":358,"author":{"gitId":"YaleChen299"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-06"},{"lineNumber":359,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":360,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":361,"author":{"gitId":"YaleChen299"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-06"},{"lineNumber":362,"author":{"gitId":"YaleChen299"},"content":"        Command compareCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-06"},{"lineNumber":363,"author":{"gitId":"YaleChen299"},"content":"                indexes,","lastModifiedDate":"2021-11-06"},{"lineNumber":364,"author":{"gitId":"YaleChen299"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-06"},{"lineNumber":365,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 11, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":366,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":367,"author":{"gitId":"YaleChen299"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-06"},{"lineNumber":368,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(() -\u003e initialCommand.equals(compareCommand));","lastModifiedDate":"2021-11-06"},{"lineNumber":369,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":370,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":371,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":372,"author":{"gitId":"YaleChen299"},"content":"    public void equals_differentEndTimeAddAppCommand_returnFalse() {","lastModifiedDate":"2021-11-06"},{"lineNumber":373,"author":{"gitId":"YaleChen299"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":374,"author":{"gitId":"YaleChen299"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-06"},{"lineNumber":375,"author":{"gitId":"YaleChen299"},"content":"        Command initialCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-06"},{"lineNumber":376,"author":{"gitId":"YaleChen299"},"content":"                indexes,","lastModifiedDate":"2021-11-06"},{"lineNumber":377,"author":{"gitId":"YaleChen299"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-06"},{"lineNumber":378,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":379,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":380,"author":{"gitId":"YaleChen299"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-06"},{"lineNumber":381,"author":{"gitId":"YaleChen299"},"content":"        Command compareCommand \u003d new AddAppCommand(","lastModifiedDate":"2021-11-06"},{"lineNumber":382,"author":{"gitId":"YaleChen299"},"content":"                indexes,","lastModifiedDate":"2021-11-06"},{"lineNumber":383,"author":{"gitId":"YaleChen299"},"content":"                new Address(\"vivocity\"),","lastModifiedDate":"2021-11-06"},{"lineNumber":384,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":385,"author":{"gitId":"YaleChen299"},"content":"                LocalDateTime.of(2021, 1, 1, 11, 0),","lastModifiedDate":"2021-11-06"},{"lineNumber":386,"author":{"gitId":"YaleChen299"},"content":"                \"Halloween Sales\");","lastModifiedDate":"2021-11-06"},{"lineNumber":387,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(() -\u003e initialCommand.equals(compareCommand));","lastModifiedDate":"2021-11-06"},{"lineNumber":388,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":389,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":390,"author":{"gitId":"tchiong"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-10-13"},{"lineNumber":391,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":392,"author":{"gitId":"tchiong"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-10-13"},{"lineNumber":393,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":394,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":395,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":396,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":397,"author":{"gitId":"tchiong"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-10-13"},{"lineNumber":398,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":399,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":400,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":401,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":402,"author":{"gitId":"tchiong"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-10-13"},{"lineNumber":403,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":404,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":405,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":406,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":407,"author":{"gitId":"tchiong"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-10-13"},{"lineNumber":408,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":409,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":410,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":411,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":412,"author":{"gitId":"tchiong"},"content":"        public Path getContactsFilePath() {","lastModifiedDate":"2021-11-04"},{"lineNumber":413,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":414,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":415,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":416,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":417,"author":{"gitId":"tchiong"},"content":"        public void setContactsFilePath(Path contactsFilePath) {","lastModifiedDate":"2021-11-04"},{"lineNumber":418,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":419,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":420,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":421,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":422,"author":{"gitId":"tchiong"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-10-13"},{"lineNumber":423,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":424,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":425,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":426,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":427,"author":{"gitId":"tchiong"},"content":"        public void setContact(ReadOnlyContacts contacts) {","lastModifiedDate":"2021-11-04"},{"lineNumber":428,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":429,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":430,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":431,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":432,"author":{"gitId":"tchiong"},"content":"        public ReadOnlyContacts getContacts() {","lastModifiedDate":"2021-11-04"},{"lineNumber":433,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":434,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":435,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":436,"author":{"gitId":"nwhloo99"},"content":"        @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":437,"author":{"gitId":"nwhloo99"},"content":"        public void setSchedule(ReadOnlySchedule schedule) {","lastModifiedDate":"2021-11-03"},{"lineNumber":438,"author":{"gitId":"nwhloo99"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-03"},{"lineNumber":439,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":440,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":441,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-14"},{"lineNumber":442,"author":{"gitId":"tchiong"},"content":"        public ReadOnlySchedule getSchedule() {","lastModifiedDate":"2021-10-14"},{"lineNumber":443,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-14"},{"lineNumber":444,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":445,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":446,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":447,"author":{"gitId":"tchiong"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-10-13"},{"lineNumber":448,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":449,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":450,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":451,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":452,"author":{"gitId":"tchiong"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2021-10-13"},{"lineNumber":453,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":454,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":455,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":456,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":457,"author":{"gitId":"tchiong"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-10-13"},{"lineNumber":458,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":459,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":460,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":461,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":462,"author":{"gitId":"tchiong"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":463,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":464,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":465,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":466,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":467,"author":{"gitId":"tchiong"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-10-13"},{"lineNumber":468,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":469,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":470,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":471,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":472,"author":{"gitId":"tchiong"},"content":"        public void addAppointment(Appointment a) {","lastModifiedDate":"2021-10-13"},{"lineNumber":473,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":474,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":475,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":476,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":477,"author":{"gitId":"tchiong"},"content":"        public void deleteAppointment(Appointment a) {","lastModifiedDate":"2021-10-13"},{"lineNumber":478,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":479,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":480,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":481,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":482,"author":{"gitId":"tchiong"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":483,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":484,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":485,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":486,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":487,"author":{"gitId":"tchiong"},"content":"        public void sortFilteredAppointmentList(String sortBy) {","lastModifiedDate":"2021-10-20"},{"lineNumber":488,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-20"},{"lineNumber":489,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":490,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":491,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":492,"author":{"gitId":"tchiong"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2021-10-13"},{"lineNumber":493,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":494,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":495,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":496,"author":{"gitId":"YaleChen299"},"content":"        @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":497,"author":{"gitId":"YaleChen299"},"content":"        public String getRelatedAppointmentsAsString(Person client) {","lastModifiedDate":"2021-10-20"},{"lineNumber":498,"author":{"gitId":"YaleChen299"},"content":"            return \"\";","lastModifiedDate":"2021-10-20"},{"lineNumber":499,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":500,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":501,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":502,"author":{"gitId":"Li-Lehao"},"content":"        public String getAppointmentsThatOnlyHaveThisClientAsString(Person client) {","lastModifiedDate":"2021-10-25"},{"lineNumber":503,"author":{"gitId":"Li-Lehao"},"content":"            return \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":504,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":505,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":506,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":507,"author":{"gitId":"Li-Lehao"},"content":"        public void updateEditedClientInAppointments(Person personToEdit, Person editedPerson) {","lastModifiedDate":"2021-10-26"},{"lineNumber":508,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":509,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":510,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":511,"author":{"gitId":"Li-Lehao"},"content":"        public void removePersonFromAppointments(Person personToDelete) {","lastModifiedDate":"2021-10-26"},{"lineNumber":512,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":513,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":514,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":515,"author":{"gitId":"Li-Lehao"},"content":"        public List\u003cAppointment\u003e getClashingAppointments(Appointment appointment) {","lastModifiedDate":"2021-10-28"},{"lineNumber":516,"author":{"gitId":"Li-Lehao"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":517,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":518,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":519,"author":{"gitId":"NecroWolf28"},"content":"        @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":520,"author":{"gitId":"NecroWolf28"},"content":"        public void setAppointment(Appointment appointmentToEdit, Appointment editedAppointment) {","lastModifiedDate":"2021-10-29"},{"lineNumber":521,"author":{"gitId":"NecroWolf28"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":522,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":523,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":524,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":525,"author":{"gitId":"Li-Lehao"},"content":"        public void updateState() {","lastModifiedDate":"2021-10-29"},{"lineNumber":526,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":527,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":528,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":529,"author":{"gitId":"Li-Lehao"},"content":"        public void undo() {","lastModifiedDate":"2021-10-29"},{"lineNumber":530,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":531,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":532,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":533,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":534,"author":{"gitId":"tchiong"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2021-10-13"},{"lineNumber":535,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":536,"author":{"gitId":"tchiong"},"content":"    private class ModelStubAcceptingAppointmentAdded extends AddAppCommandTest.ModelStub {","lastModifiedDate":"2021-10-13"},{"lineNumber":537,"author":{"gitId":"tchiong"},"content":"        final ObservableList\u003cAppointment\u003e appointmentAdded \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-26"},{"lineNumber":538,"author":{"gitId":"tchiong"},"content":"        final ObservableList\u003cPerson\u003e personsAdded \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-13"},{"lineNumber":539,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":540,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":541,"author":{"gitId":"tchiong"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-10-13"},{"lineNumber":542,"author":{"gitId":"tchiong"},"content":"            requireNonNull(person);","lastModifiedDate":"2021-10-13"},{"lineNumber":543,"author":{"gitId":"tchiong"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2021-10-13"},{"lineNumber":544,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":545,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":546,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":547,"author":{"gitId":"tchiong"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-10-13"},{"lineNumber":548,"author":{"gitId":"tchiong"},"content":"            requireNonNull(person);","lastModifiedDate":"2021-10-13"},{"lineNumber":549,"author":{"gitId":"tchiong"},"content":"            personsAdded.add(person);","lastModifiedDate":"2021-10-13"},{"lineNumber":550,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":551,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":552,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":553,"author":{"gitId":"tchiong"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":554,"author":{"gitId":"tchiong"},"content":"            return personsAdded;","lastModifiedDate":"2021-10-13"},{"lineNumber":555,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":556,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":557,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":558,"author":{"gitId":"tchiong"},"content":"        public void addAppointment(Appointment a) {","lastModifiedDate":"2021-10-13"},{"lineNumber":559,"author":{"gitId":"tchiong"},"content":"            requireNonNull(a);","lastModifiedDate":"2021-10-13"},{"lineNumber":560,"author":{"gitId":"tchiong"},"content":"            appointmentAdded.add(a);","lastModifiedDate":"2021-10-13"},{"lineNumber":561,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":562,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":563,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":564,"author":{"gitId":"tchiong"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-26"},{"lineNumber":565,"author":{"gitId":"tchiong"},"content":"            return appointmentAdded;","lastModifiedDate":"2021-10-26"},{"lineNumber":566,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":567,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":568,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":569,"author":{"gitId":"tchiong"},"content":"        public ReadOnlyContacts getContacts() {","lastModifiedDate":"2021-11-04"},{"lineNumber":570,"author":{"gitId":"tchiong"},"content":"            return new Contacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":571,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":572,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":573,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"tchiong":340,"Li-Lehao":44,"YaleChen299":114,"nwhloo99":71,"NecroWolf28":4}},{"path":"src/test/java/seedu/placebook/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"    private Ui ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"        model \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"        // default positive confirmation ui. This will not affect AddCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"        ui \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"        Model expectedModel \u003d new ModelManager(model.getContacts(), new UserPrefs(), model.getSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model, ui,","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"        Person personInList \u003d model.getContacts().getPersonList().get(0);","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"        assertCommandFailure(new AddCommand(personInList), model, ui, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"tchiong":4,"YaleChen299":17,"-":31}},{"path":"src/test/java/seedu/placebook/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"import java.util.List;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect AddCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, uiStub);","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"                AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub, uiStub));","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"tchiong"},"content":"        public Path getContactsFilePath() {","lastModifiedDate":"2021-11-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"tchiong"},"content":"        public void setContactsFilePath(Path contactsFilePath) {","lastModifiedDate":"2021-11-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"tchiong"},"content":"        public void setContact(ReadOnlyContacts contacts) {","lastModifiedDate":"2021-11-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":131,"author":{"gitId":"tchiong"},"content":"        public ReadOnlyContacts getContacts() {","lastModifiedDate":"2021-11-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":135,"author":{"gitId":"nwhloo99"},"content":"        @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"nwhloo99"},"content":"        public void setSchedule(ReadOnlySchedule schedule) {","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":141,"author":{"gitId":"nwhloo99"},"content":"        public ReadOnlySchedule getSchedule() {","lastModifiedDate":"2021-10-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"tchiong"},"content":"        public void addAppointment(Appointment a) {","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":174,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"tchiong"},"content":"        public void deleteAppointment(Appointment a) {","lastModifiedDate":"2021-10-07"},{"lineNumber":177,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-07"},{"lineNumber":178,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":179,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":180,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":181,"author":{"gitId":"Li-Lehao"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-07"},{"lineNumber":182,"author":{"gitId":"Li-Lehao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-07"},{"lineNumber":183,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":184,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":185,"author":{"gitId":"tchiong"},"content":"        @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":186,"author":{"gitId":"tchiong"},"content":"        public void sortFilteredAppointmentList(String sortBy) {","lastModifiedDate":"2021-10-20"},{"lineNumber":187,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-20"},{"lineNumber":188,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":189,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":190,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":191,"author":{"gitId":"Li-Lehao"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2021-10-07"},{"lineNumber":192,"author":{"gitId":"Li-Lehao"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-07"},{"lineNumber":193,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":194,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":195,"author":{"gitId":"YaleChen299"},"content":"        @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":196,"author":{"gitId":"YaleChen299"},"content":"        public String getRelatedAppointmentsAsString(Person client) {","lastModifiedDate":"2021-10-20"},{"lineNumber":197,"author":{"gitId":"YaleChen299"},"content":"            return \"\";","lastModifiedDate":"2021-10-20"},{"lineNumber":198,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":199,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"Li-Lehao"},"content":"        public String getAppointmentsThatOnlyHaveThisClientAsString(Person client) {","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"Li-Lehao"},"content":"            return \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"Li-Lehao"},"content":"        public void updateEditedClientInAppointments(Person personToEdit, Person editedPerson) {","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"Li-Lehao"},"content":"        public void removePersonFromAppointments(Person personToDelete) {","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":213,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":214,"author":{"gitId":"Li-Lehao"},"content":"        public List\u003cAppointment\u003e getClashingAppointments(Appointment appointment) {","lastModifiedDate":"2021-10-28"},{"lineNumber":215,"author":{"gitId":"Li-Lehao"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":216,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":217,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":218,"author":{"gitId":"NecroWolf28"},"content":"        @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":219,"author":{"gitId":"NecroWolf28"},"content":"        public void setAppointment(Appointment appointmentToEdit, Appointment editedAppointment) {","lastModifiedDate":"2021-10-29"},{"lineNumber":220,"author":{"gitId":"NecroWolf28"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":221,"author":{"gitId":"NecroWolf28"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":222,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":223,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":224,"author":{"gitId":"Li-Lehao"},"content":"        public void updateState() {","lastModifiedDate":"2021-10-29"},{"lineNumber":225,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":226,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":227,"author":{"gitId":"Li-Lehao"},"content":"        @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":228,"author":{"gitId":"Li-Lehao"},"content":"        public void undo() {","lastModifiedDate":"2021-10-29"},{"lineNumber":229,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":251,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":252,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":269,"author":{"gitId":"tchiong"},"content":"        public ReadOnlyContacts getContacts() {","lastModifiedDate":"2021-11-04"},{"lineNumber":270,"author":{"gitId":"tchiong"},"content":"            return new Contacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":274,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"Li-Lehao":37,"tchiong":23,"YaleChen299":22,"nwhloo99":6,"-":182,"NecroWolf28":4}},{"path":"src/test/java/seedu/placebook/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"nwhloo99"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect clearCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"    public void execute_emptyContacts_success() {","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new ClearCommand(), model, uiStub, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"    public void execute_nonEmptyContacts_success() {","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"        Model model \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"        expectedModel.setContact(new Contacts());","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"        expectedModel.setSchedule(new Schedule());","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new ClearCommand(), model, uiStub, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"tchiong":7,"YaleChen299":12,"nwhloo99":2,"-":18}},{"path":"src/test/java/seedu/placebook/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"Li-Lehao"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"Li-Lehao"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"    public void isShowHelp() {","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(commandResult.isShowHelp());","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"        CommandResult anotherCommandResult \u003d new CommandResult(\"feedback\", true, false, false);","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(anotherCommandResult.isShowHelp());","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"    public void isExit() {","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(commandResult.isExit());","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"        CommandResult anotherCommandResult \u003d new CommandResult(\"feedback\", false, true, false);","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(anotherCommandResult.isExit());","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"    public void isUndo() {","lastModifiedDate":"2021-11-06"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(commandResult.isUndo());","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"        CommandResult anotherCommandResult \u003d new CommandResult(\"feedback\", false, false, true);","lastModifiedDate":"2021-11-06"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(anotherCommandResult.isUndo());","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"Li-Lehao":5,"YaleChen299":27,"-":49}},{"path":"src/test/java/seedu/placebook/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.model.schedule.DescriptionContainsKeywordsPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.TimePeriod;","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"NecroWolf28"},"content":"    public static final LocalDate VALID_DATE \u003d LocalDate.parse(\"12-12-2021\",","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"NecroWolf28"},"content":"            DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"NecroWolf28"},"content":"    public static final LocalTime VALID_TIME \u003d LocalTime.parse(\"1400\", DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"    public static final TimePeriod VALID_TIME_PERIOD \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"            new TimePeriod(LocalDateTime.of(2021, 12, 14, 10, 00),","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"                    LocalDateTime.of(2021, 12, 14, 11, 00));","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"YaleChen299"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, Ui uiStub,","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"YaleChen299"},"content":"                                            CommandResult expectedCommandResult, Model expectedModel) {","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"YaleChen299"},"content":"            CommandResult result \u003d command.execute(actualModel, uiStub);","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"YaleChen299"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, Ui, CommandResult, Model)}","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"YaleChen299"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, Ui uiStub, String expectedMessage,","lastModifiedDate":"2021-11-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(command, actualModel, uiStub, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"tchiong"},"content":"     * - the schedule, contacts, filtered person list filtered appointment list","lastModifiedDate":"2021-11-04"},{"lineNumber":118,"author":{"gitId":"tchiong"},"content":"     * and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2021-11-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"YaleChen299"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, Ui uiStub, String expectedMessage) {","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"tchiong"},"content":"        Contacts contacts \u003d new Contacts(actualModel.getContacts());","lastModifiedDate":"2021-11-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"YaleChen299"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, uiStub));","lastModifiedDate":"2021-11-03"},{"lineNumber":127,"author":{"gitId":"tchiong"},"content":"        assertEquals(contacts, actualModel.getContacts());","lastModifiedDate":"2021-11-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":133,"author":{"gitId":"tchiong"},"content":"     * {@code model}\u0027s contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":145,"author":{"gitId":"NecroWolf28"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":146,"author":{"gitId":"NecroWolf28"},"content":"     * Updates {@code model}\u0027s filtered list to show only the appointment at the given {@code targetIndex} in the","lastModifiedDate":"2021-11-05"},{"lineNumber":147,"author":{"gitId":"NecroWolf28"},"content":"     * {@code model}\u0027s schedule.","lastModifiedDate":"2021-11-05"},{"lineNumber":148,"author":{"gitId":"NecroWolf28"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":149,"author":{"gitId":"NecroWolf28"},"content":"    public static void showAppointmentAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-11-05"},{"lineNumber":150,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAppointmentList().size());","lastModifiedDate":"2021-11-05"},{"lineNumber":151,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":152,"author":{"gitId":"NecroWolf28"},"content":"        Appointment appointment \u003d model.getFilteredAppointmentList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-11-05"},{"lineNumber":153,"author":{"gitId":"NecroWolf28"},"content":"        final String[] splitDesc \u003d appointment.getDescription().split(\"\\\\s+\");","lastModifiedDate":"2021-11-05"},{"lineNumber":154,"author":{"gitId":"NecroWolf28"},"content":"        model.updateFilteredAppointmentList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitDesc[0])));","lastModifiedDate":"2021-11-05"},{"lineNumber":155,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":156,"author":{"gitId":"NecroWolf28"},"content":"        assertEquals(1, model.getFilteredAppointmentList().size());","lastModifiedDate":"2021-11-05"},{"lineNumber":157,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"tchiong":6,"Li-Lehao":1,"YaleChen299":23,"nwhloo99":4,"-":102,"NecroWolf28":22}},{"path":"src/test/java/seedu/placebook/logic/commands/DelAppCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NecroWolf28"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"NecroWolf28"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"NecroWolf28"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.showAppointmentAtIndex;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"NecroWolf28"},"content":"public class DelAppCommandTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"    private final Model model \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"    private final Ui positive \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"    private final Ui negative \u003d UiStubFactory.getUiStub(false);","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList()","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"NecroWolf28"},"content":"                .get(INDEX_FIRST_APPOINTMENT.getZeroBased());","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"NecroWolf28"},"content":"        DelAppCommand delAppCommand \u003d new DelAppCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"NecroWolf28"},"content":"        String expectedMessage \u003d String.format(DelAppCommand.MESSAGE_SUCCESS, appointmentToDelete);","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"NecroWolf28"},"content":"        ModelManager expectedModel \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"NecroWolf28"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"NecroWolf28"},"content":"        assertCommandSuccess(delAppCommand, model, positive, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_validIndexUnfilteredList_cancel() {","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"NecroWolf28"},"content":"        DelAppCommand delAppCommand \u003d new DelAppCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"NecroWolf28"},"content":"        String expectedMessage \u003d DelAppCommand.MESSAGE_NO_APPOINTMENT_DELETED;","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"NecroWolf28"},"content":"        assertCommandSuccess(delAppCommand, model, negative, expectedMessage, model);","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"NecroWolf28"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"NecroWolf28"},"content":"        DelAppCommand deleteCommand \u003d new DelAppCommand(outOfBoundIndex);","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"NecroWolf28"},"content":"        assertCommandFailure(deleteCommand, model, positive, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"NecroWolf28"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"NecroWolf28"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList()","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"NecroWolf28"},"content":"                .get(INDEX_FIRST_APPOINTMENT.getZeroBased());","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"NecroWolf28"},"content":"        DelAppCommand delAppCommand \u003d new DelAppCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"NecroWolf28"},"content":"        String expectedMessage \u003d String.format(DelAppCommand.MESSAGE_SUCCESS, appointmentToDelete);","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"NecroWolf28"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"NecroWolf28"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"NecroWolf28"},"content":"        showNoAppointment(expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"NecroWolf28"},"content":"        assertCommandSuccess(delAppCommand, model, positive, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"NecroWolf28"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":85,"author":{"gitId":"NecroWolf28"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"NecroWolf28"},"content":"        // ensures that outOfBoundIndex is still in bounds of contacts list","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSchedule().getSchedule().size());","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"NecroWolf28"},"content":"        DelAppCommand delAppCommand \u003d new DelAppCommand(outOfBoundIndex);","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"NecroWolf28"},"content":"        assertCommandFailure(delAppCommand, model, positive, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"NecroWolf28"},"content":"    public void equals() {","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"NecroWolf28"},"content":"        DelAppCommand delAppFirstCommand \u003d new DelAppCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"NecroWolf28"},"content":"        DelAppCommand delAppSecondCommand \u003d new DelAppCommand(INDEX_SECOND_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"NecroWolf28"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(delAppFirstCommand.equals(delAppFirstCommand));","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"NecroWolf28"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"NecroWolf28"},"content":"        DelAppCommand delAppFirstCommandCopy \u003d new DelAppCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":104,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(delAppFirstCommand.equals(delAppFirstCommandCopy));","lastModifiedDate":"2021-11-05"},{"lineNumber":105,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":106,"author":{"gitId":"NecroWolf28"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-11-05"},{"lineNumber":107,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(delAppFirstCommand.equals(1));","lastModifiedDate":"2021-11-05"},{"lineNumber":108,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":109,"author":{"gitId":"NecroWolf28"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-11-05"},{"lineNumber":110,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(delAppFirstCommand.equals(null));","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"NecroWolf28"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(delAppFirstCommand.equals(delAppSecondCommand));","lastModifiedDate":"2021-11-05"},{"lineNumber":114,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":115,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":116,"author":{"gitId":"NecroWolf28"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"NecroWolf28"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"NecroWolf28"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"NecroWolf28"},"content":"    private void showNoAppointment(Model model) {","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"NecroWolf28"},"content":"        model.updateFilteredAppointmentList(p -\u003e false);","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":122,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(model.getFilteredAppointmentList().isEmpty());","lastModifiedDate":"2021-11-05"},{"lineNumber":123,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"NecroWolf28":124}},{"path":"src/test/java/seedu/placebook/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"    private final Model model \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"    private final Ui positive \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"    private final Ui negative \u003d UiStubFactory.getUiStub(false);","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"        ModelManager expectedModel \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(deleteCommand, model, positive, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"        assertCommandFailure(deleteCommand, model, positive, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(deleteCommand, model, positive, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_validIndexFilteredList_cancel() {","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"NecroWolf28"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"NecroWolf28"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"NecroWolf28"},"content":"        String expectedMessage \u003d DeleteCommand.MESSAGE_NO_PERSON_DELETED;","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"NecroWolf28"},"content":"        assertCommandSuccess(deleteCommand, model, negative, expectedMessage, model);","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"tchiong"},"content":"        // ensures that outOfBoundIndex is still in bounds of contacts list","lastModifiedDate":"2021-11-04"},{"lineNumber":88,"author":{"gitId":"tchiong"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getContacts().getPersonList().size());","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"YaleChen299"},"content":"        assertCommandFailure(deleteCommand, model, positive, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"tchiong":6,"YaleChen299":22,"-":88,"NecroWolf28":9}},{"path":"src/test/java/seedu/placebook/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.Messages;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.UniquePersonList;","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.AppointmentBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.testutil.ContactsBuilder;","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.Seed;","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect EditCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"    private final UniquePersonList editTestPersonList \u003d new UniquePersonList();","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"Li-Lehao"},"content":"    private Model model;","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"    private Contacts testContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"Li-Lehao"},"content":"    private Schedule testSchedule;","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"Li-Lehao"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"Li-Lehao"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"        Person client1 \u003d new PersonBuilder().withName(\"Client1\").build();","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"        Person client2 \u003d new PersonBuilder().withName(\"Client2\").build();","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"        testContacts \u003d new ContactsBuilder().build();","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"tchiong"},"content":"        testContacts.addPerson(client1);","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"tchiong"},"content":"        testContacts.addPerson(client2);","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"        Appointment appointment1 \u003d new AppointmentBuilder(Seed.ONE).addClient(client1).build();","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"        Appointment appointment2 \u003d new AppointmentBuilder(Seed.TWO).addClient(client1).addClient(client2).build();","lastModifiedDate":"2021-11-02"},{"lineNumber":62,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"Li-Lehao"},"content":"        testSchedule \u003d new Schedule();","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"Li-Lehao"},"content":"        testSchedule.addAppointment(appointment1);","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"Li-Lehao"},"content":"        testSchedule.addAppointment(appointment2);","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"tchiong"},"content":"        model \u003d new ModelManager(testContacts, new UserPrefs(), testSchedule);","lastModifiedDate":"2021-11-04"},{"lineNumber":67,"author":{"gitId":"Li-Lehao"},"content":"        System.out.println(model.getFilteredAppointmentList().get(0));","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"Li-Lehao"},"content":"        System.out.println(model.getFilteredAppointmentList().get(1));","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":79,"author":{"gitId":"nwhloo99"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"tchiong"},"content":"                new ModelManager(testContacts, new UserPrefs(), testSchedule);","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"Li-Lehao"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":84,"author":{"gitId":"Li-Lehao"},"content":"        expectedModel.updateEditedClientInAppointments(personToEdit, editedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":86,"author":{"gitId":"Li-Lehao"},"content":"        System.out.println(model.equals(expectedModel));","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(editCommand, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"nwhloo99"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"tchiong"},"content":"                new ModelManager(new Contacts(model.getContacts()), new UserPrefs(), model.getSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":109,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(editCommand, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"nwhloo99"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":120,"author":{"gitId":"tchiong"},"content":"                new ModelManager(new Contacts(model.getContacts()), new UserPrefs(), model.getSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(editCommand, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"nwhloo99"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":137,"author":{"gitId":"tchiong"},"content":"                new ModelManager(new Contacts(model.getContacts()), new UserPrefs(), model.getSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(editCommand, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"YaleChen299"},"content":"        assertCommandFailure(editCommand, model, uiStub, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-11-03"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":156,"author":{"gitId":"tchiong"},"content":"        // edit person in filtered list into a duplicate in contacts","lastModifiedDate":"2021-11-04"},{"lineNumber":157,"author":{"gitId":"tchiong"},"content":"        Person personInList \u003d model.getContacts().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-11-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":161,"author":{"gitId":"YaleChen299"},"content":"        assertCommandFailure(editCommand, model, uiStub, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-11-03"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":170,"author":{"gitId":"YaleChen299"},"content":"        assertCommandFailure(editCommand, model, uiStub, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-03"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":175,"author":{"gitId":"tchiong"},"content":"     * but smaller than size of contacts","lastModifiedDate":"2021-11-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":181,"author":{"gitId":"tchiong"},"content":"        // ensures that outOfBoundIndex is still in bounds of contacts list","lastModifiedDate":"2021-11-04"},{"lineNumber":182,"author":{"gitId":"tchiong"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getContacts().getPersonList().size());","lastModifiedDate":"2021-11-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":187,"author":{"gitId":"YaleChen299"},"content":"        assertCommandFailure(editCommand, model, uiStub, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-03"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"Li-Lehao":21,"tchiong":16,"YaleChen299":40,"nwhloo99":4,"-":134}},{"path":"src/test/java/seedu/placebook/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"YaleChen299":10,"-":48}},{"path":"src/test/java/seedu/placebook/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect ExitCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new ExitCommand(), model, uiStub, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Li-Lehao":1,"YaleChen299":13,"-":11}},{"path":"src/test/java/seedu/placebook/logic/commands/FindAppCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_APPOINTMENTS_LISTED_OVERVIEW;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.ALICE_APPOINTMENT;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.CARL_APPOINTMENT;","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import java.util.Collections;","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.DescriptionContainsKeywordsPredicate;","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"/**","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":" * Contains integration tests (interaction with the Model) for {@code FindAppCommand}.","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":" * The testcases are similar to those in {@code FindCommand}.","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":" */","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"public class FindAppCommandTest {","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect FindCommand","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"    private Model model \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"    public void equals() {","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"        FindAppCommand findFirstCommand \u003d new FindAppCommand(firstPredicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"        FindAppCommand findSecondCommand \u003d new FindAppCommand(secondPredicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"        FindAppCommand findFirstCommandCopy \u003d new FindAppCommand(firstPredicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"        // different appointment -\u003e returns false","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"    public void execute_zeroKeywords_noAppointmentFound() {","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-11-04"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-11-04"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"        FindAppCommand command \u003d new FindAppCommand(predicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"        expectedModel.updateFilteredAppointmentList(predicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"    public void execute_oneKeyword_multipleAppointmentsFound() {","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"sales\");","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"        FindAppCommand command \u003d new FindAppCommand(predicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":"        expectedModel.updateFilteredAppointmentList(predicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":80,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(Arrays.asList(ALICE_APPOINTMENT, CARL_APPOINTMENT), model.getFilteredAppointmentList());","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":85,"author":{"gitId":"YaleChen299"},"content":"    public void execute_oneKeyword_oneAppointmentFound() {","lastModifiedDate":"2021-11-04"},{"lineNumber":86,"author":{"gitId":"YaleChen299"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-11-04"},{"lineNumber":87,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"talk\");","lastModifiedDate":"2021-11-04"},{"lineNumber":88,"author":{"gitId":"YaleChen299"},"content":"        FindAppCommand command \u003d new FindAppCommand(predicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"YaleChen299"},"content":"        expectedModel.updateFilteredAppointmentList(predicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":90,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(Arrays.asList(ALICE_APPOINTMENT), model.getFilteredAppointmentList());","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":94,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":95,"author":{"gitId":"YaleChen299"},"content":"    public void execute_multipleKeywords_multipleAppointmentsFound() {","lastModifiedDate":"2021-11-04"},{"lineNumber":96,"author":{"gitId":"YaleChen299"},"content":"        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-11-04"},{"lineNumber":97,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"talk sales\");","lastModifiedDate":"2021-11-04"},{"lineNumber":98,"author":{"gitId":"YaleChen299"},"content":"        FindAppCommand command \u003d new FindAppCommand(predicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":99,"author":{"gitId":"YaleChen299"},"content":"        expectedModel.updateFilteredAppointmentList(predicate);","lastModifiedDate":"2021-11-04"},{"lineNumber":100,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-04"},{"lineNumber":101,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(Arrays.asList(ALICE_APPOINTMENT, CARL_APPOINTMENT), model.getFilteredAppointmentList());","lastModifiedDate":"2021-11-04"},{"lineNumber":102,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":103,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":104,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":105,"author":{"gitId":"YaleChen299"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2021-11-04"},{"lineNumber":106,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":107,"author":{"gitId":"YaleChen299"},"content":"    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-11-04"},{"lineNumber":108,"author":{"gitId":"YaleChen299"},"content":"        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":110,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"YaleChen299":110}},{"path":"src/test/java/seedu/placebook/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect FindCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"    private Model model \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"tchiong":3,"YaleChen299":17,"-":69}},{"path":"src/test/java/seedu/placebook/logic/commands/FindTagsCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"NecroWolf28"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"NecroWolf28"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"NecroWolf28"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"NecroWolf28"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.PersonHasTagsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"public class FindTagsCommandTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect FindTagsCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"    private Model model \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"NecroWolf28"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"NecroWolf28"},"content":"                new PersonHasTagsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"NecroWolf28"},"content":"                new PersonHasTagsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"NecroWolf28"},"content":"        FindTagsCommand findFirstCommand \u003d new FindTagsCommand(firstPredicate);","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"NecroWolf28"},"content":"        FindTagsCommand findSecondCommand \u003d new FindTagsCommand(secondPredicate);","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"NecroWolf28"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"NecroWolf28"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"NecroWolf28"},"content":"        FindTagsCommand findFirstCommandCopy \u003d new FindTagsCommand(firstPredicate);","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"NecroWolf28"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"NecroWolf28"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"NecroWolf28"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"NecroWolf28"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"NecroWolf28"},"content":"        FindTagsCommand command \u003d new FindTagsCommand(predicate);","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"NecroWolf28"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"NecroWolf28"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_oneKeyword_noPersonFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"NecroWolf28"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate predicate \u003d preparePredicate(\"enemies\");","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"NecroWolf28"},"content":"        FindTagsCommand command \u003d new FindTagsCommand(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"NecroWolf28"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"NecroWolf28"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"NecroWolf28"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_oneKeyword_onePersonFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"NecroWolf28"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate predicate \u003d preparePredicate(\"owesmoney\");","lastModifiedDate":"2021-11-05"},{"lineNumber":85,"author":{"gitId":"NecroWolf28"},"content":"        FindTagsCommand command \u003d new FindTagsCommand(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"NecroWolf28"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"NecroWolf28"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"NecroWolf28"},"content":"        assertEquals(Arrays.asList(BENSON), model.getFilteredPersonList());","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_oneKeyword_multiplePersonsFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"NecroWolf28"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate predicate \u003d preparePredicate(\"friends\");","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"NecroWolf28"},"content":"        FindTagsCommand command \u003d new FindTagsCommand(predicate);","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"NecroWolf28"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"NecroWolf28"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_multipleKeywords_onePersonFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"NecroWolf28"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-11-05"},{"lineNumber":104,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate predicate \u003d preparePredicate(\"family single\");","lastModifiedDate":"2021-11-05"},{"lineNumber":105,"author":{"gitId":"NecroWolf28"},"content":"        FindTagsCommand command \u003d new FindTagsCommand(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":106,"author":{"gitId":"NecroWolf28"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":107,"author":{"gitId":"NecroWolf28"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":108,"author":{"gitId":"NecroWolf28"},"content":"        assertEquals(Arrays.asList(GEORGE), model.getFilteredPersonList());","lastModifiedDate":"2021-11-05"},{"lineNumber":109,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":110,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"NecroWolf28"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"NecroWolf28"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-11-05"},{"lineNumber":114,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate predicate \u003d preparePredicate(\"friends owesmoney\");","lastModifiedDate":"2021-11-05"},{"lineNumber":115,"author":{"gitId":"NecroWolf28"},"content":"        FindTagsCommand command \u003d new FindTagsCommand(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":116,"author":{"gitId":"NecroWolf28"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"NecroWolf28"},"content":"        assertCommandSuccess(command, model, uiStub, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"NecroWolf28"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"NecroWolf28"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"NecroWolf28"},"content":"     * Parses {@code userInput} into a {@code PersonHasTagsPredicate}.","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"NecroWolf28"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"NecroWolf28"},"content":"    private PersonHasTagsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"NecroWolf28"},"content":"        return new PersonHasTagsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"tchiong":3,"YaleChen299":18,"NecroWolf28":106}},{"path":"src/test/java/seedu/placebook/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect HelpCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new HelpCommand(), model, uiStub, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Li-Lehao":1,"YaleChen299":13,"-":11}},{"path":"src/test/java/seedu/placebook/logic/commands/ListAppCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.TypicalAppointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.TypicalPersons;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"class ListAppCommandTest {","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect ListAppCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"Li-Lehao"},"content":"    private Model model;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"        Contacts contacts \u003d TypicalPersons.getTypicalContacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"        Schedule schedule \u003d TypicalAppointment.getTypicalSchedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"        model \u003d new ModelManager(contacts, new UserPrefs(), schedule);","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"        expectedModel \u003d new ModelManager(model.getContacts(), new UserPrefs(), model.getSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new ListAppCommand(\"\"), model, uiStub, ListAppCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"Li-Lehao"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"Li-Lehao"},"content":"        model.updateFilteredAppointmentList(x -\u003e false);","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new ListAppCommand(\"\"), model, uiStub, ListAppCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"    public void execute_time_sortsListByTime() {","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"        model.updateFilteredAppointmentList(x -\u003e false);","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"        expectedModel.sortFilteredAppointmentList(\"Time\");","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new ListAppCommand(\"Time\"), model, uiStub, ListAppCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"    public void execute_description_sortsListByDescription() {","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"        model.updateFilteredAppointmentList(x -\u003e false);","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"        expectedModel.sortFilteredAppointmentList(\"Description\");","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new ListAppCommand(\"Description\"),","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"                model, uiStub, ListAppCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"    public void equals() {","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"        ListAppCommand emptyListAppCommand \u003d new ListAppCommand(\"\");","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"        ListAppCommand anotherEmptyListAppCommand \u003d new ListAppCommand(\"\");","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"        ListAppCommand timeListAppCommand \u003d new ListAppCommand(\"Time\");","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(emptyListAppCommand, emptyListAppCommand);","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(emptyListAppCommand, anotherEmptyListAppCommand);","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(emptyListAppCommand.equals(timeListAppCommand));","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"Li-Lehao":24,"tchiong":4,"YaleChen299":43,"nwhloo99":1}},{"path":"src/test/java/seedu/placebook/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect ListCommand","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"        model \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"        expectedModel \u003d new ModelManager(model.getContacts(), new UserPrefs(), model.getSchedule());","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new ListCommand(), model, uiStub, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new ListCommand(), model, uiStub, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"tchiong":3,"YaleChen299":14,"-":27}},{"path":"src/test/java/seedu/placebook/logic/commands/UndoCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.commands;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.UiStubFactory;","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ModelManager;","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.ui.Ui;","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"class UndoCommandTest {","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"    // default positive confirmation ui. This will not affect clearCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    private final Ui uiStub \u003d UiStubFactory.getUiStub(true);","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"    public void execute_emptyStates_failure() {","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"        assertCommandFailure(new UndoCommand(), model, uiStub, UndoCommand.MESSAGE_FAILURE);","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    public void execute_oneHistory_success() {","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"        Model model \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"        Model clearedModel \u003d new ModelManager(getTypicalContacts(), new UserPrefs(), getTypicalSchedule());","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"        clearedModel.setContact(new Contacts());","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"        clearedModel.setSchedule(new Schedule());","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new ClearCommand(), model, uiStub, ClearCommand.MESSAGE_SUCCESS, clearedModel);","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"        assertCommandSuccess(new UndoCommand(), model, uiStub, UndoCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"YaleChen299":41}},{"path":"src/test/java/seedu/placebook/logic/parser/AddAppCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tchiong"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.logic.commands.AddAppCommand;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"public class AddAppCommandParserTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"    private ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"    private AddAppCommandParser parser \u003d new AddAppCommandParser();","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e index \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"        index.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"tchiong"},"content":"        // Index with one value","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"                \" id/1 a/vivocity start/01-01-2021 1000 end/01-01-2021 1200 ds/Halloween Sales\",","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"                new AddAppCommand(index, new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"                        LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"                        LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"                        \"Halloween Sales\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"        indexes.add(Index.fromZeroBased(1));","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"        indexes.add(Index.fromZeroBased(2));","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"tchiong"},"content":"        // Index with multiple values","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"tchiong"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"tchiong"},"content":"                \" id/1,2,3 a/vivocity start/01-01-2021 1000 end/01-01-2021 1200 ds/Halloween Sales\",","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"                new AddAppCommand(indexes, new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"tchiong"},"content":"                        LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"                        LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"tchiong"},"content":"                        \"Halloween Sales\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"    public void parse_descFieldsMissing_success() {","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"tchiong"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"        indexes.add(Index.fromZeroBased(0));","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"tchiong"},"content":"        // Blank desc","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"tchiong"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"tchiong"},"content":"                \" id/1 a/vivocity start/01-01-2021 1000 end/01-01-2021 1200 ds/\",","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"tchiong"},"content":"                new AddAppCommand(indexes, new Address(\"vivocity\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"tchiong"},"content":"                        LocalDateTime.of(2021, 1, 1, 10, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"                        LocalDateTime.of(2021, 1, 1, 12, 0),","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"                        \"\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"tchiong"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"tchiong"},"content":"        // missing index","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"tchiong"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"                \" id/ a/vivocity start/01-01-2021 1000 end/01-01-2021 1200 ds/Halloween Sales\",","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"                \"Index is not a non-zero unsigned integer.\\n\"","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"tchiong"},"content":"                        + \"Please note that index should be less than 2^31.\");","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"tchiong"},"content":"        // missing address","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"tchiong"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"tchiong"},"content":"                \" id/1 a/ start/01-01-2021 1000 end/01-01-2021 1200 ds/Halloween Sales\",","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"tchiong"},"content":"                \"Addresses can take any values, and it should not be blank\");","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"tchiong"},"content":"        // missing start","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"tchiong"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"tchiong"},"content":"                \" id/1 a/vivocity start/ end/01-01-2021 1000 ds/Halloween Sales\",","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"tchiong"},"content":"                \"DateTime format should be \\\"dd-MM-yyyy HHmm\\\".\"","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"tchiong"},"content":"                        + \" Don\u0027t forget that there are only 12 months in a year!\");","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"tchiong"},"content":"        // missing end","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"tchiong"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"tchiong"},"content":"                \" id/1 a/vivocity start/01-01-2021 1000 end/ ds/Halloween Sales\",","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"tchiong"},"content":"                \"DateTime format should be \\\"dd-MM-yyyy HHmm\\\".\"","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"tchiong"},"content":"                        + \" Don\u0027t forget that there are only 12 months in a year!\");","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":85,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"tchiong"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"tchiong"},"content":"        // invalid id","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"tchiong"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"tchiong"},"content":"                \" id/at a/vivocity start/01-01-2021 1000 end/01-01-2021 1200 ds/Halloween Sales\",","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"tchiong"},"content":"                \"Index is not a non-zero unsigned integer.\\n\"","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"tchiong"},"content":"                        + \"Please note that index should be less than 2^31.\");","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"tchiong"},"content":"        // invalid start, invalid values","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"tchiong"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"tchiong"},"content":"                \" id/1 a/vivocity start/00-00-0000 0000 end/01-01-2021 1000 ds/Halloween Sales\",","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"tchiong"},"content":"                \"DateTime format should be \\\"dd-MM-yyyy HHmm\\\".\"","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"tchiong"},"content":"                        + \" Don\u0027t forget that there are only 12 months in a year!\");","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"tchiong"},"content":"        // invalid start, missing values","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"tchiong"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"tchiong"},"content":"                \" id/1 a/vivocity start/01-01-2021 end/01-01-2021 1000 ds/Halloween Sales\",","lastModifiedDate":"2021-11-05"},{"lineNumber":104,"author":{"gitId":"tchiong"},"content":"                \"DateTime format should be \\\"dd-MM-yyyy HHmm\\\".\"","lastModifiedDate":"2021-11-05"},{"lineNumber":105,"author":{"gitId":"tchiong"},"content":"                        + \" Don\u0027t forget that there are only 12 months in a year!\");","lastModifiedDate":"2021-11-05"},{"lineNumber":106,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":107,"author":{"gitId":"tchiong"},"content":"        // invalid end, invalid values","lastModifiedDate":"2021-11-05"},{"lineNumber":108,"author":{"gitId":"tchiong"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":109,"author":{"gitId":"tchiong"},"content":"                \" id/1 a/vivocity start/01-01-2021 1000 end/00-00-0000 0000 ds/Halloween Sales\",","lastModifiedDate":"2021-11-05"},{"lineNumber":110,"author":{"gitId":"tchiong"},"content":"                \"DateTime format should be \\\"dd-MM-yyyy HHmm\\\".\"","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"tchiong"},"content":"                        + \" Don\u0027t forget that there are only 12 months in a year!\");","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"tchiong"},"content":"        // invalid end, missing values","lastModifiedDate":"2021-11-05"},{"lineNumber":114,"author":{"gitId":"tchiong"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-11-05"},{"lineNumber":115,"author":{"gitId":"tchiong"},"content":"                \" id/1 a/vivocity start/01-01-2021 1000 end/01-01-2021 ds/\",","lastModifiedDate":"2021-11-05"},{"lineNumber":116,"author":{"gitId":"tchiong"},"content":"                \"DateTime format should be \\\"dd-MM-yyyy HHmm\\\".\"","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"tchiong"},"content":"                        + \" Don\u0027t forget that there are only 12 months in a year!\");","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"tchiong":119}},{"path":"src/test/java/seedu/placebook/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.AddCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"YaleChen299":38,"-":103}},{"path":"src/test/java/seedu/placebook/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"YaleChen299":1,"-":149}},{"path":"src/test/java/seedu/placebook/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.Command;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"YaleChen299":3,"-":35}},{"path":"src/test/java/seedu/placebook/logic/parser/DelAppCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NecroWolf28"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"NecroWolf28"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.logic.commands.DelAppCommand;","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":" * outside of the DelAppCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":" * same path through the DelAppCommand, and therefore we test only one of them.","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"NecroWolf28"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"NecroWolf28"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"public class DelAppCommandParserTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"NecroWolf28"},"content":"    private DelAppCommandParser parser \u003d new DelAppCommandParser();","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"    public void parse_validArgs_returnsDelAppCommand() {","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"        assertParseSuccess(parser, \"1\", new DelAppCommand(INDEX_FIRST_APPOINTMENT));","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"    public void parse_validArgs_returnsDelAppCommand2() {","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"        assertParseSuccess(parser, \"2\", new DelAppCommand(INDEX_SECOND_APPOINTMENT));","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"NecroWolf28"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"NecroWolf28"},"content":"        assertParseFailure(parser, \"b\",","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"NecroWolf28"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelAppCommand.MESSAGE_USAGE)","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"NecroWolf28"},"content":"                        + \"\\n\"","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"NecroWolf28"},"content":"                        + ParserUtil.MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"NecroWolf28"},"content":"    public void parse_invalidArgs_throwsParseException2() {","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"NecroWolf28"},"content":"        assertParseFailure(parser, \"1 0 2\",","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"NecroWolf28"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelAppCommand.MESSAGE_USAGE)","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"NecroWolf28"},"content":"                        + \"\\n\"","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"NecroWolf28"},"content":"                        + ParserUtil.MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"NecroWolf28":49}},{"path":"src/test/java/seedu/placebook/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.DeleteCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE)","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"                        + \"\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"                        + ParserUtil.MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"YaleChen299":10,"-":25}},{"path":"src/test/java/seedu/placebook/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"    private static final String MESSAGE_INVALID_INDEX \u003d MESSAGE_INVALID_FORMAT","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"            + \"\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"            + ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":80,"author":{"gitId":"YaleChen299"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":83,"author":{"gitId":"YaleChen299"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"YaleChen299":50,"-":165}},{"path":"src/test/java/seedu/placebook/logic/parser/FindAppCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.FindAppCommand;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.DescriptionContainsKeywordsPredicate;","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"public class FindAppCommandParserTest {","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    private FindAppCommandParser parser \u003d new FindAppCommandParser();","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAppCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"    public void parse_validArgs_returnsFindAppCommand() {","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"        FindAppCommand expectedFindAppCommand \u003d","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"                new FindAppCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Sales\", \"Meeting\")));","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"        assertParseSuccess(parser, \"Sales Meeting\", expectedFindAppCommand);","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"        assertParseSuccess(parser, \" \\n Sales \\n \\t Meeting \\t\", expectedFindAppCommand);","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"YaleChen299":37}},{"path":"src/test/java/seedu/placebook/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.FindCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"YaleChen299":6,"-":28}},{"path":"src/test/java/seedu/placebook/logic/parser/FindTagsCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NecroWolf28"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"NecroWolf28"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"NecroWolf28"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"NecroWolf28"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.logic.commands.FindTagsCommand;","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":"import seedu.placebook.model.person.PersonHasTagsPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"public class FindTagsCommandParserTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":"    private FindTagsCommandParser parser \u003d new FindTagsCommandParser();","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"NecroWolf28"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagsCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"    public void parse_validArgs_returnsFindTagsCommand() {","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"        FindTagsCommand expectedFindTagsCommand \u003d","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"                new FindTagsCommand(new PersonHasTagsPredicate(Arrays.asList(\"friends\", \"colleagues\")));","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"        assertParseSuccess(parser, \"friends colleagues\", expectedFindTagsCommand);","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"NecroWolf28"},"content":"        assertParseSuccess(parser, \" \\n friends \\n \\t colleagues  \\t\", expectedFindTagsCommand);","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"NecroWolf28":36}},{"path":"src/test/java/seedu/placebook/logic/parser/ListAppCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.ListAppCommand;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"class ListAppCommandParserTest {","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"    private ListAppCommandParser parser \u003d new ListAppCommandParser();","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"    public void parse_emptyArg_emptyStringReturned() {","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"        ListAppCommand emptyListAppCommand \u003d new ListAppCommand(\"\");","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"        assertParseSuccess(parser, \"\", emptyListAppCommand);","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"        assertParseSuccess(parser, \"     \", emptyListAppCommand);","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"    public void parse_validArgs_returnsListAppCommand() {","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"        ListAppCommand expectedListAppCommand \u003d new ListAppCommand(\"Time\");","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"        assertParseSuccess(parser, \"Time\", expectedListAppCommand);","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"        assertParseSuccess(parser, \" \\n Time \\n \\t\", expectedListAppCommand);","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"YaleChen299":31}},{"path":"src/test/java/seedu/placebook/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"nwhloo99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"    private static final String INVALID_DATE \u003d \"2021-30\";","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"    private static final String INVALID_TIME \u003d \"10\";","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"    private static final String VALID_DATE \u003d \"04-10-2021\";","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"    private static final String VALID_TIME \u003d \"1430\";","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":205,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":206,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":207,"author":{"gitId":"nwhloo99"},"content":"    public void parseDate_validValueWithoutWhitespace_returnsLocalDate() throws Exception {","lastModifiedDate":"2021-10-07"},{"lineNumber":208,"author":{"gitId":"nwhloo99"},"content":"        LocalDate expectedDate \u003d LocalDate.parse(VALID_DATE, DATE_FORMATTER);","lastModifiedDate":"2021-10-07"},{"lineNumber":209,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));","lastModifiedDate":"2021-10-07"},{"lineNumber":210,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":211,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":212,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":213,"author":{"gitId":"nwhloo99"},"content":"    public void parseDate_invalidDate_throwsParseException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":214,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));","lastModifiedDate":"2021-10-23"},{"lineNumber":215,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":216,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":217,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":218,"author":{"gitId":"nwhloo99"},"content":"    public void parseDate_null_throwsDateTimeParseException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":219,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));","lastModifiedDate":"2021-10-23"},{"lineNumber":220,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":221,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":222,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":223,"author":{"gitId":"nwhloo99"},"content":"    public void parseTime_validValueWithoutWhitespace_returnsLocalTime() throws Exception {","lastModifiedDate":"2021-10-07"},{"lineNumber":224,"author":{"gitId":"nwhloo99"},"content":"        LocalTime expectedTime \u003d LocalTime.parse(VALID_TIME, TIME_FORMATTER);","lastModifiedDate":"2021-10-07"},{"lineNumber":225,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(expectedTime, ParserUtil.parseTime(VALID_TIME));","lastModifiedDate":"2021-10-07"},{"lineNumber":226,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":227,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":228,"author":{"gitId":"nwhloo99"},"content":"    @Test public void parseTime_invalidTime_throwsParseException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":229,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTime(INVALID_TIME));","lastModifiedDate":"2021-10-23"},{"lineNumber":230,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":231,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":232,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":233,"author":{"gitId":"nwhloo99"},"content":"    public void parseTime_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":234,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime(null));","lastModifiedDate":"2021-10-23"},{"lineNumber":235,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"YaleChen299":10,"nwhloo99":40,"-":186}},{"path":"src/test/java/seedu/placebook/logic/parser/PlacebookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.logic.parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.AddCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.DeleteCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.FindCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.ListCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"public class PlacebookParserTest {","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"    private final PlacebookParser parser \u003d new PlacebookParser();","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"tchiong":2,"YaleChen299":20,"-":79}},{"path":"src/test/java/seedu/placebook/model/ContactsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"public class ContactsTest {","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"    private final Contacts contacts \u003d new Contacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"        assertEquals(Collections.emptyList(), contacts.getPersonList());","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"tchiong"},"content":"        assertThrows(NullPointerException.class, () -\u003e contacts.resetData(null));","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"    public void resetData_withValidReadOnlyContacts_replacesData() {","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"tchiong"},"content":"        Contacts newData \u003d getTypicalContacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"tchiong"},"content":"        contacts.resetData(newData);","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"tchiong"},"content":"        assertEquals(newData, contacts);","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"tchiong"},"content":"        ContactsStub newData \u003d new ContactsStub(newPersons);","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e contacts.resetData(newData));","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"tchiong"},"content":"        assertThrows(NullPointerException.class, () -\u003e contacts.hasPerson(null));","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"    public void hasPerson_personNotInContacts_returnsFalse() {","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"        assertFalse(contacts.hasPerson(ALICE));","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"tchiong"},"content":"    public void hasPerson_personInContacts_returnsTrue() {","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"tchiong"},"content":"        contacts.addPerson(ALICE);","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"tchiong"},"content":"        assertTrue(contacts.hasPerson(ALICE));","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"tchiong"},"content":"    public void hasPerson_personWithSameIdentityFieldsInContacts_returnsTrue() {","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"tchiong"},"content":"        contacts.addPerson(ALICE);","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"tchiong"},"content":"        assertTrue(contacts.hasPerson(editedAlice));","lastModifiedDate":"2021-11-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"tchiong"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e contacts.getPersonList().remove(0));","lastModifiedDate":"2021-11-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"tchiong"},"content":"     * A stub ReadOnlyContacts whose persons list can violate interface constraints.","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"tchiong"},"content":"    private static class ContactsStub implements ReadOnlyContacts {","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"Li-Lehao"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"tchiong"},"content":"        ContactsStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2021-11-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"tchiong":24,"Li-Lehao":1,"YaleChen299":9,"-":70}},{"path":"src/test/java/seedu/placebook/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.testutil.ContactsBuilder;","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"        assertEquals(new Contacts(), new Contacts(modelManager.getContacts()));","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"tchiong"},"content":"        userPrefs.setContactsFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"tchiong"},"content":"        userPrefs.setContactsFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"tchiong"},"content":"    public void setContactsFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-11-04"},{"lineNumber":67,"author":{"gitId":"tchiong"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setContactsFilePath(null));","lastModifiedDate":"2021-11-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"tchiong"},"content":"    public void setContactsFilePath_validPath_setsContactsFilePath() {","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"tchiong"},"content":"        modelManager.setContactsFilePath(path);","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"tchiong"},"content":"        assertEquals(path, modelManager.getContactsFilePath());","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"tchiong"},"content":"    public void hasPerson_personNotInContacts_returnsFalse() {","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"tchiong"},"content":"    public void hasPerson_personInContacts_returnsTrue() {","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"tchiong"},"content":"        Contacts contacts \u003d new ContactsBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2021-11-04"},{"lineNumber":101,"author":{"gitId":"nwhloo99"},"content":"        Schedule schedule \u003d getTypicalSchedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"tchiong"},"content":"        Contacts differentContacts \u003d new Contacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":103,"author":{"gitId":"nwhloo99"},"content":"        Schedule differentSchedule \u003d new Schedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"tchiong"},"content":"        modelManager \u003d new ModelManager(contacts, userPrefs, schedule);","lastModifiedDate":"2021-11-04"},{"lineNumber":108,"author":{"gitId":"tchiong"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(contacts, userPrefs, schedule);","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"tchiong"},"content":"        // different Contacts -\u003e returns false","lastModifiedDate":"2021-11-04"},{"lineNumber":121,"author":{"gitId":"tchiong"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentContacts, userPrefs, schedule)));","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":126,"author":{"gitId":"tchiong"},"content":"        assertFalse(modelManager.equals(new ModelManager(contacts, userPrefs, schedule)));","lastModifiedDate":"2021-11-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"tchiong"},"content":"        differentUserPrefs.setContactsFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":134,"author":{"gitId":"tchiong"},"content":"        assertFalse(modelManager.equals(new ModelManager(contacts, differentUserPrefs, schedule)));","lastModifiedDate":"2021-11-04"},{"lineNumber":135,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":136,"author":{"gitId":"nwhloo99"},"content":"        // different schedule -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":137,"author":{"gitId":"tchiong"},"content":"        assertFalse(modelManager.equals(new ModelManager(contacts, userPrefs, differentSchedule)));","lastModifiedDate":"2021-11-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"tchiong":21,"YaleChen299":9,"nwhloo99":4,"-":105}},{"path":"src/test/java/seedu/placebook/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"    public void setContactsFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setContactsFilePath(null));","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"tchiong":2,"YaleChen299":2,"-":17}},{"path":"src/test/java/seedu/placebook/model/historystates/HistoryStatesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Li-Lehao"},"content":"package seedu.placebook.model.historystates;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.model.historystates.exceptions.NoHistoryStatesException;","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.testutil.TypicalAppointment;","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.testutil.TypicalPersons;","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"class HistoryStatesTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"    private static Contacts testContacts \u003d TypicalPersons.getTypicalContacts();","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"    private static Schedule testSchedule \u003d TypicalAppointment.getTypicalSchedule();","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"    private static State testState \u003d new State(testContacts, testSchedule);","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"    public void addNewState_success() {","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"        HistoryStates historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"        LinkedList\u003cState\u003e listOfState \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"        listOfState.add(testState);","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.addNewState(testState);","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(historyStates.getHistoryStates(), listOfState);","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"    public void undo_historyStatesNotEmpty_success() {","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"        HistoryStates historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"        LinkedList\u003cState\u003e listOfState \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"Li-Lehao"},"content":"        listOfState.add(testState);","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.addNewState(testState);","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.addNewState(new State(testContacts, testSchedule));","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.undo();","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(historyStates.getHistoryStates(), listOfState);","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"Li-Lehao"},"content":"    public void undo_historyStatesIsEmptyCase1_exceptionThrown() {","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"Li-Lehao"},"content":"        HistoryStates historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(NoHistoryStatesException.class, () -\u003e historyStates.undo());","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"Li-Lehao"},"content":"    public void undo_historyStatesIsEmptyCase2_exceptionThrown() {","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"Li-Lehao"},"content":"        HistoryStates historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.addNewState(testState);","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.undo();","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(NoHistoryStatesException.class, () -\u003e historyStates.undo());","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"Li-Lehao"},"content":"    public void getCurrentState_returnsCorrectState() {","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"Li-Lehao"},"content":"        HistoryStates historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"Li-Lehao"},"content":"        State state \u003d new State(testContacts, testSchedule);","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.addNewState(state);","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(historyStates.getCurrentState(), state);","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"Li-Lehao"},"content":"    public void getCurrentState_modifyResult_stateInHistoryStatesNotAffected() {","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"Li-Lehao"},"content":"        HistoryStates historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"Li-Lehao"},"content":"        State state \u003d new State(testContacts, testSchedule);","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.addNewState(state);","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"Li-Lehao"},"content":"        State result \u003d historyStates.getCurrentState();","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"Li-Lehao"},"content":"        result.getContacts().addPerson(new PersonBuilder().build());","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(historyStates.getCurrentState(), state);","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"Li-Lehao"},"content":"    public void getCurrentState_emptyHistoryStates_exceptionThrown() {","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"Li-Lehao"},"content":"        HistoryStates historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(NoHistoryStatesException.class, () -\u003e historyStates.getCurrentState());","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"Li-Lehao"},"content":"    public void hasHistoryStates_emptyHistoryStates_returnsFalse() {","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"Li-Lehao"},"content":"        HistoryStates historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-11-05"},{"lineNumber":85,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(historyStates.hasHistoryStates());","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"Li-Lehao"},"content":"    public void hasHistoryStates_historyStatesOnlyHasOneState_returnsFalse() {","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"Li-Lehao"},"content":"        HistoryStates historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.addNewState(testState);","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(historyStates.hasHistoryStates());","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"Li-Lehao"},"content":"    public void hasHistoryStates_historyStatesHasTwoStates_returnsTrue() {","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"Li-Lehao"},"content":"        HistoryStates historyStates \u003d new HistoryStates();","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.addNewState(testState);","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"Li-Lehao"},"content":"        historyStates.addNewState(new State(testContacts, testSchedule));","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(historyStates.hasHistoryStates());","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"Li-Lehao":102}},{"path":"src/test/java/seedu/placebook/model/historystates/StateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Li-Lehao"},"content":"package seedu.placebook.model.historystates;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.Assert.assertNotEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"Li-Lehao"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.testutil.TypicalAppointment;","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.testutil.TypicalPersons;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":"class StateTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"Li-Lehao"},"content":"    private static Contacts testContacts \u003d TypicalPersons.getTypicalContacts();","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"    private static Schedule testSchedule \u003d TypicalAppointment.getTypicalSchedule();","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"    @BeforeEach","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"    public void setUp() {","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"        testContacts \u003d TypicalPersons.getTypicalContacts();","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"        testSchedule \u003d TypicalAppointment.getTypicalSchedule();","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"    public void getContacts_returnsCorrectContacts() {","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"        State state \u003d new State(testContacts, testSchedule);","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(state.getContacts(), testContacts);","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"Li-Lehao"},"content":"    public void getContacts_modifyResult_contactsOfStateNotAffected() {","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"Li-Lehao"},"content":"        Contacts contacts \u003d TypicalPersons.getTypicalContacts();","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"        State state \u003d new State(contacts, testSchedule);","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"        Contacts result \u003d state.getContacts();","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"        result.removePerson(result.getPersonList().get(0));","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(state.getContacts(), contacts);","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"Li-Lehao"},"content":"        assertNotEquals(state.getContacts(), result);","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"Li-Lehao"},"content":"    public void getSchedule_returnsCorrectSchedule() {","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"Li-Lehao"},"content":"        State state \u003d new State(testContacts, testSchedule);","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(state.getSchedule(), testSchedule);","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"Li-Lehao"},"content":"    public void getSchedule_modifyResult_scheduleOfStateNotAffected() {","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"Li-Lehao"},"content":"        Schedule schedule \u003d TypicalAppointment.getTypicalSchedule();","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"Li-Lehao"},"content":"        State state \u003d new State(testContacts, schedule);","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"Li-Lehao"},"content":"        Schedule result \u003d state.getSchedule();","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"Li-Lehao"},"content":"        result.deleteAppointment(result.getSchedule().get(0));","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(state.getSchedule(), schedule);","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"        assertNotEquals(state.getContacts(), result);","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"Li-Lehao":55}},{"path":"src/test/java/seedu/placebook/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"YaleChen299":2,"-":34}},{"path":"src/test/java/seedu/placebook/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"YaleChen299":2,"-":66}},{"path":"src/test/java/seedu/placebook/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"YaleChen299":2,"-":73}},{"path":"src/test/java/seedu/placebook/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"YaleChen299":2,"-":38}},{"path":"src/test/java/seedu/placebook/model/person/PersonHasTagsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"NecroWolf28"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"NecroWolf28"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"NecroWolf28"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"NecroWolf28"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"NecroWolf28"},"content":"import java.util.List;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"NecroWolf28"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"public class PersonHasTagsPredicateTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"NecroWolf28"},"content":"    public void equals() {","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"NecroWolf28"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"NecroWolf28"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate firstPredicate \u003d new PersonHasTagsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate secondPredicate \u003d new PersonHasTagsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"NecroWolf28"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"NecroWolf28"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate firstPredicateCopy \u003d new PersonHasTagsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"NecroWolf28"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"NecroWolf28"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"NecroWolf28"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"NecroWolf28"},"content":"    public void test_personContainsTags_returnsTrue() {","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"NecroWolf28"},"content":"        // One keyword","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate predicate \u003d new PersonHasTagsPredicate(Collections.singletonList(\"friends\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friends\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"NecroWolf28"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"NecroWolf28"},"content":"        predicate \u003d new PersonHasTagsPredicate(Arrays.asList(\"friends\", \"colleagues\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friends\", \"colleagues\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"NecroWolf28"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"NecroWolf28"},"content":"        predicate \u003d new PersonHasTagsPredicate(Arrays.asList(\"friends\", \"family\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friends\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"NecroWolf28"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"NecroWolf28"},"content":"        predicate \u003d new PersonHasTagsPredicate(Arrays.asList(\"friENds\", \"coLleagUes\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"NecroWolf28"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friends\", \"colleagues\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"NecroWolf28"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"NecroWolf28"},"content":"    public void test_personDoesNotContainTags_returnsFalse() {","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"NecroWolf28"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"NecroWolf28"},"content":"        PersonHasTagsPredicate predicate \u003d new PersonHasTagsPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"NecroWolf28"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"NecroWolf28"},"content":"        predicate \u003d new PersonHasTagsPredicate(Arrays.asList(\"friends\", \"colleagues\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"client\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"NecroWolf28"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"NecroWolf28"},"content":"        // Keywords match name, but does not match tags","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"NecroWolf28"},"content":"        predicate \u003d new PersonHasTagsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"NecroWolf28"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withTags(\"friends\").build()));","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"NecroWolf28"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"NecroWolf28"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"YaleChen299":2,"NecroWolf28":72}},{"path":"src/test/java/seedu/placebook/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"YaleChen299":10,"-":81}},{"path":"src/test/java/seedu/placebook/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(Phone.isValidPhone(\"123456789012345678901\")); // exceeds maximum length (21 digits)","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(Phone.isValidPhone(\"1234567890123456789\")); // long phone numbers (19 digits)","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(Phone.isValidPhone(\"12345678901234567890\")); // long phone numbers (20 digits)","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"Li-Lehao":3,"YaleChen299":2,"-":38}},{"path":"src/test/java/seedu/placebook/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.person;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"YaleChen299":9,"-":161}},{"path":"src/test/java/seedu/placebook/model/schedule/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.ALICE_APPOINTMENT;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"import static seedu.placebook.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"import static seedu.placebook.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"Li-Lehao"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"nwhloo99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.UniquePersonList;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"nwhloo99"},"content":"public class AppointmentTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"    private static final LocalDateTime TEST_MOMENT1 \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"            LocalDateTime.of(2021, 01, 01, 00, 00);","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"    private static final LocalDateTime TEST_MOMENT2 \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"Li-Lehao"},"content":"            LocalDateTime.of(2021, 01, 01, 23, 59);","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"Li-Lehao"},"content":"    private static final LocalDateTime TEST_MOMENT3 \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"Li-Lehao"},"content":"            LocalDateTime.of(2021, 01, 02, 00, 00);","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"Li-Lehao"},"content":"    private static final LocalDateTime TEST_MOMENT4 \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"            LocalDateTime.of(2021, 01, 02, 23, 59);","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"    private static UniquePersonList testClientList1;","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"    private static UniquePersonList testClientList2;","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"    private static final Address TEST_ADDRESS1 \u003d new Address(\"vivocity\");","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"Li-Lehao"},"content":"    private static final Address TEST_ADDRESS2 \u003d new Address(\"utown\");","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"Li-Lehao"},"content":"    private static final TimePeriod TEST_TIME_PERIOD1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT2);","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"Li-Lehao"},"content":"    private static final TimePeriod TEST_TIME_PERIOD2 \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"Li-Lehao"},"content":"    private static final String TEST_DESCRIPTION1 \u003d \"Team meeting\";","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"Li-Lehao"},"content":"    private static final String TEST_DESCRIPTION2 \u003d \"project demo\";","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"Li-Lehao"},"content":"    @BeforeEach","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"Li-Lehao"},"content":"     public void setUp() {","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"Li-Lehao"},"content":"        testClientList1 \u003d new UniquePersonList();","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"Li-Lehao"},"content":"        testClientList1.add(ALICE);","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"Li-Lehao"},"content":"        testClientList1.add(BENSON);","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"        testClientList2 \u003d new UniquePersonList();","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"        testClientList2.add(ALICE);","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"Li-Lehao"},"content":"        testClientList2.add(BOB);","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"nwhloo99"},"content":"    public void equals() {","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"nwhloo99"},"content":"        assertTrue(ALICE_APPOINTMENT.equals(ALICE_APPOINTMENT));","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"        assertFalse(ALICE_APPOINTMENT.equals(null));","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"        UniquePersonList testClients \u003d new UniquePersonList();","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"nwhloo99"},"content":"        testClients.add(ALICE);","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"nwhloo99"},"content":"        // same attributes, different object","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"nwhloo99"},"content":"        Appointment similarAliceAppointment \u003d new Appointment(testClients,","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"nwhloo99"},"content":"                new Address(\"369 Tanjong Rhu\"),","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"nwhloo99"},"content":"                new TimePeriod(LocalDateTime.of(2021, 12, 25, 10, 00),","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"nwhloo99"},"content":"                        LocalDateTime.of(2021, 12, 25, 11, 00)),","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"nwhloo99"},"content":"                \"Talk about sales\");","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"nwhloo99"},"content":"        assertTrue(ALICE_APPOINTMENT.equals(similarAliceAppointment));","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"nwhloo99"},"content":"        // same client, different attributes","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"nwhloo99"},"content":"        Appointment editedAliceAppointment \u003d new Appointment(testClients,","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"nwhloo99"},"content":"                new Address(\"369 Geylang Street\"),","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"tchiong"},"content":"                new TimePeriod(LocalDateTime.of(2021, 12, 25, 21, 30),","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"tchiong"},"content":"                        LocalDateTime.of(2021, 12, 25, 22, 30)),","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"tchiong"},"content":"                \"Talk about sales\");","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"nwhloo99"},"content":"        assertFalse(ALICE_APPOINTMENT.equals(editedAliceAppointment));","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"Li-Lehao"},"content":"    public void getClients_returnsCorrectClientList() {","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getClients(), testClientList1);","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"Li-Lehao"},"content":"        assertNotEquals(appointment.getClientList(), testClientList2);","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"Li-Lehao"},"content":"    public void getLocation_returnsCorrectLocation() {","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getLocation(), TEST_ADDRESS1);","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"Li-Lehao"},"content":"        assertNotEquals(appointment.getLocation(), TEST_ADDRESS2);","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"Li-Lehao"},"content":"    public void getTimePeriod_returnsCorrectTimePeriod() {","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getTimePeriod(), TEST_TIME_PERIOD1);","lastModifiedDate":"2021-11-03"},{"lineNumber":107,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getTimePeriod(), new TimePeriod(TEST_MOMENT1, TEST_MOMENT2));","lastModifiedDate":"2021-11-03"},{"lineNumber":108,"author":{"gitId":"Li-Lehao"},"content":"        assertNotEquals(appointment.getTimePeriod(), TEST_TIME_PERIOD2);","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"Li-Lehao"},"content":"    public void getDescription_returnsCorrectDescription() {","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getDescription(), TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getDescription(), \"Team meeting\");","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":118,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"Li-Lehao"},"content":"    public void getClientList_returnsCorrectClientList() {","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":123,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getClientList(), testClientList1.asUnmodifiableObservableList());","lastModifiedDate":"2021-11-03"},{"lineNumber":124,"author":{"gitId":"Li-Lehao"},"content":"        assertNotEquals(appointment.getClientList(), testClientList2.asUnmodifiableObservableList());","lastModifiedDate":"2021-11-03"},{"lineNumber":125,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":126,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":127,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":128,"author":{"gitId":"Li-Lehao"},"content":"    public void getStartDateTimeString_returnsCorrectStringRepresentation() {","lastModifiedDate":"2021-11-03"},{"lineNumber":129,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":130,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":131,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getStartDateTimeString(), \"01-01-2021 0000\");","lastModifiedDate":"2021-11-03"},{"lineNumber":132,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":133,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment2 \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD2, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":135,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment2.getStartDateTimeString(), TEST_TIME_PERIOD2.getStartDateTimeAsString());","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":139,"author":{"gitId":"Li-Lehao"},"content":"    public void getEndDateTimeString_returnsCorrectStringRepresentation() {","lastModifiedDate":"2021-11-03"},{"lineNumber":140,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":142,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getEndDateTimeString(), \"01-01-2021 2359\");","lastModifiedDate":"2021-11-03"},{"lineNumber":143,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment2 \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD2, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment2.getEndDateTimeString(), TEST_TIME_PERIOD2.getEndDateTimeAsString());","lastModifiedDate":"2021-11-03"},{"lineNumber":147,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":148,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":149,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":150,"author":{"gitId":"Li-Lehao"},"content":"    public void getUrgency_appointmentOccursInTwoDaysCase1_returnsHighUrgency() {","lastModifiedDate":"2021-11-03"},{"lineNumber":151,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod \u003d new TimePeriod(","lastModifiedDate":"2021-11-03"},{"lineNumber":152,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.now().plusDays(2).minusMinutes(1),","lastModifiedDate":"2021-11-03"},{"lineNumber":153,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.now().plusDays(2).plusHours(1));","lastModifiedDate":"2021-11-03"},{"lineNumber":154,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS2, timePeriod, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":155,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getUrgency(), Urgency.HIGH);","lastModifiedDate":"2021-11-03"},{"lineNumber":156,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":157,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":158,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":159,"author":{"gitId":"Li-Lehao"},"content":"    public void getUrgency_appointmentOccursWithinTwoToEightDaysCase1_returnsMediumUrgency() {","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod \u003d new TimePeriod(","lastModifiedDate":"2021-11-03"},{"lineNumber":161,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.now().plusDays(2).plusMinutes(1),","lastModifiedDate":"2021-11-03"},{"lineNumber":162,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.now().plusDays(8).plusHours(1));","lastModifiedDate":"2021-11-03"},{"lineNumber":163,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1, timePeriod, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":164,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getUrgency(), Urgency.MEDIUM);","lastModifiedDate":"2021-11-03"},{"lineNumber":165,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":166,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":167,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":168,"author":{"gitId":"Li-Lehao"},"content":"    public void getUrgency_appointmentOccursWithinTwoToEightDaysCase2_returnsMediumUrgency() {","lastModifiedDate":"2021-11-03"},{"lineNumber":169,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod \u003d new TimePeriod(","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.now().plusDays(8).minusMinutes(1),","lastModifiedDate":"2021-11-03"},{"lineNumber":171,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.now().plusDays(8).plusHours(1));","lastModifiedDate":"2021-11-03"},{"lineNumber":172,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1, timePeriod, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":173,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getUrgency(), Urgency.MEDIUM);","lastModifiedDate":"2021-11-03"},{"lineNumber":174,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":175,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":176,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":177,"author":{"gitId":"Li-Lehao"},"content":"    public void getUrgency_appointmentOccursAfterEightDaysCase1_returnsLowUrgency() {","lastModifiedDate":"2021-11-03"},{"lineNumber":178,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod \u003d new TimePeriod(","lastModifiedDate":"2021-11-03"},{"lineNumber":179,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.now().plusDays(8).plusMinutes(1),","lastModifiedDate":"2021-11-03"},{"lineNumber":180,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.now().plusDays(8).plusHours(1));","lastModifiedDate":"2021-11-03"},{"lineNumber":181,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1, timePeriod, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":182,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getUrgency(), Urgency.LOW);","lastModifiedDate":"2021-11-03"},{"lineNumber":183,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":184,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":185,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":186,"author":{"gitId":"Li-Lehao"},"content":"    public void getUrgency_appointmentOccursAfterEightDaysCase2_returnsLowUrgency() {","lastModifiedDate":"2021-11-03"},{"lineNumber":187,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod \u003d new TimePeriod(","lastModifiedDate":"2021-11-03"},{"lineNumber":188,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.now().plusDays(100),","lastModifiedDate":"2021-11-03"},{"lineNumber":189,"author":{"gitId":"Li-Lehao"},"content":"                LocalDateTime.now().plusDays(100).plusHours(1));","lastModifiedDate":"2021-11-03"},{"lineNumber":190,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1, timePeriod, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":191,"author":{"gitId":"Li-Lehao"},"content":"        assertEquals(appointment.getUrgency(), Urgency.LOW);","lastModifiedDate":"2021-11-03"},{"lineNumber":192,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":193,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":194,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":195,"author":{"gitId":"Li-Lehao"},"content":"    public void hasConflictWith_twoAppointmentsWithoutConflict_returnsFalse() {","lastModifiedDate":"2021-11-03"},{"lineNumber":196,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT2);","lastModifiedDate":"2021-11-03"},{"lineNumber":197,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod2 \u003d new TimePeriod(TEST_MOMENT3, TEST_MOMENT4);","lastModifiedDate":"2021-11-03"},{"lineNumber":198,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment1 \u003d new Appointment(testClientList1, TEST_ADDRESS1, timePeriod1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":199,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment2 \u003d new Appointment(testClientList2, TEST_ADDRESS2, timePeriod2, TEST_DESCRIPTION2);","lastModifiedDate":"2021-11-03"},{"lineNumber":200,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(appointment1.isConflictingWith(appointment2));","lastModifiedDate":"2021-11-03"},{"lineNumber":201,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(appointment2.isConflictingWith(appointment1));","lastModifiedDate":"2021-11-03"},{"lineNumber":202,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":203,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":204,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":205,"author":{"gitId":"Li-Lehao"},"content":"    public void hasConflictWith_twoAppointmentsWithConflictCase1_returnsTrue() {","lastModifiedDate":"2021-11-03"},{"lineNumber":206,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":207,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod2 \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT4);","lastModifiedDate":"2021-11-03"},{"lineNumber":208,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment1 \u003d new Appointment(testClientList1, TEST_ADDRESS1, timePeriod1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":209,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment2 \u003d new Appointment(testClientList2, TEST_ADDRESS2, timePeriod2, TEST_DESCRIPTION2);","lastModifiedDate":"2021-11-03"},{"lineNumber":210,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment1.isConflictingWith(appointment2));","lastModifiedDate":"2021-11-03"},{"lineNumber":211,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment2.isConflictingWith(appointment1));","lastModifiedDate":"2021-11-03"},{"lineNumber":212,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":213,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":214,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":215,"author":{"gitId":"Li-Lehao"},"content":"    public void hasConflictWith_twoAppointmentsWithConflictCase2_returnsTrue() {","lastModifiedDate":"2021-11-03"},{"lineNumber":216,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT2);","lastModifiedDate":"2021-11-03"},{"lineNumber":217,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod2 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT2);","lastModifiedDate":"2021-11-03"},{"lineNumber":218,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment1 \u003d new Appointment(testClientList1, TEST_ADDRESS1, timePeriod1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":219,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment2 \u003d new Appointment(testClientList2, TEST_ADDRESS2, timePeriod2, TEST_DESCRIPTION2);","lastModifiedDate":"2021-11-03"},{"lineNumber":220,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment1.isConflictingWith(appointment2));","lastModifiedDate":"2021-11-03"},{"lineNumber":221,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment2.isConflictingWith(appointment1));","lastModifiedDate":"2021-11-03"},{"lineNumber":222,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":223,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":224,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":225,"author":{"gitId":"Li-Lehao"},"content":"    public void hasConflictWith_twoAppointmentsWithConflictCase3_returnsTrue() {","lastModifiedDate":"2021-11-03"},{"lineNumber":226,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT4);","lastModifiedDate":"2021-11-03"},{"lineNumber":227,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod2 \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":228,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment1 \u003d new Appointment(testClientList1, TEST_ADDRESS1, timePeriod1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":229,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment2 \u003d new Appointment(testClientList2, TEST_ADDRESS2, timePeriod2, TEST_DESCRIPTION2);","lastModifiedDate":"2021-11-03"},{"lineNumber":230,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment1.isConflictingWith(appointment2));","lastModifiedDate":"2021-11-03"},{"lineNumber":231,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment2.isConflictingWith(appointment1));","lastModifiedDate":"2021-11-03"},{"lineNumber":232,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":233,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":234,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":235,"author":{"gitId":"Li-Lehao"},"content":"    public void hasClient_clientInClientList_returnsTrue() {","lastModifiedDate":"2021-11-03"},{"lineNumber":236,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1, TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":237,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.hasClient(ALICE));","lastModifiedDate":"2021-11-03"},{"lineNumber":238,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.hasClient(BENSON));","lastModifiedDate":"2021-11-03"},{"lineNumber":239,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":240,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":241,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":242,"author":{"gitId":"Li-Lehao"},"content":"    public void hasClient_clientNotInClientList_returnsFalse() {","lastModifiedDate":"2021-11-03"},{"lineNumber":243,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":244,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":245,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(appointment.hasClient(BOB));","lastModifiedDate":"2021-11-03"},{"lineNumber":246,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":247,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":248,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":249,"author":{"gitId":"Li-Lehao"},"content":"    public void isClientListEmpty_emptyClientList_returnsTrue() {","lastModifiedDate":"2021-11-03"},{"lineNumber":250,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(new UniquePersonList(), TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":251,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":252,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.isClientListEmpty());","lastModifiedDate":"2021-11-03"},{"lineNumber":253,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":254,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":255,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":256,"author":{"gitId":"Li-Lehao"},"content":"    public void isClientListEmpty_clientListNotEmpty_returnsFalse() {","lastModifiedDate":"2021-11-03"},{"lineNumber":257,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":258,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":259,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(appointment.isClientListEmpty());","lastModifiedDate":"2021-11-03"},{"lineNumber":260,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":261,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":262,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":263,"author":{"gitId":"Li-Lehao"},"content":"    public void removeClient_clientInClientList_clientRemoved() {","lastModifiedDate":"2021-11-03"},{"lineNumber":264,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":265,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":266,"author":{"gitId":"Li-Lehao"},"content":"        appointment.removeClient(ALICE);","lastModifiedDate":"2021-11-03"},{"lineNumber":267,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(appointment.hasClient(ALICE));","lastModifiedDate":"2021-11-03"},{"lineNumber":268,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(testClientList1.contains(ALICE));","lastModifiedDate":"2021-11-03"},{"lineNumber":269,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(testClientList1.contains(BENSON));","lastModifiedDate":"2021-11-03"},{"lineNumber":270,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":271,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":272,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":273,"author":{"gitId":"Li-Lehao"},"content":"    public void removeClient_clientNotInClientList_exceptionThrown() {","lastModifiedDate":"2021-11-03"},{"lineNumber":274,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":275,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":276,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e appointment.removeClient(BOB));","lastModifiedDate":"2021-11-03"},{"lineNumber":277,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.hasClient(ALICE));","lastModifiedDate":"2021-11-03"},{"lineNumber":278,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.hasClient(BENSON));","lastModifiedDate":"2021-11-03"},{"lineNumber":279,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":280,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":281,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":282,"author":{"gitId":"Li-Lehao"},"content":"    public void addClient_clientNotInClientList_clientAdded() {","lastModifiedDate":"2021-11-03"},{"lineNumber":283,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":284,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":285,"author":{"gitId":"Li-Lehao"},"content":"        appointment.addClient(BOB);","lastModifiedDate":"2021-11-03"},{"lineNumber":286,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.hasClient(ALICE));","lastModifiedDate":"2021-11-03"},{"lineNumber":287,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.hasClient(BENSON));","lastModifiedDate":"2021-11-03"},{"lineNumber":288,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.hasClient(BOB));","lastModifiedDate":"2021-11-03"},{"lineNumber":289,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(testClientList1.contains(ALICE));","lastModifiedDate":"2021-11-03"},{"lineNumber":290,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(testClientList1.contains(BENSON));","lastModifiedDate":"2021-11-03"},{"lineNumber":291,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(testClientList1.contains(BOB));","lastModifiedDate":"2021-11-03"},{"lineNumber":292,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":293,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":294,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":295,"author":{"gitId":"Li-Lehao"},"content":"    public void addClient_duplicateClient_exceptionThrown() {","lastModifiedDate":"2021-11-03"},{"lineNumber":296,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1,","lastModifiedDate":"2021-11-03"},{"lineNumber":297,"author":{"gitId":"Li-Lehao"},"content":"                TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-03"},{"lineNumber":298,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e appointment.addClient(ALICE));","lastModifiedDate":"2021-11-03"},{"lineNumber":299,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e appointment.addClient(BENSON));","lastModifiedDate":"2021-11-03"},{"lineNumber":300,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.hasClient(ALICE));","lastModifiedDate":"2021-11-03"},{"lineNumber":301,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.hasClient(BENSON));","lastModifiedDate":"2021-11-03"},{"lineNumber":302,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(appointment.hasClient(BOB));","lastModifiedDate":"2021-11-03"},{"lineNumber":303,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":304,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":305,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":306,"author":{"gitId":"Li-Lehao"},"content":"    public void setClient_validInput_success() {","lastModifiedDate":"2021-11-04"},{"lineNumber":307,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1, TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-04"},{"lineNumber":308,"author":{"gitId":"Li-Lehao"},"content":"        appointment.setClient(ALICE, BOB);","lastModifiedDate":"2021-11-04"},{"lineNumber":309,"author":{"gitId":"Li-Lehao"},"content":"        UniquePersonList clientList \u003d appointment.getClients();","lastModifiedDate":"2021-11-04"},{"lineNumber":310,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(clientList.contains(ALICE));","lastModifiedDate":"2021-11-04"},{"lineNumber":311,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(clientList.contains(BOB));","lastModifiedDate":"2021-11-04"},{"lineNumber":312,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(clientList.contains(BENSON));","lastModifiedDate":"2021-11-04"},{"lineNumber":313,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":314,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":315,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":316,"author":{"gitId":"Li-Lehao"},"content":"    public void setClient_duplicateClientSameReference_exceptionThrown() {","lastModifiedDate":"2021-11-04"},{"lineNumber":317,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1, TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-04"},{"lineNumber":318,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e appointment.setClient(ALICE, BENSON));","lastModifiedDate":"2021-11-04"},{"lineNumber":319,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":320,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":321,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":322,"author":{"gitId":"Li-Lehao"},"content":"    public void setClient_duplicateClientSameAttributesDifferentReference_exceptionThrown() {","lastModifiedDate":"2021-11-04"},{"lineNumber":323,"author":{"gitId":"Li-Lehao"},"content":"        Person editedPerson \u003d new PersonBuilder(BENSON).build();","lastModifiedDate":"2021-11-04"},{"lineNumber":324,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1, TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-04"},{"lineNumber":325,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e appointment.setClient(ALICE, editedPerson));","lastModifiedDate":"2021-11-04"},{"lineNumber":326,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":327,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":328,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":329,"author":{"gitId":"Li-Lehao"},"content":"    public void setClient_targetPersonNotInClientList_exceptionThrown() {","lastModifiedDate":"2021-11-04"},{"lineNumber":330,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1, TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-04"},{"lineNumber":331,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e appointment.setClient(BOB, BOB));","lastModifiedDate":"2021-11-04"},{"lineNumber":332,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":333,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":334,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":335,"author":{"gitId":"Li-Lehao"},"content":"    public void isTheOnlyClient_onlyClient_returnsTrue() {","lastModifiedDate":"2021-11-04"},{"lineNumber":336,"author":{"gitId":"Li-Lehao"},"content":"        UniquePersonList clientList \u003d new UniquePersonList();","lastModifiedDate":"2021-11-04"},{"lineNumber":337,"author":{"gitId":"Li-Lehao"},"content":"        clientList.add(ALICE);","lastModifiedDate":"2021-11-04"},{"lineNumber":338,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(clientList, TEST_ADDRESS1, TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-04"},{"lineNumber":339,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(appointment.isTheOnlyClient(ALICE));","lastModifiedDate":"2021-11-04"},{"lineNumber":340,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":341,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":342,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":343,"author":{"gitId":"Li-Lehao"},"content":"    public void isTheOnlyClient_clientListContainsTargetAndOtherClients_returnsFalse() {","lastModifiedDate":"2021-11-04"},{"lineNumber":344,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(testClientList1, TEST_ADDRESS1, TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-04"},{"lineNumber":345,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(appointment.isTheOnlyClient(ALICE));","lastModifiedDate":"2021-11-04"},{"lineNumber":346,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(appointment.isTheOnlyClient(BENSON));","lastModifiedDate":"2021-11-04"},{"lineNumber":347,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":348,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":349,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":350,"author":{"gitId":"Li-Lehao"},"content":"    public void isTheOnlyClient_targetNotInClientList_returnsFalse() {","lastModifiedDate":"2021-11-04"},{"lineNumber":351,"author":{"gitId":"Li-Lehao"},"content":"        UniquePersonList clientList \u003d new UniquePersonList();","lastModifiedDate":"2021-11-04"},{"lineNumber":352,"author":{"gitId":"Li-Lehao"},"content":"        clientList.add(ALICE);","lastModifiedDate":"2021-11-04"},{"lineNumber":353,"author":{"gitId":"Li-Lehao"},"content":"        Appointment appointment \u003d new Appointment(clientList, TEST_ADDRESS1, TEST_TIME_PERIOD1, TEST_DESCRIPTION1);","lastModifiedDate":"2021-11-04"},{"lineNumber":354,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(appointment.isTheOnlyClient(BENSON));","lastModifiedDate":"2021-11-04"},{"lineNumber":355,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(appointment.isTheOnlyClient(BOB));","lastModifiedDate":"2021-11-04"},{"lineNumber":356,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":357,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"Li-Lehao":315,"tchiong":4,"YaleChen299":5,"nwhloo99":33}},{"path":"src/test/java/seedu/placebook/model/schedule/DescriptionContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import java.util.List;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.AppointmentBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.PersonBuilder;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"class DescriptionContainsKeywordsPredicateTest {","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"    void equals() {","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"                new DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"    void test_descriptionContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"        // One keyword","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"meeting\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDescription(\"zoom meeting\").build()));","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"zoom\", \"meeting\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDescription(\"zoom meeting\").build()));","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"YaleChen299"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"zoom\", \"meeting\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDescription(\"zoom\").build()));","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"YaleChen299"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"YaleChen299"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"zoOm\", \"mEetIng\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"YaleChen299"},"content":"        assertTrue(predicate.test(new AppointmentBuilder().withDescription(\"Zoom Meeting\").build()));","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"YaleChen299"},"content":"    public void test_descriptionDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"YaleChen299"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"YaleChen299"},"content":"        DescriptionContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"YaleChen299"},"content":"                new DescriptionContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withDescription(\"zoom meeting\").build()));","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"YaleChen299"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"YaleChen299"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Conference\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withDescription(\"zoom meeting\").build()));","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"YaleChen299"},"content":"        // Keywords match person\u0027s name, address, date, time, but does not match description","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"YaleChen299"},"content":"        Person mockClient \u003d new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"YaleChen299"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build();","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"YaleChen299"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"YaleChen299"},"content":"                .asList(\"12345\", \"Alice\", \"alice@email.com\", \"Main\", \"Street\", \"Building\", \"15-12-2020\", \"2103\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"YaleChen299"},"content":"        assertFalse(predicate.test(new AppointmentBuilder().withDescription(\"meeting\").withClient(mockClient)","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"nwhloo99"},"content":"                .withLocation(\"Main Building\").withTimePeriod(\"25-12-2021 1000\", \"25-12-2021 1100\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"YaleChen299":85,"nwhloo99":1}},{"path":"src/test/java/seedu/placebook/model/schedule/ScheduleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"nwhloo99"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.ALICE_APPOINTMENT;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.testutil.TypicalAppointment.ALICE_CARL_APPOINTMENT;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.testutil.TypicalAppointment.CARL_APPOINTMENT;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"nwhloo99"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"public class ScheduleTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"    private final Schedule schedule \u003d new Schedule();","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(NullPointerException.class, () -\u003e schedule.addAppointment(null));","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"    public void add_unique_existingAppointment() {","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"        assertTrue(schedule.contains(ALICE_APPOINTMENT));","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"    public void add_duplicate_existingAppointment() {","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"        schedule.addAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"tchiong"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e schedule.addAppointment(ALICE_APPOINTMENT));","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(NullPointerException.class, () -\u003e schedule.deleteAppointment(null));","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"    public void remove_appointmentDoesNotExist_throwsAppointmentNotFoundException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e schedule.deleteAppointment(ALICE_APPOINTMENT));","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"    public void remove_existingAppointment_removesAppointment() {","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"        schedule.deleteAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"tchiong"},"content":"        Schedule expectedSchedule \u003d new Schedule();","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"tchiong"},"content":"        assertEquals(expectedSchedule, schedule);","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"tchiong"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"tchiong"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"            -\u003e schedule.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"    public void setAppointment_validInput_success() {","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(CARL_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"        schedule.setAppointment(ALICE_APPOINTMENT, ALICE_CARL_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"nwhloo99"},"content":"        assertFalse(schedule.contains(ALICE_APPOINTMENT));","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"nwhloo99"},"content":"        assertTrue(schedule.contains(ALICE_CARL_APPOINTMENT));","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"nwhloo99"},"content":"        assertTrue(schedule.contains(CARL_APPOINTMENT));","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"nwhloo99"},"content":"    public void setAppointment_targetAppointmentNotInClientList_exceptionThrown() {","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(AppointmentNotFoundException.class, ()","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"nwhloo99"},"content":"            -\u003e schedule.setAppointment(CARL_APPOINTMENT, CARL_APPOINTMENT));","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"nwhloo99"},"content":"    public void setAppointment_invalidAppointmentToEdit_exceptionThrown() {","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(CARL_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"nwhloo99"},"content":"            -\u003e schedule.setAppointment(null, ALICE_CARL_APPOINTMENT));","lastModifiedDate":"2021-11-05"},{"lineNumber":85,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"nwhloo99"},"content":"    public void setAppointment_invalidEditedAppointment_exceptionThrown() {","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(CARL_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(NullPointerException.class, ()","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"nwhloo99"},"content":"            -\u003e schedule.setAppointment(ALICE_CARL_APPOINTMENT, null));","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"nwhloo99"},"content":"    public void sortAppointmentByDescription() {","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(CARL_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"nwhloo99"},"content":"        // Order in expected is by description","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"nwhloo99"},"content":"        ObservableList\u003cAppointment\u003e expected \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"nwhloo99"},"content":"        expected.add(CARL_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"nwhloo99"},"content":"        expected.add(ALICE_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":104,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":105,"author":{"gitId":"nwhloo99"},"content":"        schedule.sortAppointmentByDescription();","lastModifiedDate":"2021-11-05"},{"lineNumber":106,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(expected, schedule.getSchedule());","lastModifiedDate":"2021-11-05"},{"lineNumber":107,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":108,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":109,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":110,"author":{"gitId":"nwhloo99"},"content":"    public void sortAppointmentByTime() {","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"nwhloo99"},"content":"        schedule.addAppointment(CARL_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":114,"author":{"gitId":"nwhloo99"},"content":"        // Order in expected is by time","lastModifiedDate":"2021-11-05"},{"lineNumber":115,"author":{"gitId":"nwhloo99"},"content":"        ObservableList\u003cAppointment\u003e expected \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-11-05"},{"lineNumber":116,"author":{"gitId":"nwhloo99"},"content":"        expected.add(ALICE_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"nwhloo99"},"content":"        expected.add(CARL_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"nwhloo99"},"content":"        // List is by default sorted by time, sort by description first","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"nwhloo99"},"content":"        schedule.sortAppointmentByDescription();","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"nwhloo99"},"content":"        schedule.sortAppointmentByTimePeriod();","lastModifiedDate":"2021-11-05"},{"lineNumber":122,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(expected, schedule.getSchedule());","lastModifiedDate":"2021-11-05"},{"lineNumber":123,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"tchiong":43,"YaleChen299":5,"nwhloo99":76}},{"path":"src/test/java/seedu/placebook/model/schedule/TimePeriodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"Li-Lehao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.exceptions.EndTimeBeforeStartTimeException;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":"public class TimePeriodTest {","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"Li-Lehao"},"content":"    private static final LocalDateTime TEST_MOMENT1 \u003d LocalDateTime.of(2021, 01, 01, 00, 00);","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"    private static final LocalDateTime TEST_MOMENT2 \u003d LocalDateTime.of(2021, 01, 01, 23, 59);","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"    private static final LocalDateTime TEST_MOMENT3 \u003d LocalDateTime.of(2021, 01, 02, 00, 00);","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"    private static final LocalDateTime TEST_MOMENT4 \u003d LocalDateTime.of(2021, 01, 02, 23, 59);","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"    public void timePeriod_endDateTimeIsBeforeStartDateTime_throwsException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(EndTimeBeforeStartTimeException.class, () -\u003e new TimePeriod(TEST_MOMENT2, TEST_MOMENT1));","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"    public void timePeriod_endDateTimeIsNotAfterStartDateTime_throwsException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(EndTimeBeforeStartTimeException.class, () -\u003e new TimePeriod(TEST_MOMENT2, TEST_MOMENT2));","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"Li-Lehao"},"content":"    public void getStartDateTime_returnsCorrectStartDateTime() {","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT2);","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(TEST_MOMENT1.equals(tp.getStartDateTime()));","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"Li-Lehao"},"content":"    public void getEndDateTime_returnsCorrectEndDateTime() {","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT2);","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(TEST_MOMENT2.equals(tp.getEndDateTime()));","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"Li-Lehao"},"content":"    public void setStartDateTime_newStartDateTimeBeforeEndDateTime_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"Li-Lehao"},"content":"        tp.setStartDateTime(TEST_MOMENT1);","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(TEST_MOMENT1.equals(tp.getStartDateTime()));","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"Li-Lehao"},"content":"    public void setStartDateTime_newStartDateTimeAfterEndDateTime_throwsException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(EndTimeBeforeStartTimeException.class, () -\u003e tp.setStartDateTime(TEST_MOMENT4));","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"Li-Lehao"},"content":"    public void setEndDateTime_newEndDateTimeAfterStartDateTime_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"Li-Lehao"},"content":"        tp.setEndDateTime(TEST_MOMENT4);","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(TEST_MOMENT4.equals(tp.getEndDateTime()));","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"Li-Lehao"},"content":"    public void setEndDateTime_newEndDateTimeBeforeStartDateTime_throwsException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"Li-Lehao"},"content":"        assertThrows(EndTimeBeforeStartTimeException.class, () -\u003e tp.setEndDateTime(TEST_MOMENT1));","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"Li-Lehao"},"content":"    public void hasConflictWith_overlapCase1_returnsTrue() {","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT3);","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp2 \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT4);","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp1.hasConflictWith(tp2));","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp2.hasConflictWith(tp1));","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"Li-Lehao"},"content":"    public void hasConflictWith_overlapCase2_returnsTrue() {","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp2 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT4);","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp1.hasConflictWith(tp2));","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp2.hasConflictWith(tp1));","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"Li-Lehao"},"content":"    public void hasConflictWith_overlapAtOnlyOnePoint_returnsFalse() {","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp2 \u003d new TimePeriod(TEST_MOMENT3, TEST_MOMENT4);","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(tp1.hasConflictWith(tp2));","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(tp2.hasConflictWith(tp1));","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"Li-Lehao"},"content":"    public void hasConflictWith_noOverlap_returnsFalse() {","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT2);","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp2 \u003d new TimePeriod(TEST_MOMENT3, TEST_MOMENT4);","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(tp1.hasConflictWith(tp2));","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(tp2.hasConflictWith(tp1));","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"Li-Lehao"},"content":"    public void equals_sameObject_returnTrue() {","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT2);","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(timePeriod.equals(timePeriod));","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":107,"author":{"gitId":"Li-Lehao"},"content":"    public void equals_null_returnFalse() {","lastModifiedDate":"2021-11-03"},{"lineNumber":108,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod timePeriod \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT2);","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(timePeriod.equals(null));","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"Li-Lehao"},"content":"    public void equals_sameStartDateTimeAndEndDateTime_returnTrue() {","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp2 \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp1.equals(tp2));","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":118,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"Li-Lehao"},"content":"    public void equals_differentStartDateTime_returnFalse() {","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp2 \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":123,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(tp1.equals(tp2));","lastModifiedDate":"2021-11-03"},{"lineNumber":124,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":125,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":126,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":127,"author":{"gitId":"Li-Lehao"},"content":"    public void equals_differentEndDateTime_returnFalse() {","lastModifiedDate":"2021-11-03"},{"lineNumber":128,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":129,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp2 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT2);","lastModifiedDate":"2021-11-03"},{"lineNumber":130,"author":{"gitId":"Li-Lehao"},"content":"        assertFalse(tp1.equals(tp2));","lastModifiedDate":"2021-11-03"},{"lineNumber":131,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":132,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":133,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"Li-Lehao"},"content":"    public void getStartDateAndTimeAsString_getCorrectString() {","lastModifiedDate":"2021-11-03"},{"lineNumber":135,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"Li-Lehao"},"content":"        String correctString \u003d TEST_MOMENT1.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp1.getStartDateTimeAsString().equals(correctString));","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":139,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":140,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"Li-Lehao"},"content":"    public void getEndDateAndTimeAsString_getCorrectString() {","lastModifiedDate":"2021-11-03"},{"lineNumber":142,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":143,"author":{"gitId":"Li-Lehao"},"content":"        String correctString \u003d TEST_MOMENT3.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp1.getEndDateTimeAsString().equals(correctString));","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":147,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":148,"author":{"gitId":"Li-Lehao"},"content":"    public void compareTo_tp1HasStartDateTimeEarlierThanThatOfTp2_returnNegativeValue() {","lastModifiedDate":"2021-11-03"},{"lineNumber":149,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":150,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp2 \u003d new TimePeriod(TEST_MOMENT2, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":151,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp1.compareTo(tp2) \u003c 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":152,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp2.compareTo(tp1) \u003e 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":153,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":154,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":155,"author":{"gitId":"Li-Lehao"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":156,"author":{"gitId":"Li-Lehao"},"content":"    public void compareTo_tp1AndTp2HaveSameStartDateTimeAndTp1HasEndDateTimeEarlierThanThatOfTp2_returnNegativeValue() {","lastModifiedDate":"2021-11-03"},{"lineNumber":157,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp1 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT3);","lastModifiedDate":"2021-11-03"},{"lineNumber":158,"author":{"gitId":"Li-Lehao"},"content":"        TimePeriod tp2 \u003d new TimePeriod(TEST_MOMENT1, TEST_MOMENT4);","lastModifiedDate":"2021-11-03"},{"lineNumber":159,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp1.compareTo(tp2) \u003c 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"Li-Lehao"},"content":"        assertTrue(tp2.compareTo(tp1) \u003e 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":161,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":162,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"Li-Lehao":159,"YaleChen299":3}},{"path":"src/test/java/seedu/placebook/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.model.tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"YaleChen299":2,"-":24}},{"path":"src/test/java/seedu/placebook/storage/JsonAdaptedAppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.model.person.Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.storage.JsonAdaptedAppointment.MESSAGE_DUPLICATE_PERSON;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.storage.JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.ALICE_APPOINTMENT;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.ALICE_CARL_APPOINTMENT;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"nwhloo99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.TimePeriod;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"public class JsonAdaptedAppointmentTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"    private static final String INVALID_LOCATION \u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"    private static final String EMPTY_LOCATION \u003d \" \";","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"nwhloo99"},"content":"    private static final JsonAdaptedTimePeriod INVALID_JSON_TIME_PERIOD \u003d null;","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"    private static final String INVALID_DESC \u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"nwhloo99"},"content":"    private static final List\u003cJsonAdaptedPerson\u003e INVALID_CLIENTS \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"    private static final String VALID_LOCATION \u003d \"vivocity\";","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"    private static final TimePeriod VALID_TIME_PERIOD \u003d ALICE_APPOINTMENT.getTimePeriod();","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"    private static final JsonAdaptedTimePeriod VALID_JSON_TIME_PERIOD \u003d new JsonAdaptedTimePeriod(VALID_TIME_PERIOD);","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"    private static final String VALID_DESC \u003d \"Testing\";","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_validSinglePersonAppointmentDetails_returnsAppointment() throws Exception {","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(ALICE_APPOINTMENT, appointment.toModelType());","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_validMultiplePersonAppointmentDetails_returnsAppointment() throws Exception {","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(ALICE_CARL_APPOINTMENT);","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(ALICE_CARL_APPOINTMENT, appointment.toModelType());","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_invalidLocation_throwsIllegalValueException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(ALICE);","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"        List\u003cJsonAdaptedPerson\u003e clients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"        clients.add(person);","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"tchiong"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"tchiong"},"content":"                new JsonAdaptedAppointment(","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"                        clients,","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"nwhloo99"},"content":"                        INVALID_LOCATION, VALID_JSON_TIME_PERIOD, VALID_DESC);","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_invalidTimePeriod_throwsIllegalValueException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"tchiong"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(ALICE);","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"        List\u003cJsonAdaptedPerson\u003e clients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"        clients.add(person);","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"                new JsonAdaptedAppointment(","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"                        clients,","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"nwhloo99"},"content":"                        VALID_LOCATION, INVALID_JSON_TIME_PERIOD, VALID_DESC);","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"nwhloo99"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TimePeriod.class.getSimpleName());","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"tchiong"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_invalidDesc_throwsIllegalValueException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"tchiong"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(ALICE);","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"nwhloo99"},"content":"        List\u003cJsonAdaptedPerson\u003e clients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"nwhloo99"},"content":"        clients.add(person);","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"tchiong"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"tchiong"},"content":"                new JsonAdaptedAppointment(","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"nwhloo99"},"content":"                        clients,","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"nwhloo99"},"content":"                        VALID_LOCATION, VALID_JSON_TIME_PERIOD, INVALID_DESC);","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"tchiong"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName());","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"tchiong"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":84,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":85,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_invalidClients_throwsIllegalValueException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"nwhloo99"},"content":"                new JsonAdaptedAppointment(","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"nwhloo99"},"content":"                        INVALID_CLIENTS,","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"nwhloo99"},"content":"                        VALID_LOCATION, VALID_JSON_TIME_PERIOD, VALID_DESC);","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"nwhloo99"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName());","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_emptyAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(ALICE);","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"nwhloo99"},"content":"        List\u003cJsonAdaptedPerson\u003e clients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"nwhloo99"},"content":"        clients.add(person);","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"nwhloo99"},"content":"                new JsonAdaptedAppointment(","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"nwhloo99"},"content":"                        clients,","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"nwhloo99"},"content":"                        EMPTY_LOCATION, VALID_JSON_TIME_PERIOD, VALID_DESC);","lastModifiedDate":"2021-11-05"},{"lineNumber":104,"author":{"gitId":"nwhloo99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CONSTRAINTS, String.class.getSimpleName());","lastModifiedDate":"2021-11-05"},{"lineNumber":105,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-11-05"},{"lineNumber":106,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":107,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":108,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":109,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":110,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(ALICE);","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"nwhloo99"},"content":"        List\u003cJsonAdaptedPerson\u003e clients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"nwhloo99"},"content":"        clients.add(person);","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"nwhloo99"},"content":"        clients.add(person);","lastModifiedDate":"2021-11-05"},{"lineNumber":114,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2021-11-05"},{"lineNumber":115,"author":{"gitId":"nwhloo99"},"content":"                new JsonAdaptedAppointment(","lastModifiedDate":"2021-11-05"},{"lineNumber":116,"author":{"gitId":"nwhloo99"},"content":"                        clients,","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"nwhloo99"},"content":"                        EMPTY_LOCATION, VALID_JSON_TIME_PERIOD, VALID_DESC);","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"nwhloo99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DUPLICATE_PERSON, String.class.getSimpleName());","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"tchiong":40,"YaleChen299":9,"nwhloo99":72}},{"path":"src/test/java/seedu/placebook/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"YaleChen299":9,"-":101}},{"path":"src/test/java/seedu/placebook/storage/JsonAdaptedTimePeriodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nwhloo99"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"nwhloo99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.storage.JsonAdaptedTimePeriod.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.testutil.TypicalAppointment.ALICE_APPOINTMENT;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"nwhloo99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"nwhloo99"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"import seedu.placebook.model.schedule.TimePeriod;","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"nwhloo99"},"content":"public class JsonAdaptedTimePeriodTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"nwhloo99"},"content":"    private static final String INVALID_START_TIME \u003d null;","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"nwhloo99"},"content":"    private static final String INVALID_END_TIME \u003d null;","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"    private static final TimePeriod VALID_TIME_PERIOD \u003d ALICE_APPOINTMENT.getTimePeriod();","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":"    private static final String VALID_START_TIME \u003d \"25-12-2021 1000\";","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"nwhloo99"},"content":"    private static final String VALID_END_TIME \u003d \"25-12-2021 1100\";","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_validTimePeriod_returnsTimePeriod() throws Exception {","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedTimePeriod timePeriod \u003d new JsonAdaptedTimePeriod(VALID_TIME_PERIOD);","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(ALICE_APPOINTMENT.getTimePeriod(), timePeriod.toModelType());","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_validStartTimeEndTime_returnsTimePeriod() throws Exception {","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedTimePeriod timePeriod \u003d new JsonAdaptedTimePeriod(VALID_START_TIME, VALID_END_TIME);","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(ALICE_APPOINTMENT.getTimePeriod(), timePeriod.toModelType());","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedTimePeriod timePeriod \u003d new JsonAdaptedTimePeriod(INVALID_START_TIME, VALID_END_TIME);","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName());","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, timePeriod::toModelType);","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_invalidEndTime_throwsIllegalValueException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedTimePeriod timePeriod \u003d new JsonAdaptedTimePeriod(VALID_START_TIME, INVALID_END_TIME);","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName());","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, timePeriod::toModelType);","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"    public void toModelType_invalidStartTimeInvalidEndTime_throwsIllegalValueException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"        JsonAdaptedTimePeriod timePeriod \u003d new JsonAdaptedTimePeriod(INVALID_START_TIME, INVALID_END_TIME);","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName());","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, timePeriod::toModelType);","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"nwhloo99":55}},{"path":"src/test/java/seedu/placebook/storage/JsonContactsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tchiong"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"tchiong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.HOON;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.IDA;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"public class JsonContactsStorageTest {","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"    private static final Path TEST_DATA_FOLDER \u003d","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"            Paths.get(\"src\", \"test\", \"data\", \"JsonPlaceBookStorageTest\");","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"    @TempDir","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"    public Path testFolder;","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"    public void readContacts_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"        assertThrows(NullPointerException.class, () -\u003e readContacts(null));","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"    private java.util.Optional\u003cReadOnlyContacts\u003e readContacts(String filePath) throws Exception {","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"        return new JsonContactsStorage(Paths.get(filePath)).readContacts(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"tchiong"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"tchiong"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"                : null;","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"tchiong"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"        assertFalse(readContacts(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"tchiong"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"tchiong"},"content":"        assertThrows(DataConversionException.class, () -\u003e readContacts(\"notJsonFormatPlaceBook.json\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"    public void readContacts_invalidPersonContacts_throwDataConversionException() {","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"tchiong"},"content":"        assertThrows(DataConversionException.class, () -\u003e readContacts(\"invalidPersonPlaceBook.json\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"tchiong"},"content":"    public void readContacts_invalidAndValidPersonContacts_throwDataConversionException() {","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"tchiong"},"content":"        assertThrows(DataConversionException.class, () -\u003e readContacts(\"invalidAndValidPersonPlaceBook.json\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"    public void readAndSaveContacts_allInOrder_success() throws Exception {","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"tchiong"},"content":"        Path filePath \u003d testFolder.resolve(\"TempContacts.json\");","lastModifiedDate":"2021-11-04"},{"lineNumber":67,"author":{"gitId":"tchiong"},"content":"        Contacts original \u003d getTypicalContacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":68,"author":{"gitId":"tchiong"},"content":"        JsonContactsStorage jsonContactsStorage \u003d new JsonContactsStorage(filePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"tchiong"},"content":"        // Save in new file and read back","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"tchiong"},"content":"        jsonContactsStorage.saveContacts(original, filePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"tchiong"},"content":"        ReadOnlyContacts readBack \u003d jsonContactsStorage.readContacts(filePath).get();","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"tchiong"},"content":"        assertEquals(original, new Contacts(readBack));","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"tchiong"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"tchiong"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"tchiong"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"tchiong"},"content":"        jsonContactsStorage.saveContacts(original, filePath);","lastModifiedDate":"2021-11-04"},{"lineNumber":79,"author":{"gitId":"tchiong"},"content":"        readBack \u003d jsonContactsStorage.readContacts(filePath).get();","lastModifiedDate":"2021-11-04"},{"lineNumber":80,"author":{"gitId":"tchiong"},"content":"        assertEquals(original, new Contacts(readBack));","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"tchiong"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"tchiong"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"tchiong"},"content":"        jsonContactsStorage.saveContacts(original); // file path not specified","lastModifiedDate":"2021-11-04"},{"lineNumber":85,"author":{"gitId":"tchiong"},"content":"        readBack \u003d jsonContactsStorage.readContacts().get(); // file path not specified","lastModifiedDate":"2021-11-04"},{"lineNumber":86,"author":{"gitId":"tchiong"},"content":"        assertEquals(original, new Contacts(readBack));","lastModifiedDate":"2021-11-04"},{"lineNumber":87,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":88,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":90,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"tchiong"},"content":"    public void saveContacts_nullContacts_throwsNullPointerException() {","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"tchiong"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveContacts(null, \"SomeFile.json\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":94,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":95,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":96,"author":{"gitId":"tchiong"},"content":"     * Saves {@code contacts} at the specified {@code filePath}.","lastModifiedDate":"2021-11-04"},{"lineNumber":97,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":98,"author":{"gitId":"tchiong"},"content":"    private void saveContacts(ReadOnlyContacts contacts, String filePath) {","lastModifiedDate":"2021-11-04"},{"lineNumber":99,"author":{"gitId":"tchiong"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":100,"author":{"gitId":"tchiong"},"content":"            new JsonContactsStorage(Paths.get(filePath))","lastModifiedDate":"2021-11-04"},{"lineNumber":101,"author":{"gitId":"tchiong"},"content":"                    .saveContacts(contacts, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-11-04"},{"lineNumber":102,"author":{"gitId":"tchiong"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-11-04"},{"lineNumber":103,"author":{"gitId":"tchiong"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2021-11-04"},{"lineNumber":104,"author":{"gitId":"tchiong"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":105,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":106,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":107,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":108,"author":{"gitId":"tchiong"},"content":"    public void saveContacts_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"tchiong"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveContacts(new Contacts(), null));","lastModifiedDate":"2021-11-04"},{"lineNumber":110,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":111,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"tchiong":109,"nwhloo99":2}},{"path":"src/test/java/seedu/placebook/storage/JsonScheduleStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nwhloo99"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"nwhloo99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"nwhloo99"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.testutil.TypicalAppointment.ALICE_APPOINTMENT;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.testutil.TypicalAppointment.ALICE_CARL_APPOINTMENT;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"nwhloo99"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"nwhloo99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"nwhloo99"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"nwhloo99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"nwhloo99"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"nwhloo99"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"nwhloo99"},"content":"public class JsonScheduleStorageTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"nwhloo99"},"content":"    private static final Path TEST_DATA_FOLDER \u003d","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"            Paths.get(\"src\", \"test\", \"data\", \"JsonScheduleStorageTest\");","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"nwhloo99"},"content":"    @TempDir","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"nwhloo99"},"content":"    public Path testFolder;","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"    public void readSchedule_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(NullPointerException.class, () -\u003e readSchedule(null));","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"nwhloo99"},"content":"    private java.util.Optional\u003cReadOnlySchedule\u003e readSchedule(String filePath) throws Exception {","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"nwhloo99"},"content":"        return new JsonScheduleStorage(Paths.get(filePath)).readSchedule(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"nwhloo99"},"content":"                : null;","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"nwhloo99"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"nwhloo99"},"content":"        assertFalse(readSchedule(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"nwhloo99"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(DataConversionException.class, () -\u003e readSchedule(\"notJsonFormatSchedule.json\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"nwhloo99"},"content":"    public void readSchedule_invalidAppointmentSchedule_throwDataConversionException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(DataConversionException.class, () -\u003e readSchedule(\"invalidAppointmentSchedule.json\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"nwhloo99"},"content":"    public void readSchedule_invalidAndValidAppointmentSchedule_throwDataConversionException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(DataConversionException.class, ()","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"nwhloo99"},"content":"            -\u003e readSchedule(\"invalidAndValidAppointmentSchedule.json\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"nwhloo99"},"content":"    public void readAndSaveSchedule_allInOrder_success() throws Exception {","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"nwhloo99"},"content":"        Path filePath \u003d testFolder.resolve(\"TempContacts.json\");","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"nwhloo99"},"content":"        Schedule original \u003d getTypicalSchedule();","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"nwhloo99"},"content":"        JsonScheduleStorage jsonScheduleStorage \u003d new JsonScheduleStorage(filePath);","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"nwhloo99"},"content":"        // Save in new file and read back","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"nwhloo99"},"content":"        jsonScheduleStorage.saveSchedule(original, filePath);","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"nwhloo99"},"content":"        ReadOnlySchedule readBack \u003d jsonScheduleStorage.readSchedule(filePath).get();","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(original, new Schedule(readBack));","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"nwhloo99"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"nwhloo99"},"content":"        original.addAppointment(ALICE_CARL_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"nwhloo99"},"content":"        original.deleteAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"nwhloo99"},"content":"        jsonScheduleStorage.saveSchedule(original, filePath);","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"nwhloo99"},"content":"        readBack \u003d jsonScheduleStorage.readSchedule(filePath).get();","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(original, new Schedule(readBack));","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"nwhloo99"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"nwhloo99"},"content":"        original.addAppointment(ALICE_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"nwhloo99"},"content":"        jsonScheduleStorage.saveSchedule(original); // file path not specified","lastModifiedDate":"2021-11-05"},{"lineNumber":85,"author":{"gitId":"nwhloo99"},"content":"        readBack \u003d jsonScheduleStorage.readSchedule().get(); // file path not specified","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(original, new Schedule(readBack));","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"nwhloo99"},"content":"    public void saveSchedule_nullSchedule_throwsNullPointerException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveSchedule(null, \"SomeFile.json\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"nwhloo99"},"content":"     * Saves {@code contacts} at the specified {@code filePath}.","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"nwhloo99"},"content":"    private void saveSchedule(ReadOnlySchedule schedule, String filePath) {","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"nwhloo99"},"content":"        try {","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"nwhloo99"},"content":"            new JsonScheduleStorage(Paths.get(filePath))","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"nwhloo99"},"content":"                    .saveSchedule(schedule, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"nwhloo99"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"nwhloo99"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2021-11-05"},{"lineNumber":104,"author":{"gitId":"nwhloo99"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":105,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":106,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":107,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":108,"author":{"gitId":"nwhloo99"},"content":"    public void saveSchedule_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-11-05"},{"lineNumber":109,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveSchedule(new Schedule(), null));","lastModifiedDate":"2021-11-05"},{"lineNumber":110,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"nwhloo99":111}},{"path":"src/test/java/seedu/placebook/storage/JsonSerializableContactsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.JsonUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.TypicalPersons;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"public class JsonSerializableContactsTest {","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableContactsTest\");","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsContacts.json\");","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonContacts.json\");","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonContacts.json\");","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"        JsonSerializableContacts dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"                JsonSerializableContacts.class).get();","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"        Contacts contactsFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"        Contacts typicalContacts \u003d TypicalPersons.getTypicalContacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"        assertEquals(contactsFromFile, typicalContacts);","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"        JsonSerializableContacts dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"                JsonSerializableContacts.class).get();","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"        JsonSerializableContacts dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"tchiong"},"content":"                JsonSerializableContacts.class).get();","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"tchiong"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableContacts.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tchiong":16,"YaleChen299":5,"-":26}},{"path":"src/test/java/seedu/placebook/storage/JsonSerializableScheduleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.util.JsonUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.testutil.TypicalAppointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"public class JsonSerializableScheduleTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableScheduleTest\");","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"    private static final Path TYPICAL_APPOINTMENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAppointmentSchedule.json\");","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"    private static final Path DUPLICATE_APPOINTMENT_FILE \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"            TEST_DATA_FOLDER.resolve(\"duplicateAppointmentSchedule.json\");","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"    private static final Path CLASHING_APPOINTMENT_FILE \u003d","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"            TEST_DATA_FOLDER.resolve(\"clashingAppointmentSchedule.json\");","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"    public void toModelType_typicalAppointmentsFile_success() throws Exception {","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_APPOINTMENT_FILE,","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"                JsonSerializableSchedule.class).get();","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"        Schedule scheduleFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"        Schedule typicalSchedule \u003d TypicalAppointment.getTypicalSchedule();","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"        assertEquals(typicalSchedule, scheduleFromFile);","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"tchiong"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"tchiong"},"content":"    public void toModelType_duplicateAppointment_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"tchiong"},"content":"        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_APPOINTMENT_FILE,","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"tchiong"},"content":"                JsonSerializableSchedule.class).get();","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"tchiong"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableSchedule.MESSAGE_DUPLICATE_APPOINTMENT,","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"tchiong"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"    public void toModelType_clashingAppointment_throwsClashingAppointmentsException() throws Exception {","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(CLASHING_APPOINTMENT_FILE,","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"                JsonSerializableSchedule.class).get();","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableSchedule.MESSAGE_CONFLICTING_APPOINTMENT,","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"tchiong":33,"YaleChen299":17,"nwhloo99":1}},{"path":"src/test/java/seedu/placebook/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"tchiong"},"content":"        userPrefs.setContactsFilePath(Paths.get(\"contacts.json\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"nwhloo99"},"content":"        userPrefs.setScheduleFilePath(Paths.get(\"schedule.json\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"nwhloo99"},"content":"        Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"nwhloo99"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":126,"author":{"gitId":"nwhloo99"},"content":"    public void getUserPrefs() {","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"nwhloo99"},"content":"        Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2021-11-05"},{"lineNumber":128,"author":{"gitId":"nwhloo99"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);","lastModifiedDate":"2021-11-05"},{"lineNumber":129,"author":{"gitId":"nwhloo99"},"content":"        assertNotNull(jsonUserPrefsStorage.getUserPrefsFilePath());","lastModifiedDate":"2021-11-05"},{"lineNumber":130,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":131,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"tchiong":1,"YaleChen299":5,"nwhloo99":11,"-":115}},{"path":"src/test/java/seedu/placebook/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.storage;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalAppointment.getTypicalSchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"import static seedu.placebook.testutil.TypicalPersons.getTypicalContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.GuiSettings;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.ReadOnlyContacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.ReadOnlySchedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.UserPrefs;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"        JsonContactsStorage contactsStorage \u003d new JsonContactsStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":32,"author":{"gitId":"nwhloo99"},"content":"        JsonScheduleStorage scheduleStorage \u003d new JsonScheduleStorage(getTempFilePath(\"sched\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"        storageManager \u003d new StorageManager(contactsStorage, userPrefsStorage, scheduleStorage);","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"tchiong"},"content":"    public void contactsReadSave() throws Exception {","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"tchiong"},"content":"         * {@link JsonContactsStorage} class.","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"tchiong"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonContactsStorageTest} class.","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"tchiong"},"content":"        Contacts original \u003d getTypicalContacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"tchiong"},"content":"        storageManager.saveContacts(original);","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"tchiong"},"content":"        ReadOnlyContacts retrieved \u003d storageManager.readContacts().get();","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"tchiong"},"content":"        assertEquals(original, new Contacts(retrieved));","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"tchiong"},"content":"    public void getContactsFilePath() {","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"tchiong"},"content":"        assertNotNull(storageManager.getContactsFilePath());","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"nwhloo99"},"content":"    public void scheduleReadSave() throws Exception {","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"nwhloo99"},"content":"        Schedule original \u003d getTypicalSchedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"nwhloo99"},"content":"        storageManager.saveSchedule(original);","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"nwhloo99"},"content":"        ReadOnlySchedule retrieved \u003d storageManager.readSchedule().get();","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"nwhloo99"},"content":"        assertEquals(original, new Schedule(retrieved));","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"nwhloo99"},"content":"    public void getStorageFilePath() {","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"nwhloo99"},"content":"        assertNotNull(storageManager.getScheduleFilePath());","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"nwhloo99"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"nwhloo99"},"content":"    public void getUserPrefsFilePath() {","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"nwhloo99"},"content":"        assertNotNull(storageManager.getUserPrefsFilePath());","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tchiong":14,"YaleChen299":6,"nwhloo99":19,"-":51}},{"path":"src/test/java/seedu/placebook/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"Li-Lehao"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.UniquePersonList;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.TimePeriod;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"Li-Lehao"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"Li-Lehao"},"content":" * A utility class to help with building Appointment Objects.","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"Li-Lehao"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"Li-Lehao"},"content":"public class AppointmentBuilder {","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"    private static final String DEFAULT_CLIENT \u003d \"ALICE\";","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"    private static final String DEFAULT_LOCATION \u003d \"vivocity\";","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"Li-Lehao"},"content":"    private static final String DEFAULT_DESCRIPTION \u003d \"Halloween Sales\";","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":"    private UniquePersonList clients;","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Li-Lehao"},"content":"    private Address location;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"    private TimePeriod timePeriod;","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"Li-Lehao"},"content":"    private String description;","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"Li-Lehao"},"content":"     * Creates a {@code} AppointmentBuilder with the default details.","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"    public AppointmentBuilder() {","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"        this(Seed.ONE);","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"     * Creates a {@code} AppointmentBuilder with the two default values.","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"     * This is a simple way to create appointments without time conflicts.","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"    public AppointmentBuilder(Seed seed) {","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"nwhloo99"},"content":"        UniquePersonList clients \u003d new UniquePersonList();","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"nwhloo99"},"content":"        clients.add(new PersonBuilder().withName(DEFAULT_CLIENT).build());","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"nwhloo99"},"content":"        this.clients \u003d clients;","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"Li-Lehao"},"content":"        this.location \u003d new Address(DEFAULT_LOCATION);","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"        this.description \u003d DEFAULT_DESCRIPTION;","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"        switch (seed) {","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"        case ONE:","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"tchiong"},"content":"            this.timePeriod \u003d new TimePeriod(LocalDateTime.of(2021, 12, 25, 21, 30),","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"tchiong"},"content":"                    LocalDateTime.of(2021, 12, 25, 22, 30));","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"            break;","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"        case TWO:","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"            this.timePeriod \u003d new TimePeriod(LocalDateTime.of(2022, 12, 25, 21, 30),","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"                    LocalDateTime.of(2022, 12, 25, 22, 30));","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"            break;","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"        default:","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"            this.timePeriod \u003d new TimePeriod(LocalDateTime.of(2023, 12, 25, 21, 30),","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"                    LocalDateTime.of(2023, 12, 25, 22, 30));","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"Li-Lehao"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}.","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"Li-Lehao"},"content":"     * @param appointmentToCopy The given appointment to copy.","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"Li-Lehao"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"nwhloo99"},"content":"        this.clients \u003d appointmentToCopy.getClients();","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"Li-Lehao"},"content":"        this.location \u003d appointmentToCopy.getLocation();","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"        this.timePeriod \u003d appointmentToCopy.getTimePeriod();","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"Li-Lehao"},"content":"        this.description \u003d appointmentToCopy.getDescription();","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"nwhloo99"},"content":"     * Sets the {@code clients} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"Li-Lehao"},"content":"    public AppointmentBuilder withClient(Person client) {","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"nwhloo99"},"content":"        UniquePersonList clients \u003d new UniquePersonList();","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"nwhloo99"},"content":"        clients.add(client);","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"nwhloo99"},"content":"        this.clients \u003d clients;","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"Li-Lehao"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"nwhloo99"},"content":"     * Sets the {@code clients} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"Li-Lehao"},"content":"    public AppointmentBuilder withClient(String clientName) {","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"nwhloo99"},"content":"        UniquePersonList clients \u003d new UniquePersonList();","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"nwhloo99"},"content":"        clients.add(new PersonBuilder().withName(clientName).build());","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"nwhloo99"},"content":"        this.clients \u003d clients;","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"Li-Lehao"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":87,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"nwhloo99"},"content":"     * Adds a {@code Person} to the {@code clients} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"nwhloo99"},"content":"    public AppointmentBuilder addClient(Person client) {","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"nwhloo99"},"content":"        this.clients.add(client);","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"nwhloo99"},"content":"        return this;","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":97,"author":{"gitId":"nwhloo99"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":98,"author":{"gitId":"nwhloo99"},"content":"     * Adds a {@code Person} to the {@code clients} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"nwhloo99"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":100,"author":{"gitId":"nwhloo99"},"content":"    public AppointmentBuilder addClient(String clientName) {","lastModifiedDate":"2021-10-23"},{"lineNumber":101,"author":{"gitId":"nwhloo99"},"content":"        this.clients.add(new PersonBuilder().withName(clientName).build());","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"nwhloo99"},"content":"        return this;","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"nwhloo99"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":105,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"Li-Lehao"},"content":"     * Sets the {@code location} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"Li-Lehao"},"content":"    public AppointmentBuilder withLocation(String location) {","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"Li-Lehao"},"content":"        this.location \u003d new Address(location);","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"Li-Lehao"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":114,"author":{"gitId":"tchiong"},"content":"     * Sets the {@code TimePeriod} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"tchiong"},"content":"    public AppointmentBuilder withTimePeriod(TimePeriod timePeriod) {","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"tchiong"},"content":"        this.timePeriod \u003d timePeriod;","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"Li-Lehao"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":119,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":120,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":121,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":122,"author":{"gitId":"tchiong"},"content":"     * Sets the {@code TimePeriod} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":124,"author":{"gitId":"tchiong"},"content":"    public AppointmentBuilder withTimePeriod(String startTime, String endTime) {","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"nwhloo99"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"tchiong"},"content":"        this.timePeriod \u003d new TimePeriod(LocalDateTime.parse(startTime, formatter),","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"tchiong"},"content":"                LocalDateTime.parse(endTime, formatter));","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"Li-Lehao"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":129,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":130,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":131,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"Li-Lehao"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":133,"author":{"gitId":"Li-Lehao"},"content":"     * Sets the {@code description} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-10-13"},{"lineNumber":134,"author":{"gitId":"Li-Lehao"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":135,"author":{"gitId":"Li-Lehao"},"content":"    public AppointmentBuilder withDescription(String description) {","lastModifiedDate":"2021-10-13"},{"lineNumber":136,"author":{"gitId":"Li-Lehao"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-10-13"},{"lineNumber":137,"author":{"gitId":"Li-Lehao"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":138,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":139,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":140,"author":{"gitId":"Li-Lehao"},"content":"    public Appointment build() {","lastModifiedDate":"2021-10-13"},{"lineNumber":141,"author":{"gitId":"tchiong"},"content":"        return new Appointment(clients, location, timePeriod, description);","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":143,"author":{"gitId":"Li-Lehao"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"Li-Lehao":72,"tchiong":14,"YaleChen299":27,"nwhloo99":30}},{"path":"src/test/java/seedu/placebook/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"YaleChen299":1,"-":33}},{"path":"src/test/java/seedu/placebook/testutil/ContactsBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tchiong"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"tchiong"},"content":"/**","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"tchiong"},"content":" * A utility class to help with building Contact objects.","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"tchiong"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"tchiong"},"content":" *     {@code contacts ab \u003d new ContactsBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"tchiong"},"content":" */","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"tchiong"},"content":"public class ContactsBuilder {","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"tchiong"},"content":"    private Contacts contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"tchiong"},"content":"    public ContactsBuilder() {","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"tchiong"},"content":"        contacts \u003d new Contacts();","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"tchiong"},"content":"    public ContactsBuilder(Contacts contacts) {","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"tchiong"},"content":"        this.contacts \u003d contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"tchiong"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"tchiong"},"content":"     * Adds a new {@code Person} to the {@code contacts} that we are building.","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"tchiong"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"tchiong"},"content":"    public ContactsBuilder withPerson(Person person) {","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"tchiong"},"content":"        contacts.addPerson(person);","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"tchiong"},"content":"        return this;","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"tchiong"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"tchiong"},"content":"    public Contacts build() {","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"tchiong"},"content":"        return contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"tchiong"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"tchiong"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"tchiong":34}},{"path":"src/test/java/seedu/placebook/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"YaleChen299":8,"-":79}},{"path":"src/test/java/seedu/placebook/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Address;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new Person(name, phone, email, address, tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"YaleChen299":8,"-":88}},{"path":"src/test/java/seedu/placebook/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.AddCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.tag.Tag;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"YaleChen299":10,"-":52}},{"path":"src/test/java/seedu/placebook/testutil/Seed.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"public enum Seed {","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"    ONE, TWO","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"YaleChen299":5}},{"path":"src/test/java/seedu/placebook/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":1,"-":71}},{"path":"src/test/java/seedu/placebook/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.Model;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"YaleChen299":4,"-":51}},{"path":"src/test/java/seedu/placebook/testutil/TypicalAppointment.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"Li-Lehao"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"Li-Lehao"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"Li-Lehao"},"content":"import java.util.List;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import java.util.function.Supplier;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Appointment;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.schedule.Schedule;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"nwhloo99"},"content":"public class TypicalAppointment {","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"    public static final Supplier\u003cAppointment\u003e ALICE_APPOINTMENT_SUPPLIER \u003d () -\u003e new AppointmentBuilder()","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"Li-Lehao"},"content":"            .withClient(ALICE)","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"Li-Lehao"},"content":"            .withLocation(\"369 Tanjong Rhu\")","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"nwhloo99"},"content":"            .withTimePeriod(\"25-12-2021 1000\", \"25-12-2021 1100\")","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"nwhloo99"},"content":"            .withDescription(\"Talk about sales\")","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"nwhloo99"},"content":"            .build();","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"    public static final Supplier\u003cAppointment\u003e ALICE_CARL_APPOINTMENT_SUPPLIER \u003d () -\u003e new AppointmentBuilder()","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"nwhloo99"},"content":"            .withClient(ALICE)","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"nwhloo99"},"content":"            .addClient(CARL)","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"nwhloo99"},"content":"            .withLocation(\"369 Tanjong Rhu\")","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"nwhloo99"},"content":"            .withTimePeriod(\"25-12-2021 0800\", \"25-12-2021 0900\")","lastModifiedDate":"2021-11-01"},{"lineNumber":27,"author":{"gitId":"Li-Lehao"},"content":"            .withDescription(\"Talk about sales\")","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"Li-Lehao"},"content":"            .build();","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"nwhloo99"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"    public static final Supplier\u003cAppointment\u003e CARL_APPOINTMENT_SUPPLIER \u003d () -\u003e new AppointmentBuilder()","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"Li-Lehao"},"content":"            .withClient(CARL)","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"Li-Lehao"},"content":"            .withLocation(\"vivocity\")","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"            .withTimePeriod(\"25-12-2022 1000\", \"25-12-2022 1100\")","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"Li-Lehao"},"content":"            .withDescription(\"Halloween Sales\")","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"Li-Lehao"},"content":"            .build();","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"    public static final Appointment ALICE_APPOINTMENT \u003d ALICE_APPOINTMENT_SUPPLIER.get();","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"    public static final Appointment ALICE_CARL_APPOINTMENT \u003d ALICE_CARL_APPOINTMENT_SUPPLIER.get();","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"    public static final Appointment CARL_APPOINTMENT \u003d CARL_APPOINTMENT_SUPPLIER.get();","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"Li-Lehao"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_APPOINTMENT_SUPPLIER.get(), CARL_APPOINTMENT_SUPPLIER.get()));","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"nwhloo99"},"content":"    public static Schedule getTypicalSchedule() {","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"nwhloo99"},"content":"        Schedule schedule \u003d new Schedule();","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"Li-Lehao"},"content":"        for (Appointment appointment : getTypicalAppointments()) {","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"nwhloo99"},"content":"            schedule.addAppointment(appointment);","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"nwhloo99"},"content":"        return schedule;","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"Li-Lehao"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"nwhloo99"},"content":"    public static Schedule getTypicalSchedule(Schedule schedule) {","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"Li-Lehao"},"content":"        for (Appointment appointment : getTypicalAppointments()) {","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"nwhloo99"},"content":"            schedule.addAppointment(appointment);","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"Li-Lehao"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"nwhloo99"},"content":"        return schedule;","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"Li-Lehao"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"nwhloo99"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"Li-Lehao":22,"YaleChen299":17,"nwhloo99":22}},{"path":"src/test/java/seedu/placebook/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.commons.core.index.Index;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"NecroWolf28"},"content":"    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"NecroWolf28"},"content":"    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"NecroWolf28"},"content":"    public static final Index INDEX_THIRD_APPOINTMENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"YaleChen299":2,"-":10,"NecroWolf28":3}},{"path":"src/test/java/seedu/placebook/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.testutil;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"tchiong"},"content":"import seedu.placebook.model.Contacts;","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.model.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"NecroWolf28"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withTags(\"family\", \"single\").build();","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"tchiong"},"content":"     * Returns an {@code Contacts} with all the typical persons.","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"tchiong"},"content":"    public static Contacts getTypicalContacts() {","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"Li-Lehao"},"content":"        Contacts contacts \u003d new Contacts();","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":68,"author":{"gitId":"Li-Lehao"},"content":"            contacts.addPerson(person);","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":70,"author":{"gitId":"Li-Lehao"},"content":"        return contacts;","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"tchiong":3,"Li-Lehao":3,"YaleChen299":12,"-":57,"NecroWolf28":1}},{"path":"src/test/java/seedu/placebook/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"YaleChen299":1,"-":34}},{"path":"src/test/java/seedu/placebook/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import static seedu.placebook.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"import seedu.placebook.MainApp;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"YaleChen299":3,"-":111}},{"path":"src/test/java/seedu/placebook/ui/util/CommandHistoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui.util;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"class CommandHistoryTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"    void addCommand() {","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"        CommandHistory commandHistory \u003d new CommandHistory();","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"        commandHistory.addCommand(\"command1\");","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"        // newly added command","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"command1\", commandHistory.getLastInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"YaleChen299"},"content":"        // reach the end of the state","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"command1\", commandHistory.getLastInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"YaleChen299"},"content":"        // no next input","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"\", commandHistory.getNextInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"YaleChen299"},"content":"        // no next input when go beyond the limit","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"\", commandHistory.getNextInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"YaleChen299"},"content":"        // newly added command when go back","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"command1\", commandHistory.getLastInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"YaleChen299"},"content":"        // go to the previous command","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"command1\", commandHistory.getLastInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"YaleChen299"},"content":"        // adding new command will reset pointer","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"YaleChen299"},"content":"        commandHistory.addCommand(\"command2\");","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"YaleChen299"},"content":"        // newly added command","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"command2\", commandHistory.getLastInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"YaleChen299"},"content":"        // last command","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"command1\", commandHistory.getLastInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"YaleChen299"},"content":"        // reach the end of the state","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"command1\", commandHistory.getLastInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"YaleChen299"},"content":"        // next input","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"command2\", commandHistory.getNextInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"YaleChen299"},"content":"        // no next input","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"\", commandHistory.getNextInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"YaleChen299"},"content":"        // no next input when go beyond the limit","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"\", commandHistory.getNextInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"YaleChen299"},"content":"        // newly added command when go back","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"command2\", commandHistory.getLastInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"YaleChen299"},"content":"    void getLastInput_emptyState_emptyStringReturned() {","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"YaleChen299"},"content":"        CommandHistory commandHistory \u003d new CommandHistory();","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"\", commandHistory.getLastInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"\", commandHistory.getLastInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"YaleChen299"},"content":"    void getNextInput_emptyState_emptyStringReturned() {","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"YaleChen299"},"content":"        CommandHistory commandHistory \u003d new CommandHistory();","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"\", commandHistory.getNextInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"\", commandHistory.getNextInput());","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"YaleChen299":57}},{"path":"src/test/java/seedu/placebook/ui/util/ThemeManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YaleChen299"},"content":"package seedu.placebook.ui.util;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"YaleChen299"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"YaleChen299"},"content":"class ThemeManagerTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"YaleChen299"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"YaleChen299"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"YaleChen299"},"content":"    void getCurrentStylesheet_default_lightThemeReturned() {","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"YaleChen299"},"content":"        ThemeManager themeManager \u003d new ThemeManager();","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"YaleChen299"},"content":"        assertEquals(\"view/LightTheme.css\", themeManager.getCurrentStylesheet());","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"YaleChen299"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"YaleChen299"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"YaleChen299":14}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"\u003c?import seedu.placebook.ui.TestFxmlObject?\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"YaleChen299":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"YaleChen299"},"content":"\u003cfx:root type\u003d\"seedu.placebook.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"YaleChen299":1,"-":5}}]
