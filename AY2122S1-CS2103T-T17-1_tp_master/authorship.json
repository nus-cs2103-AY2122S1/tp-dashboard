[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pbthang"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T17-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S1-CS2103T-T17-1/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"This application is created with the purpose of helping restaurant managers to manage the employeesâ€™ information (shift schedule, contact), diners (reservation timing, diner contacts) and suppliers (supplier meet up timing/weekly collection schedule, contacts)","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"## About Us","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"pbthang"},"content":"Please refer to the [About Us](https://github.com/AY2122S1-CS2103T-T17-1/tp/blob/master/docs/AboutUs.md) document.  ","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"pbthang"},"content":"## User Guide","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"pbthang"},"content":"Please refer to the [User Guide](https://github.com/AY2122S1-CS2103T-T17-1/tp/blob/master/docs/UserGuide.md) document for specific details.","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"pbthang"},"content":"## Developer Guide","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"clementkfj"},"content":"Please refer to the [Developer Guide](https://github.com/AY2122S1-CS2103T-T17-1/tp/blob/master/docs/UserGuide.md) for specific details.","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"pbthang"},"content":"## Acknowledgements","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"pbthang"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"clementkfj":1,"pbthang":17,"-":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"Javiier-pzk"},"content":"### Javier Phon Zhee Kai","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"Javiier-pzk"},"content":"\u003cimg src\u003d\"images/javiier-pzk.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"Javiier-pzk"},"content":"[[github](https://github.com/javiier-pzk)]","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"Javiier-pzk"},"content":"* Role: Team Lead","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"Javiier-pzk"},"content":"* Responsibilities: In charge of deliverables, deadlines, scheduling and tracking","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"Javiier-pzk"},"content":"### Low Qi Hong Chetwin","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"Javiier-pzk"},"content":"\u003cimg src\u003d\"images/chetwinlow.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"Javiier-pzk"},"content":"[[github](http://github.com/chetwinlow)]","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"Javiier-pzk"},"content":"* Role: Documentation","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"Javiier-pzk"},"content":"* Responsibilities: In charge of quality of user guide and developer guide","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"Javiier-pzk"},"content":"### Kong Fanji","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"Javiier-pzk"},"content":"\u003cimg src\u003d\"images/clementkfj.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Javiier-pzk"},"content":"[[github](http://github.com/clementkfj)] ","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"Javiier-pzk"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"Javiier-pzk"},"content":"* Role: Git and IntelliJ Expert","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"Javiier-pzk"},"content":"* Responsibilities: Integration and helping the team with Git issues","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"Javiier-pzk"},"content":"### Lee Hern Ping","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"Javiier-pzk"},"content":"\u003cimg src\u003d\"images/hernpiblo.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"Javiier-pzk"},"content":"[[github](http://github.com/hernpiblo)]","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"Javiier-pzk"},"content":"* Role: Code quality checker","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"Javiier-pzk"},"content":"* Responsibilities: Checks code quality and ensures all team members adhere to coding standards","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"Javiier-pzk"},"content":"### Pham Ba Thang","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"Javiier-pzk"},"content":"\u003cimg src\u003d\"images/pbthang.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"Javiier-pzk"},"content":"[[github](http://github.com/pbthang)]","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"Javiier-pzk"},"content":"* Role: Testing","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"Javiier-pzk"},"content":"* Responsibilities: Ensures testing of code is done perperly and on time","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"Javiier-pzk":26,"-":32}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the userâ€™s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()`â€‰â€”â€‰Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()`â€‰â€”â€‰Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()`â€‰â€”â€‰Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David â€¦â€‹` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the oppositeâ€‰â€”â€‰it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David â€¦â€‹` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"hernpiblo"},"content":"* managers of restaurant in charge of overseeing the list of customers, employees and suppliers","lastModifiedDate":"2021-09-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"hernpiblo"},"content":"**Value proposition**: This application is created with the purpose of helping restaurant managers to manage the employeesâ€™ information (shift schedule, contact), diners (reservation timing, diner contacts) and suppliers (supplier meet up timing/weekly collection schedule, contacts), and at the same time manage contacts faster than a typical mouse/GUI driven app","lastModifiedDate":"2021-09-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"hernpiblo"},"content":"Categories: Administrative, Customer, Employee, Supplier","lastModifiedDate":"2021-09-30"},{"lineNumber":273,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":274,"author":{"gitId":"hernpiblo"},"content":"Priorities: High, Low","lastModifiedDate":"2021-09-30"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"hernpiblo"},"content":"| As a ... | I can ...                                                                                                             | so that ...                                                                            | Category       | Priority |","lastModifiedDate":"2021-09-28"},{"lineNumber":277,"author":{"gitId":"hernpiblo"},"content":"| -------- | --------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | -------------- | -------- |","lastModifiedDate":"2021-09-28"},{"lineNumber":278,"author":{"gitId":"hernpiblo"},"content":"| Manager  | log in                                                                                                                | \\-                                                                                     | Administrative | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":279,"author":{"gitId":"hernpiblo"},"content":"|          | View specific table capacity                                                                                          | I can assign the correct group to the correct table                                    | Administrative | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":280,"author":{"gitId":"hernpiblo"},"content":"|          | Update table availability                                                                                             | I can ensure that people will not assign any more customers to that table              | Administrative | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":281,"author":{"gitId":"hernpiblo"},"content":"|          | Check table availability                                                                                              | I can assign a new group to the table                                                  | Administrative | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":282,"author":{"gitId":"hernpiblo"},"content":"|          | Add reservations (number of people, time, reserve table availability)                                                 | \\-                                                                                     | Customer       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":283,"author":{"gitId":"hernpiblo"},"content":"|          | Check if a particular timeslot is available for reservation                                                           | Organise the customer\u0027s reservation slots                                              | Customer       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":284,"author":{"gitId":"hernpiblo"},"content":"|          | Add/View/Change/Delete particulars for customer(number, initials, allergies, special requests, number of people etc.) | I can contact the customers and also provide them with personalised dining experiences | Customer       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":285,"author":{"gitId":"hernpiblo"},"content":"|          | View the amount of unclaimed loyalty points a customer has                                                            | I can give them the option of redeeming the points for a reward                        | Customer       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":286,"author":{"gitId":"hernpiblo"},"content":"|          | Change the amount of loyalty points a customer has                                                                    | We can track the amount of loyalty points a customer has                               | Customer       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":287,"author":{"gitId":"hernpiblo"},"content":"|          | View reservations on a particular day                                                                                 | manage the reservations better                                                         | Customer       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":288,"author":{"gitId":"hernpiblo"},"content":"|          | Add customers to waiting list                                                                                         | Manage walk in customers                                                               | Customer       | Low      |","lastModifiedDate":"2021-09-28"},{"lineNumber":289,"author":{"gitId":"hernpiblo"},"content":"|          | Add waiting list customers particulars                                                                                | Organise walk in customers turn to enter the restaurant                                | Customer       | Low      |","lastModifiedDate":"2021-09-28"},{"lineNumber":290,"author":{"gitId":"hernpiblo"},"content":"|          | View customer\u0027s special payment method(vouchers)                                                                      | I can keep track of finances correctly                                                 | Customer       | Low      |","lastModifiedDate":"2021-09-28"},{"lineNumber":291,"author":{"gitId":"hernpiblo"},"content":"|          | Add/View/Change/Delete employees\u0027 personal information                                                                | \\-                                                                                     | Employee       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":292,"author":{"gitId":"hernpiblo"},"content":"|          | View/Change the number of leaves remaining a particular employee has                                                  | I can ensure he is only claiming leaves that he is entitled to                         | Employee       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":293,"author":{"gitId":"hernpiblo"},"content":"|          | View/Change who is supposed to be on shift today                                                                      | I know who is turning up for work today                                                | Employee       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":294,"author":{"gitId":"hernpiblo"},"content":"|          | View/Change who is supposed to be on shift this week                                                                  | I am aware of the week\u0027s scheduling                                                    | Employee       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":295,"author":{"gitId":"hernpiblo"},"content":"|          | View/Change who is supposed to be on shift this month                                                                 | I know who is turning up for work this month                                           | Employee       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":296,"author":{"gitId":"hernpiblo"},"content":"|          | View work shifts that have yet to be filled                                                                           | I can assign employees in to fill the manpower needs                                   | Employee       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":297,"author":{"gitId":"hernpiblo"},"content":"|          | Add employees to available slots in a work shift                                                                      | there would be no lack of personnel                                                    | Employee       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":298,"author":{"gitId":"hernpiblo"},"content":"|          | View/Change the monthly salary for a particular employee                                                              | I know if he is earning too much or too little                                         | Employee       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":299,"author":{"gitId":"hernpiblo"},"content":"|          | View/Change the job type for a particular employee (full time, part time etc)                                         | I know his payout scheme and if he deserves his pay                                    | Employee       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":300,"author":{"gitId":"hernpiblo"},"content":"|          | View which shifts a particular employee is working in a week                                                          | I know when he should be turning up                                                    | Employee       | Low      |","lastModifiedDate":"2021-09-28"},{"lineNumber":301,"author":{"gitId":"hernpiblo"},"content":"|          | Add observations of an employee during a shift                                                                        | I can review them with him/her afterwards                                              | Employee       | Low      |","lastModifiedDate":"2021-09-28"},{"lineNumber":302,"author":{"gitId":"hernpiblo"},"content":"|          | View/Change number of hours worked by a particular employee per period                                                | I can reward employees (employee of the month)                                         | Employee       | Low      |","lastModifiedDate":"2021-09-28"},{"lineNumber":303,"author":{"gitId":"hernpiblo"},"content":"|          | Add/View/Update/Delete supplier particular(name, contact info, food type)                                             | \\-                                                                                     | Supplier       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":304,"author":{"gitId":"hernpiblo"},"content":"|          | View all suppliers delivering today                                                                                   | I can know who to expect today                                                         | Supplier       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":305,"author":{"gitId":"hernpiblo"},"content":"|          | View all suppliers delivering this week                                                                               | I can know who to expect this week                                                     | Supplier       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":306,"author":{"gitId":"hernpiblo"},"content":"|          | View all deliveries for a particular supplier                                                                         | I can know the deliveries made by the supplier                                         | Supplier       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":307,"author":{"gitId":"hernpiblo"},"content":"|          | Add/View/Update/Delete delivery datetime by a particular supplier                                                     | I know what deliveries i will have for what time                                       | Supplier       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":308,"author":{"gitId":"hernpiblo"},"content":"|          | View status of deliveries                                                                                             | I know which delivies have been completed and which are outstanding                    | Supplier       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":309,"author":{"gitId":"hernpiblo"},"content":"|          | Update deliveries as done                                                                                             | I won\u0027t accidentally wait for deliveries that have already been completed              | Supplier       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":310,"author":{"gitId":"hernpiblo"},"content":"|          | View past deliveries                                                                                                  | I can keep a receipt of the deliveries made in a specific period                       | Supplier       | High     |","lastModifiedDate":"2021-09-28"},{"lineNumber":311,"author":{"gitId":"hernpiblo"},"content":"|          | View all suppliers by food type                                                                                       | I can know which supplier i have for a particular food type                            | Supplier       | Low      |","lastModifiedDate":"2021-09-28"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"Javiier-pzk"},"content":"(For all use cases below, the **System** is the `RHRH` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-09-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"chetwinlow"},"content":"**Use case (UC01): Add a Customer**","lastModifiedDate":"2021-09-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"chetwinlow"},"content":"1. User keys in basic information shared among different classes of people like **name, email, phone number**.","lastModifiedDate":"2021-09-29"},{"lineNumber":324,"author":{"gitId":"chetwinlow"},"content":"2. RHRH prompts the user to enter the class of the person being entered into the system.","lastModifiedDate":"2021-09-29"},{"lineNumber":325,"author":{"gitId":"chetwinlow"},"content":"3. User enters the keyword corresponding to the customer class.","lastModifiedDate":"2021-09-29"},{"lineNumber":326,"author":{"gitId":"chetwinlow"},"content":"4. RHRH prompts the user to enter the following optional customer-specific information 1 at a time:","lastModifiedDate":"2021-09-29"},{"lineNumber":327,"author":{"gitId":"chetwinlow"},"content":"   1. Customer ID","lastModifiedDate":"2021-09-29"},{"lineNumber":328,"author":{"gitId":"chetwinlow"},"content":"   2. Loyalty points","lastModifiedDate":"2021-09-29"},{"lineNumber":329,"author":{"gitId":"chetwinlow"},"content":"   3. Allergies","lastModifiedDate":"2021-09-29"},{"lineNumber":330,"author":{"gitId":"chetwinlow"},"content":"   4. Special request","lastModifiedDate":"2021-09-29"},{"lineNumber":331,"author":{"gitId":"chetwinlow"},"content":"5. Upon entering the last customer-specific information, the customer will be added successfully.","lastModifiedDate":"2021-09-29"},{"lineNumber":332,"author":{"gitId":"chetwinlow"},"content":"Use case ends","lastModifiedDate":"2021-09-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"chetwinlow"},"content":"* 1a1. RHRH requests for the format to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":337,"author":{"gitId":"chetwinlow"},"content":"     * 1a2. User enters the command again. \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"chetwinlow"},"content":"     Steps 1a1 - 1a2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"chetwinlow"},"content":"     Use case resumes from step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":343,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":344,"author":{"gitId":"chetwinlow"},"content":" * 1b. RHRH detects missing details in the command entered.","lastModifiedDate":"2021-09-29"},{"lineNumber":345,"author":{"gitId":"chetwinlow"},"content":"     * 1b1. RHRH requests for the missing details to be filled in.","lastModifiedDate":"2021-09-29"},{"lineNumber":346,"author":{"gitId":"chetwinlow"},"content":"     * 1b2. User enters missing data.","lastModifiedDate":"2021-09-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"chetwinlow"},"content":"     Steps 1b1 - 1b2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"-"},"content":"     Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"     ","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":354,"author":{"gitId":"chetwinlow"},"content":" * 1c. RHRH detects an incorrect format for the email/phone number entered. ","lastModifiedDate":"2021-09-29"},{"lineNumber":355,"author":{"gitId":"chetwinlow"},"content":"     * 1c1. RHRH requests for the format to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":356,"author":{"gitId":"chetwinlow"},"content":"     * 1c2. User enters the command again.","lastModifiedDate":"2021-09-29"},{"lineNumber":357,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":358,"author":{"gitId":"chetwinlow"},"content":"     Steps 1c1 - 1c2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":359,"author":{"gitId":"chetwinlow"},"content":"\t    ","lastModifiedDate":"2021-09-29"},{"lineNumber":360,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":361,"author":{"gitId":"chetwinlow"},"content":"     Use case resumes from step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":362,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":363,"author":{"gitId":"chetwinlow"},"content":" * 3a. RHRH detects an invalid class entered. ","lastModifiedDate":"2021-09-29"},{"lineNumber":364,"author":{"gitId":"chetwinlow"},"content":"   * 3a1. RHRH requests for the class to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":365,"author":{"gitId":"chetwinlow"},"content":"   * 3a2. User enters the class again.","lastModifiedDate":"2021-09-29"},{"lineNumber":366,"author":{"gitId":"chetwinlow"},"content":"\t","lastModifiedDate":"2021-09-29"},{"lineNumber":367,"author":{"gitId":"chetwinlow"},"content":"   Steps 3a1 - 3a2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":368,"author":{"gitId":"chetwinlow"},"content":"\t","lastModifiedDate":"2021-09-29"},{"lineNumber":369,"author":{"gitId":"chetwinlow"},"content":" ","lastModifiedDate":"2021-09-29"},{"lineNumber":370,"author":{"gitId":"chetwinlow"},"content":"    Use case resumes from step 4.","lastModifiedDate":"2021-09-29"},{"lineNumber":371,"author":{"gitId":"chetwinlow"},"content":"    ","lastModifiedDate":"2021-09-29"},{"lineNumber":372,"author":{"gitId":"chetwinlow"},"content":"**Use case (UC02): Add a Supplier**","lastModifiedDate":"2021-09-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":376,"author":{"gitId":"chetwinlow"},"content":"1. User keys in basic information shared among different classes of people like **name, email, phone number**.","lastModifiedDate":"2021-09-29"},{"lineNumber":377,"author":{"gitId":"chetwinlow"},"content":"2. RHRH prompts the user to enter the class of the person being entered into the system.","lastModifiedDate":"2021-09-29"},{"lineNumber":378,"author":{"gitId":"chetwinlow"},"content":"3. User enters the keyword corresponding to the supplier class.","lastModifiedDate":"2021-09-29"},{"lineNumber":379,"author":{"gitId":"chetwinlow"},"content":"4. RHRH prompts the user to enter the following supplier-specific information 1 at a time:","lastModifiedDate":"2021-09-29"},{"lineNumber":380,"author":{"gitId":"chetwinlow"},"content":"   1. Supplier ID","lastModifiedDate":"2021-09-29"},{"lineNumber":381,"author":{"gitId":"chetwinlow"},"content":"   2. Type of supply ","lastModifiedDate":"2021-09-29"},{"lineNumber":382,"author":{"gitId":"chetwinlow"},"content":"5. Upon entering the last supplier-specific information, the supplier will be added successfully.","lastModifiedDate":"2021-09-29"},{"lineNumber":383,"author":{"gitId":"chetwinlow"},"content":"Use case ends","lastModifiedDate":"2021-09-29"},{"lineNumber":384,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":385,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":386,"author":{"gitId":"chetwinlow"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":387,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":388,"author":{"gitId":"chetwinlow"},"content":"* 1a. RHRH detects an incorrect format command entered.","lastModifiedDate":"2021-09-29"},{"lineNumber":389,"author":{"gitId":"chetwinlow"},"content":"     * 1a1. RHRH requests for the format to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":390,"author":{"gitId":"chetwinlow"},"content":"     * 1a2. User enters the command again. \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":391,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":392,"author":{"gitId":"chetwinlow"},"content":"     Steps 1a1 - 1a2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":393,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":394,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":395,"author":{"gitId":"chetwinlow"},"content":"     Use case resumes from step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":396,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":397,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":398,"author":{"gitId":"chetwinlow"},"content":" * 1b. RHRH detects missing details in the command entered.","lastModifiedDate":"2021-09-29"},{"lineNumber":399,"author":{"gitId":"chetwinlow"},"content":"     * 1b1. RHRH requests for the missing details to be filled in.","lastModifiedDate":"2021-09-29"},{"lineNumber":400,"author":{"gitId":"chetwinlow"},"content":"     * 1b2. User enters missing data.","lastModifiedDate":"2021-09-29"},{"lineNumber":401,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":402,"author":{"gitId":"chetwinlow"},"content":"     Steps 1b1 - 1b2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":403,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":404,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":405,"author":{"gitId":"chetwinlow"},"content":"     Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":406,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":407,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":408,"author":{"gitId":"chetwinlow"},"content":" * 1c. RHRH detects an incorrect format for the email/phone number entered. ","lastModifiedDate":"2021-09-29"},{"lineNumber":409,"author":{"gitId":"chetwinlow"},"content":"     * 1c1. RHRH requests for the format to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":410,"author":{"gitId":"chetwinlow"},"content":"     * 1c2. User enters the command again.","lastModifiedDate":"2021-09-29"},{"lineNumber":411,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":412,"author":{"gitId":"chetwinlow"},"content":"     Steps 1c1 - 1c2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":413,"author":{"gitId":"chetwinlow"},"content":"\t    ","lastModifiedDate":"2021-09-29"},{"lineNumber":414,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":415,"author":{"gitId":"chetwinlow"},"content":"     Use case resumes from step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":416,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":417,"author":{"gitId":"chetwinlow"},"content":" * 3a. RHRH detects an invalid class entered. ","lastModifiedDate":"2021-09-29"},{"lineNumber":418,"author":{"gitId":"chetwinlow"},"content":"   * 3a1. RHRH requests for the class to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":419,"author":{"gitId":"chetwinlow"},"content":"   * 3a2. User enters the class again.","lastModifiedDate":"2021-09-29"},{"lineNumber":420,"author":{"gitId":"chetwinlow"},"content":"\t","lastModifiedDate":"2021-09-29"},{"lineNumber":421,"author":{"gitId":"chetwinlow"},"content":"   Steps 3a1 - 3a2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":422,"author":{"gitId":"chetwinlow"},"content":"\t","lastModifiedDate":"2021-09-29"},{"lineNumber":423,"author":{"gitId":"chetwinlow"},"content":" ","lastModifiedDate":"2021-09-29"},{"lineNumber":424,"author":{"gitId":"chetwinlow"},"content":"    Use case resumes from step 4.","lastModifiedDate":"2021-09-29"},{"lineNumber":425,"author":{"gitId":"chetwinlow"},"content":"    ","lastModifiedDate":"2021-09-29"},{"lineNumber":426,"author":{"gitId":"chetwinlow"},"content":"**Use case (UC03): Add an Employee**","lastModifiedDate":"2021-09-29"},{"lineNumber":427,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":428,"author":{"gitId":"chetwinlow"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":429,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":430,"author":{"gitId":"chetwinlow"},"content":"1. User keys in basic information shared among different classes of people like **name, email, phone number**.","lastModifiedDate":"2021-09-29"},{"lineNumber":431,"author":{"gitId":"chetwinlow"},"content":"2. RHRH prompts the user to enter the class of the person being entered into the system.","lastModifiedDate":"2021-09-29"},{"lineNumber":432,"author":{"gitId":"chetwinlow"},"content":"3. User enters the keyword corresponding to the employee class.","lastModifiedDate":"2021-09-29"},{"lineNumber":433,"author":{"gitId":"chetwinlow"},"content":"4. RHRH prompts the user to enter the following employee-specific information 1 at a time:","lastModifiedDate":"2021-09-29"},{"lineNumber":434,"author":{"gitId":"chetwinlow"},"content":"   1. Employee ID","lastModifiedDate":"2021-09-29"},{"lineNumber":435,"author":{"gitId":"chetwinlow"},"content":"   2. Employment type","lastModifiedDate":"2021-09-29"},{"lineNumber":436,"author":{"gitId":"chetwinlow"},"content":"   3. Monthly salary","lastModifiedDate":"2021-09-29"},{"lineNumber":437,"author":{"gitId":"chetwinlow"},"content":"5. Upon entering the last employee-specific information, the employee will be added successfully.","lastModifiedDate":"2021-09-29"},{"lineNumber":438,"author":{"gitId":"chetwinlow"},"content":"Use case ends","lastModifiedDate":"2021-09-29"},{"lineNumber":439,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":440,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":441,"author":{"gitId":"chetwinlow"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":442,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":443,"author":{"gitId":"chetwinlow"},"content":"* 1a. RHRH detects an incorrect format command entered.","lastModifiedDate":"2021-09-29"},{"lineNumber":444,"author":{"gitId":"chetwinlow"},"content":"     * 1a1. RHRH requests for the format to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":445,"author":{"gitId":"chetwinlow"},"content":"     * 1a2. User enters the command again. \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":447,"author":{"gitId":"chetwinlow"},"content":"     Steps 1a1 - 1a2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":448,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":449,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":450,"author":{"gitId":"chetwinlow"},"content":"     Use case resumes from step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":451,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":452,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":453,"author":{"gitId":"chetwinlow"},"content":" * 1b. RHRH detects missing details in the command entered.","lastModifiedDate":"2021-09-29"},{"lineNumber":454,"author":{"gitId":"chetwinlow"},"content":"     * 1b1. RHRH requests for the missing details to be filled in.","lastModifiedDate":"2021-09-29"},{"lineNumber":455,"author":{"gitId":"chetwinlow"},"content":"     * 1b2. User enters missing data.","lastModifiedDate":"2021-09-29"},{"lineNumber":456,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":457,"author":{"gitId":"chetwinlow"},"content":"     Steps 1b1 - 1b2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":458,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":459,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":460,"author":{"gitId":"chetwinlow"},"content":"     Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":461,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":462,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":463,"author":{"gitId":"chetwinlow"},"content":" * 1c. RHRH detects an incorrect format for the email/phone number entered. ","lastModifiedDate":"2021-09-29"},{"lineNumber":464,"author":{"gitId":"chetwinlow"},"content":"     * 1c1. RHRH requests for the format to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":465,"author":{"gitId":"chetwinlow"},"content":"     * 1c2. User enters the command again.","lastModifiedDate":"2021-09-29"},{"lineNumber":466,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":467,"author":{"gitId":"chetwinlow"},"content":"     Steps 1c1 - 1c2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":468,"author":{"gitId":"chetwinlow"},"content":"\t    ","lastModifiedDate":"2021-09-29"},{"lineNumber":469,"author":{"gitId":"chetwinlow"},"content":"     ","lastModifiedDate":"2021-09-29"},{"lineNumber":470,"author":{"gitId":"chetwinlow"},"content":"     Use case resumes from step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":471,"author":{"gitId":"chetwinlow"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":472,"author":{"gitId":"chetwinlow"},"content":" * 3a.  RHRH detects an invalid class entered. ","lastModifiedDate":"2021-09-29"},{"lineNumber":473,"author":{"gitId":"chetwinlow"},"content":"   * 3a1. RHRH requests for the class to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":474,"author":{"gitId":"chetwinlow"},"content":"   * 3a2. User enters the class again.","lastModifiedDate":"2021-09-29"},{"lineNumber":475,"author":{"gitId":"chetwinlow"},"content":"\t","lastModifiedDate":"2021-09-29"},{"lineNumber":476,"author":{"gitId":"chetwinlow"},"content":"   Steps 3a1 - 3a2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":477,"author":{"gitId":"chetwinlow"},"content":"\t","lastModifiedDate":"2021-09-29"},{"lineNumber":478,"author":{"gitId":"chetwinlow"},"content":" ","lastModifiedDate":"2021-09-29"},{"lineNumber":479,"author":{"gitId":"chetwinlow"},"content":"    Use case resumes from step 4.","lastModifiedDate":"2021-09-29"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"Javiier-pzk"},"content":"**Use case (UC04): Search for reservation availability**","lastModifiedDate":"2021-09-30"},{"lineNumber":482,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":483,"author":{"gitId":"pbthang"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":484,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":485,"author":{"gitId":"pbthang"},"content":"1. User requests to search for reservation availability at a date and time.","lastModifiedDate":"2021-09-29"},{"lineNumber":486,"author":{"gitId":"pbthang"},"content":"2. RHRH shows the availability for the indicated date time.  ","lastModifiedDate":"2021-09-29"},{"lineNumber":487,"author":{"gitId":"pbthang"},"content":"   Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":488,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":489,"author":{"gitId":"pbthang"},"content":"**Extensions:**","lastModifiedDate":"2021-09-29"},{"lineNumber":490,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":491,"author":{"gitId":"pbthang"},"content":"* 1a. User requests to search for reservation availability at a date.","lastModifiedDate":"2021-09-29"},{"lineNumber":492,"author":{"gitId":"pbthang"},"content":"    * 1a1. RHRH shows all the available slots on the indicated date.","lastModifiedDate":"2021-09-29"},{"lineNumber":493,"author":{"gitId":"pbthang"},"content":"      ","lastModifiedDate":"2021-09-29"},{"lineNumber":494,"author":{"gitId":"pbthang"},"content":"    Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":495,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":496,"author":{"gitId":"Javiier-pzk"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":497,"author":{"gitId":"pbthang"},"content":"* 1b. User requests to search for reservation availability at a time.","lastModifiedDate":"2021-09-29"},{"lineNumber":498,"author":{"gitId":"pbthang"},"content":"    * 1b1. RHRH shows the availability for the indicated time today","lastModifiedDate":"2021-09-29"},{"lineNumber":499,"author":{"gitId":"pbthang"},"content":"      ","lastModifiedDate":"2021-09-29"},{"lineNumber":500,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":501,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":502,"author":{"gitId":"Javiier-pzk"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":503,"author":{"gitId":"pbthang"},"content":"* 1c. RHRH detects information missing from the command entered.","lastModifiedDate":"2021-09-29"},{"lineNumber":504,"author":{"gitId":"pbthang"},"content":"    * 1c1. RHRH requests for the missing details to be filled in.","lastModifiedDate":"2021-09-29"},{"lineNumber":505,"author":{"gitId":"pbthang"},"content":"    * 1c2. User enters missing data.","lastModifiedDate":"2021-09-29"},{"lineNumber":506,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":507,"author":{"gitId":"pbthang"},"content":"    Steps 1c1 - 1c2 are repeated until the date/time is correctly formatted.","lastModifiedDate":"2021-09-30"},{"lineNumber":508,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":509,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":510,"author":{"gitId":"pbthang"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":511,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":512,"author":{"gitId":"pbthang"},"content":"* 1d. RHRH detects an incorrect format of date/time.","lastModifiedDate":"2021-09-29"},{"lineNumber":513,"author":{"gitId":"pbthang"},"content":"    * 1d1. RHRH requests for the format to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":514,"author":{"gitId":"pbthang"},"content":"    * 1d2. User enters the command again.","lastModifiedDate":"2021-09-29"},{"lineNumber":515,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":516,"author":{"gitId":"pbthang"},"content":"    Steps 1d1 - 1d2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":517,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":518,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":519,"author":{"gitId":"pbthang"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":520,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":521,"author":{"gitId":"Javiier-pzk"},"content":"**Use case (UC05): Add a reservation**","lastModifiedDate":"2021-09-29"},{"lineNumber":522,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"Javiier-pzk"},"content":"1. User keys in reservations details.","lastModifiedDate":"2021-09-29"},{"lineNumber":526,"author":{"gitId":"Javiier-pzk"},"content":"2. RHRH \u003cu\u003efinds the reservation slot based on the date and/or time entered (UC04)\u003c/U\u003e.","lastModifiedDate":"2021-09-29"},{"lineNumber":527,"author":{"gitId":"Javiier-pzk"},"content":"3. RHRH displays all reservation slots on that date and/or time to users.","lastModifiedDate":"2021-09-29"},{"lineNumber":528,"author":{"gitId":"Javiier-pzk"},"content":"4. User selects the reservation slot.","lastModifiedDate":"2021-09-29"},{"lineNumber":529,"author":{"gitId":"Javiier-pzk"},"content":"5. RHRH requests for confirmation on the selected reservation slot.","lastModifiedDate":"2021-09-29"},{"lineNumber":530,"author":{"gitId":"Javiier-pzk"},"content":"6. User confirms.","lastModifiedDate":"2021-09-29"},{"lineNumber":531,"author":{"gitId":"Javiier-pzk"},"content":"7. Reservation is added.","lastModifiedDate":"2021-09-29"},{"lineNumber":532,"author":{"gitId":"Javiier-pzk"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":533,"author":{"gitId":"-"},"content":"Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"Javiier-pzk"},"content":"* 1a. RHRH detects an incorrect format command entered.","lastModifiedDate":"2021-09-29"},{"lineNumber":538,"author":{"gitId":"Javiier-pzk"},"content":"    * 1a1. RHRH requests for the format to be corrected.","lastModifiedDate":"2021-09-29"},{"lineNumber":539,"author":{"gitId":"Javiier-pzk"},"content":"    * 1a2. User enters the command again. \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":540,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"Javiier-pzk"},"content":"    Steps 1a1 - 1a2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":542,"author":{"gitId":"Javiier-pzk"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":543,"author":{"gitId":"Javiier-pzk"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":544,"author":{"gitId":"Javiier-pzk"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":545,"author":{"gitId":"-"},"content":"      ","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"Javiier-pzk"},"content":"* 1b. RHRH detects missing details in the command entered.","lastModifiedDate":"2021-09-29"},{"lineNumber":548,"author":{"gitId":"Javiier-pzk"},"content":"    * 1b1. RHRH requests for the missing details to be filled in.","lastModifiedDate":"2021-09-29"},{"lineNumber":549,"author":{"gitId":"Javiier-pzk"},"content":"    * 1b2. User enters missing data.","lastModifiedDate":"2021-09-29"},{"lineNumber":550,"author":{"gitId":"Javiier-pzk"},"content":"      ","lastModifiedDate":"2021-09-29"},{"lineNumber":551,"author":{"gitId":"Javiier-pzk"},"content":"    Steps 1b1 - 1b2 are repeated until the command is correctly formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":552,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":553,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"Javiier-pzk"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":555,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"Javiier-pzk"},"content":"* 2a. RHRH is unable to find a reservation slot based on the date and/or time entered.","lastModifiedDate":"2021-09-29"},{"lineNumber":557,"author":{"gitId":"Javiier-pzk"},"content":"    * 2a1. RHRH informs the user that the reservation slot is taken.","lastModifiedDate":"2021-09-29"},{"lineNumber":558,"author":{"gitId":"Javiier-pzk"},"content":"    * 2a2. RHRH prompts user to choose another date and/or time.","lastModifiedDate":"2021-09-29"},{"lineNumber":559,"author":{"gitId":"Javiier-pzk"},"content":"    * 2a3. User enters new date and/or time. \u003cbr/\u003e","lastModifiedDate":"2021-09-30"},{"lineNumber":560,"author":{"gitId":"Javiier-pzk"},"content":"      ","lastModifiedDate":"2021-09-29"},{"lineNumber":561,"author":{"gitId":"Javiier-pzk"},"content":"    Steps 2a1 - 2a2 are repeated until there is a reservation slot available.","lastModifiedDate":"2021-09-29"},{"lineNumber":562,"author":{"gitId":"Javiier-pzk"},"content":"  ","lastModifiedDate":"2021-09-29"},{"lineNumber":563,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":564,"author":{"gitId":"Javiier-pzk"},"content":"    Use case resumes from step 3.","lastModifiedDate":"2021-09-29"},{"lineNumber":565,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":566,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2021-09-30"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":568,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":573,"author":{"gitId":"clementkfj"},"content":"4.  Should not be stored in a **Database Management system**(DBMS).","lastModifiedDate":"2021-09-29"},{"lineNumber":574,"author":{"gitId":"clementkfj"},"content":"5.  Should be stored *locally* and can be *manually* edited by the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":575,"author":{"gitId":"clementkfj"},"content":"6.  Program should be delivered to users in a single **JAR** file.","lastModifiedDate":"2021-09-29"},{"lineNumber":576,"author":{"gitId":"clementkfj"},"content":"7.  Program should be able to run with just a *double-click* and no CLI required.","lastModifiedDate":"2021-09-29"},{"lineNumber":577,"author":{"gitId":"clementkfj"},"content":"8.  Should be runnable on both `32-bit` and `64-bit` processors.","lastModifiedDate":"2021-09-29"},{"lineNumber":578,"author":{"gitId":"clementkfj"},"content":"9.  New users should be able to navigate and use the program effectively.","lastModifiedDate":"2021-09-29"},{"lineNumber":579,"author":{"gitId":"clementkfj"},"content":"10.  Software should not exceed **100MB**.","lastModifiedDate":"2021-09-29"},{"lineNumber":580,"author":{"gitId":"clementkfj"},"content":"11.  Documents should not exceed **15MB** per file.","lastModifiedDate":"2021-09-29"},{"lineNumber":581,"author":{"gitId":"clementkfj"},"content":"12.  Developer Guide and User Guide should be *PDF-friendly*(no expandable panels, embedded videos, animated GIFs etc.).","lastModifiedDate":"2021-09-29"},{"lineNumber":582,"author":{"gitId":"clementkfj"},"content":"13.  Does not require a server component as the software will not perform automated tasks.","lastModifiedDate":"2021-09-30"},{"lineNumber":583,"author":{"gitId":"clementkfj"},"content":"14.  Should only allow use by **authorized** personnel.","lastModifiedDate":"2021-09-30"},{"lineNumber":584,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":585,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":586,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":587,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":588,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":589,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":590,"author":{"gitId":"hernpiblo"},"content":"* **Contact**: A contact containing details about the particular person","lastModifiedDate":"2021-09-29"},{"lineNumber":591,"author":{"gitId":"hernpiblo"},"content":"* **Customer**: One of the types of contact, used to represent a customer of the restaurant","lastModifiedDate":"2021-09-29"},{"lineNumber":592,"author":{"gitId":"hernpiblo"},"content":"* **Loyalty** points: Points stored by each customer","lastModifiedDate":"2021-09-29"},{"lineNumber":593,"author":{"gitId":"hernpiblo"},"content":"* **Employee**: One of the types of contact, used to represent an employee of the restaurant","lastModifiedDate":"2021-09-29"},{"lineNumber":594,"author":{"gitId":"hernpiblo"},"content":"* **Employment type** : Used to distinguish the different categories of employees (Part-time, Full-time etc.)","lastModifiedDate":"2021-09-29"},{"lineNumber":595,"author":{"gitId":"hernpiblo"},"content":"* **Shift**: Time slot that employee is supposed to be working","lastModifiedDate":"2021-09-29"},{"lineNumber":596,"author":{"gitId":"hernpiblo"},"content":"* **Supplier**: One of the types of contact, used to represent a supplier of the restaurant","lastModifiedDate":"2021-09-29"},{"lineNumber":597,"author":{"gitId":"hernpiblo"},"content":"* **Reservation**: Reservations can be made by customers for a specific timeslot in the restaurant","lastModifiedDate":"2021-09-29"},{"lineNumber":598,"author":{"gitId":"hernpiblo"},"content":"* **Waiting list**: List of customers who are unable to get a reservation due to maxed-out reservations","lastModifiedDate":"2021-09-29"},{"lineNumber":599,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":600,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":601,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":602,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":603,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":604,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":605,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":606,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":607,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":608,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":609,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":610,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":611,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":612,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":613,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":614,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":615,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":616,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":617,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":618,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":619,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":620,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":621,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":622,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":623,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":624,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":625,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":626,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":627,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":628,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":629,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":630,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":631,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":632,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":633,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":634,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":635,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":636,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":637,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":638,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":639,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":640,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":641,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":642,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":643,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":644,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":645,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":646,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":647,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":648,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":649,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":650,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":651,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Javiier-pzk":34,"clementkfj":11,"chetwinlow":143,"hernpiblo":50,"pbthang":35,"-":378}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"hernpiblo"},"content":"Restaurant HR Helper (RHRH) is a **desktop app for managing restaurant contacts including employees, suppliers and customers, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, RHRH can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"chetwinlow"},"content":"2. Download the latest `rhrh.jar` from [here]().","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"hernpiblo"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your RHRH.","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"hernpiblo"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"hernpiblo"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"hernpiblo"},"content":"   * `add customer` : Add a customer","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"hernpiblo"},"content":"     * Format: `add customer n/NAME p/PHONE_NUMBER e/EMAIL`","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"hernpiblo"},"content":"     * Example: `add customer n/John Doe p/87654321 e/e12345@u.nus.edu`","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"hernpiblo"},"content":"     * Note: customer specific question prompts will be triggered","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"hernpiblo"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"hernpiblo"},"content":"  e.g. in `add customer n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Items with `â€¦`â€‹ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]â€¦â€‹` can be used as `Â ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"hernpiblo"},"content":"### Viewing help [COMING SOON]: `help`","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"hernpiblo"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"chetwinlow"},"content":"![help message]()","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"hernpiblo"},"content":"### Adding a customer: `add customer`","lastModifiedDate":"2021-09-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"hernpiblo"},"content":"Adds a customer to RHRH.","lastModifiedDate":"2021-09-28"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"hernpiblo"},"content":"Format: `add customer n/NAME p/PHONE_NUMBER e/EMAIL`","lastModifiedDate":"2021-09-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"hernpiblo"},"content":"Examples: `add customer n/John Doe p/87654321 e/e12345@u.nus.edu`","lastModifiedDate":"2021-09-28"},{"lineNumber":78,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":79,"author":{"gitId":"hernpiblo"},"content":"Note: customer specific question prompts will be triggered","lastModifiedDate":"2021-09-28"},{"lineNumber":80,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":81,"author":{"gitId":"hernpiblo"},"content":"### Adding an employee: `add employee`","lastModifiedDate":"2021-09-28"},{"lineNumber":82,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":83,"author":{"gitId":"hernpiblo"},"content":"Adds an employee to RHRH.","lastModifiedDate":"2021-09-28"},{"lineNumber":84,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":85,"author":{"gitId":"hernpiblo"},"content":"Format: `add employee n/NAME p/PHONE_NUMBER e/EMAIL`","lastModifiedDate":"2021-09-28"},{"lineNumber":86,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":87,"author":{"gitId":"hernpiblo"},"content":"Examples: `add employee n/John Doe p/87654321 e/e12345@u.nus.edu`","lastModifiedDate":"2021-09-28"},{"lineNumber":88,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":89,"author":{"gitId":"hernpiblo"},"content":"Note: employee specific question prompts will be triggered","lastModifiedDate":"2021-09-28"},{"lineNumber":90,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":91,"author":{"gitId":"hernpiblo"},"content":"### Adding a supplier: `add supplier`","lastModifiedDate":"2021-09-28"},{"lineNumber":92,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":93,"author":{"gitId":"hernpiblo"},"content":"Adds a supplier to RHRH.","lastModifiedDate":"2021-09-28"},{"lineNumber":94,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":95,"author":{"gitId":"hernpiblo"},"content":"Format: `add supplier n/NAME p/PHONE_NUMBER e/EMAIL`","lastModifiedDate":"2021-09-28"},{"lineNumber":96,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":97,"author":{"gitId":"hernpiblo"},"content":"Examples: `add supplier n/John Doe p/87654321 e/e12345@u.nus.edu`","lastModifiedDate":"2021-09-28"},{"lineNumber":98,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":99,"author":{"gitId":"hernpiblo"},"content":"Note: supplier specific question prompts will be triggered","lastModifiedDate":"2021-09-28"},{"lineNumber":100,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":101,"author":{"gitId":"hernpiblo"},"content":"### Search a reservation\u0027s availability: `find -r`","lastModifiedDate":"2021-09-28"},{"lineNumber":102,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":103,"author":{"gitId":"hernpiblo"},"content":"Search a reservation\u0027s availability using the given date/time","lastModifiedDate":"2021-09-28"},{"lineNumber":104,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":105,"author":{"gitId":"hernpiblo"},"content":"Format:","lastModifiedDate":"2021-09-28"},{"lineNumber":106,"author":{"gitId":"hernpiblo"},"content":"* `find -r d/DATE t/TIME`","lastModifiedDate":"2021-09-28"},{"lineNumber":107,"author":{"gitId":"hernpiblo"},"content":"* `find -r t/TIME`","lastModifiedDate":"2021-09-28"},{"lineNumber":108,"author":{"gitId":"hernpiblo"},"content":"* `find -r d/DATE`","lastModifiedDate":"2021-09-28"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"hernpiblo"},"content":"* `find -r 2021-09-19 18:00`","lastModifiedDate":"2021-09-28"},{"lineNumber":112,"author":{"gitId":"hernpiblo"},"content":"* `find -r 18:00`","lastModifiedDate":"2021-09-28"},{"lineNumber":113,"author":{"gitId":"hernpiblo"},"content":"* `find -r 2021-09-19`","lastModifiedDate":"2021-09-28"},{"lineNumber":114,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":115,"author":{"gitId":"hernpiblo"},"content":"### Create a reservation: `reserve` ","lastModifiedDate":"2021-09-28"},{"lineNumber":116,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":117,"author":{"gitId":"hernpiblo"},"content":"Format: `reserve d/DATE t/TIME  n/NAME p/PHONE_NUMBER`","lastModifiedDate":"2021-09-28"},{"lineNumber":118,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":119,"author":{"gitId":"hernpiblo"},"content":"Examples: `reserve d/2021-09-19 t/1800 n/John Doe p/87654321`","lastModifiedDate":"2021-09-28"},{"lineNumber":120,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":121,"author":{"gitId":"hernpiblo"},"content":"Note: System will reject if time slot is not available","lastModifiedDate":"2021-09-28"},{"lineNumber":122,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":123,"author":{"gitId":"hernpiblo"},"content":"---","lastModifiedDate":"2021-09-28"},{"lineNumber":124,"author":{"gitId":"hernpiblo"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":125,"author":{"gitId":"hernpiblo"},"content":"## These features will be coming soon!","lastModifiedDate":"2021-09-28"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"### Listing all persons : `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"hernpiblo"},"content":"Shows a list of all persons in RHRH.","lastModifiedDate":"2021-09-28"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"hernpiblo"},"content":"Edits an existing person in RHRH.","lastModifiedDate":"2021-09-28"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹`","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* You can remove all the personâ€™s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"hernpiblo"},"content":"Deletes the specified person from RHRH.","lastModifiedDate":"2021-09-28"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"hernpiblo"},"content":"Clears all entries from RHRH.","lastModifiedDate":"2021-09-28"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"hernpiblo"},"content":"RHRH data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-09-28"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":199,"author":{"gitId":"chetwinlow"},"content":"RHRH data are saved as a JSON file `[JAR file location]/data/rhrh.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-10-01"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":202,"author":{"gitId":"hernpiblo"},"content":"If your changes to the data file makes its format invalid, RHRH will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-09-28"},{"lineNumber":203,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"hernpiblo"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous RHRH home folder.","lastModifiedDate":"2021-09-28"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"hernpiblo"},"content":"**Add Customer** | `add customer n/NAME p/PHONE_NUMBER e/EMAIL` \u003cbr\u003e e.g. `add customer n/John Doe p/87654321 e/e12345@u.nus.edu`","lastModifiedDate":"2021-09-28"},{"lineNumber":223,"author":{"gitId":"hernpiblo"},"content":"**Add Employee** | `add employee n/NAME p/PHONE_NUMBER e/EMAIL` \u003cbr\u003e e.g. `add employee n/John Doe p/87654321 e/e12345@u.nus.edu`","lastModifiedDate":"2021-09-28"},{"lineNumber":224,"author":{"gitId":"hernpiblo"},"content":"**Add supplier** | `add supplier n/NAME p/PHONE_NUMBER e/EMAIL` \u003cbr\u003e e.g. `add supplier n/John Doe p/87654321 e/e12345@u.nus.edu`","lastModifiedDate":"2021-09-28"},{"lineNumber":225,"author":{"gitId":"hernpiblo"},"content":"**Check a reservation availability** | `find -r d/DATE t/TIME`, `find -r t/TIME`, `find -r d/DATE` \u003cbr\u003e e.g. `find -r 2021-09-19 18:00`, `find -r 18:00` `find -r 2021-09-19`","lastModifiedDate":"2021-09-28"},{"lineNumber":226,"author":{"gitId":"hernpiblo"},"content":"**Create reservation** | `reserve d/DATE t/TIME  n/NAME p/PHONE_NUMBER` \u003cbr\u003e e.g. `reserve d/2021-09-19 t/1800 n/John Doe p/87654321`","lastModifiedDate":"2021-09-28"},{"lineNumber":227,"author":{"gitId":"hernpiblo"},"content":"**Clear [COMING SOON]** | `clear`","lastModifiedDate":"2021-09-28"},{"lineNumber":228,"author":{"gitId":"hernpiblo"},"content":"**Delete [COMING SOON]** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2021-09-28"},{"lineNumber":229,"author":{"gitId":"hernpiblo"},"content":"**Edit [COMING SOON]** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2021-09-28"},{"lineNumber":230,"author":{"gitId":"hernpiblo"},"content":"**Find [COMING SOON]** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2021-09-28"},{"lineNumber":231,"author":{"gitId":"hernpiblo"},"content":"**List [COMING SOON]** | `list`","lastModifiedDate":"2021-09-28"},{"lineNumber":232,"author":{"gitId":"hernpiblo"},"content":"**Help [COMING SOON]** | `help`","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"chetwinlow":3,"hernpiblo":80,"-":149}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"Javiier-pzk"},"content":"title: Restaurant HR Helper (RHRH)","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"Javiier-pzk"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T17-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S1-CS2103T-T17-1/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"Javiier-pzk"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-T17-1/tp/branch/master/graph/badge.svg?token\u003dA0740K9UN0)](https://codecov.io/gh/AY2122S1-CS2103T-T17-1/tp)","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"Javiier-pzk"},"content":"**RHRH is a desktop application developed for restaurant managers to more easily manage their customers, employees and suppliers.**  \u003cbr/\u003e ","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"Javiier-pzk"},"content":"While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"Javiier-pzk"},"content":"* If you are interested in using `RHRH`, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"Javiier-pzk"},"content":"* If you are interested about developing `RHRH`, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Javiier-pzk":7,"-":13}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":37,"author":{"gitId":"pbthang"},"content":"    /** Returns an unmodifiable view of the filtered list of reservations */","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"pbthang"},"content":"    ObservableList\u003cReservation\u003e getFilteredReservations();","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"pbthang":4,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":68,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"pbthang"},"content":"    public ObservableList\u003cReservation\u003e getFilteredReservations() {","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"pbthang"},"content":"        return model.getFilteredReservationList();","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"pbthang":6,"-":81}},{"path":"src/main/java/seedu/address/logic/commands/ReserveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pbthang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"pbthang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"pbthang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"pbthang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"pbthang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"pbthang"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"pbthang"},"content":" * Represents the command to add reservation","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"pbthang"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"pbthang"},"content":"public class ReserveCommand extends Command {","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"pbthang"},"content":"    public static final String COMMAND_WORD \u003d \"reserve\";","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"pbthang"},"content":"    public static final String MESSAGE_USAGE \u003d String.format(","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"pbthang"},"content":"            \"%1$s: add a new reservation with customer\u0027s phone number, number of people and time.\\n\"","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"pbthang"},"content":"            + \"Parameters: NUMBER_OF_PEOPLE %2$sPHONE (must be a positive integer) %3$sTIME\\n\"","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"pbthang"},"content":"            + \"Example: %1$s 2 %2$s98765432 %3$s24/12/2021 1930.\",","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"pbthang"},"content":"            COMMAND_WORD,","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"pbthang"},"content":"            PREFIX_PHONE, PREFIX_TIME","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"pbthang"},"content":"    );","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"pbthang"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New reservation added: %1$s\";","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"pbthang"},"content":"    private Phone phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"pbthang"},"content":"    private int numberOfPeople;","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"pbthang"},"content":"    private LocalDateTime time;","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"pbthang"},"content":"     * Creates a command to add a reservation","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"pbthang"},"content":"    public ReserveCommand(Phone phone, int numberOfPeople, LocalDateTime time) {","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"pbthang"},"content":"        requireAllNonNull(phone, time);","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"pbthang"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"pbthang"},"content":"        this.numberOfPeople \u003d numberOfPeople;","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"pbthang"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"pbthang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"pbthang"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"pbthang"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"pbthang"},"content":"        // TODO: Check the time whether can add or not","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"pbthang"},"content":"        Reservation reservation \u003d new Reservation(phone, numberOfPeople, time);","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"pbthang"},"content":"        model.addReservation(reservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"pbthang"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, reservation));","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"pbthang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"pbthang"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"pbthang"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"pbthang"},"content":"            return true;","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"pbthang"},"content":"        if (!(o instanceof ReserveCommand)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"pbthang"},"content":"            return false;","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"pbthang"},"content":"        ReserveCommand that \u003d (ReserveCommand) o;","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"pbthang"},"content":"        return phone.equals(that.phone)","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"pbthang"},"content":"                \u0026\u0026 numberOfPeople \u003d\u003d that.numberOfPeople","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"pbthang"},"content":"                \u0026\u0026 time.equals(that.time);","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"pbthang"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"pbthang":73}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"pbthang"},"content":"import seedu.address.logic.commands.ReserveCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":72,"author":{"gitId":"pbthang"},"content":"        case ReserveCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"pbthang"},"content":"            return new ReserveCommandParser().parse(arguments);","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"pbthang":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"pbthang"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"at/\");","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"pbthang":1,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"pbthang"},"content":"    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"pbthang"},"content":"    public static final String MESSAGE_INVALID_NUMBER_OF_PEOPLE \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"pbthang"},"content":"            \"Number of people is not a non-zero unsigned integer.\";","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"pbthang"},"content":"    public static final String MESSAGE_INVALID_DATE_TIME_FORMAT \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"pbthang"},"content":"            \"Date time should be in the format of \" + DATE_TIME_FORMATTER.toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":46,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"pbthang"},"content":"     * Parses {@code numIfPeople} into an a non-zero unsigned integer and returns it.","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"pbthang"},"content":"     * Leading and trailing whitespaces will be trimmed","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"pbthang"},"content":"     * @param numOfPeople number of people as a string","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"pbthang"},"content":"     * @return number of people as an integer","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"pbthang"},"content":"     * @throws ParseException if the specified number of people is invalid (not non-zero unsigned integer).","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"pbthang"},"content":"    public static int parseNumberOfPeople(String numOfPeople) throws ParseException {","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"pbthang"},"content":"        int result;","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"pbthang"},"content":"        try {","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"pbthang"},"content":"            result \u003d Integer.parseInt(numOfPeople.trim());","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"pbthang"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"pbthang"},"content":"            throw new ParseException(MESSAGE_INVALID_NUMBER_OF_PEOPLE);","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"pbthang"},"content":"        if (result \u003c\u003d 0) {","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"pbthang"},"content":"            throw new ParseException(MESSAGE_INVALID_NUMBER_OF_PEOPLE);","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"pbthang"},"content":"        return result;","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":154,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":155,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":156,"author":{"gitId":"pbthang"},"content":"     * Parses {@code dateTime} into a {@code LocalDateTime object}","lastModifiedDate":"2021-10-06"},{"lineNumber":157,"author":{"gitId":"pbthang"},"content":"     * @throws ParseException if {@code dateTime} is of invalid format","lastModifiedDate":"2021-10-06"},{"lineNumber":158,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":159,"author":{"gitId":"pbthang"},"content":"    public static LocalDateTime parseDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2021-10-06"},{"lineNumber":160,"author":{"gitId":"pbthang"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2021-10-06"},{"lineNumber":161,"author":{"gitId":"pbthang"},"content":"        String trimmedDateTime \u003d dateTime.trim();","lastModifiedDate":"2021-10-06"},{"lineNumber":162,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":163,"author":{"gitId":"pbthang"},"content":"        LocalDateTime result;","lastModifiedDate":"2021-10-06"},{"lineNumber":164,"author":{"gitId":"pbthang"},"content":"        try {","lastModifiedDate":"2021-10-06"},{"lineNumber":165,"author":{"gitId":"pbthang"},"content":"            result \u003d LocalDateTime.parse(trimmedDateTime, DATE_TIME_FORMATTER);","lastModifiedDate":"2021-10-06"},{"lineNumber":166,"author":{"gitId":"pbthang"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-10-06"},{"lineNumber":167,"author":{"gitId":"pbthang"},"content":"            throw new ParseException(MESSAGE_INVALID_DATE_TIME_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":168,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":169,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":170,"author":{"gitId":"pbthang"},"content":"        return result;","lastModifiedDate":"2021-10-06"},{"lineNumber":171,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"pbthang":48,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/ReserveCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pbthang"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"pbthang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"pbthang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"pbthang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"pbthang"},"content":"import seedu.address.logic.commands.ReserveCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"pbthang"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"pbthang"},"content":"public class ReserveCommandParser implements Parser\u003cReserveCommand\u003e {","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"pbthang"},"content":"    public ReserveCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"pbthang"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"pbthang"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PHONE, PREFIX_TIME);","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"pbthang"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isEmpty()","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"pbthang"},"content":"                || argMultimap.getValue(PREFIX_TIME).isEmpty()","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"pbthang"},"content":"                || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"pbthang"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReserveCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"pbthang"},"content":"        int numberOfPeople \u003d ParserUtil.parseNumberOfPeople(argMultimap.getPreamble());","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"pbthang"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"pbthang"},"content":"        LocalDateTime time \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_TIME).get());","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"pbthang"},"content":"        return new ReserveCommand(phone, numberOfPeople, time);","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"pbthang"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"pbthang":33}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.ReservationList;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":21,"author":{"gitId":"pbthang"},"content":"    private final ReservationList reservations;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":32,"author":{"gitId":"pbthang"},"content":"        reservations \u003d new ReservationList();","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"pbthang"},"content":"    public void setReservations(List\u003cReservation\u003e reservations) {","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"pbthang"},"content":"        this.reservations.setReservations(reservations);","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"pbthang"},"content":"        setReservations(newData.getReservationList());","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"pbthang"},"content":"    //// reservation-level operations","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"pbthang"},"content":"     * Check if {@code reservation} exists in the database","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"pbthang"},"content":"    public boolean hasReservation(Reservation reservation) {","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"pbthang"},"content":"        requireNonNull(reservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"pbthang"},"content":"        return reservations.contains(reservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"pbthang"},"content":"     * Adds a new reservation to the list","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"pbthang"},"content":"    public void addReservation(Reservation reservation) {","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"pbthang"},"content":"        reservations.add(reservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"pbthang"},"content":"     * Replaces the reservation {@code target} in the list with {@code editedReservation}","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"pbthang"},"content":"    public void setReservation(Reservation target, Reservation editedReservation) {","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"pbthang"},"content":"        requireNonNull(editedReservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"pbthang"},"content":"        reservations.setReservation(target, editedReservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"pbthang"},"content":"     * Removes {@code key} from the database","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"pbthang"},"content":"     * {@code key} must exist in the list","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"pbthang"},"content":"    public void removeReservation(Reservation key) {","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"pbthang"},"content":"        reservations.remove(key);","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"pbthang"},"content":"        return String.format(","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"pbthang"},"content":"                \"%d persons, %d reservations\",","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"pbthang"},"content":"                persons.asUnmodifiableObservableList().size(),","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"pbthang"},"content":"                reservations.asUnmodifiableObservableList().size());","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":156,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"pbthang"},"content":"    public ObservableList\u003cReservation\u003e getReservationList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"pbthang"},"content":"        return reservations.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":165,"author":{"gitId":"pbthang"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons)","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"pbthang"},"content":"                \u0026\u0026 reservations.equals(((AddressBook) other).reservations));","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":171,"author":{"gitId":"pbthang"},"content":"        return Objects.hash(persons, reservations);","lastModifiedDate":"2021-10-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"pbthang":56,"-":117}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":9,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"pbthang"},"content":"    Predicate\u003cReservation\u003e PREDICATE_SHOW_ALL_RESERVATIONS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"pbthang"},"content":"     * Returns true if the same reservation exists in the database.","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"pbthang"},"content":"    boolean hasReservation(Reservation reservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"pbthang"},"content":"     * Deletes the given reservation.","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"pbthang"},"content":"     * The reservation must exist in the database.","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"pbthang"},"content":"    void deleteReservation(Reservation target);","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"pbthang"},"content":"     * Adds the given reservation.","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"pbthang"},"content":"    void addReservation(Reservation reservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"pbthang"},"content":"     * Replaces the given reservation {@code target} with {@code editedReservation}.","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"pbthang"},"content":"    void setReservation(Reservation target, Reservation editedReservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":105,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"pbthang"},"content":"     * Returns an unmodifiable view of the filtered reservation list","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"pbthang"},"content":"    ObservableList\u003cReservation\u003e getFilteredReservationList();","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"pbthang"},"content":"     * Updates the filter of the filtered reservation list to filter by the given {@code predicate}","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"pbthang"},"content":"    void updateFilteredReservationList(Predicate\u003cReservation\u003e predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"pbthang":33,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"pbthang"},"content":"    private final FilteredList\u003cReservation\u003e filteredReservations;","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"pbthang"},"content":"        filteredReservations \u003d new FilteredList\u003c\u003e(this.addressBook.getReservationList());","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":118,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"pbthang"},"content":"    public boolean hasReservation(Reservation reservation) {","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"pbthang"},"content":"        requireNonNull(reservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"pbthang"},"content":"        return addressBook.hasReservation(reservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"pbthang"},"content":"    public void deleteReservation(Reservation target) {","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"pbthang"},"content":"        addressBook.removeReservation(target);","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"pbthang"},"content":"    public void addReservation(Reservation reservation) {","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"pbthang"},"content":"        addressBook.addReservation(reservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"pbthang"},"content":"    public void setReservation(Reservation target, Reservation editedReservation) {","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":151,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"pbthang"},"content":"    public ObservableList\u003cReservation\u003e getFilteredReservationList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"pbthang"},"content":"        return filteredReservations;","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":162,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"pbthang"},"content":"    public void updateFilteredReservationList(Predicate\u003cReservation\u003e predicate) {","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"pbthang"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"pbthang"},"content":"        filteredReservations.setPredicate(predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"pbthang":36,"-":151}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"pbthang"},"content":"    ObservableList\u003cReservation\u003e getReservationList();","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"pbthang":2,"-":17}},{"path":"src/main/java/seedu/address/model/reservation/Reservation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pbthang"},"content":"package seedu.address.model.reservation;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"pbthang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"pbthang"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"pbthang"},"content":" * Represents a reservation","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"pbthang"},"content":"public class Reservation {","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"pbthang"},"content":"    private Phone phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"pbthang"},"content":"    private int numberOfPeople;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"pbthang"},"content":"    private LocalDateTime time;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"pbthang"},"content":"     * Creates a reservation","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"pbthang"},"content":"    public Reservation(Phone phone, int numberOfPeople, LocalDateTime time) {","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"pbthang"},"content":"        requireAllNonNull(phone, numberOfPeople, time);","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"pbthang"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"pbthang"},"content":"        this.numberOfPeople \u003d numberOfPeople;","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"pbthang"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"pbthang"},"content":"    public Phone getPhone() {","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"pbthang"},"content":"        return phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"pbthang"},"content":"    public int getNumberOfPeople() {","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"pbthang"},"content":"        return numberOfPeople;","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"pbthang"},"content":"    public LocalDateTime getTime() {","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"pbthang"},"content":"        return time;","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"pbthang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"pbthang"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"pbthang"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"pbthang"},"content":"            return true;","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"pbthang"},"content":"        if (o \u003d\u003d null || !(o instanceof Reservation)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"pbthang"},"content":"            return false;","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"pbthang"},"content":"        Reservation that \u003d (Reservation) o;","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"pbthang"},"content":"        return numberOfPeople \u003d\u003d that.numberOfPeople","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"pbthang"},"content":"                \u0026\u0026 phone.equals(that.phone)","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"pbthang"},"content":"                \u0026\u0026 time.equals(that.time);","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"pbthang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"pbthang"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"pbthang"},"content":"        return Objects.hash(phone, numberOfPeople, time);","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"pbthang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"pbthang"},"content":"    public String toString() {","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"pbthang"},"content":"        return String.format(\"Reservation{phone\u003d%s, numberOfPeople\u003d%s, time\u003d%s}\", phone, numberOfPeople, time);","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"pbthang"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"pbthang":73}},{"path":"src/main/java/seedu/address/model/reservation/ReservationList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pbthang"},"content":"package seedu.address.model.reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"pbthang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"pbthang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"pbthang"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"pbthang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.exception.ReservationNotFoundException;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"pbthang"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"pbthang"},"content":" * Represents a list of reservation.","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"pbthang"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"pbthang"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"pbthang"},"content":"public class ReservationList implements Iterable\u003cReservation\u003e {","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"pbthang"},"content":"    private final ObservableList\u003cReservation\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"pbthang"},"content":"    private final ObservableList\u003cReservation\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"pbthang"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"pbthang"},"content":"     * Returns true if the list contains an equivalent reservation as the given argument","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"pbthang"},"content":"    public boolean contains(Reservation toCheck) {","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"pbthang"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"pbthang"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"pbthang"},"content":"     * Adds a reservation to the list","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"pbthang"},"content":"    public void add(Reservation toAdd) {","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"pbthang"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"pbthang"},"content":"        // TODO: Check the time to see if can add or not","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"pbthang"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"pbthang"},"content":"     * Replaces the reservation {@code target} in the list with {@code editedReservation}.","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"pbthang"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"pbthang"},"content":"    public void setReservation(Reservation target, Reservation editedReservation) {","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"pbthang"},"content":"        requireAllNonNull(target, editedReservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"pbthang"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"pbthang"},"content":"        if (index \u003c 0) {","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"pbthang"},"content":"            throw new ReservationNotFoundException();","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"pbthang"},"content":"        internalList.set(index, editedReservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"pbthang"},"content":"     * Removes the equivalent reservation from the list.","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"pbthang"},"content":"     * The reservation must exist in the list.","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"pbthang"},"content":"    public void remove(Reservation toRemove) {","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"pbthang"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"pbthang"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"pbthang"},"content":"            throw new ReservationNotFoundException();","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"pbthang"},"content":"    public void setReservations(ReservationList replacement) {","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"pbthang"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"pbthang"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"pbthang"},"content":"     * Replaces the contents of this list with {@code reservations}","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"pbthang"},"content":"    public void setReservations(List\u003cReservation\u003e reservations) {","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"pbthang"},"content":"        requireNonNull(reservations);","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"pbthang"},"content":"        internalList.setAll(reservations);","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"pbthang"},"content":"     * Return the backing list as an unmodifiable {@code ObservableList}","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"pbthang"},"content":"    public ObservableList\u003cReservation\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"pbthang"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"pbthang"},"content":"    public Iterator\u003cReservation\u003e iterator() {","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"pbthang"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"pbthang"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"pbthang"},"content":"        return o \u003d\u003d this","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"pbthang"},"content":"                || (o instanceof ReservationList","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"pbthang"},"content":"                        \u0026\u0026 internalList.equals(((ReservationList) o).internalList));","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"pbthang"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"pbthang"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"pbthang"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"pbthang"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"pbthang":99}},{"path":"src/main/java/seedu/address/model/reservation/exception/ReservationNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pbthang"},"content":"package seedu.address.model.reservation.exception;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"pbthang"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"pbthang"},"content":" * Signals that the operation is unable to find the specified.","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"public class ReservationNotFoundException extends RuntimeException {","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"pbthang":7}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedReservation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pbthang"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"pbthang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"pbthang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"pbthang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"pbthang"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"pbthang"},"content":" * Jackson-friendly version of {@link seedu.address.model.reservation.Reservation}","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"pbthang"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"pbthang"},"content":"public class JsonAdaptedReservation {","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"pbthang"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reservation\u0027s %s field is missing\";","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"pbthang"},"content":"    private final String phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"pbthang"},"content":"    private final Integer numberOfPeople;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"pbthang"},"content":"    private final String time;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"pbthang"},"content":"     * Constructs {@code JsonAdaptedReservation with the given values}","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"pbthang"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"pbthang"},"content":"    public JsonAdaptedReservation(","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"pbthang"},"content":"            @JsonProperty(\"phone\") String phone, @JsonProperty(\"numberOfPeople\") int numberOfPeople,","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"pbthang"},"content":"            @JsonProperty(\"time\") String time","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"pbthang"},"content":"    ) {","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"pbthang"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"pbthang"},"content":"        this.numberOfPeople \u003d numberOfPeople;","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"pbthang"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"pbthang"},"content":"     * Converts a given {@code Reservation} into this class for Jackson use","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"pbthang"},"content":"    public JsonAdaptedReservation(Reservation source) {","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"pbthang"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"pbthang"},"content":"        numberOfPeople \u003d source.getNumberOfPeople();","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"pbthang"},"content":"        time \u003d source.getTime().toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"pbthang"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"pbthang"},"content":"     * Converts this Jackson-friendly adapted reservation object into the model\u0027s {@code Reservation} object.","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"pbthang"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"pbthang"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted reservation.","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"pbthang"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"pbthang"},"content":"    public Reservation toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"pbthang"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"pbthang"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"pbthang"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName())","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"pbthang"},"content":"            );","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"pbthang"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"pbthang"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"pbthang"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"pbthang"},"content":"        if (numberOfPeople \u003d\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"pbthang"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"pbthang"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"number of people\")","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"pbthang"},"content":"            );","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"pbthang"},"content":"        if (numberOfPeople \u003c\u003d 0) {","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"pbthang"},"content":"            throw new IllegalValueException(\"Number of people should be a non-zero unsigned integer\");","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"pbthang"},"content":"        if (time \u003d\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"pbthang"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"pbthang"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"date time\")","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"pbthang"},"content":"            );","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"pbthang"},"content":"        try {","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"pbthang"},"content":"            LocalDateTime.parse(time);","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"pbthang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"pbthang"},"content":"            throw new IllegalValueException(\"Wrong date time format\");","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"pbthang"},"content":"        LocalDateTime modelTime \u003d LocalDateTime.parse(time);","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"pbthang"},"content":"        return new Reservation(modelPhone, numberOfPeople, modelTime);","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"pbthang"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"pbthang":85}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"pbthang"},"content":"    private final List\u003cJsonAdaptedReservation\u003e reservations \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"pbthang"},"content":"    public JsonSerializableAddressBook(","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"pbthang"},"content":"            @JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"pbthang"},"content":"            @JsonProperty(\"reservations\") List\u003cJsonAdaptedReservation\u003e reservations) {","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"pbthang"},"content":"        this.reservations.addAll(reservations);","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"pbthang"},"content":"        reservations.addAll(","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"pbthang"},"content":"                source.getReservationList().stream().map(JsonAdaptedReservation::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"pbthang"},"content":"        for (JsonAdaptedReservation jsonAdaptedReservation: reservations) {","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"pbthang"},"content":"            Reservation reservation \u003d jsonAdaptedReservation.toModelType();","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"pbthang"},"content":"            addressBook.addReservation(reservation);","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"pbthang":12,"-":59}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":"  } ],","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"pbthang"},"content":"  \"reservations\": []","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"pbthang":2,"-":12}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"  } ],","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"pbthang"},"content":"  \"reservations\": []","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"pbthang":2,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"pbthang"},"content":"  } ],","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"pbthang"},"content":"  \"reservations\": []","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"pbthang":2,"-":13}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"  } ],","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"pbthang"},"content":"  \"reservations\": []","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"pbthang":2,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"pbthang"},"content":"  } ],","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"pbthang"},"content":"  \"reservations\": []","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"pbthang":2,"-":45}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"pbthang"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"pbthang"},"content":"        public boolean hasReservation(Reservation reservation) {","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"pbthang"},"content":"            return false;","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"pbthang"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"pbthang"},"content":"        public void deleteReservation(Reservation target) {","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"pbthang"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"pbthang"},"content":"        public void addReservation(Reservation reservation) {","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"pbthang"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"pbthang"},"content":"        public void setReservation(Reservation target, Reservation editedReservation) {","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":167,"author":{"gitId":"pbthang"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"pbthang"},"content":"        public ObservableList\u003cReservation\u003e getFilteredReservationList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":169,"author":{"gitId":"pbthang"},"content":"            return null;","lastModifiedDate":"2021-10-09"},{"lineNumber":170,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":171,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":176,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"pbthang"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":178,"author":{"gitId":"pbthang"},"content":"        public void updateFilteredReservationList(Predicate\u003cReservation\u003e predicate) {","lastModifiedDate":"2021-10-09"},{"lineNumber":179,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"pbthang":31,"-":194}},{"path":"src/test/java/seedu/address/logic/commands/ReserveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pbthang"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"pbthang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"pbthang"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"pbthang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"pbthang"},"content":"class ReserveCommandTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"pbthang"},"content":"    private static final int DUMMY_NUMBER_OF_PEOPLE \u003d 2;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"pbthang"},"content":"    private static final Phone DUMMY_PHONE \u003d new Phone(\"98765432\");","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"pbthang"},"content":"    private static final LocalDateTime DUMMY_DATE_TIME \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"pbthang"},"content":"            LocalDateTime.parse(\"11/11/2021 2000\", DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"pbthang"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"pbthang"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"pbthang"},"content":"    public void execute_validReservation_addSuccessful() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"pbthang"},"content":"        ReserveCommand command \u003d new ReserveCommand(DUMMY_PHONE, DUMMY_NUMBER_OF_PEOPLE, DUMMY_DATE_TIME);","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"pbthang"},"content":"        Reservation expectedReservation \u003d new Reservation(DUMMY_PHONE, DUMMY_NUMBER_OF_PEOPLE, DUMMY_DATE_TIME);","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"pbthang"},"content":"        command.execute(model);","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"pbthang"},"content":"        assertTrue(model.hasReservation(expectedReservation));","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"pbthang"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"pbthang":35}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"pbthang"},"content":"import seedu.address.logic.commands.ReserveCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"pbthang"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"pbthang"},"content":"    public void parseCommand_reserve() throws Exception {","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"pbthang"},"content":"        assertTrue(parser.parseCommand(\"reserve 2 p/98765432 at/11/11/2021 2030\") instanceof ReserveCommand);","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"pbthang":6,"-":101}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_DATE_TIME_FORMAT;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_NUMBER_OF_PEOPLE;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"pbthang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"pbthang"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"pbthang"},"content":"    public void parseNumberOfPeople_nonZeroUnsignedInteger_success() throws Exception {","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"pbthang"},"content":"        assertEquals(1, ParserUtil.parseNumberOfPeople(\"1\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"pbthang"},"content":"        assertEquals(1, ParserUtil.parseNumberOfPeople(\"   1  \"));","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"pbthang"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"pbthang"},"content":"    public void parseNumberOfPeople_invalidInput_throwsParseException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"pbthang"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_NUMBER_OF_PEOPLE, ()","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"pbthang"},"content":"            -\u003e ParserUtil.parseNumberOfPeople(\" a\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"pbthang"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_NUMBER_OF_PEOPLE, ()","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"pbthang"},"content":"            -\u003e ParserUtil.parseNumberOfPeople(\"-1 \"));","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"pbthang"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"pbthang"},"content":"    public void parseDateTime_validDateTime_success() throws Exception {","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"pbthang"},"content":"        LocalDateTime expected \u003d LocalDateTime.parse(\"11/11/2021 2000\", ParserUtil.DATE_TIME_FORMATTER);","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"pbthang"},"content":"        assertEquals(expected, ParserUtil.parseDateTime(\"  11/11/2021 2000   \"));","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"pbthang"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"pbthang"},"content":"    public void parseDateTime_invalidDateTime_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"pbthang"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_DATE_TIME_FORMAT, ()","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"pbthang"},"content":"            -\u003e ParserUtil.parseDateTime(\"11-11-2021 2000\"));","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":226,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"pbthang":30,"-":196}},{"path":"src/test/java/seedu/address/logic/parser/ReserveCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pbthang"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"pbthang"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"pbthang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"pbthang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"pbthang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"pbthang"},"content":"import seedu.address.logic.commands.ReserveCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"pbthang"},"content":"class ReserveCommandParserTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"pbthang"},"content":"    private ReserveCommandParser parser \u003d new ReserveCommandParser();","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"pbthang"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"pbthang"},"content":"    public void parse_allFieldPresent_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"pbthang"},"content":"        ReserveCommand expected \u003d new ReserveCommand(","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"pbthang"},"content":"                new Phone(\"98765432\"),","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"pbthang"},"content":"                2,","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"pbthang"},"content":"                LocalDateTime.parse(\"11/11/2021 2030\", DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\")));","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"pbthang"},"content":"        assertParseSuccess(parser, \"2 p/98765432 at/11/11/2021 2030\", expected);","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"pbthang"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"pbthang"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"pbthang":25}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":23,"author":{"gitId":"pbthang"},"content":"import seedu.address.model.reservation.Reservation;","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"pbthang"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"pbthang"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"pbthang"},"content":"        public ObservableList\u003cReservation\u003e getReservationList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"pbthang"},"content":"            return null;","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"pbthang"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"pbthang":6,"-":102}}]
