[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marcuspeh"},"content":"# Around the World in $80","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"marcuspeh"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-F13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-F13-1/tp/actions)","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"marcuspeh"},"content":"## About","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"marcuspeh"},"content":"Travellers have big notes that make settling payments inconvenient. Most travel groups often designate one person to pay. This method of settling payments poses a vexing task of splitting costs at the end of the day or on the spot. Our app effectively splits bills between different contacts to serve this purpose.","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"marcuspeh"},"content":"## Links","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"marcuspeh"},"content":"* [User Guide](https://ay2122s1-cs2103t-f13-1.github.io/tp/UserGuide.html)","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"marcuspeh"},"content":"* [Developer Guide](https://ay2122s1-cs2103t-f13-1.github.io/tp/DeveloperGuide.html)","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"marcuspeh"},"content":"* [About Us](https://ay2122s1-cs2103t-f13-1.github.io/tp/AboutUs.html)","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"marcuspeh"},"content":"* Bug Reporting (to be done)","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcuspeh"},"content":"## Acknowledgement","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcuspeh"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"marcuspeh":13,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"ramapriyan912001"},"content":"    implementation group: \u0027org.apache.commons\u0027, name: \u0027commons-lang3\u0027, version: \u00273.0\u0027","lastModifiedDate":"2021-10-03"},{"lineNumber":64,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":65,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2018-04-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"ramapriyan912001":3,"-":72}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"marcuspeh"},"content":"Around the World in $80 was developed by the AY2122S1-CS2103T-F13-1 team.","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"marcuspeh"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"chrus-chong"},"content":"### Chrus Chong Kai Ngee","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"chrus-chong"},"content":"\u003cimg src\u003d\"images/chrus-chong.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"chrus-chong"},"content":"[LinkedIn](https://www.linkedin.com/in/chrus-chong/)","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"chrus-chong"},"content":"[GitHub](https://github.com/chrus-chong)","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"chrus-chong"},"content":"[Portfolio](team/johndoe.md)","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Role: Project Advisor","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"marcuspeh"},"content":"### Peh Hoe Khim Marcus","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"marcuspeh"},"content":"\u003cimg src\u003d\"images/marcuspeh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"marcuspeh"},"content":"[LinkedIn](https://www.linkedin.com/in/marcuspeh/)","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"marcuspeh"},"content":"[Github](http://github.com/marcuspeh)","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"marcuspeh"},"content":"[Portfolio](team/marcuspeh.md)","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"ramapriyan912001"},"content":"### Ramapriyan Srivatsan Purisai Devarajan","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"ramapriyan912001"},"content":"\u003cimg src\u003d\"images/ramapriyan912001.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"ramapriyan912001"},"content":"[LinkedIn](https://www.linkedin.com/in/ramapriyansrivatsanpd/)","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"ramapriyan912001"},"content":"[Github](https://github.com/ramapriyan912001)","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"ramapriyan912001"},"content":"[Portfolio](team/ramapriyansrivatsanpurisaidevarajan.md)","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"ramapriyan912001"},"content":"* Role: Team Lead","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"ramapriyan912001"},"content":"* Responsibilities: Backend Engineering","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"kheekheekhee"},"content":"### Ee Kar Hee, Nicholas","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"kheekheekhee"},"content":"\u003cimg src\u003d\"images/kheekheekhee.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"kheekheekhee"},"content":"[LinkedIn](https://www.linkedin.com/in/ekhn/)","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"kheekheekhee"},"content":"[Github](http://github.com/kheekheekhee)","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"kheekheekhee"},"content":"[Portfolio](team/johndoe.md)","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"kheekheekhee"},"content":"* Responsibilities: Frontend Engineering","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"Jingwencloud"},"content":"### Ong Jingwen","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"Jingwencloud"},"content":"\u003cimg src\u003d\"images/jingwencloud.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"Jingwencloud"},"content":"[Github](http://github.com/Jingwencloud)","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"Jingwencloud"},"content":"[Portfolio](team/johndoe.md)","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"marcuspeh":7,"Jingwencloud":5,"chrus-chong":5,"kheekheekhee":6,"ramapriyan912001":7,"-":34}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"chrus-chong"},"content":"## Table of Contents","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"chrus-chong"},"content":"1. [Acknowledgements](#acknowledgements)","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"chrus-chong"},"content":"2. [Setting up, getting started](#setting-up-getting-started)","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"chrus-chong"},"content":"3. [Design](#design)","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"chrus-chong"},"content":"4. [Architecture](#architecture)","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"chrus-chong"},"content":"   1. [UI component](#ui-component)","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"chrus-chong"},"content":"   2. [Logic component](#logic-component)","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"chrus-chong"},"content":"   3. [Model component](#model-component)","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"chrus-chong"},"content":"   4. [Storage component](#storage-component)","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"chrus-chong"},"content":"   5. [Common classes](#common-classes)","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"chrus-chong"},"content":"5. [Implementation](#implementation)","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"chrus-chong"},"content":"   1. [Proposed Undo/Redo feature](#proposed-undoredo-feature)","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"chrus-chong"},"content":"   2. [Proposed implementation](#proposed-implementation)","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"chrus-chong"},"content":"   3. [Design considerations](#design-considerations)","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"chrus-chong"},"content":"   4. [Proposed data archiving](#proposed-data-archiving)","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"chrus-chong"},"content":"6. [Documentation, logging, testing, configuration, dev-ops](#documentation-logging-testing-configuration-dev-ops)","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"chrus-chong"},"content":"7. [Appendix: Requirements](#appendix-requirements)","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"chrus-chong"},"content":"   1. [Product Scope](#product-scope)","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"chrus-chong"},"content":"   2. [User stories](#user-stories)","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"chrus-chong"},"content":"   3. [Use cases](#use-cases)","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"chrus-chong"},"content":"   4. [Non-functional requirements](#non-functional-requirements)","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"chrus-chong"},"content":"   5. [Glossary](#glossary)","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"chrus-chong"},"content":"8. [Appendix: Instructions for manual testing](#appendix-instructions-for-manual-testing)","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"chrus-chong"},"content":"   1. [Launch and shutdown](#launch-and-shutdown)","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"chrus-chong"},"content":"   2. [Deleting a person](#deleting-a-person)","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"chrus-chong"},"content":"   3. [Saving data](#saving-data)","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":167,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"marcuspeh"},"content":"Step 5. The user then decides to execute the command `contacts`. Commands that do not modify the address book, such as `contacts`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2021-09-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":270,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":271,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":272,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":273,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"chrus-chong"},"content":"* travels in groups","lastModifiedDate":"2021-09-23"},{"lineNumber":284,"author":{"gitId":"chrus-chong"},"content":"* wants to split expenses in a convenient and efficient manner","lastModifiedDate":"2021-09-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":288,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"chrus-chong"},"content":"**Value proposition**:","lastModifiedDate":"2021-09-23"},{"lineNumber":291,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":292,"author":{"gitId":"chrus-chong"},"content":"Travellers have big notes that make settling payments inconvenient.","lastModifiedDate":"2021-09-23"},{"lineNumber":293,"author":{"gitId":"chrus-chong"},"content":"Most travel groups often designate one person to pay.","lastModifiedDate":"2021-09-23"},{"lineNumber":294,"author":{"gitId":"chrus-chong"},"content":"This method of settling payments poses a vexing task of splitting costs at the end of the day or on-the-spot.","lastModifiedDate":"2021-09-23"},{"lineNumber":295,"author":{"gitId":"chrus-chong"},"content":"Our app effectively splits bills between different contacts to serve this purpose.","lastModifiedDate":"2021-09-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"| Priority | As a …​                                            | I want to …​                                        | So that I can…​                                                           |","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"marcuspeh"},"content":"| -------- | ------------------------------------------------- | -------------------------------------------------- | ------------------------------------------------------------------------ |","lastModifiedDate":"2021-09-24"},{"lineNumber":304,"author":{"gitId":"chrus-chong"},"content":"| `* * *`  | user that has paid for a shared experience        | easily check how much I have paid up front         | ensure I have liquidity for emergencies and or other unforeseen expenses |","lastModifiedDate":"2021-09-23"},{"lineNumber":305,"author":{"gitId":"chrus-chong"},"content":"| `* * *`  | user who has paid for others                      | easily check how much I am owed by friends         | recoup the money I have paid on their behalf                             |","lastModifiedDate":"2021-09-23"},{"lineNumber":306,"author":{"gitId":"chrus-chong"},"content":"| `* * *`  | user paying for a shared expense                  | enter the amount I have paid                       | update the total amount they have to pay                                 |","lastModifiedDate":"2021-09-23"},{"lineNumber":307,"author":{"gitId":"chrus-chong"},"content":"| `* * *`  | user that owes my friend money                    | easily check how much I owe each person            | conveniently proceed to pay my friend                                    |","lastModifiedDate":"2021-09-23"},{"lineNumber":308,"author":{"gitId":"chrus-chong"},"content":"| `* * *`  | busy user who does not want to remember phone numbers | easily save all my friends\u0027 numbers            | conveniently proceed to pay my friend                                    |","lastModifiedDate":"2021-09-29"},{"lineNumber":309,"author":{"gitId":"chrus-chong"},"content":"| `* * *`  | user with flexible travel plans                   | edit the details of expenditure for events         | modify the records quickly and easily                                    |","lastModifiedDate":"2021-09-29"},{"lineNumber":310,"author":{"gitId":"chrus-chong"},"content":"| `* * *`  | beginner user                                     | run the app easily with a click of a button        | avoid wasting time trying to figure out how to get the app to work       |","lastModifiedDate":"2021-09-29"},{"lineNumber":311,"author":{"gitId":"ramapriyan912001"},"content":"| `* * *`  | inexperienced user in the app who types fast      | type in the commands for the app                   | do more things in the app with the same amount of time compared to using a mouse to click |","lastModifiedDate":"2021-09-30"},{"lineNumber":312,"author":{"gitId":"chrus-chong"},"content":"| `* * *`  | user who wants an easy workflow                   | easily toggle between contacts and groups page with a command or a click of a button | make my workflow on the app smoother   |","lastModifiedDate":"2021-09-29"},{"lineNumber":313,"author":{"gitId":"chrus-chong"},"content":"| `* *`    | user who has to recoup the money                  | divide up the expenses suitably amongst my friends | know how much to recoup from each person                                 |","lastModifiedDate":"2021-09-23"},{"lineNumber":314,"author":{"gitId":"chrus-chong"},"content":"| `* *`    | user paying for the shared expense                | see how much I have paid according to the date     | monitor the amount spent each day                                        |","lastModifiedDate":"2021-09-23"},{"lineNumber":315,"author":{"gitId":"chrus-chong"},"content":"| `* *`    | user who worries about individual expenses        | check the breakdown of my personal expenditure     | keep track of how much money I have spent                                |","lastModifiedDate":"2021-09-23"},{"lineNumber":316,"author":{"gitId":"ramapriyan912001"},"content":"| `* *`    | user who likes to differentiate work from leisure | use this app to separate the different types of contacts I have | I won’t mix them up                                         |","lastModifiedDate":"2021-09-23"},{"lineNumber":317,"author":{"gitId":"ramapriyan912001"},"content":"| `* *`    | user who wants to stay in contact with friends    | use this app to easily save their phone numbers    | I can remain in contact                                                  |","lastModifiedDate":"2021-09-23"},{"lineNumber":318,"author":{"gitId":"ramapriyan912001"},"content":"| `* *`    | potential user exploring the app                  | see the app containing sample data                 | see what the app generally looks like when it is used                    |","lastModifiedDate":"2021-09-23"},{"lineNumber":319,"author":{"gitId":"ramapriyan912001"},"content":"| `* *`    | potential user exploring the app                  | undo my actions                                    | test the app\u0027s features with the same data                               |","lastModifiedDate":"2021-09-23"},{"lineNumber":320,"author":{"gitId":"ramapriyan912001"},"content":"| `* *`    | potential user testing the app                    | run the app on different platforms (windows, linux and os-x) | not have to specifically run a certain platform                |","lastModifiedDate":"2021-09-23"},{"lineNumber":321,"author":{"gitId":"marcuspeh"},"content":"| `* *`    | user with flexible travel plans                   | delete a group                                     | modify the records easily if plans change                                |","lastModifiedDate":"2021-09-24"},{"lineNumber":322,"author":{"gitId":"Jingwencloud"},"content":"| `* *`    | beginner user who first opened the app            | view the help page                                 | so that I can learn how to use the app                                   |","lastModifiedDate":"2021-09-26"},{"lineNumber":323,"author":{"gitId":"chrus-chong"},"content":"| `*`      | user who values organisation                      | view the group’s expenditure by categories         | plan the budgeting for future expenses more effectively                  |","lastModifiedDate":"2021-09-29"},{"lineNumber":324,"author":{"gitId":"chrus-chong"},"content":"| `*`      | user who needs to repay debt                      | easily set up installment payments                 | can avoid paying too much money at one go                                |","lastModifiedDate":"2021-09-29"},{"lineNumber":325,"author":{"gitId":"chrus-chong"},"content":"| `*`      | user who has lots of contacts to keep track of    | tag each contact                                   | easily find groups of people using the tags                              |","lastModifiedDate":"2021-09-29"},{"lineNumber":326,"author":{"gitId":"chrus-chong"},"content":"| `* `     | user whose friends frequently change numbers      | use this app to easily edit their numbers or save multiple numbers with notes | easily remember which number to use           |","lastModifiedDate":"2021-09-29"},{"lineNumber":327,"author":{"gitId":"Jingwencloud"},"content":"| `*`      | beginner user that is tech-savvy                  | view the documentation                             | figure out how to use the app                                            |","lastModifiedDate":"2021-09-26"},{"lineNumber":328,"author":{"gitId":"Jingwencloud"},"content":"| `*`      | beginner user                                     | mass add my contacts                               | avoid manually keying in one by one                                      |","lastModifiedDate":"2021-09-26"},{"lineNumber":329,"author":{"gitId":"Jingwencloud"},"content":"| `*`      | beginner user                                     | easily distinguish functions in the app            | use it without the app being too daunting                                |","lastModifiedDate":"2021-09-26"},{"lineNumber":330,"author":{"gitId":"Jingwencloud"},"content":"| `*`      | expert user                                       | create my own shortcuts for commands               | control what I can do with the app more effectively                      |","lastModifiedDate":"2021-09-26"},{"lineNumber":331,"author":{"gitId":"Jingwencloud"},"content":"| `*`      | expert user                                       | mass delete contacts from the app                  | save time by not deleting it manually                                    |","lastModifiedDate":"2021-09-26"},{"lineNumber":332,"author":{"gitId":"Jingwencloud"},"content":"| `*`      | expert user                                       | refer to previous trips and the expenditure        | plan future trips efficiently                                            |","lastModifiedDate":"2021-09-26"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"marcuspeh"},"content":"(For all use cases below, the **System** is the `AWE` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-09-24"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":339,"author":{"gitId":"ramapriyan912001"},"content":"**Use case: Help User Understand Product**","lastModifiedDate":"2021-09-30"},{"lineNumber":340,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":341,"author":{"gitId":"ramapriyan912001"},"content":"**MSS**","lastModifiedDate":"2021-09-30"},{"lineNumber":342,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":343,"author":{"gitId":"ramapriyan912001"},"content":"1. User request to find commands and their explanations.","lastModifiedDate":"2021-09-30"},{"lineNumber":344,"author":{"gitId":"ramapriyan912001"},"content":"2. AWE shows a list of command keyword(s) and explanations.","lastModifiedDate":"2021-09-30"},{"lineNumber":345,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":346,"author":{"gitId":"ramapriyan912001"},"content":"**Extensions**","lastModifiedDate":"2021-09-30"},{"lineNumber":347,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":348,"author":{"gitId":"ramapriyan912001"},"content":"* 2a. AWE detects errant command.","lastModifiedDate":"2021-09-30"},{"lineNumber":349,"author":{"gitId":"ramapriyan912001"},"content":"    * 2a1. AWE displays the list of command keyword(s) and explanations.","lastModifiedDate":"2021-09-30"},{"lineNumber":350,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":351,"author":{"gitId":"ramapriyan912001"},"content":"      Use case ends.","lastModifiedDate":"2021-09-30"},{"lineNumber":352,"author":{"gitId":"ramapriyan912001"},"content":"    ","lastModifiedDate":"2021-09-30"},{"lineNumber":353,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":354,"author":{"gitId":"chrus-chong"},"content":"**Use case: Adding a Person**","lastModifiedDate":"2021-09-29"},{"lineNumber":355,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":356,"author":{"gitId":"marcuspeh"},"content":"**MSS**","lastModifiedDate":"2021-09-24"},{"lineNumber":357,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":358,"author":{"gitId":"chrus-chong"},"content":"1. User chooses to add a person to the AddressBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":359,"author":{"gitId":"chrus-chong"},"content":"2. User enters add command into CLI along with person name, phone number, email, and address, and tags if applicable.","lastModifiedDate":"2021-09-29"},{"lineNumber":360,"author":{"gitId":"marcuspeh"},"content":"3. AWE displays confirmation message.","lastModifiedDate":"2021-09-24"},{"lineNumber":361,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":362,"author":{"gitId":"marcuspeh"},"content":"   Use case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":363,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":364,"author":{"gitId":"marcuspeh"},"content":"**Extensions**","lastModifiedDate":"2021-09-24"},{"lineNumber":365,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":366,"author":{"gitId":"chrus-chong"},"content":"* 2a. AWE detects invalid command format that does not contain all 4 parameter identifiers (\"n/\", \"p/\", \"e/\", \"a/\").","lastModifiedDate":"2021-09-29"},{"lineNumber":367,"author":{"gitId":"chrus-chong"},"content":"    * 2a1. AWE returns invalid command format error and displays ```add``` command format and example.","lastModifiedDate":"2021-09-29"},{"lineNumber":368,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":369,"author":{"gitId":"chrus-chong"},"content":"      Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":370,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":371,"author":{"gitId":"chrus-chong"},"content":"* 2b. Command contains 4 parameter identifiers but name is blank.","lastModifiedDate":"2021-09-29"},{"lineNumber":372,"author":{"gitId":"chrus-chong"},"content":"    * 2b1. AWE reminds user that names should only contain alphanumeric characters and should not be blank.","lastModifiedDate":"2021-09-29"},{"lineNumber":373,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":374,"author":{"gitId":"chrus-chong"},"content":"      Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":375,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":376,"author":{"gitId":"chrus-chong"},"content":"* 2c. Command contains 4 parameter identifiers but phone number is less than 3 digits or not a number.","lastModifiedDate":"2021-09-29"},{"lineNumber":377,"author":{"gitId":"chrus-chong"},"content":"    * 2c1. AWE reminds user that phone numbers should only contain numbers and be at least 3 digits long.","lastModifiedDate":"2021-09-29"},{"lineNumber":378,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":379,"author":{"gitId":"chrus-chong"},"content":"      Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":380,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":381,"author":{"gitId":"chrus-chong"},"content":"* 2d. Command contains 4 parameter identifiers but email is blank or does not contain domain.","lastModifiedDate":"2021-09-29"},{"lineNumber":382,"author":{"gitId":"chrus-chong"},"content":"    * 2d1. AWE reminds user of format of email input.","lastModifiedDate":"2021-09-29"},{"lineNumber":383,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":384,"author":{"gitId":"chrus-chong"},"content":"      Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":385,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":386,"author":{"gitId":"chrus-chong"},"content":"* 2e. Command contains 4 parameter identifiers but address is blank.","lastModifiedDate":"2021-09-29"},{"lineNumber":387,"author":{"gitId":"chrus-chong"},"content":"    * 2e1. AWE reminds user that address can take any values and should not be blank.","lastModifiedDate":"2021-09-29"},{"lineNumber":388,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":389,"author":{"gitId":"marcuspeh"},"content":"      Use case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"kheekheekhee"},"content":"**Use case: Edit a person**","lastModifiedDate":"2021-09-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"1. User requests to list persons","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"kheekheekhee"},"content":"2. AWE shows a list of persons","lastModifiedDate":"2021-09-29"},{"lineNumber":397,"author":{"gitId":"kheekheekhee"},"content":"3. User requests to edit a specific person in the list","lastModifiedDate":"2021-09-29"},{"lineNumber":398,"author":{"gitId":"kheekheekhee"},"content":"4. User enters edited information","lastModifiedDate":"2021-09-29"},{"lineNumber":399,"author":{"gitId":"kheekheekhee"},"content":"5. AWE edits the person","lastModifiedDate":"2021-09-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"kheekheekhee"},"content":"    * 3a1. AWE shows an error message.","lastModifiedDate":"2021-09-29"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"kheekheekhee"},"content":"* 4a. The given information has an invalid format.","lastModifiedDate":"2021-09-29"},{"lineNumber":416,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":417,"author":{"gitId":"kheekheekhee"},"content":"    * 4a1. AWE shows an error message.","lastModifiedDate":"2021-09-29"},{"lineNumber":418,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":419,"author":{"gitId":"kheekheekhee"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-29"},{"lineNumber":420,"author":{"gitId":"kheekheekhee"},"content":"    ","lastModifiedDate":"2021-09-29"},{"lineNumber":421,"author":{"gitId":"Jingwencloud"},"content":"**Use case: List all persons**","lastModifiedDate":"2021-09-30"},{"lineNumber":422,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":423,"author":{"gitId":"Jingwencloud"},"content":"**MSS**","lastModifiedDate":"2021-09-30"},{"lineNumber":424,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":425,"author":{"gitId":"Jingwencloud"},"content":"1. User requests to list persons.","lastModifiedDate":"2021-09-30"},{"lineNumber":426,"author":{"gitId":"Jingwencloud"},"content":"2. AWE shows list of persons. ","lastModifiedDate":"2021-09-30"},{"lineNumber":427,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":428,"author":{"gitId":"Jingwencloud"},"content":"   Use case ends. ","lastModifiedDate":"2021-09-30"},{"lineNumber":429,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":430,"author":{"gitId":"Jingwencloud"},"content":"**Extensions**","lastModifiedDate":"2021-09-30"},{"lineNumber":431,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":432,"author":{"gitId":"Jingwencloud"},"content":"* 2a. There are no persons to be listed.","lastModifiedDate":"2021-09-30"},{"lineNumber":433,"author":{"gitId":"Jingwencloud"},"content":"    * 2a1. AWE does not display any contacts.","lastModifiedDate":"2021-09-30"},{"lineNumber":434,"author":{"gitId":"Jingwencloud"},"content":"      ","lastModifiedDate":"2021-09-30"},{"lineNumber":435,"author":{"gitId":"Jingwencloud"},"content":"      Use case ends.","lastModifiedDate":"2021-09-30"},{"lineNumber":436,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":437,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":438,"author":{"gitId":"marcuspeh"},"content":"**Use case: Find a person**","lastModifiedDate":"2021-09-29"},{"lineNumber":439,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":440,"author":{"gitId":"marcuspeh"},"content":"**Preconditions: User is in ContactsPage**","lastModifiedDate":"2021-09-29"},{"lineNumber":441,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":442,"author":{"gitId":"marcuspeh"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":443,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":444,"author":{"gitId":"marcuspeh"},"content":"1. User request to find person based on keyword(s).","lastModifiedDate":"2021-09-29"},{"lineNumber":445,"author":{"gitId":"marcuspeh"},"content":"2. AWE shows a list of persons that matches the keyword(s).","lastModifiedDate":"2021-09-29"},{"lineNumber":446,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":447,"author":{"gitId":"marcuspeh"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":448,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":449,"author":{"gitId":"marcuspeh"},"content":"* 2a. There isn\u0027t any contacts saved.","lastModifiedDate":"2021-09-29"},{"lineNumber":450,"author":{"gitId":"marcuspeh"},"content":"    * 2a1. AWE displays nothing in the contacts page.","lastModifiedDate":"2021-09-29"},{"lineNumber":451,"author":{"gitId":"marcuspeh"},"content":"    * 2a2. AWE shows a message saying no person found.","lastModifiedDate":"2021-09-29"},{"lineNumber":452,"author":{"gitId":"marcuspeh"},"content":"    ","lastModifiedDate":"2021-09-29"},{"lineNumber":453,"author":{"gitId":"marcuspeh"},"content":"      Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":454,"author":{"gitId":"marcuspeh"},"content":"      ","lastModifiedDate":"2021-09-29"},{"lineNumber":455,"author":{"gitId":"marcuspeh"},"content":"* 2b. There is not contacts matching the search parameters.","lastModifiedDate":"2021-09-29"},{"lineNumber":456,"author":{"gitId":"marcuspeh"},"content":"    * 2b1. AWE displays nothing in the contacts page.","lastModifiedDate":"2021-09-29"},{"lineNumber":457,"author":{"gitId":"marcuspeh"},"content":"    * 2b2. AWE shows a message saying no person found.","lastModifiedDate":"2021-09-29"},{"lineNumber":458,"author":{"gitId":"marcuspeh"},"content":"    ","lastModifiedDate":"2021-09-29"},{"lineNumber":459,"author":{"gitId":"marcuspeh"},"content":"      Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":460,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":462,"author":{"gitId":"-"},"content":"**Use case: Delete a person**","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"-"},"content":"1. User requests to list persons","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"Jingwencloud"},"content":"2. AWE shows a list of persons","lastModifiedDate":"2021-09-26"},{"lineNumber":468,"author":{"gitId":"-"},"content":"3. User requests to delete a specific person in the list","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"Jingwencloud"},"content":"4. AWE deletes the person","lastModifiedDate":"2021-09-26"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"Jingwencloud"},"content":"    * 3a1. AWE shows an error message.","lastModifiedDate":"2021-09-26"},{"lineNumber":482,"author":{"gitId":"chrus-chong"},"content":"    ","lastModifiedDate":"2021-09-23"},{"lineNumber":483,"author":{"gitId":"chrus-chong"},"content":"**Use case: Create Travel Group**","lastModifiedDate":"2021-09-23"},{"lineNumber":484,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":485,"author":{"gitId":"chrus-chong"},"content":"**MSS**","lastModifiedDate":"2021-09-23"},{"lineNumber":486,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":487,"author":{"gitId":"chrus-chong"},"content":"1. User chooses to create a group.","lastModifiedDate":"2021-09-23"},{"lineNumber":488,"author":{"gitId":"chrus-chong"},"content":"2. User enters create group command into CLI along with group name and names of members.","lastModifiedDate":"2021-09-23"},{"lineNumber":489,"author":{"gitId":"chrus-chong"},"content":"3. AWE displays confirmation message.","lastModifiedDate":"2021-09-23"},{"lineNumber":490,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":491,"author":{"gitId":"chrus-chong"},"content":"   Use case ends.","lastModifiedDate":"2021-09-23"},{"lineNumber":492,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":493,"author":{"gitId":"chrus-chong"},"content":"**Extensions**","lastModifiedDate":"2021-09-23"},{"lineNumber":494,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":495,"author":{"gitId":"chrus-chong"},"content":"* 2a. AWE detects group member whose name is not in the AddressBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":496,"author":{"gitId":"chrus-chong"},"content":"  * 2a1. AWE displays message to remind User to type in full name of members as in the AddressBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":497,"author":{"gitId":"chrus-chong"},"content":"  ","lastModifiedDate":"2021-09-23"},{"lineNumber":498,"author":{"gitId":"chrus-chong"},"content":"    Use case ends.","lastModifiedDate":"2021-09-23"},{"lineNumber":499,"author":{"gitId":"chrus-chong"},"content":"    ","lastModifiedDate":"2021-09-23"},{"lineNumber":500,"author":{"gitId":"ramapriyan912001"},"content":"    ","lastModifiedDate":"2021-09-30"},{"lineNumber":501,"author":{"gitId":"ramapriyan912001"},"content":"**Use case: Delete Travel Group**","lastModifiedDate":"2021-09-24"},{"lineNumber":502,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":503,"author":{"gitId":"ramapriyan912001"},"content":"**MSS**","lastModifiedDate":"2021-09-24"},{"lineNumber":504,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":505,"author":{"gitId":"ramapriyan912001"},"content":"1. User chooses to delete a group.","lastModifiedDate":"2021-09-24"},{"lineNumber":506,"author":{"gitId":"ramapriyan912001"},"content":"2. User enters delete group command into CLI along with group name.","lastModifiedDate":"2021-09-30"},{"lineNumber":507,"author":{"gitId":"ramapriyan912001"},"content":"3. AWE displays confirmation message.","lastModifiedDate":"2021-09-24"},{"lineNumber":508,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":509,"author":{"gitId":"ramapriyan912001"},"content":"   Use case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":510,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":511,"author":{"gitId":"ramapriyan912001"},"content":"**Extensions**","lastModifiedDate":"2021-09-24"},{"lineNumber":512,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":513,"author":{"gitId":"ramapriyan912001"},"content":"* 2a. AWE detects group name that is not in address book.","lastModifiedDate":"2021-09-24"},{"lineNumber":514,"author":{"gitId":"ramapriyan912001"},"content":"    * 2a1. AWE displays message to remind User to type in name of a group inside the addressbook.","lastModifiedDate":"2021-09-24"},{"lineNumber":515,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":516,"author":{"gitId":"ramapriyan912001"},"content":"      Use case ends.    ","lastModifiedDate":"2021-09-24"},{"lineNumber":517,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":518,"author":{"gitId":"marcuspeh"},"content":"**Use case: Listing all travel groups**","lastModifiedDate":"2021-09-29"},{"lineNumber":519,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":520,"author":{"gitId":"marcuspeh"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":521,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":522,"author":{"gitId":"marcuspeh"},"content":"1. User choose to list all groups","lastModifiedDate":"2021-09-29"},{"lineNumber":523,"author":{"gitId":"marcuspeh"},"content":"2. GroupsPage shows a list of groups","lastModifiedDate":"2021-09-29"},{"lineNumber":524,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":525,"author":{"gitId":"marcuspeh"},"content":"**Extension**","lastModifiedDate":"2021-09-29"},{"lineNumber":526,"author":{"gitId":"marcuspeh"},"content":"* 2a. AWE detects that there is no group created.","lastModifiedDate":"2021-09-29"},{"lineNumber":527,"author":{"gitId":"marcuspeh"},"content":"    * 2a1 AWE displays a blank screen.","lastModifiedDate":"2021-09-29"},{"lineNumber":528,"author":{"gitId":"marcuspeh"},"content":"    ","lastModifiedDate":"2021-09-29"},{"lineNumber":529,"author":{"gitId":"marcuspeh"},"content":"      Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":530,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":531,"author":{"gitId":"marcuspeh"},"content":"**Use case: Viewing expenses of a travel group**","lastModifiedDate":"2021-09-24"},{"lineNumber":532,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":533,"author":{"gitId":"chrus-chong"},"content":"**MSS**","lastModifiedDate":"2021-09-23"},{"lineNumber":534,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":535,"author":{"gitId":"marcuspeh"},"content":"1. User request to list groups.","lastModifiedDate":"2021-09-24"},{"lineNumber":536,"author":{"gitId":"marcuspeh"},"content":"2. GroupsPage shows a list of groups.","lastModifiedDate":"2021-09-29"},{"lineNumber":537,"author":{"gitId":"marcuspeh"},"content":"3. User request to see expenses of a specific group.","lastModifiedDate":"2021-09-24"},{"lineNumber":538,"author":{"gitId":"marcuspeh"},"content":"4. AW3 displays all the expenses of the group.","lastModifiedDate":"2021-09-24"},{"lineNumber":539,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":540,"author":{"gitId":"chrus-chong"},"content":"   Use case ends.","lastModifiedDate":"2021-09-23"},{"lineNumber":541,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":542,"author":{"gitId":"chrus-chong"},"content":"**Extensions**","lastModifiedDate":"2021-09-23"},{"lineNumber":543,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":544,"author":{"gitId":"marcuspeh"},"content":"* 2a. AWE detects no groups created yet.","lastModifiedDate":"2021-09-24"},{"lineNumber":545,"author":{"gitId":"marcuspeh"},"content":"  * 2a1. AWE displays message to remind User to create a group before empty GroupsPage displayed.","lastModifiedDate":"2021-09-29"},{"lineNumber":546,"author":{"gitId":"marcuspeh"},"content":"  ","lastModifiedDate":"2021-09-24"},{"lineNumber":547,"author":{"gitId":"marcuspeh"},"content":"    Use case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":548,"author":{"gitId":"marcuspeh"},"content":"    ","lastModifiedDate":"2021-09-24"},{"lineNumber":549,"author":{"gitId":"marcuspeh"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-24"},{"lineNumber":550,"author":{"gitId":"marcuspeh"},"content":"    * 3a1. AWE displays an error.","lastModifiedDate":"2021-09-24"},{"lineNumber":551,"author":{"gitId":"chrus-chong"},"content":"    ","lastModifiedDate":"2021-09-23"},{"lineNumber":552,"author":{"gitId":"chrus-chong"},"content":"      Use case ends.","lastModifiedDate":"2021-09-23"},{"lineNumber":553,"author":{"gitId":"chrus-chong"},"content":"      ","lastModifiedDate":"2021-09-23"},{"lineNumber":554,"author":{"gitId":"marcuspeh"},"content":"* 4a. AWE detect no expenses logged under the group.","lastModifiedDate":"2021-09-24"},{"lineNumber":555,"author":{"gitId":"marcuspeh"},"content":"    * 4a1. AWE displays message about no transaction.","lastModifiedDate":"2021-09-24"},{"lineNumber":556,"author":{"gitId":"chrus-chong"},"content":"    ","lastModifiedDate":"2021-09-23"},{"lineNumber":557,"author":{"gitId":"marcuspeh"},"content":"      Use case ends.","lastModifiedDate":"2021-09-24"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"kheekheekhee"},"content":"**Use case: Add Expense**","lastModifiedDate":"2021-09-25"},{"lineNumber":560,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":561,"author":{"gitId":"kheekheekhee"},"content":"**Preconditions: User has selected a travel group**","lastModifiedDate":"2021-09-29"},{"lineNumber":562,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":563,"author":{"gitId":"kheekheekhee"},"content":"**MSS**","lastModifiedDate":"2021-09-25"},{"lineNumber":564,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":565,"author":{"gitId":"kheekheekhee"},"content":"1. User requests to add an expense to the active travel group","lastModifiedDate":"2021-09-25"},{"lineNumber":566,"author":{"gitId":"kheekheekhee"},"content":"2. AWE displays confirmation message.","lastModifiedDate":"2021-09-25"},{"lineNumber":567,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":568,"author":{"gitId":"kheekheekhee"},"content":"    Use case ends.","lastModifiedDate":"2021-09-25"},{"lineNumber":569,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":570,"author":{"gitId":"kheekheekhee"},"content":"**Extensions**","lastModifiedDate":"2021-09-25"},{"lineNumber":571,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":572,"author":{"gitId":"kheekheekhee"},"content":"* 1a. AWE detects that there are no travel groups active.","lastModifiedDate":"2021-09-25"},{"lineNumber":573,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":574,"author":{"gitId":"kheekheekhee"},"content":"    * 1a1. AWE informs user that no travel groups are active.","lastModifiedDate":"2021-09-25"},{"lineNumber":575,"author":{"gitId":"chrus-chong"},"content":"  ","lastModifiedDate":"2021-09-23"},{"lineNumber":576,"author":{"gitId":"kheekheekhee"},"content":"      Use case ends.","lastModifiedDate":"2021-09-25"},{"lineNumber":577,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":578,"author":{"gitId":"kheekheekhee"},"content":"* 1b. AWE detects that inputted command is an incorrect format.","lastModifiedDate":"2021-09-25"},{"lineNumber":579,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":580,"author":{"gitId":"kheekheekhee"},"content":"    * 1b1. AWE informs user that expense was not added and reminds the user of the correct format/","lastModifiedDate":"2021-09-25"},{"lineNumber":581,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":582,"author":{"gitId":"kheekheekhee"},"content":"      Use case ends.","lastModifiedDate":"2021-09-25"},{"lineNumber":583,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"Jingwencloud"},"content":"**Use case: Delete a shared expense**","lastModifiedDate":"2021-09-26"},{"lineNumber":585,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":586,"author":{"gitId":"Jingwencloud"},"content":"**MSS**","lastModifiedDate":"2021-09-26"},{"lineNumber":587,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":588,"author":{"gitId":"Jingwencloud"},"content":"1. User requests to list expenses for a travel group.","lastModifiedDate":"2021-09-26"},{"lineNumber":589,"author":{"gitId":"Jingwencloud"},"content":"2. AWE lists all expenses. ","lastModifiedDate":"2021-09-26"},{"lineNumber":590,"author":{"gitId":"Jingwencloud"},"content":"3. User requests to delete an expense at a specific index in the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":591,"author":{"gitId":"Jingwencloud"},"content":"4. AWE deletes the specified expense. ","lastModifiedDate":"2021-09-26"},{"lineNumber":592,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":593,"author":{"gitId":"Jingwencloud"},"content":"   Use case ends. ","lastModifiedDate":"2021-09-26"},{"lineNumber":594,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":595,"author":{"gitId":"Jingwencloud"},"content":"**Extensions**","lastModifiedDate":"2021-09-26"},{"lineNumber":596,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":597,"author":{"gitId":"Jingwencloud"},"content":"* 2a. The expense list is empty.","lastModifiedDate":"2021-09-26"},{"lineNumber":598,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":599,"author":{"gitId":"Jingwencloud"},"content":"  Use case ends.","lastModifiedDate":"2021-09-26"},{"lineNumber":600,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":601,"author":{"gitId":"Jingwencloud"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-26"},{"lineNumber":602,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":603,"author":{"gitId":"Jingwencloud"},"content":"    * 3a1. AWE shows an error message.","lastModifiedDate":"2021-09-26"},{"lineNumber":604,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":605,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-26"},{"lineNumber":606,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":607,"author":{"gitId":"chrus-chong"},"content":"**Use case: Clear AddressBook of all entries**","lastModifiedDate":"2021-09-29"},{"lineNumber":608,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":609,"author":{"gitId":"chrus-chong"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":610,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":611,"author":{"gitId":"chrus-chong"},"content":"1. User enters clear command.","lastModifiedDate":"2021-09-29"},{"lineNumber":612,"author":{"gitId":"chrus-chong"},"content":"2. All entries are deleted from AddressBook.","lastModifiedDate":"2021-09-29"},{"lineNumber":613,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":614,"author":{"gitId":"chrus-chong"},"content":"   Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":615,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":616,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":617,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":618,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":619,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":620,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":621,"author":{"gitId":"kheekheekhee"},"content":"4.  Should be able to hold up to 100 groups without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-09-30"},{"lineNumber":622,"author":{"gitId":"kheekheekhee"},"content":"5.  Layout between persons and groups should be intuitive and easy to understand and navigate.","lastModifiedDate":"2021-09-30"},{"lineNumber":623,"author":{"gitId":"kheekheekhee"},"content":"6.  Usage of `$` should be standardized for money.","lastModifiedDate":"2021-09-30"},{"lineNumber":624,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":625,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":626,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":627,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":628,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":629,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":630,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":631,"author":{"gitId":"marcuspeh"},"content":"* **AddressBook**: The page displaying all the contacts","lastModifiedDate":"2021-09-24"},{"lineNumber":632,"author":{"gitId":"marcuspeh"},"content":"* **ContactPage**: The page displaying all the contacts","lastModifiedDate":"2021-09-29"},{"lineNumber":633,"author":{"gitId":"marcuspeh"},"content":"* **GroupsPage**: The page displaying all the travel groups","lastModifiedDate":"2021-09-29"},{"lineNumber":634,"author":{"gitId":"Jingwencloud"},"content":"* **ExpensesPage**: The page displaying all the expenses of a travel group","lastModifiedDate":"2021-09-30"},{"lineNumber":635,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":636,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":637,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":638,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":639,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":640,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":641,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":642,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":643,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":644,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":645,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":646,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":647,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":648,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":649,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":650,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":651,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":652,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":653,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":654,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":655,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":656,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":657,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":658,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":659,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":660,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":661,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":662,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":663,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":664,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":665,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":666,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":667,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":668,"author":{"gitId":"marcuspeh"},"content":"   1. Prerequisites: List all persons using the `contacts` command. Multiple persons in the list.","lastModifiedDate":"2021-09-29"},{"lineNumber":669,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":670,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":671,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":672,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":673,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":674,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":675,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":676,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":677,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":678,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":679,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":680,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":681,"author":{"gitId":"marcuspeh"},"content":"### Viewing expenses","lastModifiedDate":"2021-09-24"},{"lineNumber":682,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":683,"author":{"gitId":"marcuspeh"},"content":"1. Viewing all expenses of a travel group","lastModifiedDate":"2021-09-24"},{"lineNumber":684,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":685,"author":{"gitId":"marcuspeh"},"content":"   1. Prerequisites: List all travel groups using the `groups` command. Multiple travel groups in the list.","lastModifiedDate":"2021-09-24"},{"lineNumber":686,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":687,"author":{"gitId":"marcuspeh"},"content":"   1. Test case: `expenses 1`\u003cbr\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":688,"author":{"gitId":"marcuspeh"},"content":"      Expected: Expenses under the first travel group displayed. Details of the operation shown in the status message.","lastModifiedDate":"2021-09-24"},{"lineNumber":689,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":690,"author":{"gitId":"marcuspeh"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":691,"author":{"gitId":"marcuspeh"},"content":"      Expected: No expenses displayed. Error details shown in the status message.","lastModifiedDate":"2021-09-24"},{"lineNumber":692,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":693,"author":{"gitId":"marcuspeh"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":694,"author":{"gitId":"marcuspeh"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2021-09-24"},{"lineNumber":695,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":696,"author":{"gitId":"marcuspeh"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2021-09-24"},{"lineNumber":697,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":698,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":699,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":700,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":701,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":702,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":703,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":704,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"marcuspeh":87,"Jingwencloud":48,"chrus-chong":114,"kheekheekhee":37,"ramapriyan912001":40,"-":378}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"marcuspeh"},"content":"Around the World in $80 (AWE) is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AWE can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"marcuspeh"},"content":"1. Download the latest `awe.jar` from here (Coming Soon!).","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"ramapriyan912001"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your tp.","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"ramapriyan912001"},"content":"   ![Ui](images/AWEUi.png)","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"marcuspeh"},"content":"   * **`contacts`** : The command `contacts` lists all contacts.","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"marcuspeh"},"content":"   ","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"marcuspeh"},"content":"   * **`groups`** : The command `groups` lists all groups.","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"ramapriyan912001"},"content":"   * **`add`** : The command `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` adds a contact named `John Doe` to the Address Book.","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"ramapriyan912001"},"content":"   * **`delete`**`3` : The command `delete` removes the 3rd contact/expense shown in the current list.","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"ramapriyan912001"},"content":"   * **`clear`** : The command `clear` removes all expenses / contacts / groups.","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"ramapriyan912001"},"content":"   * **`edit`** : The command `edit 1 n/Thomas Betty` edits the name of the 1st person to be Thomas Betty and removes all existing tags.","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"ramapriyan912001"},"content":"   * **`exit`** : The command `exit` exits the app.","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"ramapriyan912001"},"content":"**Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Adds a person to the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"marcuspeh"},"content":"### Listing all contacts : `contacts`","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"marcuspeh"},"content":"Shows a list of all contacts in address book.","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"marcuspeh"},"content":"Format: `contacts`","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"Edits an existing person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"marcuspeh"},"content":"* `persons` followed by `delete 2` deletes the 2nd person in the address book.","lastModifiedDate":"2021-09-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"marcuspeh"},"content":"### Creating a Travel Group: ```create group```","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"marcuspeh"},"content":"Creates a group of people of your choice from your address book.","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"marcuspeh"},"content":"Adds you as a member of the group by default.","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"marcuspeh"},"content":"Format: `create group GROUP_NAME : NAME1 : NAME2 : NAME3`","lastModifiedDate":"2021-09-29"},{"lineNumber":154,"author":{"gitId":"marcuspeh"},"content":"GROUP_NAME is a mandatory field.","lastModifiedDate":"2021-09-29"},{"lineNumber":155,"author":{"gitId":"marcuspeh"},"content":"At least one NAME is necessary.","lastModifiedDate":"2021-09-29"},{"lineNumber":156,"author":{"gitId":"marcuspeh"},"content":"The names are required to be in the address book and should match contact names exactly.","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"marcuspeh"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"marcuspeh"},"content":"create group Bali : Jacob Tan : Max Chia : Julianne Tay","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"marcuspeh"},"content":"create group London: Justin Lee : Raj Gopal : Keith Chia","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"marcuspeh"},"content":"### Listing all groups : `groups`","lastModifiedDate":"2021-09-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"marcuspeh"},"content":"Shows a list of all groups in GroupPage.","lastModifiedDate":"2021-09-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"marcuspeh"},"content":"Format: `groups`","lastModifiedDate":"2021-09-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"ramapriyan912001"},"content":"### Deleting a Travel Group: `delete group`","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"ramapriyan912001"},"content":"Deletes a group from your groups.","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"ramapriyan912001"},"content":"All the details from the group are lost once this action is completed.","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"ramapriyan912001"},"content":"Format: `delete group GROUP_NAME`","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"ramapriyan912001"},"content":"* GROUP_NAME is a mandatory field.","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"ramapriyan912001"},"content":"* A group with GROUP_NAME as its name must exist.","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":177,"author":{"gitId":"ramapriyan912001"},"content":"Examples:","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"ramapriyan912001"},"content":"* `delete group Bali`","lastModifiedDate":"2021-09-23"},{"lineNumber":179,"author":{"gitId":"ramapriyan912001"},"content":"* `delete group London`","lastModifiedDate":"2021-09-23"},{"lineNumber":180,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":181,"author":{"gitId":"kheekheekhee"},"content":"### Adding a shared expense: `add expense`","lastModifiedDate":"2021-09-25"},{"lineNumber":182,"author":{"gitId":"kheekheekhee"},"content":"Adds a shared expense to the currently active travel group.","lastModifiedDate":"2021-09-25"},{"lineNumber":183,"author":{"gitId":"kheekheekhee"},"content":"The expense can be paid for and split among any number of contacts within the travel group.","lastModifiedDate":"2021-09-25"},{"lineNumber":184,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":185,"author":{"gitId":"kheekheekhee"},"content":"Format: `add expense /des [DESCRIPTION] /by [PAYER_NAME1] [AMOUNT PAID BY NAME1] /for [PAYEE_NAME1][PAYEE_NAME2]`","lastModifiedDate":"2021-09-25"},{"lineNumber":186,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":187,"author":{"gitId":"kheekheekhee"},"content":"* There should be at least one PAYER_NAME1 in the command.","lastModifiedDate":"2021-09-25"},{"lineNumber":188,"author":{"gitId":"kheekheekhee"},"content":"* PAYER_NAME must be immediately followed by the AMOUNT PAID.","lastModifiedDate":"2021-09-25"},{"lineNumber":189,"author":{"gitId":"kheekheekhee"},"content":"* \":\" demarcates the distinction between PAYERS and PAYEES.","lastModifiedDate":"2021-09-25"},{"lineNumber":190,"author":{"gitId":"kheekheekhee"},"content":"* By default, PAYER_NAME will not be included in the expense. Add name into list of PAYEES if user wishes for PAYER_NAME to be included in the bill.","lastModifiedDate":"2021-09-25"},{"lineNumber":191,"author":{"gitId":"kheekheekhee"},"content":"* The names are required to be in the address book.","lastModifiedDate":"2021-09-25"},{"lineNumber":192,"author":{"gitId":"kheekheekhee"},"content":"* Each expense is a class with a unique ID.","lastModifiedDate":"2021-09-25"},{"lineNumber":193,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":194,"author":{"gitId":"kheekheekhee"},"content":"Examples:","lastModifiedDate":"2021-09-25"},{"lineNumber":195,"author":{"gitId":"kheekheekhee"},"content":"* add expense /des Dinner at MBS /by Jake 50.70 /for Jake, Jacob, Max, Julianne","lastModifiedDate":"2021-09-25"},{"lineNumber":196,"author":{"gitId":"kheekheekhee"},"content":"* add expense /des Koi /by Jake 20.00 /for Justin, Raj, Keith","lastModifiedDate":"2021-09-25"},{"lineNumber":197,"author":{"gitId":"kheekheekhee"},"content":"* add expense /des Souvenirs for friends /by Tom 20.00 Joan 30.00 Nicholas 10.00 /for Tom, Joan, Nicholas, Keith, Raj","lastModifiedDate":"2021-09-25"},{"lineNumber":198,"author":{"gitId":"kheekheekhee"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":199,"author":{"gitId":"marcuspeh"},"content":"### Viewing a shared expense: `expense`","lastModifiedDate":"2021-09-29"},{"lineNumber":200,"author":{"gitId":"marcuspeh"},"content":"Returns a message containing all existing expenses within the active travel group. Expenses are sorted from most recent to least recent.","lastModifiedDate":"2021-09-29"},{"lineNumber":201,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":202,"author":{"gitId":"marcuspeh"},"content":"Format: `expense INDEX`","lastModifiedDate":"2021-09-29"},{"lineNumber":203,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":204,"author":{"gitId":"marcuspeh"},"content":"* GROUP_ID argument is mandatory","lastModifiedDate":"2021-09-29"},{"lineNumber":205,"author":{"gitId":"marcuspeh"},"content":"* GROUP_ID must represent the id of an existing travel group","lastModifiedDate":"2021-09-29"},{"lineNumber":206,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":207,"author":{"gitId":"marcuspeh"},"content":"Examples: ","lastModifiedDate":"2021-09-29"},{"lineNumber":208,"author":{"gitId":"marcuspeh"},"content":"* `group` followed by `expense 1` shows all the expenses of the 1st travel group in the group list.","lastModifiedDate":"2021-09-29"},{"lineNumber":209,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":210,"author":{"gitId":"Jingwencloud"},"content":"### Deleting a shared expense: `delete expense`","lastModifiedDate":"2021-09-25"},{"lineNumber":211,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":212,"author":{"gitId":"Jingwencloud"},"content":"Deletes a shared expense from the currently active travel group.","lastModifiedDate":"2021-09-25"},{"lineNumber":213,"author":{"gitId":"Jingwencloud"},"content":"This command deletes the expense for all members involved in the expense.","lastModifiedDate":"2021-09-25"},{"lineNumber":214,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":215,"author":{"gitId":"Jingwencloud"},"content":"Format: `delete expense EXPENSE_ID`","lastModifiedDate":"2021-09-25"},{"lineNumber":216,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":217,"author":{"gitId":"Jingwencloud"},"content":"* EXPENSE_ID argument is mandatory.","lastModifiedDate":"2021-09-25"},{"lineNumber":218,"author":{"gitId":"Jingwencloud"},"content":"* EXPENSE_ID must represent the id of an existing expense object.","lastModifiedDate":"2021-09-25"},{"lineNumber":219,"author":{"gitId":"Jingwencloud"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":220,"author":{"gitId":"Jingwencloud"},"content":"Examples:","lastModifiedDate":"2021-09-25"},{"lineNumber":221,"author":{"gitId":"Jingwencloud"},"content":"* `delete expense 10213`","lastModifiedDate":"2021-09-25"},{"lineNumber":222,"author":{"gitId":"Jingwencloud"},"content":"* `delete expense 33421`","lastModifiedDate":"2021-09-25"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":224,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"marcuspeh"},"content":"AWE data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-09-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":230,"author":{"gitId":"marcuspeh"},"content":"AWE data are saved as a JSON file `[JAR file location]/data/awe.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-09-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":232,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":233,"author":{"gitId":"marcuspeh"},"content":"If your changes to the data file makes its format invalid, AWE will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-09-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":236,"author":{"gitId":"marcuspeh"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2021-09-29"},{"lineNumber":237,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":238,"author":{"gitId":"marcuspeh"},"content":"Clears all entries from the AWE.","lastModifiedDate":"2021-09-29"},{"lineNumber":239,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":240,"author":{"gitId":"marcuspeh"},"content":"Format: `clear`","lastModifiedDate":"2021-09-29"},{"lineNumber":241,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":242,"author":{"gitId":"marcuspeh"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2021-09-29"},{"lineNumber":243,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":244,"author":{"gitId":"marcuspeh"},"content":"Exits the program.","lastModifiedDate":"2021-09-29"},{"lineNumber":245,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":246,"author":{"gitId":"marcuspeh"},"content":"Format: `exit`","lastModifiedDate":"2021-09-29"},{"lineNumber":247,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":248,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":249,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"ramapriyan912001"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AWE home folder.","lastModifiedDate":"2021-09-30"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"marcuspeh"},"content":"**Q**: What if the Jar file does not open properly when I double click on it?\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":260,"author":{"gitId":"marcuspeh"},"content":"**A**: Open a command prompt in that folder and run the command `java -jar -ea AWE.jar`.","lastModifiedDate":"2021-09-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":262,"author":{"gitId":"marcuspeh"},"content":"**Q**: What do I do if I see `AWE.jar` cannot be opened because it is from an unidentified developer when I double click the jar file on a mac?\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":263,"author":{"gitId":"marcuspeh"},"content":"**A**: Go to ` System Preferences -\u003e Security and Privacy -\u003e General` and click on `Open anyways` as such","lastModifiedDate":"2021-09-23"},{"lineNumber":264,"author":{"gitId":"marcuspeh"},"content":"![Mac Security Preference](images/MacSecurityPreference.png)\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":265,"author":{"gitId":"marcuspeh"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":266,"author":{"gitId":"marcuspeh"},"content":"If your questions are not answered in the FAQ, check out the issue page on our GitHub linked [here](https://github.com/AY2122S1-CS2103T-F13-1/tp/issues).","lastModifiedDate":"2021-09-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"marcuspeh"},"content":"**Add Contact** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`","lastModifiedDate":"2021-09-29"},{"lineNumber":274,"author":{"gitId":"marcuspeh"},"content":"**Add Expense** | `add expense add expense /des DESCRIPTION /by PAYER_NAME1 AMOUNT PAID BY NAME 1 /for PAYEE_NAME1 PAYEE_NAME 2` \u003cbr\u003e e.g., `add expense /des Koi /by Jake 20.00 /for Justin, Raj, Keith`","lastModifiedDate":"2021-09-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"marcuspeh"},"content":"**Create Group** | `create group GROUP_NAME : NAME1 : NAME2 : NAME3` \u003cbr\u003e e.g., `create group Bali : Jacob Tan : Max Chia : Julianne Tay`","lastModifiedDate":"2021-09-29"},{"lineNumber":277,"author":{"gitId":"marcuspeh"},"content":"**Delete Contact** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2021-09-29"},{"lineNumber":278,"author":{"gitId":"marcuspeh"},"content":"**Delete Group** | `delete group GROUP_NAME` \u003cbr\u003e e.g., `delete group Vienna`","lastModifiedDate":"2021-09-29"},{"lineNumber":279,"author":{"gitId":"marcuspeh"},"content":"**Delete Expense** | `delete expense EXPENSE_ID` \u003cbr\u003e e.g., `delete expense 5`","lastModifiedDate":"2021-09-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"marcuspeh"},"content":"**View Contacts** | `contacts`","lastModifiedDate":"2021-09-29"},{"lineNumber":284,"author":{"gitId":"marcuspeh"},"content":"**View Groups** | `groups`","lastModifiedDate":"2021-09-29"},{"lineNumber":285,"author":{"gitId":"marcuspeh"},"content":"**View Expense** | `expense INDEX` \u003cbr\u003e e.g., `expense 2`","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"marcuspeh":60,"Jingwencloud":13,"kheekheekhee":18,"chrus-chong":4,"ramapriyan912001":24,"-":166}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"marcuspeh"},"content":"    content: \"AWE\";","lastModifiedDate":"2021-09-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"marcuspeh":1,"-":294}},{"path":"docs/team/marcuspeh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marcuspeh"},"content":"---","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"marcuspeh"},"content":"layout: page","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"marcuspeh"},"content":"title: Marcus Peh\u0027s Project Portfolio Page","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"marcuspeh"},"content":"---","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"marcuspeh"},"content":"### Project: Around the World in $80","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"marcuspeh"},"content":"Around the World in $80 is a desktop application that splits bills between different contacts. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"marcuspeh"},"content":"Given below are my contributions to the project. [RepoSense link]()","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"marcuspeh"},"content":"### Features","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"marcuspeh"},"content":"* **New Feature**: Added the ability to change between contacts and groups view.","lastModifiedDate":"2021-10-03"},{"lineNumber":14,"author":{"gitId":"marcuspeh"},"content":"  * What it does: Allows the user to see groups / contacts with a command.","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"marcuspeh"},"content":"  * Justification: This feature is crucial as the user should be able to view the groups and contacts created.","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"marcuspeh"},"content":"  * Highlights: This implementation added in a new command `groups` to see all groups. It changes the command `list` to `contacts`. `contacts` allows the user to see all contacts.","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"marcuspeh"},"content":"  * RepoSense: [link](https://app.codecov.io/gh/AY2122S1-CS2103T-F13-1/tp/compare/121)","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"marcuspeh"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"marcuspeh"},"content":"  * Updated the UI interface layout. [\\#121](https://github.com/AY2122S1-CS2103T-F13-1/tp/pull/121)","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"marcuspeh"},"content":"  * Added in buttons to toggle between contacts page and group page [\\#121](https://github.com/AY2122S1-CS2103T-F13-1/tp/pull/121)","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"marcuspeh"},"content":"### Others","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"marcuspeh"},"content":"* **Project management**","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"marcuspeh"},"content":"  * Managed releases: -","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":27,"author":{"gitId":"marcuspeh"},"content":"* **Documentation**:","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"marcuspeh"},"content":"  * User Guide:","lastModifiedDate":"2021-10-03"},{"lineNumber":29,"author":{"gitId":"marcuspeh"},"content":"    * Added documentation for the features `view groups` and `expenses`","lastModifiedDate":"2021-10-03"},{"lineNumber":30,"author":{"gitId":"marcuspeh"},"content":"  * Developer Guide:","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"marcuspeh"},"content":"    * Added use cases for `view groups`, `find person` and `view expenses`.","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"marcuspeh"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"marcuspeh"},"content":"* **Community**:","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"marcuspeh"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#113](https://github.com/AY2122S1-CS2103T-F13-1/tp/pull/113)","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"marcuspeh"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"marcuspeh"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"marcuspeh"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"marcuspeh":37}},{"path":"docs/team/ramapriyansrivatsanpurisaidevarajan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ramapriyan912001"},"content":"---","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"ramapriyan912001"},"content":"layout: page","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"ramapriyan912001"},"content":"title: Ramapriyan Srivatsan Purisai Devarajan\u0027s Project Portfolio Page","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"---","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"ramapriyan912001"},"content":"### Project: Around the World in $80","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"Around the World in $80 is a desktop application that allows group travellers to split bills between different contacts. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"Given below are my contributions to the project. [RepoSense link]()","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"ramapriyan912001"},"content":"### Features","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"ramapriyan912001"},"content":"* **New Feature**: Constructed the `deletegroup` feature","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"    * What it does: Allows the user to delete a group with a command.","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"ramapriyan912001"},"content":"    * Justification: This feature is crucial as the user should be able to delete groups once they are obsolete or if the user has made an error.","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"ramapriyan912001"},"content":"    * Highlights: This implementation added in a new command `deletegroup` to delete a group by name.","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"ramapriyan912001"},"content":"    * Contribution: Built the entire framework for the feature.","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"ramapriyan912001"},"content":"* **New Feature**: Contributed to `creategroup` feature.","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"ramapriyan912001"},"content":"  * What it does: Allows the user to create a group with select members with a command.","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"ramapriyan912001"},"content":"  * Justification: This feature is crucial as the user should be able to create groups with select members based on their travels.","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"ramapriyan912001"},"content":"  * Highlights: This implementation added in a new command `creategroup` to create a group with select members.","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"ramapriyan912001"},"content":"  * Contribution: Adapted command format and parser. Contributed significantly to the logic for storage of groups.","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"ramapriyan912001"},"content":"### Others","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"ramapriyan912001"},"content":"* **Project management**","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"ramapriyan912001"},"content":"    * Managed releases: -","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"ramapriyan912001"},"content":"* **Documentation**:","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"ramapriyan912001"},"content":"    * User Guide:","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"ramapriyan912001"},"content":"        * Added documentation for the feature `delete group`.","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"ramapriyan912001"},"content":"        * Added details of `Quick Start`.","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"ramapriyan912001"},"content":"    * Developer Guide:","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"ramapriyan912001"},"content":"        * Added use cases for `delete group` and `help`.","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"ramapriyan912001"},"content":"    * Created labels for issue-tracking and documentation.","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":37,"author":{"gitId":"ramapriyan912001"},"content":"* **Community**:","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"ramapriyan912001"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#113]()","lastModifiedDate":"2021-10-04"},{"lineNumber":39,"author":{"gitId":"ramapriyan912001"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-10-04"},{"lineNumber":40,"author":{"gitId":"ramapriyan912001"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"ramapriyan912001":40}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"chrus-chong"},"content":"        addressBookParser \u003d new AddressBookParser(model);","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"chrus-chong":1,"-":80}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"ramapriyan912001"},"content":"    public abstract CommandResult execute(Model model) throws CommandException, DuplicateGroupException;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ramapriyan912001":2,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/CreateGroupCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chrus-chong"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"chrus-chong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"chrus-chong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.GroupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"chrus-chong"},"content":"public class CreateGroupCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"chrus-chong"},"content":"    public static final String COMMAND_WORD \u003d \"creategroup\";","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"chrus-chong"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New group created\";","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"chrus-chong"},"content":"    public static final String MESSAGE_ERROR \u003d \"Group not created. Be sure to use the exact names of group members\";","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"chrus-chong"},"content":"    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists\";","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String MESSAGE_USAGE \u003d \"creategroup gn/[GROUPNAME] n/[NAME1] n/[OPTIONAL NAME2]...\";","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String MESSAGE_EMPTY_GROUP \u003d \"Group requires at least 1 member. \\n%1$s\";","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"chrus-chong"},"content":"    private final ArrayList\u003cPerson\u003e members;","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"ramapriyan912001"},"content":"    private GroupName groupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"chrus-chong"},"content":"    private final boolean validCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"chrus-chong"},"content":"     * Creates a CreateGroupCommand to create the specified {@code Group}","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"ramapriyan912001"},"content":"    public CreateGroupCommand(GroupName groupName, ArrayList\u003cPerson\u003e members, boolean validCommand) {","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"ramapriyan912001"},"content":"        this.groupName \u003d groupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"chrus-chong"},"content":"        this.members \u003d members;","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"chrus-chong"},"content":"        this.validCommand \u003d validCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"chrus-chong"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"ramapriyan912001"},"content":"    public CommandResult execute(Model model) throws CommandException, DuplicateGroupException {","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"chrus-chong"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"chrus-chong"},"content":"        if (!validCommand) {","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"chrus-chong"},"content":"            return new CommandResult(MESSAGE_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"chrus-chong"},"content":"        Group group \u003d new Group(groupName, members);","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"chrus-chong"},"content":"        model.addGroup(group);","lastModifiedDate":"2021-10-02"},{"lineNumber":42,"author":{"gitId":"chrus-chong"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"chrus-chong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"chrus-chong":36,"ramapriyan912001":8}},{"path":"src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ramapriyan912001"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"ramapriyan912001"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_NAME;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"public class DeleteGroupCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String COMMAND_WORD \u003d \"deletegroup\";","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": deletes a group from the address book. \"","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"ramapriyan912001"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"            + PREFIX_GROUP_NAME + \"GROUP_NAME \";","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Group deleted: %1$s\";","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String MESSAGE_GROUP_DOES_NOT_EXIST \u003d \"This group does not exist in the address book\";","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"ramapriyan912001"},"content":"    private Group group;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"ramapriyan912001"},"content":"     * Delete group command, delete based on name","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"ramapriyan912001"},"content":"     * @param group group object to be deleted","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"ramapriyan912001"},"content":"    public DeleteGroupCommand(Group group) {","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"ramapriyan912001"},"content":"        this.group \u003d group;","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"ramapriyan912001"},"content":"     * Get group field","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"ramapriyan912001"},"content":"     * @return Group object","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"ramapriyan912001"},"content":"    public Group getGroup() {","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"ramapriyan912001"},"content":"        return group;","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"ramapriyan912001"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"ramapriyan912001"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"ramapriyan912001"},"content":"        if (!model.hasGroup(group)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"ramapriyan912001"},"content":"            throw new CommandException(MESSAGE_GROUP_DOES_NOT_EXIST);","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"ramapriyan912001"},"content":"        model.deleteGroup(group);","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"ramapriyan912001"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, group));","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"ramapriyan912001"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"chrus-chong":2,"ramapriyan912001":47}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":69,"author":{"gitId":"chrus-chong"},"content":"     * Returns CommandResult object with message representing successful edit of person.","lastModifiedDate":"2021-10-03"},{"lineNumber":70,"author":{"gitId":"chrus-chong"},"content":"     * If not a valid command, returns CommandResult object with error message.","lastModifiedDate":"2021-10-03"},{"lineNumber":71,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":72,"author":{"gitId":"chrus-chong"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-03"},{"lineNumber":73,"author":{"gitId":"chrus-chong"},"content":"     * @return CommandResult object to depict status of edit operation.","lastModifiedDate":"2021-10-03"},{"lineNumber":74,"author":{"gitId":"chrus-chong"},"content":"     * @throws CommandException If model is null.","lastModifiedDate":"2021-10-03"},{"lineNumber":75,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);","lastModifiedDate":"2021-10-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"chrus-chong":8,"-":226}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.logic.commands.CreateGroupCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.logic.parser.exceptions.EmptyGroupException;","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"chrus-chong"},"content":"    private Model model;","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"chrus-chong"},"content":"    public AddressBookParser() {}","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"chrus-chong"},"content":"    public AddressBookParser(Model model) {","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"chrus-chong"},"content":"        this.model \u003d model;","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"ramapriyan912001"},"content":"    public Command parseCommand(String userInput) throws ParseException, EmptyGroupException {","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"chrus-chong"},"content":"        case CreateGroupCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"chrus-chong"},"content":"            return new CreateGroupParser(model).parse(arguments);","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":83,"author":{"gitId":"ramapriyan912001"},"content":"        case DeleteGroupCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"ramapriyan912001"},"content":"            return new DeleteGroupParser(model).parse(arguments);","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"chrus-chong":9,"ramapriyan912001":5,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"ramapriyan912001"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"ramapriyan912001"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"ramapriyan912001"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"ramapriyan912001"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"ramapriyan912001"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"ramapriyan912001"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2021-10-03"},{"lineNumber":38,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"ramapriyan912001"},"content":"    public static ArgumentMultimap tokenizeStringWithRepeatedPrefixes(String argsString, Prefix repeatedPrefix,","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"ramapriyan912001"},"content":"                                                                      Prefix... prefixes) {","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"ramapriyan912001"},"content":"        int startOfRepeatedPrefix \u003d argsString.indexOf(\" \" + repeatedPrefix.getPrefix());","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"ramapriyan912001"},"content":"        if (startOfRepeatedPrefix \u003d\u003d -1) {","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"ramapriyan912001"},"content":"            return new ArgumentMultimap();","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"ramapriyan912001"},"content":"        String stringWihoutRepeatedPrefixes \u003d argsString.substring(0, startOfRepeatedPrefix);","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"ramapriyan912001"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(stringWihoutRepeatedPrefixes, prefixes);","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"ramapriyan912001"},"content":"        return extractArguments(stringWihoutRepeatedPrefixes, positions);","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"ramapriyan912001":20,"-":148}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"    public static final Prefix PREFIX_GROUP_NAME \u003d new Prefix(\"gn/\");","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"ramapriyan912001":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/CreateGroupParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chrus-chong"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"ramapriyan912001"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"import static seedu.address.logic.commands.CreateGroupCommand.MESSAGE_EMPTY_GROUP;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"ramapriyan912001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_NAME;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"ramapriyan912001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"chrus-chong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"chrus-chong"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"chrus-chong"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.logic.commands.CreateGroupCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.logic.parser.exceptions.EmptyGroupException;","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.GroupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"chrus-chong"},"content":"public class CreateGroupParser implements Parser\u003cCreateGroupCommand\u003e {","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"chrus-chong"},"content":"    private static final String BAD_FORMATTING \u003d \"\\\"creategroup command\\\" is not properly formatted\";","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"chrus-chong"},"content":"    private ObservableList\u003cPerson\u003e allMembers;","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"chrus-chong"},"content":"    private final ArrayList\u003cPerson\u003e toBeAddedToGroup;","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"chrus-chong"},"content":"     * Creates new CreateGroupParser object.","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"chrus-chong"},"content":"     * @param model Model object passed into constructor to provide list of contacts.","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"chrus-chong"},"content":"    public CreateGroupParser(Model model) {","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"chrus-chong"},"content":"        ReadOnlyAddressBook addressBook \u003d model.getAddressBook();","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"chrus-chong"},"content":"        this.allMembers \u003d addressBook.getPersonList();","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"chrus-chong"},"content":"        this.toBeAddedToGroup \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"chrus-chong"},"content":"     * Returns CreateGroupCommand based on user input.","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"chrus-chong"},"content":"     * @param args User input into addressbook.","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"chrus-chong"},"content":"     * @return CreateGroupCommand object to represent command to be executed.","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"chrus-chong"},"content":"     * @throws ParseException If user input is incorrectly formatted.","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"chrus-chong"},"content":"    public CreateGroupCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"ramapriyan912001"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"ramapriyan912001"},"content":"                ArgumentTokenizer.tokenizeStringWithRepeatedPrefixes(args, PREFIX_NAME, PREFIX_GROUP_NAME);","lastModifiedDate":"2021-10-03"},{"lineNumber":48,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":49,"author":{"gitId":"ramapriyan912001"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GROUP_NAME)","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"ramapriyan912001"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"ramapriyan912001"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateGroupCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":53,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"chrus-chong"},"content":"        ArrayList\u003cPerson\u003e members \u003d findGroupMembers(args);","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":56,"author":{"gitId":"ramapriyan912001"},"content":"        GroupName groupName \u003d ParserUtil.parseGroupName(argMultimap.getValue(PREFIX_GROUP_NAME).get());","lastModifiedDate":"2021-10-03"},{"lineNumber":57,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":58,"author":{"gitId":"chrus-chong"},"content":"        boolean validCommand \u003d true;","lastModifiedDate":"2021-09-18"},{"lineNumber":59,"author":{"gitId":"ramapriyan912001"},"content":"        if (groupName.equals(BAD_FORMATTING) || Objects.isNull(members)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":60,"author":{"gitId":"chrus-chong"},"content":"            validCommand \u003d false;","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":63,"author":{"gitId":"chrus-chong"},"content":"        return new CreateGroupCommand(groupName, members, validCommand);","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":67,"author":{"gitId":"chrus-chong"},"content":"     * Returns group name from user input.","lastModifiedDate":"2021-09-18"},{"lineNumber":68,"author":{"gitId":"chrus-chong"},"content":"     * If user input invalid, BAD_FORMATTING is returned.","lastModifiedDate":"2021-09-18"},{"lineNumber":69,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":70,"author":{"gitId":"chrus-chong"},"content":"     * @param args String object representing user input into the addressbook.","lastModifiedDate":"2021-09-18"},{"lineNumber":71,"author":{"gitId":"chrus-chong"},"content":"     * @return String object representing group name.","lastModifiedDate":"2021-09-18"},{"lineNumber":72,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":73,"author":{"gitId":"chrus-chong"},"content":"    private String findGroupName(String args) {","lastModifiedDate":"2021-09-18"},{"lineNumber":74,"author":{"gitId":"chrus-chong"},"content":"        //assuming it is already a valid command which will be checked beforehand","lastModifiedDate":"2021-09-18"},{"lineNumber":75,"author":{"gitId":"chrus-chong"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":76,"author":{"gitId":"chrus-chong"},"content":"            int startIndex \u003d 1;","lastModifiedDate":"2021-09-18"},{"lineNumber":77,"author":{"gitId":"chrus-chong"},"content":"            int endIndex \u003d args.indexOf(\u0027:\u0027) - 1;","lastModifiedDate":"2021-09-18"},{"lineNumber":78,"author":{"gitId":"chrus-chong"},"content":"            return args.substring(startIndex, endIndex);","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"chrus-chong"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"chrus-chong"},"content":"            return BAD_FORMATTING;","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":83,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"ramapriyan912001"},"content":"     * Returns list of members in the group.","lastModifiedDate":"2021-10-04"},{"lineNumber":86,"author":{"gitId":"ramapriyan912001"},"content":"     * If user input not valid, null is returned.","lastModifiedDate":"2021-10-04"},{"lineNumber":87,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":88,"author":{"gitId":"chrus-chong"},"content":"     * @param args String object representing user input into the addressbook.","lastModifiedDate":"2021-09-18"},{"lineNumber":89,"author":{"gitId":"ramapriyan912001"},"content":"     * @return ArrayList of Person objects representing members to be added to the group","lastModifiedDate":"2021-10-04"},{"lineNumber":90,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":91,"author":{"gitId":"ramapriyan912001"},"content":"    private ArrayList\u003cPerson\u003e findGroupMembers(String args) throws ParseException {","lastModifiedDate":"2021-10-03"},{"lineNumber":92,"author":{"gitId":"chrus-chong"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":93,"author":{"gitId":"ramapriyan912001"},"content":"            int startIndex \u003d args.indexOf(\" n/\") + 3;","lastModifiedDate":"2021-10-03"},{"lineNumber":94,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":95,"author":{"gitId":"ramapriyan912001"},"content":"            if (startIndex \u003d\u003d 1) {","lastModifiedDate":"2021-10-03"},{"lineNumber":96,"author":{"gitId":"ramapriyan912001"},"content":"                throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);","lastModifiedDate":"2021-10-03"},{"lineNumber":97,"author":{"gitId":"ramapriyan912001"},"content":"            }","lastModifiedDate":"2021-10-03"},{"lineNumber":98,"author":{"gitId":"chrus-chong"},"content":"            String teamMembers \u003d args.substring(startIndex);","lastModifiedDate":"2021-09-18"},{"lineNumber":99,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":100,"author":{"gitId":"ramapriyan912001"},"content":"            int nextPrefix \u003d teamMembers.indexOf(\" n/\");","lastModifiedDate":"2021-10-03"},{"lineNumber":101,"author":{"gitId":"ramapriyan912001"},"content":"            while (nextPrefix !\u003d -1) {","lastModifiedDate":"2021-10-03"},{"lineNumber":102,"author":{"gitId":"ramapriyan912001"},"content":"                Name memberName \u003d new Name(teamMembers.substring(0, nextPrefix - 1));","lastModifiedDate":"2021-10-03"},{"lineNumber":103,"author":{"gitId":"chrus-chong"},"content":"                if (Objects.isNull(addMemberIfExist(memberName))) {","lastModifiedDate":"2021-09-18"},{"lineNumber":104,"author":{"gitId":"chrus-chong"},"content":"                    return null;","lastModifiedDate":"2021-09-18"},{"lineNumber":105,"author":{"gitId":"chrus-chong"},"content":"                }","lastModifiedDate":"2021-09-18"},{"lineNumber":106,"author":{"gitId":"ramapriyan912001"},"content":"                teamMembers \u003d teamMembers.substring(nextPrefix + 3);","lastModifiedDate":"2021-10-04"},{"lineNumber":107,"author":{"gitId":"ramapriyan912001"},"content":"                nextPrefix \u003d teamMembers.indexOf(\" n/\");","lastModifiedDate":"2021-10-03"},{"lineNumber":108,"author":{"gitId":"chrus-chong"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":109,"author":{"gitId":"ramapriyan912001"},"content":"            if (Objects.isNull(addMemberIfExist(new Name(teamMembers)))) {","lastModifiedDate":"2021-10-04"},{"lineNumber":110,"author":{"gitId":"ramapriyan912001"},"content":"                return null;","lastModifiedDate":"2021-10-04"},{"lineNumber":111,"author":{"gitId":"chrus-chong"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":112,"author":{"gitId":"chrus-chong"},"content":"            if (toBeAddedToGroup.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-18"},{"lineNumber":113,"author":{"gitId":"ramapriyan912001"},"content":"                throw new EmptyGroupException(MESSAGE_EMPTY_GROUP);","lastModifiedDate":"2021-10-03"},{"lineNumber":114,"author":{"gitId":"chrus-chong"},"content":"            } else {","lastModifiedDate":"2021-09-18"},{"lineNumber":115,"author":{"gitId":"ramapriyan912001"},"content":"                return toBeAddedToGroup;","lastModifiedDate":"2021-10-04"},{"lineNumber":116,"author":{"gitId":"chrus-chong"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":117,"author":{"gitId":"chrus-chong"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":118,"author":{"gitId":"chrus-chong"},"content":"            return null;","lastModifiedDate":"2021-09-18"},{"lineNumber":119,"author":{"gitId":"ramapriyan912001"},"content":"        } catch (EmptyGroupException err) {","lastModifiedDate":"2021-10-03"},{"lineNumber":120,"author":{"gitId":"ramapriyan912001"},"content":"            throw new EmptyGroupException(String.format(MESSAGE_EMPTY_GROUP, CreateGroupCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-03"},{"lineNumber":121,"author":{"gitId":"ramapriyan912001"},"content":"        } catch (ParseException err) {","lastModifiedDate":"2021-10-03"},{"lineNumber":122,"author":{"gitId":"ramapriyan912001"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateGroupCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-03"},{"lineNumber":123,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":124,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":125,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":126,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":127,"author":{"gitId":"ramapriyan912001"},"content":"     * Returns list of members in the group.","lastModifiedDate":"2021-10-04"},{"lineNumber":128,"author":{"gitId":"ramapriyan912001"},"content":"     * If user input not valid, null is returned.","lastModifiedDate":"2021-10-04"},{"lineNumber":129,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":130,"author":{"gitId":"chrus-chong"},"content":"     * @param memberName Name object representing name of member to be added.","lastModifiedDate":"2021-09-18"},{"lineNumber":131,"author":{"gitId":"ramapriyan912001"},"content":"     * @return ArrayList of Person objects representing members to be added to the group","lastModifiedDate":"2021-10-04"},{"lineNumber":132,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":133,"author":{"gitId":"ramapriyan912001"},"content":"    private ArrayList\u003cPerson\u003e addMemberIfExist(Name memberName) {","lastModifiedDate":"2021-10-04"},{"lineNumber":134,"author":{"gitId":"ramapriyan912001"},"content":"        Person memberFound \u003d findMember(memberName, this.allMembers);","lastModifiedDate":"2021-10-04"},{"lineNumber":135,"author":{"gitId":"ramapriyan912001"},"content":"        if (!Objects.isNull(memberFound)) {","lastModifiedDate":"2021-10-04"},{"lineNumber":136,"author":{"gitId":"ramapriyan912001"},"content":"            toBeAddedToGroup.add(memberFound);","lastModifiedDate":"2021-10-04"},{"lineNumber":137,"author":{"gitId":"chrus-chong"},"content":"        } else {","lastModifiedDate":"2021-09-18"},{"lineNumber":138,"author":{"gitId":"ramapriyan912001"},"content":"            return null;","lastModifiedDate":"2021-10-04"},{"lineNumber":139,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":140,"author":{"gitId":"ramapriyan912001"},"content":"        return this.toBeAddedToGroup;","lastModifiedDate":"2021-10-04"},{"lineNumber":141,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":142,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":143,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":144,"author":{"gitId":"ramapriyan912001"},"content":"     * Returns person that matches a given Name object if in addressbook.","lastModifiedDate":"2021-10-04"},{"lineNumber":145,"author":{"gitId":"ramapriyan912001"},"content":"     * If person not in addressbook, null is returned.","lastModifiedDate":"2021-10-04"},{"lineNumber":146,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":147,"author":{"gitId":"chrus-chong"},"content":"     * @param memberName Name object representing person that is being searched for in the addressbook.","lastModifiedDate":"2021-09-18"},{"lineNumber":148,"author":{"gitId":"chrus-chong"},"content":"     * @param members ObservableList of Person objects representing all contacts in the addressbook.","lastModifiedDate":"2021-09-18"},{"lineNumber":149,"author":{"gitId":"ramapriyan912001"},"content":"     * @return Person object if name matches that of a person from the addressbook.","lastModifiedDate":"2021-10-04"},{"lineNumber":150,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":151,"author":{"gitId":"ramapriyan912001"},"content":"    private Person findMember(Name memberName, ObservableList\u003cPerson\u003e members) {","lastModifiedDate":"2021-10-04"},{"lineNumber":152,"author":{"gitId":"chrus-chong"},"content":"        for (Person member : members) {","lastModifiedDate":"2021-09-18"},{"lineNumber":153,"author":{"gitId":"chrus-chong"},"content":"            if (member.getName().equals(memberName)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":154,"author":{"gitId":"ramapriyan912001"},"content":"                return member;","lastModifiedDate":"2021-10-04"},{"lineNumber":155,"author":{"gitId":"chrus-chong"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":156,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":157,"author":{"gitId":"ramapriyan912001"},"content":"        return null;","lastModifiedDate":"2021-10-04"},{"lineNumber":158,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":159,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":160,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":161,"author":{"gitId":"ramapriyan912001"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-03"},{"lineNumber":162,"author":{"gitId":"ramapriyan912001"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-03"},{"lineNumber":163,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":164,"author":{"gitId":"ramapriyan912001"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-03"},{"lineNumber":165,"author":{"gitId":"ramapriyan912001"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-03"},{"lineNumber":166,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":167,"author":{"gitId":"chrus-chong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"chrus-chong":100,"ramapriyan912001":67}},{"path":"src/main/java/seedu/address/logic/parser/DeleteGroupParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ramapriyan912001"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"ramapriyan912001"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_NAME;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"ramapriyan912001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"ramapriyan912001"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.GroupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"ramapriyan912001"},"content":"public class DeleteGroupParser implements Parser\u003cDeleteGroupCommand\u003e {","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"ramapriyan912001"},"content":"     * Creates new CreateGroupParser object.","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"ramapriyan912001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"ramapriyan912001"},"content":"     * @param model Model object passed into constructor to provide list of contacts.","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"ramapriyan912001"},"content":"    public DeleteGroupParser(Model model) {","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"ramapriyan912001"},"content":"        ReadOnlyAddressBook addressBook \u003d model.getAddressBook();","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"ramapriyan912001"},"content":"    //assume command is of the following form","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"ramapriyan912001"},"content":"    //deletegroup gn/Berlin","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"ramapriyan912001"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteGroupCommand","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"ramapriyan912001"},"content":"     * and returns an DeleteGroupCommand object for execution.","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"ramapriyan912001"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"ramapriyan912001"},"content":"    public DeleteGroupCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"ramapriyan912001"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"ramapriyan912001"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GROUP_NAME);","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"ramapriyan912001"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GROUP_NAME)","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"ramapriyan912001"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"ramapriyan912001"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"ramapriyan912001"},"content":"        GroupName groupName \u003d ParserUtil.parseGroupName(argMultimap.getValue(PREFIX_GROUP_NAME).get());","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"ramapriyan912001"},"content":"        Group group \u003d new Group(groupName, new ArrayList\u003c\u003e());","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"ramapriyan912001"},"content":"        return new DeleteGroupCommand(group);","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"ramapriyan912001"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"ramapriyan912001"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"ramapriyan912001"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"ramapriyan912001"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"ramapriyan912001"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"ramapriyan912001":56}},{"path":"src/main/java/seedu/address/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-07-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-07-06"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.logic.parser.exceptions.EmptyGroupException;","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"ramapriyan912001"},"content":"    T parse(String userInput) throws ParseException, EmptyGroupException;","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"ramapriyan912001":2,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.GroupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"ramapriyan912001"},"content":"     * Parses a {@code String groupName} into an {@code Group}.","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"ramapriyan912001"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"ramapriyan912001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"ramapriyan912001"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2021-09-26"},{"lineNumber":105,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":106,"author":{"gitId":"ramapriyan912001"},"content":"    public static GroupName parseGroupName(String groupName) throws ParseException {","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"ramapriyan912001"},"content":"        requireNonNull(groupName);","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"ramapriyan912001"},"content":"        String trimmedGroupName \u003d groupName.trim();","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"ramapriyan912001"},"content":"        if (!GroupName.isValidName(trimmedGroupName)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"ramapriyan912001"},"content":"            throw new ParseException(Group.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"ramapriyan912001"},"content":"        return new GroupName(trimmedGroupName);","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"ramapriyan912001":17,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/exceptions/EmptyGroupException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ramapriyan912001"},"content":"package seedu.address.logic.parser.exceptions;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"ramapriyan912001"},"content":"public class EmptyGroupException extends ParseException {","lastModifiedDate":"2021-10-03"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":5,"author":{"gitId":"ramapriyan912001"},"content":"    public EmptyGroupException(String message) {","lastModifiedDate":"2021-10-03"},{"lineNumber":6,"author":{"gitId":"ramapriyan912001"},"content":"        super(message);","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"    public EmptyGroupException(String message, Throwable cause) {","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"        super(message, cause);","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"ramapriyan912001"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"ramapriyan912001":12}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.UniqueGroupList;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":21,"author":{"gitId":"ramapriyan912001"},"content":"    private final UniqueGroupList groups;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":32,"author":{"gitId":"ramapriyan912001"},"content":"        groups \u003d new UniqueGroupList();","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"ramapriyan912001"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"ramapriyan912001"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"ramapriyan912001"},"content":"    public void setGroups(List\u003cGroup\u003e groups) {","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"ramapriyan912001"},"content":"        this.groups.setGroups(groups);","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":70,"author":{"gitId":"ramapriyan912001"},"content":"        setGroups(newData.getGroupList());","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":123,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":124,"author":{"gitId":"ramapriyan912001"},"content":"     * Adds group to unique group list.","lastModifiedDate":"2021-10-03"},{"lineNumber":125,"author":{"gitId":"ramapriyan912001"},"content":"     * @param group new Group object to be added.","lastModifiedDate":"2021-10-03"},{"lineNumber":126,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":127,"author":{"gitId":"ramapriyan912001"},"content":"    public void addGroup(Group group) throws DuplicateGroupException {","lastModifiedDate":"2021-10-04"},{"lineNumber":128,"author":{"gitId":"ramapriyan912001"},"content":"        groups.add(group);","lastModifiedDate":"2021-09-26"},{"lineNumber":129,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":130,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":131,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":132,"author":{"gitId":"ramapriyan912001"},"content":"     * Removes group from unique group list.","lastModifiedDate":"2021-10-03"},{"lineNumber":133,"author":{"gitId":"ramapriyan912001"},"content":"     * @param group new Group object to be removed.","lastModifiedDate":"2021-10-03"},{"lineNumber":134,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":135,"author":{"gitId":"ramapriyan912001"},"content":"    public void removeGroup(Group group) {","lastModifiedDate":"2021-09-26"},{"lineNumber":136,"author":{"gitId":"ramapriyan912001"},"content":"        groups.remove(group);","lastModifiedDate":"2021-09-26"},{"lineNumber":137,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":138,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":139,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":140,"author":{"gitId":"ramapriyan912001"},"content":"     * Checks that group is present based on group name.","lastModifiedDate":"2021-09-26"},{"lineNumber":141,"author":{"gitId":"ramapriyan912001"},"content":"     * @param group Group object","lastModifiedDate":"2021-09-26"},{"lineNumber":142,"author":{"gitId":"ramapriyan912001"},"content":"     * @return boolean","lastModifiedDate":"2021-09-26"},{"lineNumber":143,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":144,"author":{"gitId":"ramapriyan912001"},"content":"    public boolean hasGroup(Group group) {","lastModifiedDate":"2021-09-26"},{"lineNumber":145,"author":{"gitId":"ramapriyan912001"},"content":"        requireNonNull(group);","lastModifiedDate":"2021-09-26"},{"lineNumber":146,"author":{"gitId":"ramapriyan912001"},"content":"        return groups.contains(group);","lastModifiedDate":"2021-09-26"},{"lineNumber":147,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":148,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":149,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":150,"author":{"gitId":"ramapriyan912001"},"content":"    public ObservableList\u003cGroup\u003e getGroupList() {","lastModifiedDate":"2021-09-26"},{"lineNumber":151,"author":{"gitId":"ramapriyan912001"},"content":"        return groups.asUnmodifiableObservableList();","lastModifiedDate":"2021-09-26"},{"lineNumber":152,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":153,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":158,"author":{"gitId":"ramapriyan912001"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons)","lastModifiedDate":"2021-09-26"},{"lineNumber":159,"author":{"gitId":"ramapriyan912001"},"content":"                \u0026\u0026 groups.equals(((AddressBook) other).groups));","lastModifiedDate":"2021-09-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ramapriyan912001":47,"-":119}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":91,"author":{"gitId":"chrus-chong"},"content":"     * Adds the given group.","lastModifiedDate":"2021-10-02"},{"lineNumber":92,"author":{"gitId":"chrus-chong"},"content":"     * {@code Group} must not already exist in the address book.","lastModifiedDate":"2021-10-02"},{"lineNumber":93,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":94,"author":{"gitId":"ramapriyan912001"},"content":"    void addGroup(Group person) throws DuplicateGroupException;","lastModifiedDate":"2021-10-04"},{"lineNumber":95,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":96,"author":{"gitId":"ramapriyan912001"},"content":"    void deleteGroup(Group group);","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"ramapriyan912001"},"content":"    boolean hasGroup(Group group);","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"chrus-chong":5,"ramapriyan912001":7,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":134,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-10-02"},{"lineNumber":135,"author":{"gitId":"chrus-chong"},"content":"     * Adds group into addressbook.","lastModifiedDate":"2021-10-03"},{"lineNumber":136,"author":{"gitId":"chrus-chong"},"content":"     * Assumption is that group name is unique.","lastModifiedDate":"2021-10-02"},{"lineNumber":137,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":138,"author":{"gitId":"chrus-chong"},"content":"     * @param group Group object representing members going on a trip.","lastModifiedDate":"2021-10-02"},{"lineNumber":139,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-10-02"},{"lineNumber":140,"author":{"gitId":"chrus-chong"},"content":"    @Override","lastModifiedDate":"2021-10-02"},{"lineNumber":141,"author":{"gitId":"ramapriyan912001"},"content":"    public void addGroup(Group group) throws DuplicateGroupException {","lastModifiedDate":"2021-10-04"},{"lineNumber":142,"author":{"gitId":"chrus-chong"},"content":"        addressBook.addGroup(group);","lastModifiedDate":"2021-10-02"},{"lineNumber":143,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":145,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":146,"author":{"gitId":"ramapriyan912001"},"content":"     * Deletes group based on groupName.","lastModifiedDate":"2021-09-26"},{"lineNumber":147,"author":{"gitId":"ramapriyan912001"},"content":"     * Assumption is that group name is unique.","lastModifiedDate":"2021-09-26"},{"lineNumber":148,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":149,"author":{"gitId":"chrus-chong"},"content":"     * @param group Group object representing members going on a trip.","lastModifiedDate":"2021-10-03"},{"lineNumber":150,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":151,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":152,"author":{"gitId":"ramapriyan912001"},"content":"    public void deleteGroup(Group group) {","lastModifiedDate":"2021-09-26"},{"lineNumber":153,"author":{"gitId":"ramapriyan912001"},"content":"        addressBook.removeGroup(group);","lastModifiedDate":"2021-09-26"},{"lineNumber":154,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":155,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":156,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":157,"author":{"gitId":"chrus-chong"},"content":"     * Returns boolean representing if a given group is in the model.","lastModifiedDate":"2021-10-03"},{"lineNumber":158,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":159,"author":{"gitId":"chrus-chong"},"content":"     * @param group Group object representing members going on a trip.","lastModifiedDate":"2021-10-03"},{"lineNumber":160,"author":{"gitId":"chrus-chong"},"content":"     * @return boolean object representing if a given group is in the model.","lastModifiedDate":"2021-10-03"},{"lineNumber":161,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":162,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":163,"author":{"gitId":"ramapriyan912001"},"content":"    public boolean hasGroup(Group group) {","lastModifiedDate":"2021-09-26"},{"lineNumber":164,"author":{"gitId":"ramapriyan912001"},"content":"        requireNonNull(group);","lastModifiedDate":"2021-09-26"},{"lineNumber":165,"author":{"gitId":"ramapriyan912001"},"content":"        return addressBook.hasGroup(group);","lastModifiedDate":"2021-09-26"},{"lineNumber":166,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":167,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"chrus-chong":15,"ramapriyan912001":20,"-":152}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"ramapriyan912001"},"content":"    ObservableList\u003cGroup\u003e getGroupList();","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ramapriyan912001":2,"-":17}},{"path":"src/main/java/seedu/address/model/group/Group.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chrus-chong"},"content":"package seedu.address.model.group;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"chrus-chong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"chrus-chong"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"chrus-chong"},"content":"import java.util.Set;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"chrus-chong"},"content":"public class Group {","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"MESSAGE_CONSTRAINT TO BE COMPLETED\";","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"ramapriyan912001"},"content":"    //TODO: WRITE MESSAGE CONSTRAINTS MESSAGE","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"ramapriyan912001"},"content":"    private GroupName groupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"chrus-chong"},"content":"    private final ArrayList\u003cPerson\u003e members \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"chrus-chong"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"chrus-chong"},"content":"     * Creates new Group object.","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"ramapriyan912001"},"content":"     * @param groupName String object representing name of the group.","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"chrus-chong"},"content":"     * @param members ArrayList of Person objects representing list of members.","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"ramapriyan912001"},"content":"    public Group(GroupName groupName, ArrayList\u003cPerson\u003e members) {","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"ramapriyan912001"},"content":"        this.groupName \u003d groupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"chrus-chong"},"content":"        for (Person member : members) {","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"chrus-chong"},"content":"            this.addMember(member);","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"chrus-chong"},"content":"     * Creates new Group object with tags.","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"ramapriyan912001"},"content":"     * @param groupName String object representing name of the group.","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"chrus-chong"},"content":"     * @param members ArrayList of Person objects representing list of members.","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"chrus-chong"},"content":"     * @param tags Set of Tag objects to describe group.","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"ramapriyan912001"},"content":"    public Group(GroupName groupName, ArrayList\u003cPerson\u003e members, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"ramapriyan912001"},"content":"        this.groupName \u003d groupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"chrus-chong"},"content":"        for (Person member : members) {","lastModifiedDate":"2021-09-24"},{"lineNumber":40,"author":{"gitId":"chrus-chong"},"content":"            this.addMember(member);","lastModifiedDate":"2021-09-24"},{"lineNumber":41,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":42,"author":{"gitId":"chrus-chong"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"chrus-chong"},"content":"     * Adds member to Group.","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"chrus-chong"},"content":"     * @param member Person object representing member to be added to group.","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"chrus-chong"},"content":"    public void addMember(Person member) {","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"chrus-chong"},"content":"        this.members.add(member);","lastModifiedDate":"2021-09-24"},{"lineNumber":52,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"chrus-chong"},"content":"     * Removes member from Group.","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":57,"author":{"gitId":"chrus-chong"},"content":"     * @param member Person object representing member to be removed from group.","lastModifiedDate":"2021-09-18"},{"lineNumber":58,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":59,"author":{"gitId":"chrus-chong"},"content":"    public void removeMember(Person member) {","lastModifiedDate":"2021-09-18"},{"lineNumber":60,"author":{"gitId":"chrus-chong"},"content":"        this.members.remove(member);","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"ramapriyan912001"},"content":"    public GroupName getGroupName() {","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"ramapriyan912001"},"content":"        return groupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":67,"author":{"gitId":"chrus-chong"},"content":"    public ArrayList\u003cPerson\u003e getMembers() {","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"chrus-chong"},"content":"        return members;","lastModifiedDate":"2021-09-24"},{"lineNumber":69,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":70,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":71,"author":{"gitId":"chrus-chong"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"chrus-chong"},"content":"        return tags;","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"ramapriyan912001"},"content":"    public boolean isSameGroup(Group group) {","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"ramapriyan912001"},"content":"        return this.groupName.equals(group.getGroupName());","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"ramapriyan912001"},"content":"    public String toString() {","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"ramapriyan912001"},"content":"        //TODO: TO BE IMPROVED TO POSSIBLY LIST ALL MEMBERS NAMES","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"ramapriyan912001"},"content":"        return String.format(\"Group %s with %d members\", this.groupName, this.members.size());","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"chrus-chong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"chrus-chong":65,"ramapriyan912001":19}},{"path":"src/main/java/seedu/address/model/group/GroupName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ramapriyan912001"},"content":"package seedu.address.model.group;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"ramapriyan912001"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"ramapriyan912001"},"content":"public class GroupName {","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"    /*","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"ramapriyan912001"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"ramapriyan912001"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"ramapriyan912001"},"content":"    public final String name;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"ramapriyan912001"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"ramapriyan912001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"ramapriyan912001"},"content":"     * @param name A valid name.","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"ramapriyan912001"},"content":"    public GroupName(String name) {","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"ramapriyan912001"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"ramapriyan912001"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"ramapriyan912001"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"ramapriyan912001"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"ramapriyan912001"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"ramapriyan912001"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"ramapriyan912001"},"content":"    public String toString() {","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"ramapriyan912001"},"content":"        return name;","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"ramapriyan912001"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"ramapriyan912001"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"ramapriyan912001"},"content":"                || (other instanceof GroupName // instanceof handles nulls","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"ramapriyan912001"},"content":"                \u0026\u0026 name.equals(((GroupName) other).name)); // state check","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"ramapriyan912001"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"ramapriyan912001"},"content":"        return name.hashCode();","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"ramapriyan912001"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"ramapriyan912001":54}},{"path":"src/main/java/seedu/address/model/group/UniqueGroupList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ramapriyan912001"},"content":"package seedu.address.model.group;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"ramapriyan912001"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"ramapriyan912001"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"ramapriyan912001"},"content":"import java.util.List;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"ramapriyan912001"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"ramapriyan912001"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"ramapriyan912001"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"ramapriyan912001"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"ramapriyan912001"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"ramapriyan912001"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"ramapriyan912001"},"content":" *","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"ramapriyan912001"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"ramapriyan912001"},"content":" *","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"ramapriyan912001"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"ramapriyan912001"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"ramapriyan912001"},"content":"public class UniqueGroupList implements Iterable\u003cGroup\u003e {","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"ramapriyan912001"},"content":"    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"ramapriyan912001"},"content":"    private final ObservableList\u003cGroup\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"ramapriyan912001"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"ramapriyan912001"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"ramapriyan912001"},"content":"    public boolean contains(Group toCheck) {","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"ramapriyan912001"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"ramapriyan912001"},"content":"        return internalList.stream().anyMatch(toCheck::isSameGroup);","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"ramapriyan912001"},"content":"     * Adds a person to the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"ramapriyan912001"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"ramapriyan912001"},"content":"    public void add(Group toAdd) throws DuplicateGroupException {","lastModifiedDate":"2021-10-04"},{"lineNumber":46,"author":{"gitId":"ramapriyan912001"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"ramapriyan912001"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"ramapriyan912001"},"content":"            throw new DuplicateGroupException();","lastModifiedDate":"2021-10-04"},{"lineNumber":49,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"ramapriyan912001"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"ramapriyan912001"},"content":"     * Replaces the group {@code target} in the list with {@code editedGroup}.","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"ramapriyan912001"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"ramapriyan912001"},"content":"     * The group identity of {@code editedGroup} must not be the same as another existing group in the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"ramapriyan912001"},"content":"    public void setGroup(Group target, Group editedGroup) throws DuplicateGroupException {","lastModifiedDate":"2021-10-04"},{"lineNumber":59,"author":{"gitId":"ramapriyan912001"},"content":"        requireAllNonNull(target, editedGroup);","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"ramapriyan912001"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"ramapriyan912001"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"ramapriyan912001"},"content":"            throw new GroupNotFoundException();","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"ramapriyan912001"},"content":"        if (!target.isSameGroup(editedGroup) \u0026\u0026 contains(editedGroup)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"ramapriyan912001"},"content":"            throw new DuplicateGroupException();","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"ramapriyan912001"},"content":"        internalList.set(index, editedGroup);","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"ramapriyan912001"},"content":"     * Removes the equivalent group from the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"ramapriyan912001"},"content":"     * The group must exist in the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"ramapriyan912001"},"content":"    public void remove(Group toRemove) {","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"ramapriyan912001"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"ramapriyan912001"},"content":"        boolean groupFound \u003d false;","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"ramapriyan912001"},"content":"        Group groupToDelete \u003d null;","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"ramapriyan912001"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"ramapriyan912001"},"content":"            Group group \u003d internalList.get(i);","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"ramapriyan912001"},"content":"            if (group.isSameGroup(toRemove)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"ramapriyan912001"},"content":"                groupFound \u003d true;","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"ramapriyan912001"},"content":"                groupToDelete \u003d group;","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"ramapriyan912001"},"content":"                break;","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"ramapriyan912001"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"ramapriyan912001"},"content":"        if (!groupFound) {","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"ramapriyan912001"},"content":"            throw new GroupNotFoundException();","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"ramapriyan912001"},"content":"        internalList.remove(groupToDelete);","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":94,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"ramapriyan912001"},"content":"    public void setGroups(UniqueGroupList replacement) {","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"ramapriyan912001"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"ramapriyan912001"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"ramapriyan912001"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"ramapriyan912001"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"ramapriyan912001"},"content":"    public void setGroups(List\u003cGroup\u003e groups) {","lastModifiedDate":"2021-09-26"},{"lineNumber":105,"author":{"gitId":"ramapriyan912001"},"content":"        requireAllNonNull(groups);","lastModifiedDate":"2021-09-26"},{"lineNumber":106,"author":{"gitId":"ramapriyan912001"},"content":"        if (!groupsAreUnique(groups)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"ramapriyan912001"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"ramapriyan912001"},"content":"        internalList.setAll(groups);","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"ramapriyan912001"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-09-26"},{"lineNumber":115,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":116,"author":{"gitId":"ramapriyan912001"},"content":"    public ObservableList\u003cGroup\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"ramapriyan912001"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-09-26"},{"lineNumber":118,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":119,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":120,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":121,"author":{"gitId":"ramapriyan912001"},"content":"    public Iterator\u003cGroup\u003e iterator() {","lastModifiedDate":"2021-09-26"},{"lineNumber":122,"author":{"gitId":"ramapriyan912001"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-09-26"},{"lineNumber":123,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":124,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":125,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":126,"author":{"gitId":"ramapriyan912001"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-09-26"},{"lineNumber":127,"author":{"gitId":"ramapriyan912001"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-09-26"},{"lineNumber":128,"author":{"gitId":"ramapriyan912001"},"content":"                || (other instanceof UniqueGroupList // instanceof handles nulls","lastModifiedDate":"2021-09-26"},{"lineNumber":129,"author":{"gitId":"ramapriyan912001"},"content":"                \u0026\u0026 internalList.equals(((UniqueGroupList) other).internalList));","lastModifiedDate":"2021-09-26"},{"lineNumber":130,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":131,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":132,"author":{"gitId":"ramapriyan912001"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":133,"author":{"gitId":"ramapriyan912001"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-26"},{"lineNumber":134,"author":{"gitId":"ramapriyan912001"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-09-26"},{"lineNumber":135,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":136,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":137,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":138,"author":{"gitId":"ramapriyan912001"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2021-09-26"},{"lineNumber":139,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":140,"author":{"gitId":"ramapriyan912001"},"content":"    private boolean groupsAreUnique(List\u003cGroup\u003e groups) {","lastModifiedDate":"2021-09-26"},{"lineNumber":141,"author":{"gitId":"ramapriyan912001"},"content":"        for (int i \u003d 0; i \u003c groups.size() - 1; i++) {","lastModifiedDate":"2021-09-26"},{"lineNumber":142,"author":{"gitId":"ramapriyan912001"},"content":"            for (int j \u003d i + 1; j \u003c groups.size(); j++) {","lastModifiedDate":"2021-09-26"},{"lineNumber":143,"author":{"gitId":"ramapriyan912001"},"content":"                if (groups.get(i).isSameGroup(groups.get(j))) {","lastModifiedDate":"2021-09-26"},{"lineNumber":144,"author":{"gitId":"ramapriyan912001"},"content":"                    return false;","lastModifiedDate":"2021-09-26"},{"lineNumber":145,"author":{"gitId":"ramapriyan912001"},"content":"                }","lastModifiedDate":"2021-09-26"},{"lineNumber":146,"author":{"gitId":"ramapriyan912001"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":147,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":148,"author":{"gitId":"ramapriyan912001"},"content":"        return true;","lastModifiedDate":"2021-09-26"},{"lineNumber":149,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":150,"author":{"gitId":"ramapriyan912001"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"ramapriyan912001":150}},{"path":"src/main/java/seedu/address/model/group/exceptions/DuplicateGroupException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ramapriyan912001"},"content":"package seedu.address.model.group.exceptions;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"ramapriyan912001"},"content":"public class DuplicateGroupException extends ParseException {","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"ramapriyan912001"},"content":"    public DuplicateGroupException() {","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"ramapriyan912001"},"content":"        super(\"Operation would result in duplicate groups\");","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"ramapriyan912001":9}},{"path":"src/main/java/seedu/address/model/group/exceptions/GroupNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ramapriyan912001"},"content":"package seedu.address.model.group.exceptions;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"ramapriyan912001"},"content":"public class GroupNotFoundException extends RuntimeException {","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"ramapriyan912001":4}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"chrus-chong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"chrus-chong"},"content":"import java.util.List;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"chrus-chong"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":30,"author":{"gitId":"chrus-chong"},"content":"    private final List\u003cGroup\u003e groups \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":60,"author":{"gitId":"chrus-chong"},"content":"    public List\u003cGroup\u003e getGroups() {","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"chrus-chong"},"content":"        return groups;","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":73,"author":{"gitId":"chrus-chong"},"content":"     * Returns an ArrayList of groups that the instance of Person belongs to.","lastModifiedDate":"2021-10-03"},{"lineNumber":74,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":75,"author":{"gitId":"chrus-chong"},"content":"     * @param groups ObservableList of Group objects that exist in the addressbook.","lastModifiedDate":"2021-10-03"},{"lineNumber":76,"author":{"gitId":"chrus-chong"},"content":"     * @return ArrayList of Group objects that the instance of Person belongs to.","lastModifiedDate":"2021-10-03"},{"lineNumber":77,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":78,"author":{"gitId":"chrus-chong"},"content":"    public ArrayList\u003cGroup\u003e getPersonGroups(ObservableList\u003cGroup\u003e groups) {","lastModifiedDate":"2021-10-03"},{"lineNumber":79,"author":{"gitId":"chrus-chong"},"content":"        ArrayList personGroups \u003d new ArrayList();","lastModifiedDate":"2021-10-03"},{"lineNumber":80,"author":{"gitId":"chrus-chong"},"content":"        for (Group group : groups) {","lastModifiedDate":"2021-10-03"},{"lineNumber":81,"author":{"gitId":"chrus-chong"},"content":"            if (group.getMembers().stream().anyMatch(p -\u003e p.getName().equals(this.getName()))) {","lastModifiedDate":"2021-10-03"},{"lineNumber":82,"author":{"gitId":"chrus-chong"},"content":"                personGroups.add(group);","lastModifiedDate":"2021-10-03"},{"lineNumber":83,"author":{"gitId":"chrus-chong"},"content":"            }","lastModifiedDate":"2021-10-03"},{"lineNumber":84,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":85,"author":{"gitId":"chrus-chong"},"content":"        return personGroups;","lastModifiedDate":"2021-10-03"},{"lineNumber":86,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":87,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":88,"author":{"gitId":"chrus-chong"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":89,"author":{"gitId":"chrus-chong"},"content":"     * Returns a String representation of group names that the instance of Person belongs to.","lastModifiedDate":"2021-10-03"},{"lineNumber":90,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":91,"author":{"gitId":"chrus-chong"},"content":"     * @param groups ObservableList of Group objects that exist in the addressbook.","lastModifiedDate":"2021-10-03"},{"lineNumber":92,"author":{"gitId":"chrus-chong"},"content":"     * @return String object representing all groups that the instance of Person belongs to.","lastModifiedDate":"2021-10-03"},{"lineNumber":93,"author":{"gitId":"chrus-chong"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":94,"author":{"gitId":"chrus-chong"},"content":"    public String getGroupsName(ObservableList\u003cGroup\u003e groups) {","lastModifiedDate":"2021-10-03"},{"lineNumber":95,"author":{"gitId":"chrus-chong"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-10-03"},{"lineNumber":96,"author":{"gitId":"chrus-chong"},"content":"        ArrayList\u003cGroup\u003e personGroups \u003d getPersonGroups(groups);","lastModifiedDate":"2021-10-03"},{"lineNumber":97,"author":{"gitId":"chrus-chong"},"content":"        for (Group group : personGroups) {","lastModifiedDate":"2021-10-03"},{"lineNumber":98,"author":{"gitId":"chrus-chong"},"content":"            result \u003d result + group.getGroupName() + \", \";","lastModifiedDate":"2021-10-03"},{"lineNumber":99,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":100,"author":{"gitId":"chrus-chong"},"content":"        return result;","lastModifiedDate":"2021-10-03"},{"lineNumber":101,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":102,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":116,"author":{"gitId":"chrus-chong"},"content":"    public void addGroup(Group group) {","lastModifiedDate":"2021-09-18"},{"lineNumber":117,"author":{"gitId":"chrus-chong"},"content":"        this.groups.add(group);","lastModifiedDate":"2021-09-18"},{"lineNumber":118,"author":{"gitId":"chrus-chong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":119,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2021-10-03"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"chrus-chong":44,"-":123}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedGroup.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ramapriyan912001"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"ramapriyan912001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"ramapriyan912001"},"content":"import java.util.List;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"ramapriyan912001"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"ramapriyan912001"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.GroupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"ramapriyan912001"},"content":"public class JsonAdaptedGroup {","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"ramapriyan912001"},"content":"    private final String groupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"ramapriyan912001"},"content":"    private final List\u003cJsonAdaptedPerson\u003e members \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"chrus-chong"},"content":"     * Constructs a {@code JsonAdaptedGroup} with the given group details.","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"ramapriyan912001"},"content":"    @JsonCreator","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"ramapriyan912001"},"content":"    public JsonAdaptedGroup(@JsonProperty(\"name\") String groupName,","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"ramapriyan912001"},"content":"                            @JsonProperty(\"members\") List\u003cJsonAdaptedPerson\u003e members) {","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"ramapriyan912001"},"content":"        this.groupName \u003d groupName;","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"ramapriyan912001"},"content":"        this.members.addAll(members);","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"ramapriyan912001"},"content":"     * Converts a given {@code Group} into this class for Jackson use.","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"ramapriyan912001"},"content":"    public JsonAdaptedGroup(Group source) {","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"ramapriyan912001"},"content":"        groupName \u003d source.getGroupName().name;","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"ramapriyan912001"},"content":"        members.addAll(source.getMembers().stream()","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"ramapriyan912001"},"content":"                .map(JsonAdaptedPerson::new)","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"ramapriyan912001"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"ramapriyan912001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"ramapriyan912001"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Group} object.","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"ramapriyan912001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"ramapriyan912001"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"ramapriyan912001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"ramapriyan912001"},"content":"    public Group toModelType() throws IllegalValueException {","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"ramapriyan912001"},"content":"        final ArrayList\u003cPerson\u003e modelMembers \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"ramapriyan912001"},"content":"        for (JsonAdaptedPerson member : members) {","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"ramapriyan912001"},"content":"            modelMembers.add(member.toModelType());","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"ramapriyan912001"},"content":"        if (groupName \u003d\u003d null) {","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"ramapriyan912001"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"ramapriyan912001"},"content":"        if (!GroupName.isValidName(groupName)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"ramapriyan912001"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"ramapriyan912001"},"content":"        final GroupName modelName \u003d new GroupName(groupName);","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"ramapriyan912001"},"content":"        return new Group(modelName, modelMembers);","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"ramapriyan912001"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"chrus-chong":1,"ramapriyan912001":64}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"ramapriyan912001"},"content":"    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"Groups list contains duplicate group(s).\";","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"ramapriyan912001"},"content":"    private final List\u003cJsonAdaptedGroup\u003e groups \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"ramapriyan912001"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"ramapriyan912001"},"content":"                                       @JsonProperty(\"groups\") List\u003cJsonAdaptedGroup\u003e groups) {","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"ramapriyan912001"},"content":"        this.groups.addAll(groups);","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"ramapriyan912001"},"content":"        groups.addAll(source.getGroupList().stream().map(JsonAdaptedGroup::new).collect(Collectors.toList()));","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"ramapriyan912001"},"content":"        for (JsonAdaptedGroup jsonAdaptedGroup : groups) {","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"ramapriyan912001"},"content":"            Group group \u003d jsonAdaptedGroup.toModelType();","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"ramapriyan912001"},"content":"            if (addressBook.hasGroup(group)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"ramapriyan912001"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_GROUP);","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"ramapriyan912001"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"ramapriyan912001"},"content":"            addressBook.addGroup(group);","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ramapriyan912001":16,"-":59}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"chrus-chong"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.getAddressBook());","lastModifiedDate":"2021-10-03"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"chrus-chong":1,"-":195}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"chrus-chong"},"content":" * A UI component that displays information of a {@code Person}.","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"chrus-chong"},"content":"    private Label groups;","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"chrus-chong"},"content":"    @FXML","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"chrus-chong"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"chrus-chong"},"content":"     * Introduce addressbook here so that personCard can display group membership of each person without adding Group","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"chrus-chong"},"content":"     * as an attribute of Person class. Doing so prevents circular dependencies.","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":53,"author":{"gitId":"chrus-chong"},"content":"    public PersonCard(Person person, int displayedIndex, ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"chrus-chong"},"content":"        groups.setText(person.getGroupsName(addressBook.getGroupList()));","lastModifiedDate":"2021-10-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"chrus-chong":9,"-":75}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"chrus-chong"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"chrus-chong"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList, ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2021-10-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":30,"author":{"gitId":"chrus-chong"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell(addressBook));","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":37,"author":{"gitId":"chrus-chong"},"content":"        private final ReadOnlyAddressBook addressBook;","lastModifiedDate":"2021-10-03"},{"lineNumber":38,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"chrus-chong"},"content":"        public PersonListViewCell(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"chrus-chong"},"content":"            this.addressBook \u003d addressBook;","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"chrus-chong"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1, this.addressBook).getRoot());","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"chrus-chong":10,"-":46}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"chrus-chong"},"content":"      \u003cLabel fx:id\u003d\"groups\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$groups\" /\u003e","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"chrus-chong":1,"-":36}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"ramapriyan912001"},"content":"  } ],","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"  \"groups\": [","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"ramapriyan912001"},"content":"    {","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"ramapriyan912001"},"content":"      \"name\": \"Dubai\",","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"ramapriyan912001"},"content":"      \"members\": [","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"ramapriyan912001"},"content":"        {","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"ramapriyan912001"},"content":"          \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"ramapriyan912001"},"content":"          \"phone\": \"94351253\",","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"ramapriyan912001"},"content":"          \"email\": \"pauline@example.com\",","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"ramapriyan912001"},"content":"          \"address\": \"4th street\"","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"ramapriyan912001"},"content":"        },","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"ramapriyan912001"},"content":"        {","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"ramapriyan912001"},"content":"          \"name\": \"Alice Pauline\",","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"ramapriyan912001"},"content":"          \"phone\": \"94351253\",","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"ramapriyan912001"},"content":"          \"email\": \"pauline@example.com\",","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"ramapriyan912001"},"content":"          \"address\": \"4th street\"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"ramapriyan912001"},"content":"      ]","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"ramapriyan912001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"ramapriyan912001"},"content":"  ]","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ramapriyan912001":20,"-":13}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"ramapriyan912001"},"content":"  } ],","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"ramapriyan912001"},"content":"  \"groups\": [ {","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"ramapriyan912001"},"content":"    \"name\": \"Bali\",","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"ramapriyan912001"},"content":"    \"members\": [{","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"ramapriyan912001"},"content":"      \"name\": \"Hans Muster\",","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"ramapriyan912001"},"content":"      \"phone\": \"9482424\",","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"ramapriyan912001"},"content":"      \"email\": \"invalid@email!3e\",","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"ramapriyan912001"},"content":"      \"address\": \"4th street\"","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"ramapriyan912001"},"content":"    }]","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  }]","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ramapriyan912001":9,"-":8}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"ramapriyan912001"},"content":"  } ],","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"ramapriyan912001"},"content":"  \"groups\": []","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ramapriyan912001":2,"-":45}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":152,"author":{"gitId":"ramapriyan912001"},"content":"        @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":153,"author":{"gitId":"ramapriyan912001"},"content":"        public void deleteGroup(Group group) {","lastModifiedDate":"2021-09-26"},{"lineNumber":154,"author":{"gitId":"ramapriyan912001"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-26"},{"lineNumber":155,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":156,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":157,"author":{"gitId":"ramapriyan912001"},"content":"        @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":158,"author":{"gitId":"ramapriyan912001"},"content":"        public boolean hasGroup(Group group) {","lastModifiedDate":"2021-09-26"},{"lineNumber":159,"author":{"gitId":"ramapriyan912001"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-09-26"},{"lineNumber":160,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":161,"author":{"gitId":"chrus-chong"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":162,"author":{"gitId":"chrus-chong"},"content":"        @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":163,"author":{"gitId":"chrus-chong"},"content":"        public void addGroup(Group group) {","lastModifiedDate":"2021-10-03"},{"lineNumber":164,"author":{"gitId":"chrus-chong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-03"},{"lineNumber":165,"author":{"gitId":"chrus-chong"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"chrus-chong":5,"ramapriyan912001":11,"-":194}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"ramapriyan912001"},"content":"        } catch (DuplicateGroupException dge) {","lastModifiedDate":"2021-10-04"},{"lineNumber":87,"author":{"gitId":"ramapriyan912001"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", dge);","lastModifiedDate":"2021-10-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"ramapriyan912001":3,"-":128}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"ramapriyan912001"},"content":"import seedu.address.model.group.Group;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"ramapriyan912001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"ramapriyan912001"},"content":"        /**","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"ramapriyan912001"},"content":"         * //TODO","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"ramapriyan912001"},"content":"         */","lastModifiedDate":"2021-09-26"},{"lineNumber":105,"author":{"gitId":"ramapriyan912001"},"content":"        @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":106,"author":{"gitId":"ramapriyan912001"},"content":"        public ObservableList\u003cGroup\u003e getGroupList() {","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"ramapriyan912001"},"content":"            return null;","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"ramapriyan912001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"ramapriyan912001":9,"-":102}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"ramapriyan912001"},"content":"        System.out.println(\"here\");","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ramapriyan912001":1,"-":47}}]
