[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"didymental"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103-W14-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S1-CS2103-W14-1/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"## Doc\u0027it","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"Today, small family clinics often record patient information using paper application forms. Such recording of patient information results in the clinic having a messy and inefficient patient record information; the family clinic will have to flip through files and documents in order to find the patient. Doc’it aims to provide a centralised platform for authorised staff from small family clinics to view, update and onboard patients. With Doc’it, small family clinics are able to reduce man hours from managing paper documents, and translate these ‘saved’ hours into providing better frontline service to patients, focusing on what they do best.","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":"* Doc\u0027it is a Patient Record manager for staff from small family clinics to keep track of patients, patient appointments and their respective details.","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"* It is meant to be used regularly, and requires the user to consistently update on a routine basis.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"* Doc\u0027it is:","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":"  * written in OOP fashion.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"  * built off from the ```AddressBook-Level3``` project created by the [SE-EDU initiative](https://se-education.org/addressbook-level3)","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"## Site Map","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"* [User Guide](docs/UserGuide.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"* [Developer Guide](docs/DeveloperGuide.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"* [About Us](docs/AboutUs.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"## Acknowledgements","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"* This project is based on the ```AddressBook-Level3``` (`AB3` for short) project created by the [SE-EDU initiative](https://se-education.org)","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"* For the detailed documentation of `AB3`, see the **[Address Book Product Website](https://se-education.org/addressbook-level3)**.","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":5,"didymental":18}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"### Rishabh Anand","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"\u003cimg src\u003d\"images/rish-16.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"[[github](http://github.com/rish-16)]","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"[[portfolio](team/rishabh.md)]","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"* Responsibilities: Integration, Backend","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"### Gabriel Goh","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"\u003cimg src\u003d\"images/gycgabriel.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"[[github](http://github.com/gycgabriel)]","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"[[portfolio](team/gycgabriel.md)]","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"* Role: Developer","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"* Responsibilities: Scheduling and Tracking","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"### Yu Xin","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"\u003cimg src\u003d\"images/huyuxin0429.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"[[github](https://github.com/huyuxin0429)]","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"[[portfolio](team/huyuxin0429.md)]","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"* Responsibilities: Testing","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"### Didymus","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"\u003cimg src\u003d\"images/didymental.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"[[github](https://github.com/didymental)]","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"[[portfolio](team/didymus.md)]","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"* Responsibilities: Documentation, Deliverables and deadlines","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"### Joshen","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"\u003cimg src\u003d\"images/joshenx.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"[[github](https://github.com/joshenx)]","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"[[portfolio](team/joshenx.md)]","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"* Responsibilities: UI, Coding Standard","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"rish-16":5,"joshenx":5,"huyuxin0429":5,"-":32,"gycgabriel":6,"didymental":5}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  {:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"huyuxin0429"},"content":"* Authorised staff from small family clinics (both receptionist and doctors)","lastModifiedDate":"2021-09-28"},{"lineNumber":261,"author":{"gitId":"huyuxin0429"},"content":"* Clinics lacking access to the cloud and are undeveloped compared to hospitals","lastModifiedDate":"2021-09-28"},{"lineNumber":262,"author":{"gitId":"huyuxin0429"},"content":"* Young clinics that do not have technological capabilities","lastModifiedDate":"2021-09-28"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":265,"author":{"gitId":"huyuxin0429"},"content":"**Value proposition**:","lastModifiedDate":"2021-09-28"},{"lineNumber":266,"author":{"gitId":"huyuxin0429"},"content":"Today, small family clinics often record patient information using paper application forms.","lastModifiedDate":"2021-09-28"},{"lineNumber":267,"author":{"gitId":"huyuxin0429"},"content":"Such recording of patient information results in the clinic having a messy and inefficient patient record information;","lastModifiedDate":"2021-09-28"},{"lineNumber":268,"author":{"gitId":"huyuxin0429"},"content":"the family clinic will have to flip through files and documents in order to find the patient. Doc’it aims to provide a","lastModifiedDate":"2021-09-28"},{"lineNumber":269,"author":{"gitId":"huyuxin0429"},"content":"centralised platform for authorised staff from small family clinics to view, update and onboard patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":270,"author":{"gitId":"huyuxin0429"},"content":"With Doc’it, small family clinics are able to reduce man hours from managing paper documents,","lastModifiedDate":"2021-09-28"},{"lineNumber":271,"author":{"gitId":"huyuxin0429"},"content":"and translate these ‘saved’ hours into providing better frontline service to patients, focusing on what they do best.","lastModifiedDate":"2021-09-28"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"| Priority | As a …​                  | I want to …​                                              | So that I can…​                                                           |","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"huyuxin0429"},"content":"| -------- | --------------------------- | ------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------- |","lastModifiedDate":"2021-09-28"},{"lineNumber":280,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff                | create new patient details                                                                 | add data of new patients in our clinic                                       |","lastModifiedDate":"2021-09-28"},{"lineNumber":281,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff                | add medical history to patient details                                                     | have a background on the patient                                             |","lastModifiedDate":"2021-09-28"},{"lineNumber":282,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff                | view patient details                                                                       | better prescribe medication and treatments to my out-patients                |","lastModifiedDate":"2021-09-28"},{"lineNumber":283,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff                | delete patient details                                                                     | manage patients’ need for privacy when patients no longer visit the clinic   |","lastModifiedDate":"2021-09-28"},{"lineNumber":284,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff                | view the prescriptions currently prescribed to my patients                                 | provide correct prescriptions to them                                        |","lastModifiedDate":"2021-09-28"},{"lineNumber":285,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff                | create new appointments from patients                                                      | track upcoming appointments                                                  |","lastModifiedDate":"2021-09-28"},{"lineNumber":286,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff                | view appointments from patients                                                            | know at-a-glance what are the upcoming appointments and the patients involved|","lastModifiedDate":"2021-09-28"},{"lineNumber":287,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff                | delete appointments from patients                                                          | re-organise appointments when either side cancels their appointments         |","lastModifiedDate":"2021-09-28"},{"lineNumber":288,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff                | have appointments moved to appointment history                                             | separate what are the upcoming appointments from past appointments           |","lastModifiedDate":"2021-09-28"},{"lineNumber":289,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff                | view past appointments                                                                     | track their medical history                                                  |","lastModifiedDate":"2021-09-28"},{"lineNumber":290,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | edit appointments from patients                                                            | ensure appointment records are up-to-date                                    |","lastModifiedDate":"2021-09-28"},{"lineNumber":291,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | modify patient details                                                                     | ensure that any changes in their information are up-to-date                  |","lastModifiedDate":"2021-09-28"},{"lineNumber":292,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | edit prescriptions                                                                         | ensure my patients’ current prescriptions are up-to-date                     |","lastModifiedDate":"2021-09-28"},{"lineNumber":293,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | view the duration of prescriptions                                                         | decide whether they should be given additional prescriptions                 |","lastModifiedDate":"2021-09-28"},{"lineNumber":294,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | move prescriptions to prescription history when patients have finished that prescription   |                                                                              |","lastModifiedDate":"2021-09-28"},{"lineNumber":295,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | view the prescription history of patients                                                  | know what drugs my patients have taken before                                |","lastModifiedDate":"2021-09-28"},{"lineNumber":296,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | cannot edit past prescriptions                                                             | prevent erroneous edits                                                      |","lastModifiedDate":"2021-09-28"},{"lineNumber":297,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | verify that the patient has paid for his appointment                                       | record that the patient has paid the bills                                   |","lastModifiedDate":"2021-09-28"},{"lineNumber":298,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | input the bill and price of the patient appointment                                        | record the amount that the patient has paid                                  |","lastModifiedDate":"2021-09-28"},{"lineNumber":299,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | prevent editing past appointments                                                          | ensure past records cannot be incorrectly modified                           |","lastModifiedDate":"2021-09-28"},{"lineNumber":300,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | filter patients by name                                                                    | pull up patient records easily when requested                                |","lastModifiedDate":"2021-09-28"},{"lineNumber":301,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | filter patients by the date of their appointment                                           | know the list of patients per appointment day                                |","lastModifiedDate":"2021-09-28"},{"lineNumber":302,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | filter patients by their prescriptions                                                     | gauge the demand of prescription_drug needed by the clinic                   |","lastModifiedDate":"2021-09-28"},{"lineNumber":303,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | new clinic staff            | go through a tutorial at the beginning                                                     | familiarise myself with how the app works and what it can do                 |","lastModifiedDate":"2021-09-28"},{"lineNumber":304,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | new clinic staff            | type a command to get all available commands and how they work                             | easily refer to the commands I can make                                      |","lastModifiedDate":"2021-09-28"},{"lineNumber":305,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | purge all current data                                                                     | delete any experimental records                                              |","lastModifiedDate":"2021-09-28"},{"lineNumber":306,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | long term clinic staff      | use shortened command aliases                                                              | speed up my work                                                             |","lastModifiedDate":"2021-09-28"},{"lineNumber":307,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | easily make changes to the patient records without too many commands                       | my work can be done faster                                                   |","lastModifiedDate":"2021-09-28"},{"lineNumber":308,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | view information on an appealing GUI                                                       | view information that is neatly organised                                    |","lastModifiedDate":"2021-09-28"},{"lineNumber":309,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff                | share a single patient database with other clinic staff                                    | ensure all changes are synced                                                |","lastModifiedDate":"2021-09-28"},{"lineNumber":310,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":311,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"didymental"},"content":"(For all use cases below, the **System** is the `Doc\u0027it` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-09-28"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"didymental"},"content":"**Use case: UC01 - List all patients**","lastModifiedDate":"2021-09-28"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"didymental"},"content":"1.  User requests to list patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":324,"author":{"gitId":"didymental"},"content":"2.  Doc\u0027it displays all patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":325,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":326,"author":{"gitId":"didymental"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":327,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":328,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":329,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":330,"author":{"gitId":"didymental"},"content":"* 1a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":331,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":332,"author":{"gitId":"didymental"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":333,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":334,"author":{"gitId":"didymental"},"content":"**Use case: UC02 - Add a patient**","lastModifiedDate":"2021-09-28"},{"lineNumber":335,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":336,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":337,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":338,"author":{"gitId":"didymental"},"content":"1.  User requests to add a patient.","lastModifiedDate":"2021-09-28"},{"lineNumber":339,"author":{"gitId":"didymental"},"content":"2.  Doc\u0027it adds the patient with necessary information.","lastModifiedDate":"2021-09-28"},{"lineNumber":340,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":341,"author":{"gitId":"didymental"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":342,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":343,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":344,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":345,"author":{"gitId":"didymental"},"content":"* 1a. Necessary details of patient are absent (name, NRIC).","lastModifiedDate":"2021-09-28"},{"lineNumber":346,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":347,"author":{"gitId":"didymental"},"content":"    * 1a1. Doc\u0027it shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":348,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":349,"author":{"gitId":"didymental"},"content":"  Use case resumes at step 1.","lastModifiedDate":"2021-09-28"},{"lineNumber":350,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":351,"author":{"gitId":"didymental"},"content":"* 1b. Patient details conflict with existing patient list.","lastModifiedDate":"2021-09-28"},{"lineNumber":352,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":353,"author":{"gitId":"didymental"},"content":"    * 1b1. Doc\u0027it shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":355,"author":{"gitId":"didymental"},"content":"  Use case resumes at step 1.","lastModifiedDate":"2021-09-28"},{"lineNumber":356,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":357,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":358,"author":{"gitId":"didymental"},"content":"**Use case: UC03 - Delete a patient**","lastModifiedDate":"2021-09-28"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":360,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":362,"author":{"gitId":"didymental"},"content":"1.  User requests to list patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":363,"author":{"gitId":"didymental"},"content":"2.  Doc\u0027it shows a list of patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":364,"author":{"gitId":"didymental"},"content":"3.  User requests to delete a specific patient in the list.","lastModifiedDate":"2021-09-28"},{"lineNumber":365,"author":{"gitId":"didymental"},"content":"4.  Doc\u0027it deletes the person.","lastModifiedDate":"2021-09-28"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"didymental"},"content":"    * 3a1. Doc\u0027it shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"didymental"},"content":"**Use case: UC04 - View the records of a patient**","lastModifiedDate":"2021-09-28"},{"lineNumber":382,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":383,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":384,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":385,"author":{"gitId":"didymental"},"content":"1.  User requests to view a patient record.","lastModifiedDate":"2021-09-28"},{"lineNumber":386,"author":{"gitId":"didymental"},"content":"2.  Doc\u0027it shows the details of the patient.","lastModifiedDate":"2021-09-28"},{"lineNumber":387,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":388,"author":{"gitId":"didymental"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":389,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":390,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":391,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":392,"author":{"gitId":"didymental"},"content":"* 1a. The specified patient does not exist.","lastModifiedDate":"2021-09-28"},{"lineNumber":393,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":394,"author":{"gitId":"didymental"},"content":"    * 1a1. Doc\u0027it shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":395,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":396,"author":{"gitId":"didymental"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2021-09-28"},{"lineNumber":397,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":398,"author":{"gitId":"didymental"},"content":"**Use case: UC05 - List all appointments**","lastModifiedDate":"2021-09-28"},{"lineNumber":399,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":400,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":401,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":402,"author":{"gitId":"didymental"},"content":"1.  User requests to list appointments.","lastModifiedDate":"2021-09-28"},{"lineNumber":403,"author":{"gitId":"didymental"},"content":"2.  Doc\u0027it displays all appointments.","lastModifiedDate":"2021-09-28"},{"lineNumber":404,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":405,"author":{"gitId":"didymental"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":406,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":407,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":408,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":409,"author":{"gitId":"didymental"},"content":"* 1a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":410,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":411,"author":{"gitId":"didymental"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":412,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":413,"author":{"gitId":"didymental"},"content":"**Use case: UC06 - Add an appointment**","lastModifiedDate":"2021-09-28"},{"lineNumber":414,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":415,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":416,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":417,"author":{"gitId":"didymental"},"content":"1.  User requests to list patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":418,"author":{"gitId":"didymental"},"content":"2.  Doc\u0027it displays all patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":419,"author":{"gitId":"didymental"},"content":"3.  User adds an appointment, matching the appointment to the specific patient.","lastModifiedDate":"2021-09-28"},{"lineNumber":420,"author":{"gitId":"didymental"},"content":"4.  Doc\u0027it adds the appointment and tags it to the patient.","lastModifiedDate":"2021-09-28"},{"lineNumber":421,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":422,"author":{"gitId":"didymental"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":423,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":424,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":425,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":426,"author":{"gitId":"didymental"},"content":"* 3a. The date of the appointment AND/OR the specified patient are invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":427,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":428,"author":{"gitId":"didymental"},"content":"    * 3a1. Doc\u0027it shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":429,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":430,"author":{"gitId":"didymental"},"content":"      Use case resumes at step 3.","lastModifiedDate":"2021-09-28"},{"lineNumber":431,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":432,"author":{"gitId":"didymental"},"content":"**Use case: UC07 - Delete an appointment**","lastModifiedDate":"2021-09-28"},{"lineNumber":433,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":434,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":435,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":436,"author":{"gitId":"didymental"},"content":"1.  User requests to list appointments.","lastModifiedDate":"2021-09-28"},{"lineNumber":437,"author":{"gitId":"didymental"},"content":"2.  Doc\u0027it displays all appointments.","lastModifiedDate":"2021-09-28"},{"lineNumber":438,"author":{"gitId":"didymental"},"content":"3.  User requests to delete a specific appointment in the list.","lastModifiedDate":"2021-09-28"},{"lineNumber":439,"author":{"gitId":"didymental"},"content":"4.  Doc\u0027it deletes the appointment and removes the appointment tag from the originally tagged patient.","lastModifiedDate":"2021-09-28"},{"lineNumber":440,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":441,"author":{"gitId":"didymental"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":442,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":443,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":444,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":445,"author":{"gitId":"didymental"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":446,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":447,"author":{"gitId":"didymental"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":448,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":449,"author":{"gitId":"didymental"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":450,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":451,"author":{"gitId":"didymental"},"content":"    * 3a1. Doc\u0027it shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":452,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":453,"author":{"gitId":"didymental"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-28"},{"lineNumber":454,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":455,"author":{"gitId":"didymental"},"content":"**Use case: UC08 - Archive an appointment**","lastModifiedDate":"2021-09-28"},{"lineNumber":456,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":457,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":458,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":459,"author":{"gitId":"didymental"},"content":"1.  User requests to list appointments.","lastModifiedDate":"2021-09-28"},{"lineNumber":460,"author":{"gitId":"didymental"},"content":"2.  Doc\u0027it displays all appointments.","lastModifiedDate":"2021-09-28"},{"lineNumber":461,"author":{"gitId":"didymental"},"content":"3.  User requests to archive all appointments that are past its date.","lastModifiedDate":"2021-09-28"},{"lineNumber":462,"author":{"gitId":"didymental"},"content":"4.  Doc\u0027it archives all appointments that are past its date.","lastModifiedDate":"2021-09-28"},{"lineNumber":463,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":464,"author":{"gitId":"didymental"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":465,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":466,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":467,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":468,"author":{"gitId":"didymental"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":469,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":470,"author":{"gitId":"didymental"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":471,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":472,"author":{"gitId":"didymental"},"content":"* 3a. No appointments are past its date.","lastModifiedDate":"2021-09-28"},{"lineNumber":473,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":474,"author":{"gitId":"didymental"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":475,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":476,"author":{"gitId":"didymental"},"content":"**Use case: UC08 - Exit program**","lastModifiedDate":"2021-09-28"},{"lineNumber":477,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":478,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":479,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":480,"author":{"gitId":"didymental"},"content":"1.  User requests to exit the program.","lastModifiedDate":"2021-09-28"},{"lineNumber":481,"author":{"gitId":"didymental"},"content":"2.  Doc\u0027it saves and writes all files.","lastModifiedDate":"2021-09-28"},{"lineNumber":482,"author":{"gitId":"didymental"},"content":"3.  Doc\u0027it exits and closes.","lastModifiedDate":"2021-09-28"},{"lineNumber":483,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":484,"author":{"gitId":"didymental"},"content":"    Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":485,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":486,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":487,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":488,"author":{"gitId":"didymental"},"content":"* 2a. Doc\u0027it is unable to save file.","lastModifiedDate":"2021-09-28"},{"lineNumber":489,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":490,"author":{"gitId":"didymental"},"content":"    * 2a1. Doc\u0027it shows an error message.","lastModifiedDate":"2021-09-28"},{"lineNumber":491,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":492,"author":{"gitId":"didymental"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2021-09-28"},{"lineNumber":493,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"rish-16"},"content":"2.  Should be able to hold up to 1000 patients without noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-09-29"},{"lineNumber":499,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"rish-16"},"content":"4.  Should not require an external installer or launcher.","lastModifiedDate":"2021-09-29"},{"lineNumber":501,"author":{"gitId":"rish-16"},"content":"5.  Data should be stored locally in an easily-editable text file.","lastModifiedDate":"2021-09-29"},{"lineNumber":502,"author":{"gitId":"rish-16"},"content":"6.  Should not depend on any cloud-based remote server.","lastModifiedDate":"2021-09-29"},{"lineNumber":503,"author":{"gitId":"rish-16"},"content":"7.  Data should not be stored in an external Database Management System (DBMS) or data warehouse. ","lastModifiedDate":"2021-09-29"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"    1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"-"},"content":"    1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"-"},"content":"    1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"    1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"    1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"       Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"    1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"       Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"    1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"    1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"rish-16":5,"huyuxin0429":44,"-":357,"didymental":155}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"Doc’it provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"patient records, solving the inefficient paper records and files used today. With Doc’it, small family clinics can","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline care services.","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  {:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"---to be completed---","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"2. Download the latest `docit.jar` from [here](https://github.com/AY2122S1-CS2103-W14-1/tp/releases).","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your Doc\u0027it.","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"* **`list -p`** : Lists all patients.","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"## Overview of Features","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"This section provides a brief overview of Doc’It. The intention is for users to gain a better","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"understanding of basic functionalities of Doc’It, before diving into specific commands.","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"1. Managing Patient Records","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"   a. Create a new patient record","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"   b. View details of patient records","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"   c. Delete patient records","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"2. Managing Patient Appointments","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"   a. Create a new appointment","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"   b. View appointments","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"   c. Delete appointments","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"   d. Archive appointments","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"rish-16"},"content":"* Items with `…`  after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"rish-16"},"content":"  e.g. `[t/TAG]… ` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"rish-16"},"content":"### Adding a patient: `add -p`","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"rish-16"},"content":"Creates a new patient record.","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"rish-16"},"content":"**Format:** `add -p f/FAMILY_NAME n/GIVEN_NAME m/[MEDICAL_HISTORY]`","lastModifiedDate":"2021-09-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"rish-16"},"content":"- `MEDICAL_HISTORY` is optional; if `MEDICAL_HISTORY` is not given, an empty text will be used","lastModifiedDate":"2021-09-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"rish-16"},"content":"- `add -p f/Lim n/Joshen`","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"rish-16"},"content":"- `add -p f/Lim n/Joshen m/lovesick`","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"rish-16"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"rish-16"},"content":"New patient created: Lim, Joshen; Patient ID: 0001","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"rish-16"},"content":"### Listing all patients : `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"rish-16"},"content":"Shows a list of all patients in the record system.","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"rish-16"},"content":"Format: `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"rish-16"},"content":"### Editing a patient : `[coming in v1.2]`","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"rish-16"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"rish-16"},"content":"### Locating patients by name: `view -p`","lastModifiedDate":"2021-09-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"rish-16"},"content":"Views an existing patient record.","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"rish-16"},"content":"**Format:** `view -p id/PATIENT_ID` or `view -p name/FULL_NAME`","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"rish-16"},"content":"- `view -p id/0001`","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"rish-16"},"content":"- `view -p name/Joshen`","lastModifiedDate":"2021-09-27"},{"lineNumber":137,"author":{"gitId":"rish-16"},"content":"- `view -p name/Lim Joshen`","lastModifiedDate":"2021-09-27"},{"lineNumber":138,"author":{"gitId":"rish-16"},"content":"- `view -p name/Joshen Lim`","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"rish-16"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"rish-16"},"content":"Patient Name: Lim, Joshen","lastModifiedDate":"2021-09-27"},{"lineNumber":142,"author":{"gitId":"rish-16"},"content":"Patient ID: 0001","lastModifiedDate":"2021-09-27"},{"lineNumber":143,"author":{"gitId":"rish-16"},"content":"Appointment List: 2021-10-05, 2021-09-04","lastModifiedDate":"2021-09-27"},{"lineNumber":144,"author":{"gitId":"rish-16"},"content":"Medical History: lovesick","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"rish-16"},"content":"Prescription: panadol","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"rish-16"},"content":"### Deleting a patient : `delete -p`","lastModifiedDate":"2021-09-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"rish-16"},"content":"Deletes a patient record, including all information about the patient.","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"rish-16"},"content":"**Format:** `delete -p id/PATIENT_ID`","lastModifiedDate":"2021-09-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"rish-16"},"content":"- Deletes the patient with the specified `PATIENT_ID`.","lastModifiedDate":"2021-09-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-09-27"},{"lineNumber":158,"author":{"gitId":"rish-16"},"content":"- `delete -p id/0001`","lastModifiedDate":"2021-09-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"rish-16"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-27"},{"lineNumber":161,"author":{"gitId":"rish-16"},"content":"Deleted the following patient from records:","lastModifiedDate":"2021-09-27"},{"lineNumber":162,"author":{"gitId":"rish-16"},"content":"Patient Name: Lim, Joshen","lastModifiedDate":"2021-09-27"},{"lineNumber":163,"author":{"gitId":"rish-16"},"content":"Patient ID: 0001","lastModifiedDate":"2021-09-27"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"rish-16"},"content":"### Clearing all entries : `[coming in v1.2]`","lastModifiedDate":"2021-09-27"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"rish-16"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-09-27"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":179,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":181,"author":{"gitId":"rish-16"},"content":"### Saving the data `[coming in v1.2]`","lastModifiedDate":"2021-09-27"},{"lineNumber":182,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":183,"author":{"gitId":"rish-16"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-09-27"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":185,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":186,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":187,"author":{"gitId":"rish-16"},"content":"### Editing the data file `[coming in v1.2]`","lastModifiedDate":"2021-09-27"},{"lineNumber":188,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":189,"author":{"gitId":"rish-16"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-09-27"},{"lineNumber":190,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":191,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":193,"author":{"gitId":"rish-16"},"content":"### Archiving data files `[coming in v1.2]`","lastModifiedDate":"2021-09-27"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":198,"author":{"gitId":"gycgabriel"},"content":"## Appointments","lastModifiedDate":"2021-09-28"},{"lineNumber":199,"author":{"gitId":"gycgabriel"},"content":"A patient in our patient record may have appointments to visit the family clinic. In the appointment view, each appointment on the appointment list indicates an upcoming visit to the clinic. To help small family clinics manage their upcoming appointments for its patients, Doc’It records the following attributes for appointment:","lastModifiedDate":"2021-09-28"},{"lineNumber":200,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":201,"author":{"gitId":"gycgabriel"},"content":"* Patient’s ID: The patient’s id matching in the patient record.","lastModifiedDate":"2021-10-09"},{"lineNumber":202,"author":{"gitId":"gycgabriel"},"content":"* Appointment Date: The date of the appointment","lastModifiedDate":"2021-09-28"},{"lineNumber":203,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":204,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":205,"author":{"gitId":"gycgabriel"},"content":"## Listing all appointments: `list`","lastModifiedDate":"2021-09-28"},{"lineNumber":206,"author":{"gitId":"gycgabriel"},"content":"Shows a list of all appointments.","lastModifiedDate":"2021-09-28"},{"lineNumber":207,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":208,"author":{"gitId":"gycgabriel"},"content":"Format: `appt list`","lastModifiedDate":"2021-10-09"},{"lineNumber":209,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":210,"author":{"gitId":"gycgabriel"},"content":"Example:","lastModifiedDate":"2021-09-28"},{"lineNumber":211,"author":{"gitId":"gycgabriel"},"content":"* `appt list`  Lists all appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":212,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":213,"author":{"gitId":"gycgabriel"},"content":"Expected Outcome:","lastModifiedDate":"2021-09-28"},{"lineNumber":214,"author":{"gitId":"gycgabriel"},"content":"1. Patient Name: Lim, Joshen  Appointment Date: 2021-10-05","lastModifiedDate":"2021-09-28"},{"lineNumber":215,"author":{"gitId":"gycgabriel"},"content":"2. Patient Name: Yong, Ian Appointment Date: 2021-10-06","lastModifiedDate":"2021-09-28"},{"lineNumber":216,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":217,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":218,"author":{"gitId":"gycgabriel"},"content":"## Adding an appointment: `add`","lastModifiedDate":"2021-09-28"},{"lineNumber":219,"author":{"gitId":"gycgabriel"},"content":"Adds an appointment for the patient of the specified patient id.","lastModifiedDate":"2021-09-28"},{"lineNumber":220,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":221,"author":{"gitId":"gycgabriel"},"content":"Format: `appt add n/PATIENT_ID d/DATE`","lastModifiedDate":"2021-10-09"},{"lineNumber":222,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":223,"author":{"gitId":"gycgabriel"},"content":"Examples:","lastModifiedDate":"2021-09-28"},{"lineNumber":224,"author":{"gitId":"gycgabriel"},"content":"* `list`  List all patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":225,"author":{"gitId":"gycgabriel"},"content":"* `appt add n/1 d/2021-10-05`  Adds appointment to patient of ID 1.","lastModifiedDate":"2021-10-09"},{"lineNumber":226,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":227,"author":{"gitId":"gycgabriel"},"content":"Expected Outcome:  ","lastModifiedDate":"2021-09-28"},{"lineNumber":228,"author":{"gitId":"gycgabriel"},"content":"New appointment added:  ","lastModifiedDate":"2021-09-28"},{"lineNumber":229,"author":{"gitId":"gycgabriel"},"content":"Patient Name: Lim, Joshen  Appointment Date: 2021-10-05","lastModifiedDate":"2021-09-28"},{"lineNumber":230,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":231,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":232,"author":{"gitId":"gycgabriel"},"content":"## Deleting an appointment: `delete`","lastModifiedDate":"2021-09-28"},{"lineNumber":233,"author":{"gitId":"gycgabriel"},"content":"Deletes the appointment at the specified index.","lastModifiedDate":"2021-09-28"},{"lineNumber":234,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":235,"author":{"gitId":"gycgabriel"},"content":"Format: `appt delete INDEX`","lastModifiedDate":"2021-10-09"},{"lineNumber":236,"author":{"gitId":"gycgabriel"},"content":"* Deletes the appointment at the specified INDEX.","lastModifiedDate":"2021-09-28"},{"lineNumber":237,"author":{"gitId":"gycgabriel"},"content":"* The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2021-09-28"},{"lineNumber":238,"author":{"gitId":"gycgabriel"},"content":"* The index must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2021-09-28"},{"lineNumber":239,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":240,"author":{"gitId":"gycgabriel"},"content":"Examples:","lastModifiedDate":"2021-09-28"},{"lineNumber":241,"author":{"gitId":"gycgabriel"},"content":"* `appt list`  Lists all appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":242,"author":{"gitId":"gycgabriel"},"content":"* `appt delete 1`  Deletes appointment at index 1.","lastModifiedDate":"2021-10-09"},{"lineNumber":243,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":244,"author":{"gitId":"gycgabriel"},"content":"Expected Outcome:  ","lastModifiedDate":"2021-09-28"},{"lineNumber":245,"author":{"gitId":"gycgabriel"},"content":"Appointment deleted:  ","lastModifiedDate":"2021-09-28"},{"lineNumber":246,"author":{"gitId":"gycgabriel"},"content":"Patient Name: Lim, Joshen  Appointment Date: 2021-10-05","lastModifiedDate":"2021-09-28"},{"lineNumber":247,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":248,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":249,"author":{"gitId":"gycgabriel"},"content":"## Archiving an appointment:  `archive`","lastModifiedDate":"2021-09-28"},{"lineNumber":250,"author":{"gitId":"gycgabriel"},"content":"Archives an old appointment that is already past its date.","lastModifiedDate":"2021-09-28"},{"lineNumber":251,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":252,"author":{"gitId":"gycgabriel"},"content":"Format: `appt archive INDEX`","lastModifiedDate":"2021-10-09"},{"lineNumber":253,"author":{"gitId":"gycgabriel"},"content":"* Archives the appointment at the specified INDEX.","lastModifiedDate":"2021-09-28"},{"lineNumber":254,"author":{"gitId":"gycgabriel"},"content":"* The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2021-09-28"},{"lineNumber":255,"author":{"gitId":"gycgabriel"},"content":"* The index must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2021-09-28"},{"lineNumber":256,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":257,"author":{"gitId":"gycgabriel"},"content":"Examples:","lastModifiedDate":"2021-09-28"},{"lineNumber":258,"author":{"gitId":"gycgabriel"},"content":"* `appt list`  Lists all appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":259,"author":{"gitId":"gycgabriel"},"content":"* `appt archive 1`  Archives appointment at index 1.","lastModifiedDate":"2021-10-09"},{"lineNumber":260,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":261,"author":{"gitId":"gycgabriel"},"content":"Expected Outcome:  ","lastModifiedDate":"2021-09-28"},{"lineNumber":262,"author":{"gitId":"gycgabriel"},"content":"Old appointment archived:  ","lastModifiedDate":"2021-09-28"},{"lineNumber":263,"author":{"gitId":"gycgabriel"},"content":"Patient Name: Lim, Joshen  Appointment Date: 2021-10-05","lastModifiedDate":"2021-09-28"},{"lineNumber":264,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":265,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":266,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"didymental"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Doc\u0027it home folder.","lastModifiedDate":"2021-10-01"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"rish-16"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]… ` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`","lastModifiedDate":"2021-09-27"},{"lineNumber":280,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"rish-16"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]… `\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2021-09-27"},{"lineNumber":283,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"**List** | `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"gycgabriel"},"content":"**List Appointment** | `appt list`","lastModifiedDate":"2021-10-09"},{"lineNumber":287,"author":{"gitId":"gycgabriel"},"content":"**Add Appointment** | `appt add n/PATIENT_ID d/DATE` \u003cbr\u003e e.g.,  `appt add n/1 d/2021-10-05`","lastModifiedDate":"2021-10-09"},{"lineNumber":288,"author":{"gitId":"gycgabriel"},"content":"**Delete Appointment** | `appt delete INDEX` \u003cbr\u003e e.g., `appt delete 1`","lastModifiedDate":"2021-10-09"},{"lineNumber":289,"author":{"gitId":"gycgabriel"},"content":"**Archive Appointment** | `appt archive INDEX` \u003cbr\u003e e.g., `appt archive 1`","lastModifiedDate":"2021-10-09"},{"lineNumber":290,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":291,"author":{"gitId":"joshenx"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-29"},{"lineNumber":292,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":293,"author":{"gitId":"joshenx"},"content":"## Glossary","lastModifiedDate":"2021-09-29"},{"lineNumber":294,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":295,"author":{"gitId":"joshenx"},"content":"Term | Definition","lastModifiedDate":"2021-09-29"},{"lineNumber":296,"author":{"gitId":"joshenx"},"content":"----- | ----------","lastModifiedDate":"2021-09-29"},{"lineNumber":297,"author":{"gitId":"joshenx"},"content":"**Appointment** | A scheduled consult between a patient and the clinic\u0027s doctor.","lastModifiedDate":"2021-09-29"},{"lineNumber":298,"author":{"gitId":"joshenx"},"content":"**Archive** | Storage for data that is non-urgent, e.g. appointment records that are past their date.","lastModifiedDate":"2021-09-29"},{"lineNumber":299,"author":{"gitId":"joshenx"},"content":"**Patient Record** | A record of a patient\u0027s details, medical history, medication, appointment list, and name.","lastModifiedDate":"2021-09-29"},{"lineNumber":300,"author":{"gitId":"joshenx"},"content":"**Prescription** | The issued medication/treatment for a patient.","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"rish-16":62,"joshenx":35,"huyuxin0429":6,"-":120,"gycgabriel":73,"didymental":4}},{"path":"docs/team/didymus.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"didymental"},"content":"---","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"layout: page","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"title: Didymus\u0027 Project Portfolio Page","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"didymental"},"content":"---","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"didymental"},"content":"### Project: Doc\u0027it","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"Doc’it provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":"patient records, solving the inefficient paper records and files used today. With Doc’it, small family clinics can","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline care services","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"Doc\u0027IT is a desktop address book application. The user interacts with it using a CLI, and it has a GUI created","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":"with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"Given below are my contributions to the project:","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"- **New Feature**: Added AppointmentBook class to store and manage appointments.","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"  * What it does: allows the user to store and manage multiple appointments across different Date and Time.","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"  * Justification: This feature improves the product significantly because a user can avoid clashing appointments and track the upcoming appointments from patients.","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"- **New Feature**: Added Appointment class to store details of an appointment","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"  * What it does: allows the user to store and manage details of an appointment.","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"  * Justification: This feature improves the product significantly because a user can find specifics about details of an appointment, catering to the patient\u0027s needs.","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"- **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"- **Project management**:","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"  * Managed releases `v1.1` - `v1.5` (3 releases) on Github","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"  * Updated the GUI color scheme","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"  * Wrote additional tests for existing features","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"- **Documentation**:","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"  * User Guide:","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"    * Added documentation for the features Patient Records","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"- **Community**:","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"- **Tools**:","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"didymental"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"didymental":52}},{"path":"docs/team/gycgabriel.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"---","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"layout: page","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"title: Gabriel\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"---","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"### Project: Doc\u0027IT","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"Doc’it provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"patient records, solving the inefficient paper records and files used today. With Doc’it, small family clinics can","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline care services","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"Doc\u0027IT is a desktop address book application. The user interacts with it using a CLI, and it has a GUI created","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"* **Project management**:","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"  * User Guide:","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"* **Community**:","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"* **Tools**:","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"gycgabriel":50}},{"path":"docs/team/huyuxin0429.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"layout: page","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"title: Yu Xin\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"### Project: Doc\u0027IT","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"Doc’it provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"patient records, solving the inefficient paper records and files used today. With Doc’it, small family clinics can","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline care services","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"Doc\u0027IT is a desktop address book application. The user interacts with it using a CLI, and it has a GUI created","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"* **Project management**:","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"    * User Guide:","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"* **Community**:","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"* **Tools**:","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"huyuxin0429":50}},{"path":"docs/team/joshenx.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"layout: page","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"title: Joshen\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"### Project: Doc\u0027it","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"Doc’it provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"patient records, solving the inefficient paper records and files used today. With Doc’it, small family clinics can","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline care services","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"Doc\u0027IT is a desktop address book application. The user interacts with it using a CLI, and it has a GUI created","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"Given below are my contributions to the project:","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"- **New Feature**: Added AppointmentBook class to store and manage appointments.","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"    * What it does: allows the user to store and manage multiple appointments across different Date and Time.","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    * Justification: This feature improves the product significantly because a user can avoid clashing appointments and track the upcoming appointments from patients.","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"- **New Feature**: Added Appointment class to store details of an appointment","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    * What it does: allows the user to store and manage details of an appointment.","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    * Justification: This feature improves the product significantly because a user can find specifics about details of an appointment, catering to the patient\u0027s needs.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"- **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"- **Project management**:","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"    * Managed releases `v1.1` - `v1.5` (3 releases) on Github","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"    * Updated the GUI color scheme","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"    * Wrote additional tests for existing features","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"- **Documentation**:","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"    * User Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"        * Added documentation for the features Patient Records","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"- **Community**:","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"- **Tools**:","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"joshenx":52}},{"path":"docs/team/rishabh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"layout: page","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":"title: Rishabh\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"### Project: Doc\u0027IT","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"Doc’it provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":"patient records, solving the inefficient paper records and files used today. With Doc’it, small family clinics can","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline care services","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"Doc\u0027IT is a desktop address book application. The user interacts with it using a CLI, and it has a GUI created","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"* **Project management**:","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"    * User Guide:","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"* **Community**:","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"* **Tools**:","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"rish-16"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"rish-16":50}},{"path":"src/main/java/seedu/address/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2019-02-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"huyuxin0429":1,"-":25}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.AppointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"        ReadOnlyAppointmentBook initialAppointmentData;","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"        // TODO: Implement Storage and Sample data for Appointments","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"gycgabriel"},"content":"        initialAppointmentData \u003d new AppointmentBook();","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"        return new ModelManager(initialData, initialAppointmentData, userPrefs);","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":182,"gycgabriel":7}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"        \"The appointment index provided is invalid\";","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_APPOINTMENTS_LISTED_OVERVIEW \u003d \"%1$d appointments listed!\";","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":13,"gycgabriel":3}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":" * Adds an appointment to the appointment book.","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"public class AddAppointmentCommand extends Command {","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"        \"appt\"","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"        + COMMAND_WORD + \": Adds an appointment to the appointment book. \" + \"Parameters: \" + PREFIX_NAME + \"ID \"","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"            + PREFIX_DATETIME + \"DATETIME \\n\" + \"Example: appt \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"1\"","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"            + PREFIX_DATETIME + \"2021-12-31 1600\";","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"        \"This appointment already exists in the appointment book\";","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    private final Appointment toAdd;","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"     * Creates an AddCommand to add the specified {@code Appointment}","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"    public AddAppointmentCommand(Appointment appointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"        toAdd \u003d appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"    @Override public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"        if (model.hasAppointment(toAdd)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"        model.addAppointment(toAdd);","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    @Override public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"            || (other instanceof AddAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 toAdd.equals(((AddAppointmentCommand) other).toAdd));","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":54}},{"path":"src/main/java/seedu/address/logic/commands/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":" * Deletes an appointment identified using it\u0027s displayed index from the appointment book.","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"public class DeleteAppointmentCommand extends Command {","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_USAGE \u003d \"appt \" + COMMAND_WORD","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"        + \": Deletes the appointment identified by the index number used in the displayed appointment list.\\n\"","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: appt \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    public DeleteAppointmentCommand(Index targetIndex) {","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"    @Override public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"        Appointment appointmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"        model.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete));","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"    @Override public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"            || (other instanceof DeleteAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 targetIndex.equals(((DeleteAppointmentCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":50}},{"path":"src/main/java/seedu/address/logic/commands/ListAppointmentsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":" * Lists all appointments in the address book to the user.","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"public class ListAppointmentsCommand extends Command {","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments\";","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"    @Override public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"        return new CommandResult(MESSAGE_SUCCESS + \"\\n\" + model.getAppointments());","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":23}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand and returns an","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"     * AddAppointmentCommand object for execution.","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATETIME);","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATETIME) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"        // TODO: Parse patientId and string","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"        int patientId \u003d Integer.parseInt(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"        String datetime \u003d argMultimap.getValue(PREFIX_DATETIME).get();","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"        Appointment appointment \u003d new Appointment(patientId, datetime);","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"        return new AddAppointmentCommand(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"     * ArgumentMultimap}.","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":49}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.logic.commands.ListAppointmentsCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"    private static final Pattern APPT_COMMAND_FORMAT \u003d Pattern.compile(\"appt (?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"        // Appointment Command Matching","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"        final Matcher apptMatcher \u003d APPT_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"        if (apptMatcher.matches()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"            final String commandWord \u003d apptMatcher.group(\"commandWord\");","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"            final String arguments \u003d apptMatcher.group(\"arguments\");","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"            return parseApptCommand(commandWord, arguments);","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"        // Basic Command Matching","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"        return parseBasicCommand(commandWord, arguments);","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"     * Parses user input of basic command for execution.","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"     * @param commandWord command word","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"     * @param arguments arguments of command","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"    public Command parseBasicCommand(String commandWord, String arguments) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"gycgabriel"},"content":"     * Parses user input of appointment command for execution.","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"     * @param commandWord command word","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"gycgabriel"},"content":"     * @param arguments arguments of command","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"gycgabriel"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"gycgabriel"},"content":"    public Command parseApptCommand(String commandWord, String arguments) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"gycgabriel"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"gycgabriel"},"content":"        case AddAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"gycgabriel"},"content":"            return new AddAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"gycgabriel"},"content":"        case DeleteAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"gycgabriel"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"        case ListAppointmentsCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"gycgabriel"},"content":"            return new ListAppointmentsCommand();","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"gycgabriel"},"content":"        default:","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":76,"gycgabriel":49}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"-":15,"gycgabriel":1}},{"path":"src/main/java/seedu/address/logic/parser/DeleteAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":" * Parses input arguments and creates a new DeleteAppointmentCommand object","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand and returns a","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"     * DeleteAppointmentCommand object for execution.","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"            return new DeleteAppointmentCommand(index);","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":30}},{"path":"src/main/java/seedu/address/model/AppointmentBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.model;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":" * Wraps all data at the address-book level Duplicates are not allowed (by .isSameAppointment comparison)","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"public class AppointmentBook implements ReadOnlyAppointmentBook {","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"    private final UniqueAppointmentList appointments;","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"    /*","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"     *   among constructors.","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"        appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    public AppointmentBook() {","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"     * Creates an AppointmentBook using the Appointments in the {@code toBeCopied}","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    public AppointmentBook(ReadOnlyAppointmentBook toBeCopied) {","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"        this();","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"    //// list overwrite operations","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the contents of the appointment list with {@code appointments}. {@code appointments} must not contain","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"     * duplicate appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"     * Resets the existing data of this {@code AppointmentBook} with {@code newData}.","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"    public void resetData(ReadOnlyAppointmentBook newData) {","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"    //// appointment-level operations","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"        return appointments.contains(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"gycgabriel"},"content":"     * Adds an appointment to the address book. The appointment must not already exist in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"    public void addAppointment(Appointment p) {","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"gycgabriel"},"content":"        appointments.add(p);","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}. {@code target} must","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"     * exist in the address book. The appointment identity of {@code editedAppointment} must not be the same as another","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"gycgabriel"},"content":"     * existing appointment in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"gycgabriel"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"gycgabriel"},"content":"     * Removes {@code key} from this {@code AppointmentBook}. {@code key} must exist in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"gycgabriel"},"content":"    public void removeAppointment(Appointment key) {","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"gycgabriel"},"content":"        appointments.remove(key);","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"gycgabriel"},"content":"    //// util methods","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"gycgabriel"},"content":"    @Override public String toString() {","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"gycgabriel"},"content":"        Iterator\u003cAppointment\u003e i \u003d appointments.iterator();","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"        StringBuilder r \u003d new StringBuilder();","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"gycgabriel"},"content":"        while (i.hasNext()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"gycgabriel"},"content":"            r.append(i.next());","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"        return appointments.asUnmodifiableObservableList().size() + \" appointments:\\n\" + r.toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"gycgabriel"},"content":"        // TODO: refine later","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"    @Override public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"gycgabriel"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"gycgabriel"},"content":"    @Override public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"gycgabriel"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"gycgabriel"},"content":"            || (other instanceof AppointmentBook // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 appointments.equals(((AppointmentBook) other).appointments));","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"    @Override public int hashCode() {","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"gycgabriel"},"content":"        return appointments.hashCode();","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":120}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"     * {@code Predicate} that always evaluate to true","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"     * Returns the AddressBook","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"     * Deletes the given person. The person must exist in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"     * Adds the given person. {@code person} must not already exist in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}. {@code target} must exist in the address","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"gycgabriel"},"content":"     * book. The person identity of {@code editedPerson} must not be the same as another existing person in the address","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"     * book.","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"     * Returns an unmodifiable view of the filtered person list","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"gycgabriel"},"content":"     * Returns the user prefs\u0027 appointment Book file path.","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"    Path getAppointmentBookFilePath();","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"gycgabriel"},"content":"     * Sets the user prefs\u0027 appointment Book file path.","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"gycgabriel"},"content":"    void setAppointmentBookFilePath(Path appointmentBookFilePath);","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"     * Replaces appointment Book data with the data in {@code appointmentBook}.","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"gycgabriel"},"content":"    void setAppointmentBook(ReadOnlyAppointmentBook appointmentBook);","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"gycgabriel"},"content":"     * Returns the AppointmentBook","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"gycgabriel"},"content":"    ReadOnlyAppointmentBook getAppointmentBook();","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in the appointment Book.","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"gycgabriel"},"content":"    boolean hasAppointment(Appointment appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"gycgabriel"},"content":"     * Deletes the given appointment. The appointment must exist in the appointment Book.","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"gycgabriel"},"content":"    void deleteAppointment(Appointment target);","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"gycgabriel"},"content":"     * Adds the given appointment. {@code appointment} must not already exist in the appointment Book.","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"gycgabriel"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}. {@code target} must exist in the","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"gycgabriel"},"content":"     * appointment Book. The appointment identity of {@code editedAppointment} must not be the same as another existing","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"gycgabriel"},"content":"     * appointment in the appointment Book.","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"gycgabriel"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"gycgabriel"},"content":"    // TODO: Remove and replace with appointment view in UI","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"gycgabriel"},"content":"     * Temporarily returns appointment list to be printed in CommandResult.","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"gycgabriel"},"content":"    String getAppointments();","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"gycgabriel"},"content":"     * Returns an unmodifiable view of the filtered appointment list","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"gycgabriel"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"gycgabriel"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"gycgabriel"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"gycgabriel"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"-":77,"gycgabriel":81}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"    private final AppointmentBook appointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"     * Initializes a ModelManager with the given addressBook, appointmentBook and userPrefs.","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyAppointmentBook appointmentBook,","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"        ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"        requireAllNonNull(addressBook, appointmentBook, userPrefs);","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" appointment book: \" + appointmentBook + \" and \"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"            + \"user prefs \" + userPrefs);","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"        this.appointmentBook \u003d new AppointmentBook(appointmentBook);","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.appointmentBook.getAppointmentList());","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"        this(new AddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"gycgabriel"},"content":"    public Path getAppointmentBookFilePath() {","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"        return userPrefs.getAppointmentBookFilePath();","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointmentBookFilePath(Path appointmentBookFilePath) {","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(appointmentBookFilePath);","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"gycgabriel"},"content":"        userPrefs.setAppointmentBookFilePath(appointmentBookFilePath);","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":150,"author":{"gitId":"gycgabriel"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointmentBook(ReadOnlyAppointmentBook appointmentBook) {","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"        this.appointmentBook.resetData(appointmentBook);","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"gycgabriel"},"content":"    public ReadOnlyAppointmentBook getAppointmentBook() {","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"gycgabriel"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBook.hasAppointment(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":169,"author":{"gitId":"gycgabriel"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2021-10-09"},{"lineNumber":170,"author":{"gitId":"gycgabriel"},"content":"        appointmentBook.removeAppointment(target);","lastModifiedDate":"2021-10-09"},{"lineNumber":171,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":172,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":173,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":174,"author":{"gitId":"gycgabriel"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":175,"author":{"gitId":"gycgabriel"},"content":"        appointmentBook.addAppointment(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":176,"author":{"gitId":"gycgabriel"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":178,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":179,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":181,"author":{"gitId":"gycgabriel"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":182,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"gycgabriel"},"content":"        appointmentBook.setAppointment(target, editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":186,"author":{"gitId":"gycgabriel"},"content":"    // TODO: Remove and replace with appointment view in UI","lastModifiedDate":"2021-10-09"},{"lineNumber":187,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":188,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":189,"author":{"gitId":"gycgabriel"},"content":"     * Temporarily returns appointment list to be printed in CommandResult.","lastModifiedDate":"2021-10-09"},{"lineNumber":190,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":191,"author":{"gitId":"gycgabriel"},"content":"    public String getAppointments() {","lastModifiedDate":"2021-10-09"},{"lineNumber":192,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBook.toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":193,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":194,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":195,"author":{"gitId":"gycgabriel"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":197,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":198,"author":{"gitId":"gycgabriel"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of","lastModifiedDate":"2021-10-09"},{"lineNumber":199,"author":{"gitId":"gycgabriel"},"content":"     * {@code versionedAppointmentBook}","lastModifiedDate":"2021-10-09"},{"lineNumber":200,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":201,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":202,"author":{"gitId":"gycgabriel"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":203,"author":{"gitId":"gycgabriel"},"content":"        return filteredAppointments;","lastModifiedDate":"2021-10-09"},{"lineNumber":204,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":205,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":206,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":207,"author":{"gitId":"gycgabriel"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2021-10-09"},{"lineNumber":208,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":209,"author":{"gitId":"gycgabriel"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":210,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":211,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":227,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 appointmentBook.equals(other.appointmentBook)","lastModifiedDate":"2021-10-09"},{"lineNumber":228,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2021-10-09"},{"lineNumber":229,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 filteredAppointments.equals(other.filteredAppointments)","lastModifiedDate":"2021-10-09"},{"lineNumber":230,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 userPrefs.equals(other.userPrefs);","lastModifiedDate":"2021-10-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":233,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":144,"gycgabriel":89}},{"path":"src/main/java/seedu/address/model/ReadOnlyAppointmentBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.model;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":" * Unmodifiable view of an appointment book","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"public interface ReadOnlyAppointmentBook {","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"     * Returns an unmodifiable view of the appointment list.","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"     * This list will not contain any duplicate appointment.","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":17}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"    private Path appointmentBookFilePath \u003d Paths.get(\"data\" , \"appointmentbook.json\");","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"    public Path getAppointmentBookFilePath() {","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBookFilePath;","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointmentBookFilePath(Path appointmentBookFilePath) {","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(appointmentBookFilePath);","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"        this.appointmentBookFilePath \u003d appointmentBookFilePath;","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":87,"gycgabriel":10}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":" * Represents an Appointment in the appointment book. Guarantees: details are present and not null, field values are","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":" * validated, immutable.","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"public class Appointment {","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"    // Identity fields","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"    private final int patientId;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"    private final String datetime;","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"    // Data fields","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"    public Appointment(int patientId, String datetime) {","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"        requireAllNonNull(patientId, datetime);","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"        this.patientId \u003d patientId;","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    public int getPatientId() {","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"        return patientId;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"    public String getDatetime() {","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"        return datetime;","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if both appointments have the same name and datetime. This defines a weaker notion of equality","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"     * between two appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"    public boolean isSameAppointment(Appointment otherAppointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"        if (otherAppointment \u003d\u003d this) {","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"            return true;","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"        return otherAppointment !\u003d null \u0026\u0026 otherAppointment.getPatientId() \u003d\u003d getPatientId()","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 otherAppointment.getDatetime().equals(getDatetime());","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if both appointments have the same identity and data fields. This defines a stronger notion of","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"     * equality between two appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"    @Override public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"            return true;","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"            return false;","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"        return otherAppointment.getPatientId() \u003d\u003d (getPatientId()) \u0026\u0026 otherAppointment.getDatetime()","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"            .equals(getDatetime());","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"    @Override public int hashCode() {","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"        return Objects.hash(patientId, datetime);","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"    @Override public String toString() {","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"gycgabriel"},"content":"        builder.append(getPatientId()).append(\"; Datetime: \").append(getDatetime());","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"gycgabriel"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":78}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls. An appointment is","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":" * considered unique by comparing using {@code Appointment#isSameAppointment(Appointment)}. As such, adding and updating","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":" * of appointments uses Appointment#isSameAppointment(Appointment) for equality so as to ensure that the appointment","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":" * being added or updated is unique in terms of identity in the UniqueAppointmentList. However, the removal of a","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":" * appointment uses Appointment#equals(Object) so as to ensure that the appointment with exactly the same fields will be","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":" * removed.","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":" *","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":" * @see Appointment#isSameAppointment(Appointment)","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"        FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument.","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"        return internalList.stream().anyMatch(toCheck::isSameAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"     * Adds an appointment to the list. The appointment must not already exist in the list.","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"    public void add(Appointment toAdd) {","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}. {@code target} must exist in","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"     * the list. The appointment identity of {@code editedAppointment} must not be the same as another existing","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"     * appointment in the list.","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"        if (!target.isSameAppointment(editedAppointment) \u0026\u0026 contains(editedAppointment)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"        internalList.set(index, editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"     * Removes the equivalent appointment from the list. The appointment must exist in the list.","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"gycgabriel"},"content":"    public void remove(Appointment toRemove) {","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"gycgabriel"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the contents of this list with {@code appointments}. {@code appointments} must not contain duplicate","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"     * appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"gycgabriel"},"content":"        requireAllNonNull(appointments);","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"gycgabriel"},"content":"        if (!appointmentsAreUnique(appointments)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"gycgabriel"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"        internalList.setAll(appointments);","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"gycgabriel"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"gycgabriel"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"    @Override public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"gycgabriel"},"content":"    @Override public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"gycgabriel"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"gycgabriel"},"content":"            || (other instanceof UniqueAppointmentList // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 internalList.equals(((UniqueAppointmentList) other).internalList));","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"gycgabriel"},"content":"    @Override public int hashCode() {","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if {@code appointments} contains only unique appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"gycgabriel"},"content":"    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"gycgabriel"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"gycgabriel"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"gycgabriel"},"content":"                if (appointments.get(i).isSameAppointment(appointments.get(j))) {","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"gycgabriel"},"content":"                    return false;","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"gycgabriel"},"content":"                }","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"gycgabriel"},"content":"            }","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"gycgabriel"},"content":"        return true;","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":133}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":" * Signals that the operation is unable to find the specified appointment.","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"public class AppointmentNotFoundException extends RuntimeException {","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":7}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":" * Signals that the operation will result in duplicate Appointments (Appointments are considered duplicates if they have","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":" * the same identity).","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"        super(\"Operation would result in duplicate appointments\");","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"gycgabriel":11}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.AppointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"-":161,"gycgabriel":2}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.AppointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"    @BeforeEach public void setUp() {","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_newPerson_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model, String.format(AddCommand.MESSAGE_SUCCESS, validPerson),","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"            expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"-":35,"gycgabriel":8}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"        public Path getAppointmentBookFilePath() {","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"gycgabriel"},"content":"        public void setAppointmentBookFilePath(Path appointmentBookFilePath) {","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"gycgabriel"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":169,"author":{"gitId":"gycgabriel"},"content":"        public void setAppointmentBook(ReadOnlyAppointmentBook newData) {","lastModifiedDate":"2021-10-09"},{"lineNumber":170,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":171,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":172,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":173,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":174,"author":{"gitId":"gycgabriel"},"content":"        public ReadOnlyAppointmentBook getAppointmentBook() {","lastModifiedDate":"2021-10-09"},{"lineNumber":175,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":176,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":178,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":179,"author":{"gitId":"gycgabriel"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":181,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":182,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"gycgabriel"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":186,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":187,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":188,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":189,"author":{"gitId":"gycgabriel"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":190,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":191,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":192,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":193,"author":{"gitId":"gycgabriel"},"content":"        // TODO: Remove and replace with appointment view in UI","lastModifiedDate":"2021-10-09"},{"lineNumber":194,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":195,"author":{"gitId":"gycgabriel"},"content":"        /**","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"gycgabriel"},"content":"         * Temporarily returns appointment list to be printed in CommandResult.","lastModifiedDate":"2021-10-09"},{"lineNumber":197,"author":{"gitId":"gycgabriel"},"content":"         */","lastModifiedDate":"2021-10-09"},{"lineNumber":198,"author":{"gitId":"gycgabriel"},"content":"        public String getAppointments() {","lastModifiedDate":"2021-10-09"},{"lineNumber":199,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":200,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":201,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":202,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":203,"author":{"gitId":"gycgabriel"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":204,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":205,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":206,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":207,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":208,"author":{"gitId":"gycgabriel"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2021-10-09"},{"lineNumber":209,"author":{"gitId":"gycgabriel"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-09"},{"lineNumber":210,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"-":194,"gycgabriel":61}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.AppointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_emptyAddressBook_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"-":26,"gycgabriel":5}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.AppointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteCommand}.","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"gycgabriel"},"content":"    @Test public void equals() {","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"-":94,"gycgabriel":10}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.AppointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"            new ModelManager(new AddressBook(model.getAddressBook()), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"        Person editedPerson \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"            personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"        EditPersonDescriptor descriptor \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"            new ModelManager(new AddressBook(model.getAddressBook()), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"            new ModelManager(new AddressBook(model.getAddressBook()), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_filteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"gycgabriel"},"content":"        EditCommand editCommand \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"gycgabriel"},"content":"            new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"gycgabriel"},"content":"            new ModelManager(new AddressBook(model.getAddressBook()), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"gycgabriel"},"content":"        EditCommand editCommand \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"            new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"gycgabriel"},"content":"     * Edit filtered list where index is larger than size of filtered list, but smaller than size of address book","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"gycgabriel"},"content":"        EditCommand editCommand \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"gycgabriel"},"content":"            new EditCommand(outOfBoundIndex, new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"gycgabriel"},"content":"    @Test public void equals() {","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"-":138,"gycgabriel":31}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.AppointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":81,"gycgabriel":3}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2018-01-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"import seedu.address.model.AppointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"    @BeforeEach public void setUp() {","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":31,"gycgabriel":6}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"        modelManager \u003d new ModelManager(addressBook, new AppointmentBook(), userPrefs);","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"gycgabriel"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, new AppointmentBook(), userPrefs);","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, new AppointmentBook(), userPrefs)));","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":122,"author":{"gitId":"gycgabriel"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, new AppointmentBook(), userPrefs)));","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":130,"author":{"gitId":"gycgabriel"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, new AppointmentBook(), differentUserPrefs)));","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"-":127,"gycgabriel":5}}]
