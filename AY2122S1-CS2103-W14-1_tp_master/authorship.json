[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"didymental"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103-W14-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S1-CS2103-W14-1/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"## Doc\u0027it","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"Today, small family clinics often record patient information using paper application forms. Such recording of patient information results in the clinic having a messy and inefficient patient record information; the family clinic will have to flip through files and documents in order to find the patient. Doc’it aims to provide a centralised platform for authorised staff from small family clinics to view, update and onboard patients. With Doc’it, small family clinics are able to reduce man hours from managing paper documents, and translate these ‘saved’ hours into providing better frontline service to patients, focusing on what they do best.","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":"* Doc\u0027it is a Patient Record manager for staff from small family clinics to keep track of patients, patient appointments and their respective details.","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"* It is meant to be used regularly, and requires the user to consistently update on a routine basis.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"* Doc\u0027it is:","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":"  * written in OOP fashion.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"  * built off from the ```AddressBook-Level3``` project created by the [SE-EDU initiative](https://se-education.org/addressbook-level3)","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"## Site Map","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"* [User Guide](docs/UserGuide.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"* [Developer Guide](docs/DeveloperGuide.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"* [About Us](docs/AboutUs.md)","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"## Acknowledgements","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"* This project is based on the ```AddressBook-Level3``` (`AB3` for short) project created by the [SE-EDU initiative](https://se-education.org)","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"* For the detailed documentation of `AB3`, see the **[Address Book Product Website](https://se-education.org/addressbook-level3)**.","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":5,"didymental":18}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"mainClassName \u003d \u0027seedu.docit.Main\u0027","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"    String javaFxVersion \u003d \u002717\u0027","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"didymental"},"content":"    archiveName \u003d \u0027docit.jar\u0027","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"didymental"},"content":"run {","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"didymental"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"joshenx":2,"-":71,"didymental":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"### Rishabh Anand","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"\u003cimg src\u003d\"images/rish-16.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"[[github](http://github.com/rish-16)]","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"[[portfolio](team/rishabh.md)]","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"* Responsibilities: Integration, Backend","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"### Gabriel Goh","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"\u003cimg src\u003d\"images/gycgabriel.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"[[github](http://github.com/gycgabriel)]","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"[[portfolio](team/gycgabriel.md)]","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"* Role: Developer","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"* Responsibilities: Scheduling and Tracking","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"### Yu Xin","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"\u003cimg src\u003d\"images/huyuxin0429.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"[[github](https://github.com/huyuxin0429)]","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"[[portfolio](team/huyuxin0429.md)]","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"* Responsibilities: Testing","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"### Didymus","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"\u003cimg src\u003d\"images/didymental.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"[[github](https://github.com/didymental)]","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"[[portfolio](team/didymental.md)]","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"* Responsibilities: Documentation, Deliverables and deadlines","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"### Joshen","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"\u003cimg src\u003d\"images/joshenx.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"[[github](https://github.com/joshenx)]","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"[[portfolio](team/joshenx.md)]","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"* Responsibilities: UI, Coding Standard","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"rish-16":5,"joshenx":5,"huyuxin0429":5,"-":32,"gycgabriel":6,"didymental":5}},{"path":"docs/DevOps.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: DevOps guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Build automation","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**.","lastModifiedDate":"2020-06-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Given below are how to use Gradle for some important project tasks.","lastModifiedDate":"2020-05-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  e.g. `./gradlew clean`","lastModifiedDate":"2020-05-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  e.g. `./gradlew shadowJar`.","lastModifiedDate":"2020-05-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **`run`**: Builds and runs the application.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  **`runShadow`**: Builds the application as a fat JAR, and then runs it.","lastModifiedDate":"2020-05-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  **`checkstyleTest`**: Runs the code style check for the test code base.","lastModifiedDate":"2020-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* **`test`**: Runs all tests.\u003c","lastModifiedDate":"2020-05-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * `./gradlew test` — Runs all tests","lastModifiedDate":"2020-05-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * `./gradlew clean test` — Cleans the project and runs tests","lastModifiedDate":"2020-05-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Continuous integration (CI)","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Code coverage","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository.","lastModifiedDate":"2020-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup).","lastModifiedDate":"2020-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Once you are inside Codecov web app, add your fork to CodeCov.","lastModifiedDate":"2020-08-07"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/AY2122S1-CS2103-W14-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2122S1-CS2103-W14-1/tp) in that page reflects the coverage of your project.","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"### Repository-wide checks","lastModifiedDate":"2020-07-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements.","lastModifiedDate":"2020-07-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:","lastModifiedDate":"2020-07-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"`./config/travis/run-checks.sh`","lastModifiedDate":"2020-07-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Any warnings or errors will be printed out to the console.","lastModifiedDate":"2020-07-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"**If adding new checks:**","lastModifiedDate":"2020-07-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest.","lastModifiedDate":"2020-07-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`","lastModifiedDate":"2020-07-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  * SEVERITY is either ERROR or WARN.","lastModifiedDate":"2020-07-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  * FILENAME is the path to the file relative to the current directory.","lastModifiedDate":"2020-07-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error.","lastModifiedDate":"2020-07-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Check scripts must exit with a non-zero exit code if any errors occur.","lastModifiedDate":"2020-07-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"## Making a release","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"Here are the steps to create a new release.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"1. Update the version number in [`MainApp.java`](https://github.com/AY2122S1-CS2103-W14-1/tp/tree/master/src/main/java/seedu/docit/MainApp.java).","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Generate a fat JAR file using Gradle (i.e., `gradlew shadowJar`).","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"1. Tag the repo with the version number. e.g. `v0.1`","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created.","lastModifiedDate":"2020-05-26"}],"authorContributionMap":{"joshenx":2,"-":77}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  {:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2122S1-CS2103-W14-1/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2122S1-CS2103-W14-1/tp/tree/master/src/main/java/seedu/docit/Main.java) and [`MainApp`](https://github.com/AY2122S1-CS2103-W14-1/tp/tree/master/src/main/java/seedu/docit/MainApp.java). It is responsible for,","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2122S1-CS2103-W14-1/tp/tree/master/src/main/java/seedu/docit/ui/Ui.java)","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PatientListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2122S1-CS2103-W14-1/tp/tree/master/src/main/java/seedu/docit/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2122S1-CS2103-W14-1/tp/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"* depends on some classes in the `Model` component, as it displays `Patient` object residing in the `Model`.","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"joshenx"},"content":"**Displaying Patient and Appointment Panels**","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"The main UI parts of the `MainWindow` to display Patient and Appointment information are `PatientListPanel` and","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"`AppointmentListPanel`, each holding a number of `PatientCard`\u0027s and `AppointmentCard`\u0027s.","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"![Example of PatientCard](images/PatientCard.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"In the `PatientCard` part, we can see all the details that we store of the Patient.","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"![Example of AppointmentCard](images/AppointmentCard.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"joshenx"},"content":"In the `AppointmentCard` part, appointments occurring today have a highlighted \u0027**TODAY**\u0027 indicator to help clinic staff","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"joshenx"},"content":"easily identify appointments occurring today. Non-essential patient details are also omitted.","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"joshenx"},"content":"We can also toggle between the **Archive** and **Upcoming** tabs to view Appointments that are upcoming or have been","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"joshenx"},"content":"archived. This is also the reason why `MainWindow` component holds two `AppointmentListPanel`\u0027s - One for","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"joshenx"},"content":"upcoming appointments, and the other for archived appointments.","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"joshenx"},"content":"**API** : [`Logic.java`](https://github.com/AY2122S1-CS2103-W14-1/tp/tree/master/src/main/java/seedu/docit/logic/Logic.java)","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"rish-16"},"content":"   - `AddressBookParser` categorises the command according to its format (using RegEx) and hands it off","lastModifiedDate":"2021-10-28"},{"lineNumber":117,"author":{"gitId":"rish-16"},"content":"     to either one of `BasicAddressBookParser`, `PatientBookParser`, or `AppointmentBookParser`.","lastModifiedDate":"2021-10-28"},{"lineNumber":118,"author":{"gitId":"rish-16"},"content":"2. The chosen parser then parses the command and returns a `Command` object (more precisely, an object of one of its subclasses e.g., `AddPatientCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-10-28"},{"lineNumber":119,"author":{"gitId":"huyuxin0429"},"content":"3. The command can communicate with the `Model` when it is executed (e.g. to add a patient).","lastModifiedDate":"2021-10-29"},{"lineNumber":120,"author":{"gitId":"huyuxin0429"},"content":"4. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-10-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":122,"author":{"gitId":"rish-16"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"pt delete 1\")` API call.","lastModifiedDate":"2021-10-28"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"rish-16"},"content":"![Interactions Inside the Logic Component for the `pt delete 1` Command](diagrams/DeleteSequenceDiagram.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"rish-16"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeletePatientCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-10-28"},{"lineNumber":127,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"huyuxin0429"},"content":"[comment]:","lastModifiedDate":"2021-10-29"},{"lineNumber":132,"author":{"gitId":"rish-16"},"content":"![Interactions between Command and Parser](diagrams/ParserClasses.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":136,"author":{"gitId":"rish-16"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddPatientCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddPatientCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"rish-16"},"content":"* All `XYZCommandParser` classes (e.g., `AddPatientCommandParser`, `DeletePatientCommandParser`, ...) inherit from one of the three parser interfaces: `BasicParser`, `PatientParser`, or `AppointmentParser` so that they","lastModifiedDate":"2021-10-28"},{"lineNumber":138,"author":{"gitId":"rish-16"},"content":"be treated appropriately based on the type of command issued.","lastModifiedDate":"2021-10-28"},{"lineNumber":139,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":140,"author":{"gitId":"rish-16"},"content":"* The three types of parsers (`BasicParser`, `PatientParser`, `AppointmentParser`) inherit directly from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-10-28"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"rish-16"},"content":"**Breakdown of Commands** \u003cbr\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":143,"author":{"gitId":"rish-16"},"content":"In the original AB3, all commands extend the `Command` abstract class.","lastModifiedDate":"2021-10-28"},{"lineNumber":144,"author":{"gitId":"rish-16"},"content":"`Doc\u0027it` supports three types of commands – general, patient-related, and appointment-related. As such, we introduce three abstract classes `BasicCommand`, `PatientCommand`, and `AppointmentCommand` in place of `Command`.","lastModifiedDate":"2021-10-28"},{"lineNumber":145,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":146,"author":{"gitId":"rish-16"},"content":"\u003e As the names suggest, `BasicCommand` deals with whole application-related operations, `PatientCommand` deals with patient-related CRUD operations, and `AppointmentCommand` deal with appointment-related CRUD operations.","lastModifiedDate":"2021-10-28"},{"lineNumber":147,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":148,"author":{"gitId":"rish-16"},"content":"The following is a list of commands that extend the three abstract classes:","lastModifiedDate":"2021-10-23"},{"lineNumber":149,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"rish-16"},"content":"- `BasicCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":151,"author":{"gitId":"rish-16"},"content":"  - `ExitCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":152,"author":{"gitId":"rish-16"},"content":"  - `ClearCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":153,"author":{"gitId":"rish-16"},"content":"  - `HelpCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":154,"author":{"gitId":"rish-16"},"content":"- `PatientCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":155,"author":{"gitId":"rish-16"},"content":"  - `AddPatientCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":156,"author":{"gitId":"rish-16"},"content":"  - `EditPatientCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":157,"author":{"gitId":"rish-16"},"content":"  - `DeletePatientCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":158,"author":{"gitId":"rish-16"},"content":"  - `ListPatientCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":159,"author":{"gitId":"rish-16"},"content":"  - `FindPatientCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":160,"author":{"gitId":"rish-16"},"content":"- `AppointmentCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":161,"author":{"gitId":"rish-16"},"content":"    - `AddAppointmentCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":162,"author":{"gitId":"joshenx"},"content":"    - `ArchiveAppointmentCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":163,"author":{"gitId":"rish-16"},"content":"    - `EditAppointmentCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":164,"author":{"gitId":"rish-16"},"content":"    - `DeleteAppointmentCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":165,"author":{"gitId":"rish-16"},"content":"    - `ListAppointmentsCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":166,"author":{"gitId":"rish-16"},"content":"    - `SortAppointmentsCommand`","lastModifiedDate":"2021-10-28"},{"lineNumber":167,"author":{"gitId":"huyuxin0429"},"content":"    - `PrescriptionCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":168,"author":{"gitId":"huyuxin0429"},"content":"      - `AddPrescriptionCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":169,"author":{"gitId":"huyuxin0429"},"content":"      - `DeletePrescriptionCommand`","lastModifiedDate":"2021-10-29"},{"lineNumber":170,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":171,"author":{"gitId":"rish-16"},"content":"\u003e This taxonomy of commands is further reflected on the Parser\u0027s side as well.","lastModifiedDate":"2021-10-28"},{"lineNumber":172,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":173,"author":{"gitId":"rish-16"},"content":"**Parser** \u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":174,"author":{"gitId":"rish-16"},"content":"The `Parser` interface is broken into three sub-interfaces: `BasicParser`, `PatientParser`, and `AppointmentParser`, for the parsers related to application-related commands, patient-related commands, and","lastModifiedDate":"2021-10-28"},{"lineNumber":175,"author":{"gitId":"rish-16"},"content":"appointment-related commands respectively. For all commands under `PatientParser` and `AppointmentParser` (ones that require","lastModifiedDate":"2021-10-28"},{"lineNumber":176,"author":{"gitId":"rish-16"},"content":"any form of extra user input), we have a specific parser that tokenises the command:","lastModifiedDate":"2021-10-28"},{"lineNumber":177,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":178,"author":{"gitId":"rish-16"},"content":"- `PatientCommandParser`","lastModifiedDate":"2021-10-28"},{"lineNumber":179,"author":{"gitId":"rish-16"},"content":"  - `AddPatientCommandParser`","lastModifiedDate":"2021-10-28"},{"lineNumber":180,"author":{"gitId":"rish-16"},"content":"  - `EditPatientCommandParser`","lastModifiedDate":"2021-10-28"},{"lineNumber":181,"author":{"gitId":"rish-16"},"content":"  - `DeletePatientCommandParser`","lastModifiedDate":"2021-10-28"},{"lineNumber":182,"author":{"gitId":"rish-16"},"content":"  - `FindPatientCommandParser`","lastModifiedDate":"2021-10-28"},{"lineNumber":183,"author":{"gitId":"rish-16"},"content":"- `AppointmentParser`","lastModifiedDate":"2021-10-28"},{"lineNumber":184,"author":{"gitId":"rish-16"},"content":"  - `AddAppointmentCommandParser`","lastModifiedDate":"2021-10-28"},{"lineNumber":185,"author":{"gitId":"rish-16"},"content":"  - `EditAppointmentCommandParser`","lastModifiedDate":"2021-10-28"},{"lineNumber":186,"author":{"gitId":"rish-16"},"content":"  - `DeleteAppointmentCommandParser`","lastModifiedDate":"2021-10-28"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":189,"author":{"gitId":"joshenx"},"content":"**API** : [`Model.java`](https://github.com/AY2122S1-CS2103-W14-1/tp/tree/master/src/main/java/seedu/docit/model/Model.java)","lastModifiedDate":"2021-10-28"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"joshenx"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"800\" /\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"joshenx"},"content":"* stores the address book data and appointment book data (both upcoming and archived) i.e., all `Patient`, `Appointment` objects (which are contained in `UniquePatientList` and `UniqueAppointmentList` objects).","lastModifiedDate":"2021-10-27"},{"lineNumber":196,"author":{"gitId":"joshenx"},"content":"* stores the currently \u0027selected\u0027 `Patient` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPatient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-10-27"},{"lineNumber":197,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":198,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":200,"author":{"gitId":"rish-16"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below.","lastModifiedDate":"2021-11-03"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":202,"author":{"gitId":"rish-16"},"content":"\u003cimg src\u003d\"diagrams/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"joshenx"},"content":"**API** : [`Storage.java`](https://github.com/AY2122S1-CS2103-W14-1/tp/tree/master/src/main/java/seedu/docit/storage/Storage.java)","lastModifiedDate":"2021-10-28"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"joshenx"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"600\" /\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":214,"author":{"gitId":"joshenx"},"content":"* can save address book data, appointment book data, and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-10-19"},{"lineNumber":215,"author":{"gitId":"joshenx"},"content":"* inherits from `AddressBookStorage`, `AppointmentBookStorage` and `ArchivedAppointmentBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-10-19"},{"lineNumber":216,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-10-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"huyuxin0429"},"content":"### Recording a Patient\u0027s Prescription feature","lastModifiedDate":"2021-10-29"},{"lineNumber":229,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":230,"author":{"gitId":"huyuxin0429"},"content":"During appointments, the doctor can provide prescription of drugs for patients.","lastModifiedDate":"2021-10-29"},{"lineNumber":231,"author":{"gitId":"huyuxin0429"},"content":"Recording this information together with appointment information helps clinic staff to keep track of prescriptions given to a patient.","lastModifiedDate":"2021-10-29"},{"lineNumber":232,"author":{"gitId":"huyuxin0429"},"content":"Past prescriptions can also be viewed with past appointments.","lastModifiedDate":"2021-10-29"},{"lineNumber":233,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":234,"author":{"gitId":"huyuxin0429"},"content":"#### How Prescription is implemented","lastModifiedDate":"2021-10-29"},{"lineNumber":235,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":236,"author":{"gitId":"huyuxin0429"},"content":"![Class diagram of Prescription](diagrams/PrescriptionClassDiagram.png)","lastModifiedDate":"2021-10-29"},{"lineNumber":237,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":238,"author":{"gitId":"huyuxin0429"},"content":"The implementation of the Prescription class is done with a ```Prescription``` class. The ```Prescription``` class keep records of the medicine given, volume of medicine, and the duration which the medicine is taken.","lastModifiedDate":"2021-10-29"},{"lineNumber":239,"author":{"gitId":"huyuxin0429"},"content":"```Prescription``` objects are composed under ```Appointment``` objects, and will be deleted along with the parent ```Appointment``` object.","lastModifiedDate":"2021-10-29"},{"lineNumber":240,"author":{"gitId":"huyuxin0429"},"content":"Within each ```Appointment``` class, a collection of these ```Prescription``` objects are stored.","lastModifiedDate":"2021-10-29"},{"lineNumber":241,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":242,"author":{"gitId":"huyuxin0429"},"content":"The following commands are available from the ```Appointment``` class to interact with ```Prescription``` objects.","lastModifiedDate":"2021-10-29"},{"lineNumber":243,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":244,"author":{"gitId":"huyuxin0429"},"content":"* ```addPrescription(Prescription prescription)```- adds a new prescription for that appointment.","lastModifiedDate":"2021-10-29"},{"lineNumber":245,"author":{"gitId":"huyuxin0429"},"content":"* ```removePrescription(String medicineName)```- removes an existing prescription based on the name of the medicine.","lastModifiedDate":"2021-10-29"},{"lineNumber":246,"author":{"gitId":"huyuxin0429"},"content":"* ```listPrescriptions()```- lists all prescriptions for that appointment.","lastModifiedDate":"2021-10-29"},{"lineNumber":247,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":248,"author":{"gitId":"huyuxin0429"},"content":"#### Reason for implementation of Prescription","lastModifiedDate":"2021-10-29"},{"lineNumber":249,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":250,"author":{"gitId":"huyuxin0429"},"content":"```Prescription``` and ```Appointment``` forms a whole-part relationship and hence ```Prescription``` is suitable to be stored as a field of ```Appointment```.","lastModifiedDate":"2021-10-29"},{"lineNumber":251,"author":{"gitId":"huyuxin0429"},"content":"```Prescription``` will also be deleted when appointment is deleted due to this whole-part relationship.  As an ```Appointment``` can have multiple ```Prescription```, the multiplicity is many to one.","lastModifiedDate":"2021-10-29"},{"lineNumber":252,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":253,"author":{"gitId":"huyuxin0429"},"content":"#### Alternatives considered","lastModifiedDate":"2021-10-29"},{"lineNumber":254,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":255,"author":{"gitId":"huyuxin0429"},"content":"1. Storing ```Prescription``` in a ```UniquePrescriptionList``` object.","lastModifiedDate":"2021-10-29"},{"lineNumber":256,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":257,"author":{"gitId":"huyuxin0429"},"content":"This method was considered at first to improve separation of concerns. However, the increased complexity of adapting storage to work with nested composite data structures was deemed to be too high and infeasible.","lastModifiedDate":"2021-10-29"},{"lineNumber":258,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":259,"author":{"gitId":"didymental"},"content":"### Recording a Patient\u0027s Medical History feature","lastModifiedDate":"2021-10-22"},{"lineNumber":260,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":261,"author":{"gitId":"didymental"},"content":"Having relatable medical history entries of a patient can help clinic staff provide more contextual service to patients. Therefore, a patient management record system should have a feature for clinic staff to add, edit, and delete medical history options of the patient.","lastModifiedDate":"2021-10-22"},{"lineNumber":262,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":263,"author":{"gitId":"didymental"},"content":"#### How Medical History is implemented","lastModifiedDate":"2021-10-22"},{"lineNumber":264,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":265,"author":{"gitId":"didymental"},"content":"The proposed medical history mechanism was built with a class, ```MedicalHistory```. Within the ```MedicalHistory``` class, each entry of a pateint\u0027s medical history is stored under a private variable ```listOfEntries```. An entry of ```MedicalHistory``` is a private inner (nested) class within the ```MedicalHistory``` class, ```MedicalHistoryEntry```.","lastModifiedDate":"2021-10-22"},{"lineNumber":266,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":267,"author":{"gitId":"didymental"},"content":"These are the following methods created for the MedicalHistory feature:","lastModifiedDate":"2021-10-22"},{"lineNumber":268,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":269,"author":{"gitId":"didymental"},"content":"* ```MedicalHistory#addEntry(String s)```- adds a new entry of medical history into the patient.","lastModifiedDate":"2021-10-22"},{"lineNumber":270,"author":{"gitId":"didymental"},"content":"* ```MedicalHistory#editEntry(int index, String s)```- edits an entry of medical history that has been recorded and saved.","lastModifiedDate":"2021-10-22"},{"lineNumber":271,"author":{"gitId":"didymental"},"content":"* ```MedicalHistory#removeEntry(int index, String s)```- removes an entry of medical history, so the entry is no longer recorded.","lastModifiedDate":"2021-10-22"},{"lineNumber":272,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":273,"author":{"gitId":"didymental"},"content":"These operations are exposed via the ```Patient``` class as `Patient#addMedicalHistory(String s)`, `Patient#editMedicalHistory(int i, String s)` and `Patient#removeMedicalHistory(int i)` respectively.","lastModifiedDate":"2021-10-22"},{"lineNumber":274,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":275,"author":{"gitId":"didymental"},"content":"#### Reason for implementation of MedicalHistory","lastModifiedDate":"2021-10-22"},{"lineNumber":276,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":277,"author":{"gitId":"didymental"},"content":"```Patient``` and ```MedicalHistory``` share a whole-part relationship, that is, when a ```Patient``` object is destroyed, the corresponding ```MedicalHistory``` object is also destroyed. There is a 1...1 multiplicity relationship between a ```Patient``` and a ```MedicalHistory```, as one patient can only have one medical history. Hence, applying the Composition principle, a single ```MedicalHistory``` is composed within ```Patient```.","lastModifiedDate":"2021-10-22"},{"lineNumber":278,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":279,"author":{"gitId":"didymental"},"content":"Since the whole-part relationship also exists between ```MedicalHistory``` and ```MedicalHistoryEntry```, ```MedicalHistoryEntry``` is composed within ```MedicalHistory``` as well. However, since the multiplicity of the relationship between ```MedicalHistory``` and ```MedicalHistoryEntry``` is 1 to any number, that is, a medical history can have any number of medical history entries, the composition is wrapped by an ArrayList\u003cMedicalHistoryEntry\u003e, which stores an expandable list of medical history entries.","lastModifiedDate":"2021-10-22"},{"lineNumber":280,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":281,"author":{"gitId":"didymental"},"content":"\u003cimg src\u003d\"images/MedicalHistoryClassDiagram.png\" width\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":282,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":283,"author":{"gitId":"didymental"},"content":"### Alternatives considered","lastModifiedDate":"2021-10-22"},{"lineNumber":284,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":285,"author":{"gitId":"didymental"},"content":"1. Storing an entry of MedicalHistory as a String","lastModifiedDate":"2021-10-22"},{"lineNumber":286,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":287,"author":{"gitId":"didymental"},"content":"An alternative implementation to record MedicalHistory would be to not break down ```MedicalHistory``` into a list of ```MedicalHistoryEntries```, and instead store each entry as a String. This alternative results in a simpler build. However, this limits the information that an entry of medical history can store. For example, a clinic staff will not be able to tell from a String that this medical history is from 10 years ago, unless explicitly indicated by the staff. On the other hand, we can better handle more information of each entry and build more features for each entry accordingly, depending on the complexity requirement of a medical history entry from the cliic staff.","lastModifiedDate":"2021-10-22"},{"lineNumber":288,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":289,"author":{"gitId":"gycgabriel"},"content":"### Appointment composed of a Valid Patient when added, loaded and stored","lastModifiedDate":"2021-10-22"},{"lineNumber":290,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":291,"author":{"gitId":"didymental"},"content":"#### How Appointment is implemented","lastModifiedDate":"2021-10-22"},{"lineNumber":292,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":293,"author":{"gitId":"gycgabriel"},"content":"Each `Appointment` in memory contains a reference to a valid `Patient` object. To ensure this valid reference is maintained while the app is running and between different running instances, modifications were made to how `Appointment` is added, loaded and stored.","lastModifiedDate":"2021-10-22"},{"lineNumber":294,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":295,"author":{"gitId":"gycgabriel"},"content":"Major changes involved to implement this feature:","lastModifiedDate":"2021-10-22"},{"lineNumber":296,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":297,"author":{"gitId":"gycgabriel"},"content":"* Adding a new appointment  —  `AddAppointmentCommand#execute()` gets patient at the given index in the address book to create a new appointment referencing that patient.","lastModifiedDate":"2021-10-22"},{"lineNumber":298,"author":{"gitId":"joshenx"},"content":"* Loading an appointment on app launch  —","lastModifiedDate":"2021-10-24"},{"lineNumber":299,"author":{"gitId":"gycgabriel"},"content":"  * The app first loads address book, then passes the address book as argument to `Storage#readAppointmentBook()`.","lastModifiedDate":"2021-10-22"},{"lineNumber":300,"author":{"gitId":"gycgabriel"},"content":"  * `Storage#readAppointmentBook()` gets the corresponding patient from the patient index in `JSONAdaptedAppointments` and instantiates appointments.","lastModifiedDate":"2021-10-22"},{"lineNumber":301,"author":{"gitId":"joshenx"},"content":"* Storing an appointment after every command  —","lastModifiedDate":"2021-10-24"},{"lineNumber":302,"author":{"gitId":"gycgabriel"},"content":"  * The app runs `LogicManager#saveAppointmentBook()`.","lastModifiedDate":"2021-10-22"},{"lineNumber":303,"author":{"gitId":"gycgabriel"},"content":"  * `LogicManager#saveAppointmentBook()` gets the index of the patient referenced by the appointment, that is to be stored as `JSONAdaptedAppointments` in JSON file.","lastModifiedDate":"2021-10-22"},{"lineNumber":304,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":305,"author":{"gitId":"gycgabriel"},"content":"Given below is an example usage scenario and how the Appointment composed of a Valid Patient feature behaves at each step.","lastModifiedDate":"2021-10-22"},{"lineNumber":306,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":307,"author":{"gitId":"gycgabriel"},"content":"Step 1: The user launches the application. `MainApp` runs `MainApp#initModelManager` to initialize the model. First, the address book of patients is loaded to memory in `StorageManager#readAddressBook()`. Referencing the order of patients in this loaded address book, `StorageManager#readAppointmentBook()` loads the appointment book. Under `Storage`, the JSON file is loaded to `JsonAdaptedAppointment` object and its `JsonAdaptedAppointment#toModelType()` is executed. `JsonAdaptedAppointment#toModelType()` runs `AddressBook#getPatientOfIndex()` to get the patient of the appointment at the index loaded from the JSON file. The Appointment object is then instantiated.","lastModifiedDate":"2021-10-22"},{"lineNumber":308,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":309,"author":{"gitId":"gycgabriel"},"content":"![LoadAppointmentSequenceDiagram](images/LoadAppointmentSequenceDiagram.png)","lastModifiedDate":"2021-10-22"},{"lineNumber":310,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":311,"author":{"gitId":"gycgabriel"},"content":"Step 2: The user executes `appt add n/1 d/2021-10-19 1800` to add an appointment to the first patient of the address book. The `appt add` command calls `Model#getFilteredPatientList()`to receive a list of patients and gets the Patient object at the inputted index. A new Appointment of that patient is instantiated, and the `AddAppointmentCommand` calls `Model#addAppointment()` to add this appointment to the appointment book. A `CommandResult` is instantiated and returned.","lastModifiedDate":"2021-10-22"},{"lineNumber":312,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":313,"author":{"gitId":"gycgabriel"},"content":"![AddAppointmentSequenceDiagram](images/AddAppointmentSequenceDiagram.png)","lastModifiedDate":"2021-10-22"},{"lineNumber":314,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":315,"author":{"gitId":"gycgabriel"},"content":"Step 3: The user executes `delete 1` to delete the first patient in the address book. The patient is deleted and the corresponding appointments and archive appointments with that patient are deleted. The `delete` command calls `AddressBook#deleteAppointmentsWithPatient()` to delete all appointments to that patient before deleting the patient.","lastModifiedDate":"2021-10-28"},{"lineNumber":316,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":317,"author":{"gitId":"gycgabriel"},"content":"After every command that the user makes, appointments are saved. In `LogicManager#executes`, after every command is executed, `LogicManager` calls `StorageManager#saveAppointmentBook`, passing in the appointment book and address book from `Model` as arguments. In converting model-type Appointments to `JSONAdaptedAppointment`, `AddressBook#getIndexOfPatient()` is called to get the corresponding index of the patient for storage.","lastModifiedDate":"2021-10-22"},{"lineNumber":318,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":319,"author":{"gitId":"gycgabriel"},"content":"![SaveAppointmentSequenceDiagram](images/SaveAppointmentSequenceDiagram1.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":320,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":321,"author":{"gitId":"gycgabriel"},"content":"The diagram below is a more in-depth look at how `JSONAdaptedAppointment` is instantiated.","lastModifiedDate":"2021-10-28"},{"lineNumber":322,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":323,"author":{"gitId":"gycgabriel"},"content":"![SaveAppointmentSequenceDiagram](images/SaveAppointmentSequenceDiagram2.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":324,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":325,"author":{"gitId":"gycgabriel"},"content":"#### Design considerations","lastModifiedDate":"2021-10-22"},{"lineNumber":326,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":327,"author":{"gitId":"gycgabriel"},"content":"**Aspect: How Appointments are instantiated**","lastModifiedDate":"2021-10-22"},{"lineNumber":328,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":329,"author":{"gitId":"gycgabriel"},"content":"* **Alternative 1 (current choice):** Appointment is composed of a Patient.","lastModifiedDate":"2021-10-22"},{"lineNumber":330,"author":{"gitId":"gycgabriel"},"content":"  * **Justification:** Appointment can only be instantiated with a Patient, and without Patients,","lastModifiedDate":"2021-10-22"},{"lineNumber":331,"author":{"gitId":"gycgabriel"},"content":"    Appointments cannot exist.","lastModifiedDate":"2021-10-22"},{"lineNumber":332,"author":{"gitId":"gycgabriel"},"content":"    Hence, for an appointment to be instantiated, it requires a reference to the related Patient object.","lastModifiedDate":"2021-10-22"},{"lineNumber":333,"author":{"gitId":"gycgabriel"},"content":"  * **Pros:** Enforces 1 multiplicity requiring one Appointment to be associated with exactly one Patient.","lastModifiedDate":"2021-10-22"},{"lineNumber":334,"author":{"gitId":"gycgabriel"},"content":"  * **Pros:** Easy to find the patient of the appointment.","lastModifiedDate":"2021-10-22"},{"lineNumber":335,"author":{"gitId":"gycgabriel"},"content":"  * **Cons:** Need to locate corresponding Patient before Appointment can be instantiated. Thus, `AddressBook`","lastModifiedDate":"2021-10-22"},{"lineNumber":336,"author":{"gitId":"gycgabriel"},"content":"    must be loaded to memory before `AppointmentBook`.","lastModifiedDate":"2021-10-22"},{"lineNumber":337,"author":{"gitId":"gycgabriel"},"content":"* **Alternative 2:** Patient and Appointment have an association such that Patient has a link to Appointment and","lastModifiedDate":"2021-10-22"},{"lineNumber":338,"author":{"gitId":"gycgabriel"},"content":"  Appointment only requires date and time to instantiate.","lastModifiedDate":"2021-10-22"},{"lineNumber":339,"author":{"gitId":"gycgabriel"},"content":"  * **Pros:** Able to load `AppointmentBook` without loaded `AddressBook`.","lastModifiedDate":"2021-10-22"},{"lineNumber":340,"author":{"gitId":"gycgabriel"},"content":"  * **Cons:** Appointments may not be unique objects as there may be patients with multiple appointments at the same","lastModifiedDate":"2021-10-22"},{"lineNumber":341,"author":{"gitId":"gycgabriel"},"content":"    date and time at the same clinic that can be served by different doctors.","lastModifiedDate":"2021-10-22"},{"lineNumber":342,"author":{"gitId":"gycgabriel"},"content":"  * **Cons:** Difficult to find Patient of each Appointment when Appointment is extracted from Patients and listed","lastModifiedDate":"2021-10-22"},{"lineNumber":343,"author":{"gitId":"gycgabriel"},"content":"    because Appointment has no Patient field.","lastModifiedDate":"2021-10-22"},{"lineNumber":344,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":345,"author":{"gitId":"gycgabriel"},"content":"**Aspect: How Appointments are stored and loaded**","lastModifiedDate":"2021-10-22"},{"lineNumber":346,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":347,"author":{"gitId":"gycgabriel"},"content":"* **Alternative 1 (current choice):** Save `Appointment` as the index of corresponding patient in `AddressBook` and","lastModifiedDate":"2021-10-22"},{"lineNumber":348,"author":{"gitId":"gycgabriel"},"content":"  datetime.","lastModifiedDate":"2021-10-22"},{"lineNumber":349,"author":{"gitId":"gycgabriel"},"content":"  * **Justification:** The order of `AddressBook` does not change when saving or loading `AppointmentBook`. The order","lastModifiedDate":"2021-10-22"},{"lineNumber":350,"author":{"gitId":"gycgabriel"},"content":"    of `AddressBook` is saved each time `AppointmentBook` is saved.","lastModifiedDate":"2021-10-22"},{"lineNumber":351,"author":{"gitId":"gycgabriel"},"content":"  * **Pros:** Index of patient requires less code then implementing a unique ID and fits with our theme of using","lastModifiedDate":"2021-10-22"},{"lineNumber":352,"author":{"gitId":"gycgabriel"},"content":"    indices in commands.","lastModifiedDate":"2021-10-22"},{"lineNumber":353,"author":{"gitId":"gycgabriel"},"content":"  * **Pros:** Index of patient is guaranteed to be a unique identifier.","lastModifiedDate":"2021-10-22"},{"lineNumber":354,"author":{"gitId":"gycgabriel"},"content":"  * **Cons:** Order of the `AddressBook` is important. If the order of patients is changed in the json file, the","lastModifiedDate":"2021-10-22"},{"lineNumber":355,"author":{"gitId":"gycgabriel"},"content":"    appointments will become incorrect.","lastModifiedDate":"2021-10-22"},{"lineNumber":356,"author":{"gitId":"gycgabriel"},"content":"* **Alternative 2:** Implement a hash or Universally Unique Identifier (UUID) to for each Patient and Appointment","lastModifiedDate":"2021-10-22"},{"lineNumber":357,"author":{"gitId":"gycgabriel"},"content":"  object. Save `Appointment` with Patient UUID and save `Patient` with Appointment UUID.","lastModifiedDate":"2021-10-22"},{"lineNumber":358,"author":{"gitId":"gycgabriel"},"content":"  * **Pros:**  Changing the order of appointments and patients in saved JSON file will not change affect loading of","lastModifiedDate":"2021-10-22"},{"lineNumber":359,"author":{"gitId":"gycgabriel"},"content":"    data.","lastModifiedDate":"2021-10-22"},{"lineNumber":360,"author":{"gitId":"gycgabriel"},"content":"  * **Cons:** Requires more code to implement a unique hash or UUID and find the corresponding Patient and","lastModifiedDate":"2021-10-22"},{"lineNumber":361,"author":{"gitId":"gycgabriel"},"content":"    Appointment by traversing the `AddressBook` and `AppointmentBook` respectively.","lastModifiedDate":"2021-10-22"},{"lineNumber":362,"author":{"gitId":"gycgabriel"},"content":"  * **Cons:** Takes more computational work when loading compared to finding the `Patient` at an index at O(1) time.","lastModifiedDate":"2021-10-22"},{"lineNumber":363,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":364,"author":{"gitId":"joshenx"},"content":"### Archiving an Appointment","lastModifiedDate":"2021-10-22"},{"lineNumber":365,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":366,"author":{"gitId":"joshenx"},"content":"A user is able to archive an appointment when the appointment is _expired_, i.e. the patient has either missed his/her appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":367,"author":{"gitId":"joshenx"},"content":"or already attended the scheduled appointment. In this case, the appointment should be archived, so that clinic staff","lastModifiedDate":"2021-10-22"},{"lineNumber":368,"author":{"gitId":"joshenx"},"content":"are able to view what medicine was prescribed to the patient during previous appointments. ","lastModifiedDate":"2021-10-22"},{"lineNumber":369,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":370,"author":{"gitId":"joshenx"},"content":"#### How Archiving is Implemented","lastModifiedDate":"2021-10-22"},{"lineNumber":371,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":372,"author":{"gitId":"joshenx"},"content":"Archiving is facilitated by the `ArchivedAppointmentBook`. As opposed to the regular `AppointmentBook`, it does not allow","lastModifiedDate":"2021-10-22"},{"lineNumber":373,"author":{"gitId":"joshenx"},"content":"users to directly modify the data of appointments as archived data should not be edited. Hence, the following operations","lastModifiedDate":"2021-10-22"},{"lineNumber":374,"author":{"gitId":"joshenx"},"content":"have the `private` access modifier:","lastModifiedDate":"2021-10-22"},{"lineNumber":375,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":376,"author":{"gitId":"joshenx"},"content":"- `ArchivedAppointmentBook#setAppointment(Appointment target, Appointment editedAppointment)` - edits the `target` Appointment","lastModifiedDate":"2021-10-22"},{"lineNumber":377,"author":{"gitId":"joshenx"},"content":"  to be replaced with `editedAppointment`.","lastModifiedDate":"2021-10-22"},{"lineNumber":378,"author":{"gitId":"joshenx"},"content":"- `ArchivedAppointmentBook#removeAppointment(Appointment key)` - removes the target Appointment `key`.","lastModifiedDate":"2021-10-22"},{"lineNumber":379,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":380,"author":{"gitId":"joshenx"},"content":"The reason these methods exist in the class is so to support the methods `ArchivedAppointmentBook#updatePatient(Patient target, Patient editedPatient)`","lastModifiedDate":"2021-10-22"},{"lineNumber":381,"author":{"gitId":"joshenx"},"content":"and `ArchivedAppointmentBook#removePatient(Patient target)`, which are called to accurately reflect any updates/removals of patient","lastModifiedDate":"2021-10-22"},{"lineNumber":382,"author":{"gitId":"joshenx"},"content":"details.","lastModifiedDate":"2021-10-22"},{"lineNumber":383,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":384,"author":{"gitId":"joshenx"},"content":"#### Auto-Archiving Implementation","lastModifiedDate":"2021-10-22"},{"lineNumber":385,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":386,"author":{"gitId":"joshenx"},"content":"The archiving implementation involves scanning through all appointments in a day and comparing it to","lastModifiedDate":"2021-10-28"},{"lineNumber":387,"author":{"gitId":"joshenx"},"content":"the current date and time of the user system. If the current date and time is 24 hours ahead of the scheduled","lastModifiedDate":"2021-10-28"},{"lineNumber":388,"author":{"gitId":"joshenx"},"content":"appointment time (24-hour buffer), i.e. by our definition, _expired_, the appointment is automatically archived. This auto-archiving implementation is handled","lastModifiedDate":"2021-10-28"},{"lineNumber":389,"author":{"gitId":"joshenx"},"content":"by the `ModelManager` class in two ways.","lastModifiedDate":"2021-10-28"},{"lineNumber":390,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":391,"author":{"gitId":"joshenx"},"content":"1. Upon initialisation of the application, the application automatically archives expired appointments (24-hours past their","lastModifiedDate":"2021-10-28"},{"lineNumber":392,"author":{"gitId":"joshenx"},"content":"   scheduled time). This is called through `ModelManager#archivePastAppointments()`. ","lastModifiedDate":"2021-10-28"},{"lineNumber":393,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":394,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":395,"author":{"gitId":"rish-16"},"content":"2. A `ScheduledExecutorService` object schedules the task `AutoArchiveApmts` which implements the `Runnable` interface. ","lastModifiedDate":"2021-11-03"},{"lineNumber":396,"author":{"gitId":"rish-16"},"content":"Every day at the `ModelManager.UPDATE_HOUR`th hour, the `Runnable` object executes the `ModelManager#archivePastAppointments()`","lastModifiedDate":"2021-11-03"},{"lineNumber":397,"author":{"gitId":"joshenx"},"content":"   method.","lastModifiedDate":"2021-10-28"},{"lineNumber":398,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":399,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":400,"author":{"gitId":"joshenx"},"content":"In the case where there are many scheduled appointments, this saves the user trouble of archiving past appointments when","lastModifiedDate":"2021-10-22"},{"lineNumber":401,"author":{"gitId":"joshenx"},"content":"they are already over.","lastModifiedDate":"2021-10-22"},{"lineNumber":402,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":403,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":404,"author":{"gitId":"joshenx"},"content":"#### Specific Auto-Archiving ","lastModifiedDate":"2021-10-28"},{"lineNumber":405,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":406,"author":{"gitId":"joshenx"},"content":"Users may still archive specific appointments manually to remove visual clutter. This is done through the `ArchiveAppointmentCommand`.","lastModifiedDate":"2021-10-28"},{"lineNumber":407,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":408,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"didymental"},"content":"Step 2. The user executes `delete 5` command to delete the 5th patient in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2021-10-10"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"huyuxin0429"},"content":"Step 3. The user executes `add n/David …` to add a new patient. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2021-10-29"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":435,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":436,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"didymental"},"content":"Step 4. The user now decides that adding the patient was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2021-10-10"},{"lineNumber":439,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":445,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":451,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"huyuxin0429"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2021-10-29"},{"lineNumber":466,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":479,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":484,"author":{"gitId":"didymental"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the patient being deleted).","lastModifiedDate":"2021-10-10"},{"lineNumber":485,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-10-29"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":496,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":498,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":499,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":500,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":501,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-10-29"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"huyuxin0429"},"content":"* Authorised staff from small family clinics (both receptionist and doctors)","lastModifiedDate":"2021-09-28"},{"lineNumber":512,"author":{"gitId":"huyuxin0429"},"content":"* Clinics lacking access to the cloud and are undeveloped compared to hospitals","lastModifiedDate":"2021-09-28"},{"lineNumber":513,"author":{"gitId":"huyuxin0429"},"content":"* Young clinics that do not have technological capabilities","lastModifiedDate":"2021-09-28"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"huyuxin0429"},"content":"**Value proposition**:","lastModifiedDate":"2021-09-28"},{"lineNumber":516,"author":{"gitId":"huyuxin0429"},"content":"Today, small family clinics often record patient information using paper application forms.","lastModifiedDate":"2021-09-28"},{"lineNumber":517,"author":{"gitId":"huyuxin0429"},"content":"Such recording of patient information results in the clinic having a messy and inefficient patient record information;","lastModifiedDate":"2021-09-28"},{"lineNumber":518,"author":{"gitId":"huyuxin0429"},"content":"the family clinic will have to flip through files and documents in order to find the patient. Doc’it aims to provide a","lastModifiedDate":"2021-09-28"},{"lineNumber":519,"author":{"gitId":"huyuxin0429"},"content":"centralised platform for authorised staff from small family clinics to view, update and onboard patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":520,"author":{"gitId":"huyuxin0429"},"content":"With Doc’it, small family clinics are able to reduce man hours from managing paper documents,","lastModifiedDate":"2021-09-28"},{"lineNumber":521,"author":{"gitId":"huyuxin0429"},"content":"and translate these ‘saved’ hours into providing better frontline service to patients, focusing on what they do best.","lastModifiedDate":"2021-09-28"},{"lineNumber":522,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":524,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":528,"author":{"gitId":"huyuxin0429"},"content":"| Priority | As a …                | I want to …                                                                             | So that I can…                                                               |","lastModifiedDate":"2021-10-29"},{"lineNumber":529,"author":{"gitId":"huyuxin0429"},"content":"| ---------- | ------------------------ | ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------- |","lastModifiedDate":"2021-10-29"},{"lineNumber":530,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff           | create new patient details                                                               | add data of new patients in our clinic                                        |","lastModifiedDate":"2021-09-28"},{"lineNumber":531,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff           | add medical history to patient details                                                   | have a background on the patient                                              |","lastModifiedDate":"2021-09-28"},{"lineNumber":532,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff           | view patient details                                                                     | better prescribe medication and treatments to my out-patients                 |","lastModifiedDate":"2021-09-28"},{"lineNumber":533,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff           | delete patient details                                                                   | manage patients’ need for privacy when patients no longer visit the clinic   |","lastModifiedDate":"2021-09-28"},{"lineNumber":534,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff           | view the prescriptions currently prescribed to my patients                               | provide correct prescriptions to them                                         |","lastModifiedDate":"2021-09-28"},{"lineNumber":535,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff           | create new appointments from patients                                                    | track upcoming appointments                                                   |","lastModifiedDate":"2021-09-28"},{"lineNumber":536,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff           | view appointments from patients                                                          | know at-a-glance what are the upcoming appointments and the patients involved |","lastModifiedDate":"2021-09-28"},{"lineNumber":537,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff           | delete appointments from patients                                                        | re-organise appointments when either side cancels their appointments          |","lastModifiedDate":"2021-09-28"},{"lineNumber":538,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff           | have appointments moved to appointment history                                           | separate what are the upcoming appointments from past appointments            |","lastModifiedDate":"2021-09-28"},{"lineNumber":539,"author":{"gitId":"huyuxin0429"},"content":"| `* * *`  | clinic staff           | view past appointments                                                                   | track their medical history                                                   |","lastModifiedDate":"2021-09-28"},{"lineNumber":540,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | edit appointments from patients                                                          | ensure appointment records are up-to-date                                     |","lastModifiedDate":"2021-09-28"},{"lineNumber":541,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | modify patient details                                                                   | ensure that any changes in their information are up-to-date                   |","lastModifiedDate":"2021-09-28"},{"lineNumber":542,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | edit prescriptions                                                                       | ensure my patients’ current prescriptions are up-to-date                     |","lastModifiedDate":"2021-09-28"},{"lineNumber":543,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | view the duration of prescriptions                                                       | decide whether they should be given additional prescriptions                  |","lastModifiedDate":"2021-09-28"},{"lineNumber":544,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | move prescriptions to prescription history when patients have finished that prescription |                                                                               |","lastModifiedDate":"2021-09-28"},{"lineNumber":545,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | view the prescription history of patients                                                | know what drugs my patients have taken before                                 |","lastModifiedDate":"2021-09-28"},{"lineNumber":546,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | cannot edit past prescriptions                                                           | prevent erroneous edits                                                       |","lastModifiedDate":"2021-09-28"},{"lineNumber":547,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | verify that the patient has paid for his appointment                                     | record that the patient has paid the bills                                    |","lastModifiedDate":"2021-09-28"},{"lineNumber":548,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | input the bill and price of the patient appointment                                      | record the amount that the patient has paid                                   |","lastModifiedDate":"2021-09-28"},{"lineNumber":549,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | prevent editing past appointments                                                        | ensure past records cannot be incorrectly modified                            |","lastModifiedDate":"2021-09-28"},{"lineNumber":550,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | filter patients by name                                                                  | pull up patient records easily when requested                                 |","lastModifiedDate":"2021-09-28"},{"lineNumber":551,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | filter patients by the date of their appointment                                         | know the list of patients per appointment day                                 |","lastModifiedDate":"2021-09-28"},{"lineNumber":552,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | filter patients by their prescriptions                                                   | gauge the demand of prescription_drug needed by the clinic                    |","lastModifiedDate":"2021-09-28"},{"lineNumber":553,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | new clinic staff       | go through a tutorial at the beginning                                                   | familiarise myself with how the app works and what it can do                  |","lastModifiedDate":"2021-09-28"},{"lineNumber":554,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | new clinic staff       | type a command to get all available commands and how they work                           | easily refer to the commands I can make                                       |","lastModifiedDate":"2021-09-28"},{"lineNumber":555,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | purge all current data                                                                   | delete any experimental records                                               |","lastModifiedDate":"2021-09-28"},{"lineNumber":556,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | long term clinic staff | use shortened command aliases                                                            | speed up my work                                                              |","lastModifiedDate":"2021-09-28"},{"lineNumber":557,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | easily make changes to the patient records without too many commands                     | my work can be done faster                                                    |","lastModifiedDate":"2021-09-28"},{"lineNumber":558,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | view information on an appealing GUI                                                     | view information that is neatly organised                                     |","lastModifiedDate":"2021-09-28"},{"lineNumber":559,"author":{"gitId":"huyuxin0429"},"content":"| `* *`    | clinic staff           | share a single patient database with other clinic staff                                  | ensure all changes are synced                                                 |","lastModifiedDate":"2021-09-28"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":561,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":564,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"rish-16"},"content":"(For all use cases below, the **System** is the ``Doc\u0027it`` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-10-28"},{"lineNumber":566,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":567,"author":{"gitId":"didymental"},"content":"**Use case: UC01 - List all patients**","lastModifiedDate":"2021-09-28"},{"lineNumber":568,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"didymental"},"content":"1. User requests to list patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":572,"author":{"gitId":"rish-16"},"content":"2. `Doc\u0027it` displays all patients.","lastModifiedDate":"2021-10-28"},{"lineNumber":573,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":574,"author":{"gitId":"didymental"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":575,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":576,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":577,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":578,"author":{"gitId":"didymental"},"content":"* 1a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":579,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":580,"author":{"gitId":"didymental"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":581,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":582,"author":{"gitId":"didymental"},"content":"**Use case: UC02 - Add a patient**","lastModifiedDate":"2021-09-28"},{"lineNumber":583,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":584,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":585,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":586,"author":{"gitId":"didymental"},"content":"1. User requests to add a patient.","lastModifiedDate":"2021-09-28"},{"lineNumber":587,"author":{"gitId":"rish-16"},"content":"2. `Doc\u0027it` adds the patient with necessary information.","lastModifiedDate":"2021-10-28"},{"lineNumber":588,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":589,"author":{"gitId":"didymental"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":590,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":591,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":592,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":593,"author":{"gitId":"didymental"},"content":"* 1a. Necessary details of patient are absent (name, NRIC).","lastModifiedDate":"2021-09-28"},{"lineNumber":594,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":595,"author":{"gitId":"rish-16"},"content":"  * 1a1. `Doc\u0027it` shows an error message.","lastModifiedDate":"2021-10-28"},{"lineNumber":596,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":597,"author":{"gitId":"didymental"},"content":"  Use case resumes at step 1.","lastModifiedDate":"2021-09-28"},{"lineNumber":598,"author":{"gitId":"didymental"},"content":"* 1b. Patient details conflict with existing patient list.","lastModifiedDate":"2021-09-28"},{"lineNumber":599,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":600,"author":{"gitId":"rish-16"},"content":"  * 1b1. `Doc\u0027it` shows an error message.","lastModifiedDate":"2021-10-28"},{"lineNumber":601,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":602,"author":{"gitId":"didymental"},"content":"  Use case resumes at step 1.","lastModifiedDate":"2021-09-28"},{"lineNumber":603,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":604,"author":{"gitId":"didymental"},"content":"**Use case: UC03 - Delete a patient**","lastModifiedDate":"2021-09-28"},{"lineNumber":605,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":606,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":607,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":608,"author":{"gitId":"didymental"},"content":"1. User requests to list patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":609,"author":{"gitId":"rish-16"},"content":"2. `Doc\u0027it` shows a list of patients.","lastModifiedDate":"2021-10-28"},{"lineNumber":610,"author":{"gitId":"didymental"},"content":"3. User requests to delete a specific patient in the list.","lastModifiedDate":"2021-09-28"},{"lineNumber":611,"author":{"gitId":"rish-16"},"content":"4. `Doc\u0027it` deletes the patient.","lastModifiedDate":"2021-10-28"},{"lineNumber":612,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":613,"author":{"gitId":"-"},"content":"   Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":614,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":615,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":616,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":617,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":618,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":619,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":620,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":621,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":622,"author":{"gitId":"rish-16"},"content":"  * 3a1. `Doc\u0027it` shows an error message.","lastModifiedDate":"2021-10-28"},{"lineNumber":623,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":624,"author":{"gitId":"-"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":625,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":626,"author":{"gitId":"didymental"},"content":"**Use case: UC04 - View the records of a patient**","lastModifiedDate":"2021-09-28"},{"lineNumber":627,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":628,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":629,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":630,"author":{"gitId":"didymental"},"content":"1. User requests to view a patient record.","lastModifiedDate":"2021-09-28"},{"lineNumber":631,"author":{"gitId":"rish-16"},"content":"2. `Doc\u0027it` shows the details of the patient.","lastModifiedDate":"2021-10-28"},{"lineNumber":632,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":633,"author":{"gitId":"didymental"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":634,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":635,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":636,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":637,"author":{"gitId":"didymental"},"content":"* 1a. The specified patient does not exist.","lastModifiedDate":"2021-09-28"},{"lineNumber":638,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":639,"author":{"gitId":"rish-16"},"content":"  * 1a1. `Doc\u0027it` shows an error message.","lastModifiedDate":"2021-10-28"},{"lineNumber":640,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":641,"author":{"gitId":"didymental"},"content":"    Use case resumes at step 1.","lastModifiedDate":"2021-09-28"},{"lineNumber":642,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":643,"author":{"gitId":"didymental"},"content":"**Use case: UC05 - List all appointments**","lastModifiedDate":"2021-09-28"},{"lineNumber":644,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":645,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":646,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":647,"author":{"gitId":"didymental"},"content":"1. User requests to list appointments.","lastModifiedDate":"2021-09-28"},{"lineNumber":648,"author":{"gitId":"rish-16"},"content":"2. `Doc\u0027it` displays all appointments.","lastModifiedDate":"2021-10-28"},{"lineNumber":649,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":650,"author":{"gitId":"didymental"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":651,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":652,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":653,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":654,"author":{"gitId":"didymental"},"content":"* 1a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":655,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":656,"author":{"gitId":"didymental"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":657,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":658,"author":{"gitId":"didymental"},"content":"**Use case: UC06 - Add an appointment**","lastModifiedDate":"2021-09-28"},{"lineNumber":659,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":660,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":661,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":662,"author":{"gitId":"didymental"},"content":"1. User requests to list patients.","lastModifiedDate":"2021-09-28"},{"lineNumber":663,"author":{"gitId":"rish-16"},"content":"2. `Doc\u0027it` displays all patients.","lastModifiedDate":"2021-10-28"},{"lineNumber":664,"author":{"gitId":"didymental"},"content":"3. User adds an appointment, matching the appointment to the specific patient.","lastModifiedDate":"2021-09-28"},{"lineNumber":665,"author":{"gitId":"rish-16"},"content":"4. `Doc\u0027it` adds the appointment and associates it to the patient.","lastModifiedDate":"2021-11-03"},{"lineNumber":666,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":667,"author":{"gitId":"didymental"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":668,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":669,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":670,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":671,"author":{"gitId":"didymental"},"content":"* 3a. The date of the appointment AND/OR the specified patient are invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":672,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":673,"author":{"gitId":"rish-16"},"content":"  * 3a1. `Doc\u0027it` shows an error message.","lastModifiedDate":"2021-10-28"},{"lineNumber":674,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":675,"author":{"gitId":"didymental"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2021-09-28"},{"lineNumber":676,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":677,"author":{"gitId":"didymental"},"content":"**Use case: UC07 - Delete an appointment**","lastModifiedDate":"2021-09-28"},{"lineNumber":678,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":679,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":680,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":681,"author":{"gitId":"didymental"},"content":"1. User requests to list appointments.","lastModifiedDate":"2021-09-28"},{"lineNumber":682,"author":{"gitId":"rish-16"},"content":"2. `Doc\u0027it` displays all appointments.","lastModifiedDate":"2021-10-28"},{"lineNumber":683,"author":{"gitId":"didymental"},"content":"3. User requests to delete a specific appointment in the list.","lastModifiedDate":"2021-09-28"},{"lineNumber":684,"author":{"gitId":"rish-16"},"content":"4. `Doc\u0027it` deletes the appointment and removes the appointment association from the originally associated patient.","lastModifiedDate":"2021-11-03"},{"lineNumber":685,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":686,"author":{"gitId":"didymental"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":687,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":688,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":689,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":690,"author":{"gitId":"didymental"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":691,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":692,"author":{"gitId":"didymental"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":693,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":694,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":695,"author":{"gitId":"rish-16"},"content":"  * 3a1. `Doc\u0027it` shows an error message.","lastModifiedDate":"2021-10-28"},{"lineNumber":696,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":697,"author":{"gitId":"didymental"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2021-09-28"},{"lineNumber":698,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":699,"author":{"gitId":"didymental"},"content":"**Use case: UC08 - Archive an appointment**","lastModifiedDate":"2021-09-28"},{"lineNumber":700,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":701,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":702,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":703,"author":{"gitId":"didymental"},"content":"1. User requests to list appointments.","lastModifiedDate":"2021-09-28"},{"lineNumber":704,"author":{"gitId":"rish-16"},"content":"2. `Doc\u0027it` displays all appointments.","lastModifiedDate":"2021-10-28"},{"lineNumber":705,"author":{"gitId":"didymental"},"content":"3. User requests to archive all appointments that are past its date.","lastModifiedDate":"2021-09-28"},{"lineNumber":706,"author":{"gitId":"rish-16"},"content":"4. `Doc\u0027it` archives all appointments that are past its date.","lastModifiedDate":"2021-10-28"},{"lineNumber":707,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":708,"author":{"gitId":"didymental"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":709,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":710,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":711,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":712,"author":{"gitId":"didymental"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-28"},{"lineNumber":713,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":714,"author":{"gitId":"didymental"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":715,"author":{"gitId":"didymental"},"content":"* 3a. No appointments are past its date.","lastModifiedDate":"2021-09-28"},{"lineNumber":716,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":717,"author":{"gitId":"didymental"},"content":"  Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":718,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":719,"author":{"gitId":"didymental"},"content":"**Use case: UC08 - Exit program**","lastModifiedDate":"2021-09-28"},{"lineNumber":720,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":721,"author":{"gitId":"didymental"},"content":"**MSS**","lastModifiedDate":"2021-09-28"},{"lineNumber":722,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":723,"author":{"gitId":"didymental"},"content":"1. User requests to exit the program.","lastModifiedDate":"2021-09-28"},{"lineNumber":724,"author":{"gitId":"rish-16"},"content":"2. `Doc\u0027it` saves and writes all files.","lastModifiedDate":"2021-10-28"},{"lineNumber":725,"author":{"gitId":"rish-16"},"content":"3. `Doc\u0027it` exits and closes.","lastModifiedDate":"2021-10-28"},{"lineNumber":726,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":727,"author":{"gitId":"didymental"},"content":"   Use case ends.","lastModifiedDate":"2021-09-28"},{"lineNumber":728,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":729,"author":{"gitId":"didymental"},"content":"**Extensions**","lastModifiedDate":"2021-09-28"},{"lineNumber":730,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":731,"author":{"gitId":"rish-16"},"content":"* 2a. `Doc\u0027it` is unable to save file.","lastModifiedDate":"2021-10-28"},{"lineNumber":732,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":733,"author":{"gitId":"rish-16"},"content":"  * 2a1. `Doc\u0027it` shows an error message.","lastModifiedDate":"2021-10-28"},{"lineNumber":734,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":735,"author":{"gitId":"didymental"},"content":"    Use case resumes at step 1.","lastModifiedDate":"2021-09-28"},{"lineNumber":736,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":737,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":738,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":739,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":740,"author":{"gitId":"rish-16"},"content":"2. Should be able to hold up to 1000 patients without noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-09-29"},{"lineNumber":741,"author":{"gitId":"-"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":742,"author":{"gitId":"rish-16"},"content":"4. Should not require an external installer or launcher.","lastModifiedDate":"2021-09-29"},{"lineNumber":743,"author":{"gitId":"rish-16"},"content":"5. Data should be stored locally in an easily-editable text file.","lastModifiedDate":"2021-09-29"},{"lineNumber":744,"author":{"gitId":"rish-16"},"content":"6. Should not depend on any cloud-based remote server.","lastModifiedDate":"2021-09-29"},{"lineNumber":745,"author":{"gitId":"rish-16"},"content":"7. Data should not be stored in an external Database Management System (DBMS) or data warehouse.","lastModifiedDate":"2021-09-29"},{"lineNumber":746,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":747,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":748,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":749,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":750,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":751,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":752,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-10-29"},{"lineNumber":753,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":754,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":755,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":756,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":757,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":758,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":759,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":760,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":761,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":762,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":763,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":764,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":765,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":766,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":767,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":768,"author":{"gitId":"huyuxin0429"},"content":"   2. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2021-10-29"},{"lineNumber":769,"author":{"gitId":"huyuxin0429"},"content":"2. Saving window preferences","lastModifiedDate":"2021-10-29"},{"lineNumber":770,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":771,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":772,"author":{"gitId":"huyuxin0429"},"content":"   2. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":773,"author":{"gitId":"-"},"content":"      Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":774,"author":{"gitId":"huyuxin0429"},"content":"3. _{ more test cases … }_","lastModifiedDate":"2021-10-29"},{"lineNumber":775,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":776,"author":{"gitId":"didymental"},"content":"### Deleting a patient","lastModifiedDate":"2021-10-10"},{"lineNumber":777,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":778,"author":{"gitId":"didymental"},"content":"1. Deleting a patient while all patients are being shown","lastModifiedDate":"2021-10-10"},{"lineNumber":779,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":780,"author":{"gitId":"didymental"},"content":"   1. Prerequisites: List all patients using the `list` command. Multiple patients in the list.","lastModifiedDate":"2021-10-10"},{"lineNumber":781,"author":{"gitId":"huyuxin0429"},"content":"   2. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":782,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":783,"author":{"gitId":"huyuxin0429"},"content":"   3. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":784,"author":{"gitId":"didymental"},"content":"      Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2021-10-10"},{"lineNumber":785,"author":{"gitId":"huyuxin0429"},"content":"   4. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":786,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":787,"author":{"gitId":"huyuxin0429"},"content":"2. _{ more test cases … }_","lastModifiedDate":"2021-10-29"},{"lineNumber":788,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":789,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":790,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":791,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":792,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":793,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":794,"author":{"gitId":"huyuxin0429"},"content":"2. _{ more test cases … }_","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"rish-16":85,"joshenx":76,"huyuxin0429":108,"-":298,"gycgabriel":72,"didymental":155}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"   1. Run the `seedu.docit.Main` and try a few commands.","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"joshenx":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"   e.g. `seedu.docit.commons.StringUtilTest`","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"   e.g. `seedu.docit.storage.StorageManagerTest`","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"   e.g. `seedu.docit.logic.LogicManagerTest`","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"`Doc\u0027it` provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"patient records, solving the inefficient paper records and files used today. With `Doc\u0027it`, small family clinics can","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"reduce man-hours in managing paper files, translating this saved time into better front-line care services.","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"#### Table of Contents","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"1. [Quick Start](#quick-start)","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"2. [Overview of Features](#overview-of-features)","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"    1. [Basic Commands](#general-commands)","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"       - [Clear all records](#clear-all-records-doc-clear)","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"       - [Help](#help-doc-help)","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"       - [Exit the program](#exit-the-program-doc-exit)","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"    2. [Patient-related Commands](#patient-commands)","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"       - [Add a patient](#add-a-patient-pt-add)","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"       - [List all patients](#list-all-patients-pt-list)","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"       - [Edit a patient](#edit-a-patient-pt-edit)","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"       - [Delete a patient](#delete-a-patient-pt-delete)","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"       - [Add to medical history](#add-a-medical-history-pt-ma)","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"       - [Delete to medical history](#delete-a-medical-history-pt-md)","lastModifiedDate":"2021-11-01"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"       - [Find patient\\(s\\)](#find-a-patient-with-keywords-pt-find-keywords)","lastModifiedDate":"2021-11-01"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"    3. [Appointment-related Commands](#appointment-commands)","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"       - [Add an appointment](#add-an-appointment-apmt-add)","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"       - [List all appointments](#list-all-appointments-apmt-list)","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"       - [List all archived appointments](#list-all-archived-appointments-apmt-alist)","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"       - [Edit an appointment](#edit-an-appointment-apmt-edit)","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"       - [Delete an appointment](#delete-an-appointment-apmt-delete)","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"       - [Archive an appointment](#archive-an-appointment-apmt-archive)","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"       - [Sort all appointments](#sort-all-appointments-apmt-sort)","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"       - [Add prescription](#add-prescription-apmt-pa)","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"       - [Delete prescription](#delete-prescription-apmt-pd)","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"4. [FAQ](#faq)","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"5. [Command Summary](#command-summary)","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"6. [Glossary](#glossary)","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"2. Download the latest `docit.jar` from [here](https://github.com/AY2122S1-CS2103-W14-1/tp/releases).","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your `Doc\u0027it`.","lastModifiedDate":"2021-10-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"   \u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`doc help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"rish-16"},"content":"   * **`pt list`** : Lists all patients.","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"rish-16"},"content":"   * **`doc exit`** : Exits the app.","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"6. Refer to the **Features** section below for details of each command.","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"## Overview of Features","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"rish-16"},"content":"This section provides a brief overview of `Doc\u0027it`. The intention is for users to gain a better","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"rish-16"},"content":"understanding of basic functionalities of `Doc\u0027it`, before diving into specific commands.","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"rish-16"},"content":"1. **Basic functionality**","lastModifiedDate":"2021-10-29"},{"lineNumber":74,"author":{"gitId":"rish-16"},"content":"   1. Clear all records","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"rish-16"},"content":"   2. Get Help","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"rish-16"},"content":"   3. Exit app","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"rish-16"},"content":"2. **Managing Patient Records**","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"didymental"},"content":"   1. Create a new Patient Record","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"didymental"},"content":"   2. View details of Patient Record","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"didymental"},"content":"   3. Delete Patient Record","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"didymental"},"content":"   4. Edit Patient Record","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"didymental"},"content":"   5. Add Medical History from a Patient Record","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"didymental"},"content":"   6. Delete Medical History of a Patient Record","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"didymental"},"content":"   7. Find filtered patient records based on keywords","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"rish-16"},"content":"3. **Managing Patient Appointments**","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"rish-16"},"content":"   1. Create a new appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"rish-16"},"content":"   2. View appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"rish-16"},"content":"   3. Delete appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"rish-16"},"content":"   4. Archive appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"rish-16"},"content":"   5. List appointments","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"rish-16"},"content":"   6. Sort appointments (in order of urgency)","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"huyuxin0429"},"content":"   7. Managing appointment prescriptions","lastModifiedDate":"2021-10-29"},{"lineNumber":93,"author":{"gitId":"huyuxin0429"},"content":"      1. Add prescription","lastModifiedDate":"2021-10-29"},{"lineNumber":94,"author":{"gitId":"huyuxin0429"},"content":"      2. Remove prescription","lastModifiedDate":"2021-10-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"rish-16"},"content":"  e.g. `n/NAME [m/MEDICAL_HISTORY]` can be used as `n/John Doe m/cancer` or as `n/John Doe`.","lastModifiedDate":"2021-11-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"rish-16"},"content":"* Items with `…`  after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"didymental"},"content":"  e.g. `[m/MEDICAL_HISTORY]… ` can be used as ` ` (i.e. 0 times), `m/Diabetes`, `m/Scoliosis m/High Blood Pressure` etc.","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"gycgabriel"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":120,"author":{"gitId":"gycgabriel"},"content":"* `INDEX` must a positive integer of the given item in the panel.","lastModifiedDate":"2021-10-28"},{"lineNumber":121,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":122,"author":{"gitId":"rish-16"},"content":"* `DATETIME` must be in the format `yyyy-mm-dd HHmm` for all commands, with time using 24-Hour notation.\u003cbr\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":123,"author":{"gitId":"rish-16"},"content":"  e.g. `2021-10-28 1530` indicates 28 Oct 2021 at 3.30pm","lastModifiedDate":"2021-10-29"},{"lineNumber":124,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":125,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"gycgabriel"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-10-28"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":129,"author":{"gitId":"rish-16"},"content":"## Basic Commands","lastModifiedDate":"2021-10-29"},{"lineNumber":130,"author":{"gitId":"rish-16"},"content":"This section covers basic application-related commands. All of these commands have `doc` in front of them.","lastModifiedDate":"2021-10-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"rish-16"},"content":"### Clear all records: `doc clear`","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"joshenx"},"content":"Clears all patient records and appointment records (upcoming and archived). This is an irreversible operation.","lastModifiedDate":"2021-11-01"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"rish-16"},"content":"Format: `doc clear`","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"rish-16"},"content":"### Help: `doc help`","lastModifiedDate":"2021-10-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"rish-16"},"content":"Shows the user manual for `Doc\u0027it` explaining how to access the help page.","lastModifiedDate":"2021-10-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"rish-16"},"content":"Format: `doc help`","lastModifiedDate":"2021-10-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":148,"author":{"gitId":"gycgabriel"},"content":"### Exit the program: `doc exit`","lastModifiedDate":"2021-10-28"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":150,"author":{"gitId":"rish-16"},"content":"Exits the program.","lastModifiedDate":"2021-10-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":152,"author":{"gitId":"gycgabriel"},"content":"Format: `doc exit`","lastModifiedDate":"2021-10-28"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-10-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"rish-16"},"content":"## Patient Commands","lastModifiedDate":"2021-10-27"},{"lineNumber":157,"author":{"gitId":"didymental"},"content":"Patient is the primary entity in `Doc\u0027it`. This section documents how to perform create, update, read and delete operations on patient","lastModifiedDate":"2021-11-03"},{"lineNumber":158,"author":{"gitId":"didymental"},"content":"records. ","lastModifiedDate":"2021-11-03"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"didymental"},"content":"\u003e:information_source: All patient-related commands have the keyword `pt` in front of them.","lastModifiedDate":"2021-11-03"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":162,"author":{"gitId":"rish-16"},"content":"### Add a patient: `pt add`","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"rish-16"},"content":"Creates a new patient record.","lastModifiedDate":"2021-09-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"rish-16"},"content":"**Format:** `pt add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [m/MEDICAL_HISTORY]...`","lastModifiedDate":"2021-11-03"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"rish-16"},"content":"- `MEDICAL_HISTORY` is optional; if `MEDICAL_HISTORY` is not given, an empty string of text will be used.","lastModifiedDate":"2021-11-01"},{"lineNumber":169,"author":{"gitId":"didymental"},"content":"- `MEDICAL_HISTORY` can be added multiple times within a single `pt add` command, as indicated by the ```...``` used.","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-09-27"},{"lineNumber":172,"author":{"gitId":"rish-16"},"content":"- `pt add n/Joshen Lim p/99998888 e/joshen@gmail.com a/123 Clementi Road SG293821`","lastModifiedDate":"2021-11-01"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"rish-16"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-27"},{"lineNumber":175,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-11"},{"lineNumber":176,"author":{"gitId":"rish-16"},"content":"New patient added: ","lastModifiedDate":"2021-11-01"},{"lineNumber":177,"author":{"gitId":"rish-16"},"content":"Joshen Lim; Phone: 99988888; Email: joshen@gmail.com; Address: 123 Clementi Road SG293821","lastModifiedDate":"2021-11-01"},{"lineNumber":178,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"rish-16"},"content":"### List all patients: `pt list`","lastModifiedDate":"2021-10-11"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"rish-16"},"content":"Shows a list of all patients in the record system.","lastModifiedDate":"2021-09-27"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"rish-16"},"content":"Format: `pt list`","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":188,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"rish-16"},"content":"### Edit a patient: `pt edit`","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"rish-16"},"content":"Edits the details of a specified patient.","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"rish-16"},"content":"**Format:** `pt edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [m/MEDICAL_HISTORY]`","lastModifiedDate":"2021-11-03"},{"lineNumber":195,"author":{"gitId":"rish-16"},"content":"- All fields are optional but if stated, must not be null or empty","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"rish-16"},"content":"- `INDEX` is compulsory when making an edit to patient details","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-09-27"},{"lineNumber":199,"author":{"gitId":"rish-16"},"content":"- `pt edit 1 n/Joshen Tan m/Heartbreak`","lastModifiedDate":"2021-10-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"rish-16"},"content":"**Expected outcome:** \u003cbr\u003e","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"rish-16"},"content":"Edited Patient: ","lastModifiedDate":"2021-11-01"},{"lineNumber":204,"author":{"gitId":"rish-16"},"content":"Joshen Tan; Phone: 12345678; Email: google@gmail.com; Address: 311 clementi SG540192; Medical History: Heartache, recorded 31 Oct 2021","lastModifiedDate":"2021-11-01"},{"lineNumber":205,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"rish-16"},"content":"### Delete a patient: `pt delete`","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"rish-16"},"content":"Deletes a patient record, including all information about the patient.","lastModifiedDate":"2021-09-27"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"rish-16"},"content":"**Format:** `pt delete INDEX`","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"rish-16"},"content":"- Deletes the patient at the specified `INDEX` (one-indexed).","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-09-27"},{"lineNumber":217,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-11-01"},{"lineNumber":218,"author":{"gitId":"rish-16"},"content":"pt list","lastModifiedDate":"2021-11-01"},{"lineNumber":219,"author":{"gitId":"rish-16"},"content":"pt delete 1","lastModifiedDate":"2021-11-01"},{"lineNumber":220,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-11-01"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"rish-16"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-27"},{"lineNumber":223,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-11"},{"lineNumber":224,"author":{"gitId":"rish-16"},"content":"Deleted patient:","lastModifiedDate":"2021-11-01"},{"lineNumber":225,"author":{"gitId":"rish-16"},"content":"Joshen Tan; Phone: 12345678; Email: google@gmail.com; Address: 311 clementi SG540192; Medical History: Heartache, recorded 31 Oct 2021","lastModifiedDate":"2021-11-01"},{"lineNumber":226,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-11"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"rish-16"},"content":"### Add a Medical History: `pt ma`","lastModifiedDate":"2021-11-01"},{"lineNumber":231,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":232,"author":{"gitId":"didymental"},"content":"Adds a medical history to the Patient Record, saving the medical history and ```today``` as the date of entry.","lastModifiedDate":"2021-10-28"},{"lineNumber":233,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":234,"author":{"gitId":"didymental"},"content":"**Format:** `pt ma INDEX m/MEDICAL_HISTORY...`","lastModifiedDate":"2021-11-03"},{"lineNumber":235,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":236,"author":{"gitId":"didymental"},"content":"- Adds a medical history to the patient at the specified `INDEX` (one-indexed).","lastModifiedDate":"2021-10-28"},{"lineNumber":237,"author":{"gitId":"didymental"},"content":"- Multiple entries of medical history can be added in one command: e.g. `m/Diabetes`, `m/Scoliosis m/High Blood Pressure` etc.","lastModifiedDate":"2021-11-03"},{"lineNumber":238,"author":{"gitId":"didymental"},"content":"- `m/MEDICAL_HISTORY` is a required field in this command","lastModifiedDate":"2021-11-03"},{"lineNumber":239,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":240,"author":{"gitId":"didymental"},"content":"**Examples:**","lastModifiedDate":"2021-10-28"},{"lineNumber":241,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-11-01"},{"lineNumber":242,"author":{"gitId":"rish-16"},"content":"pt list","lastModifiedDate":"2021-11-01"},{"lineNumber":243,"author":{"gitId":"rish-16"},"content":"pt ma 1 m/diabetes","lastModifiedDate":"2021-11-01"},{"lineNumber":244,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-11-01"},{"lineNumber":245,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":246,"author":{"gitId":"didymental"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-10-28"},{"lineNumber":247,"author":{"gitId":"didymental"},"content":"```","lastModifiedDate":"2021-10-28"},{"lineNumber":248,"author":{"gitId":"didymental"},"content":"Updated: ","lastModifiedDate":"2021-10-28"},{"lineNumber":249,"author":{"gitId":"rish-16"},"content":"Alex Yeoh; Phone: 87438807; Email: alexyeoh@example.com; Address: Blk 30 Geylang Street 29, #06-40; Medical History: diabetes, recorded 28 Oct 2021, high blood pressure, recorded 28 Oct 2021, diabetes, recorded 28 Oct 2021","lastModifiedDate":"2021-11-03"},{"lineNumber":250,"author":{"gitId":"didymental"},"content":"```","lastModifiedDate":"2021-10-28"},{"lineNumber":251,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":252,"author":{"gitId":"didymental"},"content":"---","lastModifiedDate":"2021-10-28"},{"lineNumber":253,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":254,"author":{"gitId":"rish-16"},"content":"### Delete a Medical History: `pt md`","lastModifiedDate":"2021-11-01"},{"lineNumber":255,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":256,"author":{"gitId":"didymental"},"content":"Deletes a medical history to the Patient Record.","lastModifiedDate":"2021-10-28"},{"lineNumber":257,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":258,"author":{"gitId":"didymental"},"content":"**Format:** `pt md INDEX i/MEDICAL_HISTORY_INDEX`","lastModifiedDate":"2021-10-28"},{"lineNumber":259,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":260,"author":{"gitId":"didymental"},"content":"- Deletes a medical history from the patient at the specified `INDEX` (one-indexed). The entry deleted is specified by the `MEDICAL_HISTORY_INDEX`","lastModifiedDate":"2021-10-28"},{"lineNumber":261,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":262,"author":{"gitId":"didymental"},"content":"**Examples:**","lastModifiedDate":"2021-10-28"},{"lineNumber":263,"author":{"gitId":"didymental"},"content":"- `pt md 1 i/1`","lastModifiedDate":"2021-10-28"},{"lineNumber":264,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":265,"author":{"gitId":"didymental"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-10-28"},{"lineNumber":266,"author":{"gitId":"didymental"},"content":"```","lastModifiedDate":"2021-10-28"},{"lineNumber":267,"author":{"gitId":"didymental"},"content":"Updated: ","lastModifiedDate":"2021-10-28"},{"lineNumber":268,"author":{"gitId":"rish-16"},"content":"Alex Yeoh; Phone: 87438807; Email: alexyeoh@example.com; Address: Blk 30 Geylang Street 29, #06-40; Medical History: high blood pressure, recorded 28 Oct 2021, diabetes, recorded 28 Oct 2021","lastModifiedDate":"2021-11-03"},{"lineNumber":269,"author":{"gitId":"didymental"},"content":"```","lastModifiedDate":"2021-10-28"},{"lineNumber":270,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":271,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":272,"author":{"gitId":"didymental"},"content":"---","lastModifiedDate":"2021-10-28"},{"lineNumber":273,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":274,"author":{"gitId":"rish-16"},"content":"### Find a Patient with keywords: `pt find [keywords...]`","lastModifiedDate":"2021-10-29"},{"lineNumber":275,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":276,"author":{"gitId":"rish-16"},"content":"Finds all patients that match any one of the keywords listed. These keywords can come from","lastModifiedDate":"2021-10-29"},{"lineNumber":277,"author":{"gitId":"rish-16"},"content":"either the Patient\u0027s Name or Medical History. ","lastModifiedDate":"2021-10-29"},{"lineNumber":278,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":279,"author":{"gitId":"didymental"},"content":"**Format:** `pt find [keywords...]`","lastModifiedDate":"2021-10-28"},{"lineNumber":280,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":281,"author":{"gitId":"didymental"},"content":"- Finds all patients that match any one of the keywords listed.","lastModifiedDate":"2021-10-28"},{"lineNumber":282,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":283,"author":{"gitId":"didymental"},"content":"**Examples:**","lastModifiedDate":"2021-10-28"},{"lineNumber":284,"author":{"gitId":"didymental"},"content":"- `pt find Alex David diabetes high blood pressure`","lastModifiedDate":"2021-10-28"},{"lineNumber":285,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":286,"author":{"gitId":"didymental"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-10-28"},{"lineNumber":287,"author":{"gitId":"didymental"},"content":"```","lastModifiedDate":"2021-10-28"},{"lineNumber":288,"author":{"gitId":"didymental"},"content":"4 patients listed!","lastModifiedDate":"2021-10-28"},{"lineNumber":289,"author":{"gitId":"didymental"},"content":"```","lastModifiedDate":"2021-10-28"},{"lineNumber":290,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":291,"author":{"gitId":"didymental"},"content":"---","lastModifiedDate":"2021-10-28"},{"lineNumber":292,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":293,"author":{"gitId":"rish-16"},"content":"## Appointment Commands","lastModifiedDate":"2021-10-27"},{"lineNumber":294,"author":{"gitId":"rish-16"},"content":"A patient in `Doc\u0027it` may have appointments to visit the clinic.","lastModifiedDate":"2021-10-29"},{"lineNumber":295,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":296,"author":{"gitId":"gycgabriel"},"content":"In the Appointments panel, upcoming appointments are shown in the Upcoming tab, and past appointments are archived in the Archived tab.","lastModifiedDate":"2021-10-28"},{"lineNumber":297,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":298,"author":{"gitId":"gycgabriel"},"content":"One appointment stores these details:","lastModifiedDate":"2021-10-28"},{"lineNumber":299,"author":{"gitId":"gycgabriel"},"content":"* Index of patient: The index of an existing patient in the Patients panel","lastModifiedDate":"2021-10-28"},{"lineNumber":300,"author":{"gitId":"gycgabriel"},"content":"* Date and time: The date and time of the appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":301,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":302,"author":{"gitId":"gycgabriel"},"content":"\u003e:information_source: All appointment-related commands have the keyword `apmt` in front of them.","lastModifiedDate":"2021-10-28"},{"lineNumber":303,"author":{"gitId":"rish-16"},"content":"These commands modify the Appointments panel of `Doc\u0027it`.","lastModifiedDate":"2021-10-29"},{"lineNumber":304,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":305,"author":{"gitId":"rish-16"},"content":"### Add an appointment: `apmt add`","lastModifiedDate":"2021-10-29"},{"lineNumber":306,"author":{"gitId":"gycgabriel"},"content":"Adds an appointment for the patient at the specified index in the Patients panel.","lastModifiedDate":"2021-10-28"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":308,"author":{"gitId":"gycgabriel"},"content":"**Format:** `apmt add i/PATIENT_INDEX d/DATETIME`","lastModifiedDate":"2021-10-28"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":310,"author":{"gitId":"gycgabriel"},"content":"- `PATIENT_INDEX`: Index of patient who should have this appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":311,"author":{"gitId":"rish-16"},"content":"- `DATETIME`: Date and time of appointment in format `yyyy-mm-dd HHmm`","lastModifiedDate":"2021-11-01"},{"lineNumber":312,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":313,"author":{"gitId":"gycgabriel"},"content":"**Examples:**","lastModifiedDate":"2021-10-28"},{"lineNumber":314,"author":{"gitId":"rish-16"},"content":"* `apmt add i/1 d/2021-10-05 1500` adds appointment on 5 Oct 2021 at 3pm to patient at index 1.","lastModifiedDate":"2021-11-01"},{"lineNumber":315,"author":{"gitId":"rish-16"},"content":"* `apmt add i/2 d/2022-12-31 0700` adds appointment on 31 Dec 2022 at 7am to patient at index 2.","lastModifiedDate":"2021-11-01"},{"lineNumber":316,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":317,"author":{"gitId":"gycgabriel"},"content":"**Example Usage:**","lastModifiedDate":"2021-11-02"},{"lineNumber":318,"author":{"gitId":"gycgabriel"},"content":"- `apmt add i/1 d/2021-12-28 1500` ","lastModifiedDate":"2021-11-02"},{"lineNumber":319,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":320,"author":{"gitId":"gycgabriel"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-11-02"},{"lineNumber":321,"author":{"gitId":"gycgabriel"},"content":"```","lastModifiedDate":"2021-11-02"},{"lineNumber":322,"author":{"gitId":"gycgabriel"},"content":"New appointment added: ","lastModifiedDate":"2021-11-02"},{"lineNumber":323,"author":{"gitId":"gycgabriel"},"content":"Patient: Alex Yeoh; Datetime: 28 Dec 2021 1500; Prescription: []","lastModifiedDate":"2021-11-02"},{"lineNumber":324,"author":{"gitId":"gycgabriel"},"content":"```","lastModifiedDate":"2021-11-02"},{"lineNumber":325,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":326,"author":{"gitId":"rish-16"},"content":"### List all appointments: `apmt list`","lastModifiedDate":"2021-10-29"},{"lineNumber":327,"author":{"gitId":"joshenx"},"content":"Shows the list of all appointments.","lastModifiedDate":"2021-11-01"},{"lineNumber":328,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":329,"author":{"gitId":"rish-16"},"content":"**Format:** `apmt list`","lastModifiedDate":"2021-10-27"},{"lineNumber":330,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":331,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-10-29"},{"lineNumber":332,"author":{"gitId":"rish-16"},"content":"* `apmt list`  Lists all appointments.","lastModifiedDate":"2021-10-29"},{"lineNumber":333,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":334,"author":{"gitId":"rish-16"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-10-11"},{"lineNumber":335,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-11"},{"lineNumber":336,"author":{"gitId":"joshenx"},"content":"[UI CARDS]","lastModifiedDate":"2021-11-01"},{"lineNumber":337,"author":{"gitId":"gycgabriel"},"content":"1. Patient Name: Bernice Yu | Appointment Date: 2021-10-05","lastModifiedDate":"2021-11-02"},{"lineNumber":338,"author":{"gitId":"gycgabriel"},"content":"2. Patient Name: Alex Yeoh | Appointment Date: 2021-10-06","lastModifiedDate":"2021-11-02"},{"lineNumber":339,"author":{"gitId":"gycgabriel"},"content":"3. Patient Name: Charlotte Oliveiro | Appointment Date: 2021-11-23","lastModifiedDate":"2021-11-02"},{"lineNumber":340,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":341,"author":{"gitId":"gycgabriel"},"content":"Listed all appointments","lastModifiedDate":"2021-11-02"},{"lineNumber":342,"author":{"gitId":"joshenx"},"content":"```","lastModifiedDate":"2021-11-01"},{"lineNumber":343,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":344,"author":{"gitId":"joshenx"},"content":"### List all archived appointments: `apmt alist`","lastModifiedDate":"2021-11-01"},{"lineNumber":345,"author":{"gitId":"joshenx"},"content":"Shows the list of all archived appointments.","lastModifiedDate":"2021-11-01"},{"lineNumber":346,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":347,"author":{"gitId":"joshenx"},"content":"**Format:** `apmt alist`","lastModifiedDate":"2021-11-01"},{"lineNumber":348,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":349,"author":{"gitId":"joshenx"},"content":"**Examples:**","lastModifiedDate":"2021-11-01"},{"lineNumber":350,"author":{"gitId":"joshenx"},"content":"* `apmt alist`  Lists all archived appointments.","lastModifiedDate":"2021-11-01"},{"lineNumber":351,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":352,"author":{"gitId":"joshenx"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-11-01"},{"lineNumber":353,"author":{"gitId":"joshenx"},"content":"```","lastModifiedDate":"2021-11-01"},{"lineNumber":354,"author":{"gitId":"joshenx"},"content":"[UI CARDS]","lastModifiedDate":"2021-11-01"},{"lineNumber":355,"author":{"gitId":"gycgabriel"},"content":"1. Patient Name: Bernice Yu | Appointment Date: 2021-1-05","lastModifiedDate":"2021-11-02"},{"lineNumber":356,"author":{"gitId":"gycgabriel"},"content":"2. Patient Name: Alex Yeoh | Appointment Date: 2021-1-06","lastModifiedDate":"2021-11-02"},{"lineNumber":357,"author":{"gitId":"gycgabriel"},"content":"3. Patient Name: Charlotte Oliveiro | Appointment Date: 2021-1-23","lastModifiedDate":"2021-11-02"},{"lineNumber":358,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":359,"author":{"gitId":"gycgabriel"},"content":"Listed all archived appointments","lastModifiedDate":"2021-11-02"},{"lineNumber":360,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-11"},{"lineNumber":361,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":362,"author":{"gitId":"gycgabriel"},"content":"### Edit an appointment: `apmt edit`","lastModifiedDate":"2021-10-28"},{"lineNumber":363,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":364,"author":{"gitId":"gycgabriel"},"content":"Edits the details of an appointment at the specified index in the Appointments panel.","lastModifiedDate":"2021-10-28"},{"lineNumber":365,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":366,"author":{"gitId":"gycgabriel"},"content":"**Format:** `apmt edit APMT_INDEX [i/PATIENT_INDEX] [d/DATETIME]`","lastModifiedDate":"2021-10-28"},{"lineNumber":367,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":368,"author":{"gitId":"gycgabriel"},"content":"- `APMT_INDEX`: Index of appointment in the Appointments panel","lastModifiedDate":"2021-10-28"},{"lineNumber":369,"author":{"gitId":"gycgabriel"},"content":"- `PATIENT_INDEX`: Index of patient who should have this appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":370,"author":{"gitId":"rish-16"},"content":"- `DATETIME`: Date and time of appointment in format `yyyy-mm-dd HHmm`","lastModifiedDate":"2021-11-01"},{"lineNumber":371,"author":{"gitId":"gycgabriel"},"content":"- At least one of the optional fields should be present","lastModifiedDate":"2021-10-28"},{"lineNumber":372,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":373,"author":{"gitId":"gycgabriel"},"content":"\u003e :bulb: Use `i/PATIENT_INDEX` to change whose appointment it belongs to. \u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":374,"author":{"gitId":"gycgabriel"},"content":"\u003e e.g. `apmt edit 1 i/2` modifies the first appointment to belong to the patient at index 2","lastModifiedDate":"2021-10-28"},{"lineNumber":375,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":376,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-10-11"},{"lineNumber":377,"author":{"gitId":"gycgabriel"},"content":"- `apmt edit 1 i/2`","lastModifiedDate":"2021-10-28"},{"lineNumber":378,"author":{"gitId":"gycgabriel"},"content":"- `apmt edit 1 d/2021-10-28 1500`","lastModifiedDate":"2021-10-28"},{"lineNumber":379,"author":{"gitId":"gycgabriel"},"content":"- `apmt edit 1 i/1 d/2021-10-28 1500`","lastModifiedDate":"2021-10-28"},{"lineNumber":380,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":381,"author":{"gitId":"gycgabriel"},"content":"**Example Usage:**","lastModifiedDate":"2021-11-02"},{"lineNumber":382,"author":{"gitId":"gycgabriel"},"content":"- `apmt edit 1 i/1 d/2021-12-25 1500`","lastModifiedDate":"2021-11-02"},{"lineNumber":383,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":384,"author":{"gitId":"gycgabriel"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-11-02"},{"lineNumber":385,"author":{"gitId":"gycgabriel"},"content":"```","lastModifiedDate":"2021-11-02"},{"lineNumber":386,"author":{"gitId":"gycgabriel"},"content":"Edited Appointment: ","lastModifiedDate":"2021-11-02"},{"lineNumber":387,"author":{"gitId":"gycgabriel"},"content":"Patient: Alex Yeoh; Datetime: 25 Dec 2021 1500; Prescription: []","lastModifiedDate":"2021-11-02"},{"lineNumber":388,"author":{"gitId":"gycgabriel"},"content":"```","lastModifiedDate":"2021-11-02"},{"lineNumber":389,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":390,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":391,"author":{"gitId":"rish-16"},"content":"### Delete an appointment: `apmt delete`","lastModifiedDate":"2021-10-29"},{"lineNumber":392,"author":{"gitId":"gycgabriel"},"content":"Deletes the appointment at the specified index in the Appointments panel.","lastModifiedDate":"2021-10-28"},{"lineNumber":393,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":394,"author":{"gitId":"rish-16"},"content":"**Format:** `apmt delete INDEX`","lastModifiedDate":"2021-10-27"},{"lineNumber":395,"author":{"gitId":"gycgabriel"},"content":"* Deletes the appointment at the specified INDEX.","lastModifiedDate":"2021-09-28"},{"lineNumber":396,"author":{"gitId":"gycgabriel"},"content":"* The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2021-09-28"},{"lineNumber":397,"author":{"gitId":"rish-16"},"content":"* The index must be a positive integer 1, 2, 3, ...","lastModifiedDate":"2021-10-11"},{"lineNumber":398,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":399,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-10-11"},{"lineNumber":400,"author":{"gitId":"gycgabriel"},"content":"* `apmt list`  Display Upcoming appointments tab.","lastModifiedDate":"2021-11-02"},{"lineNumber":401,"author":{"gitId":"rish-16"},"content":"* `apmt delete 1`  Deletes appointment at index 1.","lastModifiedDate":"2021-10-27"},{"lineNumber":402,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":403,"author":{"gitId":"gycgabriel"},"content":"**Example Usage:**","lastModifiedDate":"2021-11-02"},{"lineNumber":404,"author":{"gitId":"gycgabriel"},"content":"- `apmt delete 1`","lastModifiedDate":"2021-11-02"},{"lineNumber":405,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":406,"author":{"gitId":"gycgabriel"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-11-02"},{"lineNumber":407,"author":{"gitId":"gycgabriel"},"content":"```","lastModifiedDate":"2021-11-02"},{"lineNumber":408,"author":{"gitId":"gycgabriel"},"content":"Deleted Appointment: ","lastModifiedDate":"2021-11-02"},{"lineNumber":409,"author":{"gitId":"gycgabriel"},"content":"Patient: Alex Yeoh; Datetime: 28 Oct 2021 1500; Prescription: []","lastModifiedDate":"2021-11-02"},{"lineNumber":410,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":411,"author":{"gitId":"gycgabriel"},"content":"```","lastModifiedDate":"2021-11-02"},{"lineNumber":412,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":413,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":414,"author":{"gitId":"rish-16"},"content":"### Archive an appointment: `apmt archive`","lastModifiedDate":"2021-10-29"},{"lineNumber":415,"author":{"gitId":"gycgabriel"},"content":"Archives an old appointment that is already past its date.","lastModifiedDate":"2021-09-28"},{"lineNumber":416,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":417,"author":{"gitId":"rish-16"},"content":"**Format:** `apmt archive INDEX`","lastModifiedDate":"2021-10-27"},{"lineNumber":418,"author":{"gitId":"gycgabriel"},"content":"* Archives the appointment at the specified INDEX.","lastModifiedDate":"2021-09-28"},{"lineNumber":419,"author":{"gitId":"gycgabriel"},"content":"* The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2021-09-28"},{"lineNumber":420,"author":{"gitId":"rish-16"},"content":"* The index must be a positive integer 1, 2, 3, ...","lastModifiedDate":"2021-10-11"},{"lineNumber":421,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":422,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-10-11"},{"lineNumber":423,"author":{"gitId":"rish-16"},"content":"* `apmt archive 1`  Archives appointment at index 1.","lastModifiedDate":"2021-10-27"},{"lineNumber":424,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":425,"author":{"gitId":"rish-16"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-10-11"},{"lineNumber":426,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-11"},{"lineNumber":427,"author":{"gitId":"gycgabriel"},"content":"Archived Appointment: ","lastModifiedDate":"2021-11-02"},{"lineNumber":428,"author":{"gitId":"gycgabriel"},"content":"Patient: Alex Yeoh; Datetime: 31 Dec 2012 1200; Prescription: []","lastModifiedDate":"2021-11-02"},{"lineNumber":429,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-11"},{"lineNumber":430,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":431,"author":{"gitId":"rish-16"},"content":"### Sort all appointments: `apmt sort`","lastModifiedDate":"2021-10-29"},{"lineNumber":432,"author":{"gitId":"rish-16"},"content":"Shows a sorted list of all appointments","lastModifiedDate":"2021-10-28"},{"lineNumber":433,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":434,"author":{"gitId":"rish-16"},"content":"**Format:** `apmt sort`","lastModifiedDate":"2021-10-28"},{"lineNumber":435,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":436,"author":{"gitId":"rish-16"},"content":"**Examples:**","lastModifiedDate":"2021-10-28"},{"lineNumber":437,"author":{"gitId":"rish-16"},"content":"* `apmt sort`  Lists all appointments.","lastModifiedDate":"2021-10-28"},{"lineNumber":438,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":439,"author":{"gitId":"rish-16"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-10-28"},{"lineNumber":440,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-28"},{"lineNumber":441,"author":{"gitId":"gycgabriel"},"content":"[UI CARDS]","lastModifiedDate":"2021-11-02"},{"lineNumber":442,"author":{"gitId":"gycgabriel"},"content":"1. Patient Name: Bernice Yu | Appointment Date: 2021-06-05","lastModifiedDate":"2021-11-02"},{"lineNumber":443,"author":{"gitId":"gycgabriel"},"content":"2. Patient Name: Charlotte Oliveiro | Appointment Date: 2021-07-21","lastModifiedDate":"2021-11-02"},{"lineNumber":444,"author":{"gitId":"gycgabriel"},"content":"3. Patient Name: Alex Yeoh | Appointment Date: 2021-10-05","lastModifiedDate":"2021-11-02"},{"lineNumber":445,"author":{"gitId":"gycgabriel"},"content":"4. Patient Name: David Li | Appointment Date: 2021-10-06","lastModifiedDate":"2021-11-02"},{"lineNumber":446,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":447,"author":{"gitId":"gycgabriel"},"content":"Sorted Appointments based on default settings.","lastModifiedDate":"2021-11-02"},{"lineNumber":448,"author":{"gitId":"rish-16"},"content":"```","lastModifiedDate":"2021-10-28"},{"lineNumber":449,"author":{"gitId":"huyuxin0429"},"content":"## Add prescription: `apmt pa`","lastModifiedDate":"2021-10-29"},{"lineNumber":450,"author":{"gitId":"huyuxin0429"},"content":"Adds a prescription to the designated appointment.","lastModifiedDate":"2021-10-29"},{"lineNumber":451,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":452,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":453,"author":{"gitId":"huyuxin0429"},"content":"**Format:** `apmt pa APMT_INDEX n/MEDICINE_NAME v/MEDICINE_VOLUME d/MEDICINE_DURATION`","lastModifiedDate":"2021-11-04"},{"lineNumber":454,"author":{"gitId":"huyuxin0429"},"content":"* The names of medicine added to the prescription list must be unique.","lastModifiedDate":"2021-10-29"},{"lineNumber":455,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":456,"author":{"gitId":"huyuxin0429"},"content":"**Examples:**","lastModifiedDate":"2021-10-29"},{"lineNumber":457,"author":{"gitId":"huyuxin0429"},"content":"* `apmt pa 1 n/Penicillin v/400 ml d/2 times a week`","lastModifiedDate":"2021-11-04"},{"lineNumber":458,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":459,"author":{"gitId":"huyuxin0429"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-10-29"},{"lineNumber":460,"author":{"gitId":"huyuxin0429"},"content":"```","lastModifiedDate":"2021-10-29"},{"lineNumber":461,"author":{"gitId":"joshenx"},"content":"New prescription added:","lastModifiedDate":"2021-11-01"},{"lineNumber":462,"author":{"gitId":"huyuxin0429"},"content":"Medicine: Penicillin","lastModifiedDate":"2021-10-29"},{"lineNumber":463,"author":{"gitId":"huyuxin0429"},"content":"Volume: 400 ml","lastModifiedDate":"2021-10-29"},{"lineNumber":464,"author":{"gitId":"huyuxin0429"},"content":"Duration: 2 times a week","lastModifiedDate":"2021-10-29"},{"lineNumber":465,"author":{"gitId":"huyuxin0429"},"content":"```","lastModifiedDate":"2021-10-29"},{"lineNumber":466,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":467,"author":{"gitId":"huyuxin0429"},"content":"## Delete prescription: `apmt pd`","lastModifiedDate":"2021-10-29"},{"lineNumber":468,"author":{"gitId":"rish-16"},"content":"Deletes a prescription from the designated appointment.","lastModifiedDate":"2021-11-01"},{"lineNumber":469,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":470,"author":{"gitId":"huyuxin0429"},"content":"**Format:** `apmt pd APMT_INDEX n/MEDICINE_NAME`","lastModifiedDate":"2021-11-04"},{"lineNumber":471,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":472,"author":{"gitId":"huyuxin0429"},"content":"**Examples:**","lastModifiedDate":"2021-10-29"},{"lineNumber":473,"author":{"gitId":"huyuxin0429"},"content":"* `apmt pd 1 n/panadol`","lastModifiedDate":"2021-11-04"},{"lineNumber":474,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":475,"author":{"gitId":"huyuxin0429"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-10-29"},{"lineNumber":476,"author":{"gitId":"huyuxin0429"},"content":"```","lastModifiedDate":"2021-10-29"},{"lineNumber":477,"author":{"gitId":"joshenx"},"content":"Deleted prescription: ","lastModifiedDate":"2021-11-01"},{"lineNumber":478,"author":{"gitId":"joshenx"},"content":"Medicine: panadol","lastModifiedDate":"2021-11-01"},{"lineNumber":479,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":480,"author":{"gitId":"joshenx"},"content":"from John Doe\u0027s appointment.","lastModifiedDate":"2021-11-01"},{"lineNumber":481,"author":{"gitId":"huyuxin0429"},"content":"```","lastModifiedDate":"2021-10-29"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":483,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"rish-16"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous `Doc\u0027it` home folder.","lastModifiedDate":"2021-10-29"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"rish-16"},"content":"### Basic Commands","lastModifiedDate":"2021-10-29"},{"lineNumber":495,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":496,"author":{"gitId":"rish-16"},"content":"| Command     | Format        |","lastModifiedDate":"2021-10-11"},{"lineNumber":497,"author":{"gitId":"rish-16"},"content":"|-------------|---------------|","lastModifiedDate":"2021-10-11"},{"lineNumber":498,"author":{"gitId":"rish-16"},"content":"| User Manual | `doc help`    |","lastModifiedDate":"2021-10-27"},{"lineNumber":499,"author":{"gitId":"rish-16"},"content":"| Clear       | `doc clear`   |","lastModifiedDate":"2021-10-27"},{"lineNumber":500,"author":{"gitId":"rish-16"},"content":"| Exit        | `doc exit`    |","lastModifiedDate":"2021-10-27"},{"lineNumber":501,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":502,"author":{"gitId":"rish-16"},"content":"### Patient-related Commands","lastModifiedDate":"2021-10-11"},{"lineNumber":503,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":504,"author":{"gitId":"rish-16"},"content":"| Command | Format                                                                                                      | Example                                                                                   |","lastModifiedDate":"2021-11-01"},{"lineNumber":505,"author":{"gitId":"didymental"},"content":"|---------|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|","lastModifiedDate":"2021-11-04"},{"lineNumber":506,"author":{"gitId":"rish-16"},"content":"| Add                     | `pt add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [m/MEDICAL_HISTORY]...`                     | `pt add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 m/cancer` |","lastModifiedDate":"2021-11-03"},{"lineNumber":507,"author":{"gitId":"rish-16"},"content":"| Delete                  | `pt delete INDEX`                                                                           | `pt delete 3`                                                                             |","lastModifiedDate":"2021-10-11"},{"lineNumber":508,"author":{"gitId":"rish-16"},"content":"| Edit                    | `pt edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [m/MEDICAL_HISTORY]`         | `pt edit 2 n/James Lee e/jameslee@example.com`                                            |","lastModifiedDate":"2021-11-03"},{"lineNumber":509,"author":{"gitId":"didymental"},"content":"| Find                    | `pt find n/NAME`                                                                            | `pt find n/James Jake`                                                                    |","lastModifiedDate":"2021-11-04"},{"lineNumber":510,"author":{"gitId":"rish-16"},"content":"| List                    | `pt list`                                                                                   | -                                                                                         |","lastModifiedDate":"2021-11-03"},{"lineNumber":511,"author":{"gitId":"rish-16"},"content":"| Add Medical History     | `pt ma INDEX m/MEDICAL_HISTORY`                                                             | `pt ma 1 m/diabetes`                                                                      |","lastModifiedDate":"2021-11-03"},{"lineNumber":512,"author":{"gitId":"rish-16"},"content":"| Delete Medical History  | `pt md INDEX i/MEDICAL_HISTORY_INDEX`                                                       | `pt md 1 i/1`                                                                             |","lastModifiedDate":"2021-11-03"},{"lineNumber":513,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":514,"author":{"gitId":"huyuxin0429"},"content":"### Appointment and Prescription-related Commands","lastModifiedDate":"2021-11-03"},{"lineNumber":515,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":516,"author":{"gitId":"rish-16"},"content":"| Command              | Format                                                            | Example                                                |","lastModifiedDate":"2021-11-01"},{"lineNumber":517,"author":{"gitId":"huyuxin0429"},"content":"|----------------------|-------------------------------------------------------------------|--------------------------------------------------------|","lastModifiedDate":"2021-11-03"},{"lineNumber":518,"author":{"gitId":"gycgabriel"},"content":"| Add                  | `apmt add INDEX d/DATETIME`                                       | `apmt add 1 d/2021-10-05 1600`                         |","lastModifiedDate":"2021-10-28"},{"lineNumber":519,"author":{"gitId":"gycgabriel"},"content":"| Edit                 | `apmt edit APMT_INDEX [i/PATIENT_INDEX] [d/DATETIME]`             | `apmt edit 1 d/2021-10-05 1600`                        |","lastModifiedDate":"2021-10-28"},{"lineNumber":520,"author":{"gitId":"rish-16"},"content":"| Delete               | `apmt delete INDEX`                                               | `apmt delete 1`                                        |","lastModifiedDate":"2021-10-27"},{"lineNumber":521,"author":{"gitId":"rish-16"},"content":"| Archive              | `apmt archive INDEX`                                              | `apmt archive 1`                                       |","lastModifiedDate":"2021-10-27"},{"lineNumber":522,"author":{"gitId":"rish-16"},"content":"| List                 | `apmt list`                                                       | -                                                      |","lastModifiedDate":"2021-10-27"},{"lineNumber":523,"author":{"gitId":"joshenx"},"content":"| List Archived        | `apmt alist`                                                      | -                                                      |","lastModifiedDate":"2021-11-01"},{"lineNumber":524,"author":{"gitId":"rish-16"},"content":"| Sort                 | `apmt sort`                                                       | -                                                      |","lastModifiedDate":"2021-10-29"},{"lineNumber":525,"author":{"gitId":"huyuxin0429"},"content":"| Add Prescription     | `apmt pa APPOINTMENT_INDEX n/MEDICINE v/VOLUME d/DURATION `     | `apmt pa 1 n/Penicillin v/400 ml d/2 times a week `  |","lastModifiedDate":"2021-11-04"},{"lineNumber":526,"author":{"gitId":"huyuxin0429"},"content":"| Delete Prescription  | `apmt pd APPOINTMENT_INDEX n/MEDICINE`                          | `apmt pd 1 n/Penicillin `                            |","lastModifiedDate":"2021-11-04"},{"lineNumber":527,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":528,"author":{"gitId":"joshenx"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-29"},{"lineNumber":529,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":530,"author":{"gitId":"joshenx"},"content":"## Glossary","lastModifiedDate":"2021-09-29"},{"lineNumber":531,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":532,"author":{"gitId":"rish-16"},"content":"| Term                | Definition                                                                                                                                |","lastModifiedDate":"2021-10-11"},{"lineNumber":533,"author":{"gitId":"rish-16"},"content":"|---------------------|-------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2021-10-29"},{"lineNumber":534,"author":{"gitId":"rish-16"},"content":"| Appointment         | A scheduled consult between a patient and the clinic\u0027s doctor at an exact date and time. The doctor may or may not prescribe medication.  |","lastModifiedDate":"2021-10-29"},{"lineNumber":535,"author":{"gitId":"rish-16"},"content":"| Archive             | Storage for data that is non-urgent, e.g. appointment records that are past their date.                                                   |","lastModifiedDate":"2021-10-11"},{"lineNumber":536,"author":{"gitId":"didymental"},"content":"| Patient Record      | A record of a patient\u0027s name, phone number, address, email and medical history.                                                 |","lastModifiedDate":"2021-11-03"},{"lineNumber":537,"author":{"gitId":"rish-16"},"content":"| Prescription        | The issued medication/treatment for a patient along with a duration and volume.                                                           |","lastModifiedDate":"2021-10-27"},{"lineNumber":538,"author":{"gitId":"joshenx"},"content":"| Expired Appointment | An appointment that is 24-hours past its scheduled time.                                                                                  |","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"rish-16":170,"joshenx":30,"huyuxin0429":38,"-":99,"gycgabriel":132,"didymental":69}},{"path":"docs/diagrams/AddAppointmentSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"@startuml","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"!include style.puml","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"participant \":AddAppointmentCommand\" as AddAppointmentCommand LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"end box","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"participant \"lastShownList:LastShownList\" as LastShownList MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"participant \"toAdd:Appointment\" as Appointment MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"end box","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"[-\u003e AddAppointmentCommand : execute()","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"activate AddAppointmentCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"AddAppointmentCommand -\u003e Model : getFilteredPatientList()","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"activate Model","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"Model --\u003e AddAppointmentCommand : lastShownList","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"deactivate Model","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"AddAppointmentCommand -\u003e LastShownList : get(targetPatientIndex)","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"activate LastShownList","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"LastShownList ---\u003e AddAppointmentCommand : patientToMakeAppointment","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"deactivate LastShownList","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"create Appointment","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"AddAppointmentCommand -\u003e Appointment","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"activate Appointment","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"Appointment ---\u003e AddAppointmentCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"deactivate Appointment","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"AddAppointmentCommand -\u003e Model : addAppointment(toAdd)","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"activate Model","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"Model ---\u003e AddAppointmentCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"deactivate Model","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"create CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"AddAppointmentCommand -\u003e CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"activate CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"CommandResult ---\u003e AddAppointmentCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"deactivate CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"[\u003c--AddAppointmentCommand : result","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"deactivate AddAppointmentCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"@enduml","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"gycgabriel":49}},{"path":"docs/diagrams/ArchitectureSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":UI\" as ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"user -[USER_COLOR]\u003e ui : \"delete 1\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"activate ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"logic -[LOGIC_COLOR]\u003e model : deletePatient(p)","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"model -[MODEL_COLOR]-\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"deactivate model","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"storage -[STORAGE_COLOR]\u003e storage : Save to file","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e storage","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"logic --[LOGIC_COLOR]\u003e ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"deactivate logic","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ui--[UI_COLOR]\u003e user","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate ui","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"joshenx":1,"-":37}},{"path":"docs/diagrams/BetterModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"AddressBook *-down-\u003e \"1 \" UniquePatientList","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"UniquePatientList -right-\u003e Patient","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"Patient *--\u003e Name","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"Patient *--\u003e Phone","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"Patient *--\u003e Email","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"Patient *--\u003e Address","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"Patient *--\u003e MedicalHistory","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"rish-16":2,"joshenx":5,"-":9}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"participant \":DeletePatientCommandParser\" as DeletePatientCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"participant \"d:DeletePatientCommand\" as DeletePatientCommand LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"[-\u003e LogicManager : execute(\"pt delete 1\")","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"LogicManager -\u003e AddressBookParser : parsePatientCommand(\"pt delete 1\")","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"activate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"create DeletePatientCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"AddressBookParser -\u003e DeletePatientCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"activate DeletePatientCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"DeletePatientCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"deactivate DeletePatientCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"AddressBookParser -\u003e DeletePatientCommandParser : parse(\"1\")","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"activate DeletePatientCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"create DeletePatientCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"DeletePatientCommandParser -\u003e DeletePatientCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"activate DeletePatientCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"DeletePatientCommand --\u003e DeletePatientCommandParser : d","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"deactivate DeletePatientCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"DeletePatientCommandParser --\u003e AddressBookParser : d","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"deactivate DeletePatientCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"DeletePatientCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"destroy DeletePatientCommandParser","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"AddressBookParser --\u003e LogicManager : d","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"deactivate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"LogicManager -\u003e DeletePatientCommand : execute()","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"activate DeletePatientCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"DeletePatientCommand -\u003e Model : deletePatient(1)","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"Model --\u003e DeletePatientCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"rish-16":25,"-":44}},{"path":"docs/diagrams/LoadAppointmentSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"@startuml","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"!include style.puml","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"Participant \":Main\" as main #grey","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"Participant \":JsonUtil\" as jsonutil USER_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"[-[#grey]\u003e main: App launch","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"activate main #grey","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"main -\u003e main : initModelManager()","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"activate main #grey","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"main -\u003e storage : readAddressBook()","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"storage --\u003e main","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"deactivate storage STORAGE_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"main -\u003e storage : readAppointmentBook(addressBook)","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"storage -\u003e jsonutil : Read from JSON file","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"activate jsonutil USER_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"jsonutil --\u003e storage","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"deactivate jsonutil","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"storage -\u003e storage : toModelType(addressBook)","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"storage -\u003e storage : getPatientOfIndex()","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"storage --\u003e storage : patientToAppointment","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"deactivate storage","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"create model","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"storage -\u003e model : Appointment()","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"model --\u003e storage","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"deactivate model","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"storage --\u003e storage","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"deactivate storage","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"storage --\u003e main : Loaded appointment book","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"deactivate storage","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"@enduml","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"gycgabriel":45}},{"path":"docs/diagrams/LogicClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Logic {","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Interface Logic \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"package Model{","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"LogicManager .right.|\u003e Logic","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"LogicManager -right-\u003e\"1\" AddressBookParser","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"AddressBookParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"LogicManager .left.\u003e Command : executes \u003e","lastModifiedDate":"2019-07-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"LogicManager --\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"LogicManager --\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Storage --[hidden] Model","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Command .[hidden]up.\u003e Storage","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Command .right.\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"note right of XYZCommand: XYZCommand \u003d AddPatientCommand, \\nFindPatientCommand, etc","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Logic ..\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"LogicManager .down.\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Command .up.\u003e CommandResult : produces \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"rish-16":1,"-":45}},{"path":"docs/diagrams/MedicalHistoryClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"didymental"},"content":"@startuml","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"!include style.puml","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"didymental"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"didymental"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"Patient *--\u003e MedicalHistory","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"MedicalHistory *--\u003e \"*\" MedicalHistoryEntry","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"ModelManager --\u003e\"~* filtered\" Patient","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"@enduml","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"didymental":11}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"Interface ReadOnlyAppointmentBook \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-05-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class AddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"Class AppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"Class ArchivedAppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"Class ReadOnlyAppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class Model","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"Class UniquePatientList","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"Class UniqueAppointmentList","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"Class Patient","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"Class MedicalHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"Class MedicalHistoryEntry","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"Class Appointment","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"Class Date","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"AppointmentBook .up.|\u003e ReadOnlyAppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"ArchivedAppointmentBook .up.|\u003e ReadOnlyAppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"Model .left.\u003e ReadOnlyAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"Model .right.\u003e ReadOnlyAppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"ModelManager -left-\u003e \"1\" AddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"ModelManager -right-\u003e \"1\" AppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"ModelManager -right-\u003e \"1\" ArchivedAppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"AddressBook *--\u003e \"1\" UniquePatientList","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"AppointmentBook *--\u003e \"1\" UniqueAppointmentList","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"ArchivedAppointmentBook *--\u003e \"1\" UniqueAppointmentList","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"UniquePatientList --\u003e \"~* all\" Patient","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"Patient *--\u003e Name","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"Patient *--\u003e Phone","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"Patient *--\u003e Email","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"Patient *--\u003e Address","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"Patient *--\u003e MedicalHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"Patient *--\u003e \"*\" Tag","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"didymental"},"content":"MedicalHistory *--\u003e \"*\" MedicalHistoryEntry","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"UniqueAppointmentList --\u003e \"~* all\" Appointment","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"Appointment *--\u003e Date","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"Appointment *--\u003e \"1\" Patient","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"ModelManager --\u003e\"~* filtered\" Patient","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"joshenx":31,"-":44,"didymental":2}},{"path":"docs/diagrams/ParserClasses.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2021-07-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2021-07-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2021-07-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2021-07-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2021-07-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"package \"Parser classes\"{","lastModifiedDate":"2021-07-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Interface Parser \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class AddressBookParser","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class XYZCommandParser","lastModifiedDate":"2021-07-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"note left of Parser: Parser \u003d BasicParser, PatientParser, or \\nAppointmentParser","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"note bottom of XYZCommand: XYZCommand \u003d AddPatientCommand, \\nEditAppointmentCommand, etc.","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"note right of Command: Command \u003d BasicCommand, PatientCommand, \\nAppointmentCommand","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e AddressBookParser","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"AddressBookParser .down.\u003e XYZCommandParser: creates \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"AddressBookParser ..\u003e Command : returns \u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"XYZCommandParser .up.|\u003e Parser","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentTokenizer","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"ArgumentTokenizer .left.\u003e ArgumentMultimap","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e CliSyntax","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"CliSyntax ..\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ParserUtil","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"ParserUtil .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"ArgumentTokenizer .down.\u003e Prefix","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2021-07-31"}],"authorContributionMap":{"rish-16":3,"-":38}},{"path":"docs/diagrams/PrescriptionClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"huyuxin0429"},"content":"@startuml","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"!include ../style.puml","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"Class Appointment LOGIC_COLOR_T3","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"Class Prescription MODEL_COLOR_T3","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"Appointment \"1\" *-- \"*\"Prescription","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"@enduml","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"huyuxin0429":12}},{"path":"docs/diagrams/SaveAppointmentSequenceDiagram1.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"@startuml","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"!include style.puml","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"Participant \":JsonUtil\" as jsonutil USER_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"[-\u003e logic: execute()","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"logic -\u003e model : getAddressBook()","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"logic -\u003e model : getAppointmentBook()","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"logic -\u003e storage : saveAppointmentBook(appointmentBook, addressBook)","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"storage -\u003e model : JsonAdaptedAppointment()","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"storage -\u003e jsonutil : Save JSON File","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"@enduml","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"gycgabriel":20}},{"path":"docs/diagrams/SaveAppointmentSequenceDiagram2.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"@startuml","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"!include style.puml","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"participant \":JsonAdaptedAppointment\" as jaa MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"participant \":Appointment\" as appointment MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"participant \":AddressBook\" as addressbook MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"end box","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"create jaa","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"storage -\u003e jaa : JsonAdaptedAppointment()","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"jaa -\u003e appointment : getPatient()","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"jaa -\u003e addressbook : getIndexOfPatient(patient)","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"@enduml","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"gycgabriel":17}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Interface Storage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"package \"AddressBook Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class JsonAddressBookStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"Class JsonAdaptedPatient","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"package \"AppointmentBook Storage\" #F4F6F6{","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"Interface AppointmentBookStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"Class JsonAppointmentBookStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"Class JsonSerializableAppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"package \"ArchivedAppointmentBook Storage\" #F4F6F6{","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"Interface ArchivedAppointmentBookStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"Class JsonArchivedAppointmentBookStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"Class JsonSerializableArchivedAppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"Class JsonAdaptedAppointment","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"StorageManager --\u003e \"1\" AppointmentBookStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"StorageManager --\u003e \"1\" ArchivedAppointmentBookStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"Storage --|\u003e UserPrefsStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"Storage --|\u003e AddressBookStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"Storage --|\u003e AppointmentBookStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"Storage --|\u003e ArchivedAppointmentBookStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"JsonAddressBookStorage .up.|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"JsonAddressBookStorage ..\u003e JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedPatient","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"JsonAdaptedPatient --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"JsonAppointmentBookStorage .up.|\u003e AppointmentBookStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"JsonAppointmentBookStorage ..\u003e JsonSerializableAppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"JsonSerializableAppointmentBook --\u003e \"*\" JsonAdaptedAppointment","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"JsonArchivedAppointmentBookStorage .up.|\u003e ArchivedAppointmentBookStorage","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"JsonArchivedAppointmentBookStorage ..\u003e JsonSerializableArchivedAppointmentBook","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"JsonSerializableArchivedAppointmentBook --\u003e \"*\" JsonAdaptedAppointment","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"joshenx":29,"-":39}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface Ui \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"Class PatientListPanel","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"Class AppointmentListPanel","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"Class PatientCard","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"Class AppointmentCard","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"MainWindow *-down-\u003e \"1\" PatientListPanel","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"MainWindow *-down-\u003e \"2\" AppointmentListPanel","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"PatientListPanel -down-\u003e \"*\" PatientCard","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"AppointmentListPanel -down-\u003e \"*\" AppointmentCard","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"PatientListPanel --|\u003e UiPart","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"AppointmentListPanel --|\u003e UiPart","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"PatientCard --|\u003e UiPart","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"HelpWindow --|\u003e UiPart","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"AppointmentCard ..\u003e Model","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"PatientCard ..\u003e Model","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"PatientListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"joshenx":14,"-":52}},{"path":"docs/diagrams/UndoRedoState0.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title Initial state","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    class State1 as \"__ab0:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    class State2 as \"__ab1:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    class State3 as \"__ab2:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"hide State2","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"hide State3","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State1","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"joshenx":1,"-":19}},{"path":"docs/diagrams/UndoRedoState1.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"delete 5\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    class State1 as \"__ab0:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    class State2 as \"__ab1:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    class State3 as \"__ab2:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"hide State3","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"joshenx":1,"-":21}},{"path":"docs/diagrams/UndoRedoState2.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"add n/David\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    class State1 as \"__ab0:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    class State2 as \"__ab1:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    class State3 as \"__ab2:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"joshenx":1,"-":19}},{"path":"docs/diagrams/UndoRedoState3.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"undo\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    class State1 as \"__ab0:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    class State2 as \"__ab1:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    class State3 as \"__ab2:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"joshenx":1,"-":19}},{"path":"docs/diagrams/UndoRedoState4.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"list\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    class State1 as \"__ab0:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    class State2 as \"__ab1:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    class State3 as \"__ab2:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"joshenx":1,"-":19}},{"path":"docs/diagrams/UndoRedoState5.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"clear\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    class State1 as \"__ab0:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    class State2 as \"__ab1:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    class State3 as \"__ab3:AddressBook__\"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"note right on link: State ab2 deleted.","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"joshenx":1,"-":20}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-06-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml","lastModifiedDate":"2019-06-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":AddressBookParser\" as abp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute","lastModifiedDate":"2019-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic","lastModifiedDate":"2019-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)","lastModifiedDate":"2019-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)","lastModifiedDate":"2019-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec","lastModifiedDate":"2019-06-17"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"ecp -\u003e ec ++: index, editPatientDescriptor","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --","lastModifiedDate":"2019-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-06-17"}],"authorContributionMap":{"joshenx":1,"-":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"title: Doc\u0027it","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103-W14-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103-W14-1/tp/actions)","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103-W14-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2122S1-CS2103-W14-1/tp)","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"**Doc\u0027it is a desktop application for clinic staff to view, update, and onboard patient records, solving the inefficient paper records and files used today.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"* If you are interested in using Doc\u0027it, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"* If you are interested about developing Doc\u0027it, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"joshenx":6,"-":13}},{"path":"docs/team/didymental.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"didymental"},"content":"---","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"layout: page","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"title: Didymus\u0027 Project Portfolio Page","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"didymental"},"content":"---","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"didymental"},"content":"### Project: Doc\u0027it","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"#### Overview","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":"Doc’it provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"patient records and schedule appointments, solving the inefficient paper records and files used today. With Doc’it, small family clinics can","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline care services.","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"#### Summary of Contributions","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"Given below are my contributions to the project:","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"- **New Feature**: Create `MedicalHistory` class to store the medical history of Patient Records.","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"  * What it does: allows clinic staff to record medical histories when a patient is created.","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"  * Justification: This feature improves the product significantly because clinic staff can have more medical information about a Patient, which allows for better diagnosis.","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"  * Highlights: This feature enhances the `Patient` class. It required an in-depth analysis of design alternatives. The final design chosen was to build `MedicalHistory` class to compose multiple `MedicalEntry` subclasses, which required the use OOP composition and polymorphism principles. The implementation also introduced wrapper classes, `Entry` and `EntryList` for the purpose of defensive programming, so that every Patient with an empty `MedicalHistory` will reference the same `EMPTY_MEDCIAL_HISTORY` object. It also required changes to the Json serialisation for storage of the new `MedicalHistory` information. Storage was particularly challenging given the need to record the `date` of recording, and reboot the `date` according to what was saved. CRUD operations that were inherited from Ab3\u0027s `Person` class, now `Patient`, also needed to be modified to accommodate the new `MedicalHistory` attribute. Existing test cases for `parser` and the CRUD operations inherited from AB3 also needed modification.","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"- **New Feature**: Add `MedicalEntry` to the `MedicalHistory` of a Patient Record.","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"  * What it does: allows clinic staff to add medical histories to an existing patient, with an automatic record of the date the description of the medical history was entered.","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"  * Justification: This feature improves the product significantly because clinic staff can record important medical details about the patient to have a stronger medical understanding. The automatic date of entry also ensures the medical history can be checked and updated.","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"  * Highlights: This features requires a new `Command` to be created. It required an in-depth analysis of design alternatives. The implementation was challenging as it required modifications to existing commands, test cases and the `Parser` set of class.","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"  * Credits: *The design of the code was modelled after existing AB3 command codes, due to the existing `Parser` and `Command` associations.*","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"- **New Feature**: Delete `MedicalEntry` from the `MedicalHistory` of a Patient Record.","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"  * What it does: allows clinic staff to delete a specified medical entry from the medical history of an existing patient.","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"  * Justification: This feature improves the product significantly because clinic staff can delete medical details about the patient that were wrongly entered or no longer relevant.","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"  * Highlights: This features requires a new `Command` to be created. It required an in-depth analysis of design alternatives. The implementation was challenging as it required modifications to existing commands, test cases and the `Parser` set of class.","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"  * Credits: *The design of the code was modelled after existing AB3 command codes, due to the existing `Parser` and `Command` associations.*","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"- **New Feature**: Modified GUI for `Prescription`.","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"  * What it does: allows clinic staff see `Prescription` added after executing command to add prescription to an appointment.","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"  * Justification: This feature improves the product significantly because clinic staff can visually view and record the prescriptions prescribed after an appointment.","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"  * Highlights: This features required a strong understanding of `ObservableList` and how `ObservableList` worked with the GUI. As `Prescription` was a class encapsulated by the `Appointment` class, merely changing the `Prescription` would not trigger an event for GUI to change as the `ObservableList` only observes `Appointment` objects. Thus, for every modification to `Prescription`, we needed to update the `Appointment` object by creating a copy of the `Appointment` object.","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"- **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-09-17\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003ddidymental\u0026tabRepo\u003dAY2122S1-CS2103-W14-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"  * **`FIND PATIENT` feature:**","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"    * Enhanced `pt find` to be able to find a list of patients based on their medical history description. This enhancement allows clinic staff to find patients by their `name` and any `description` of their medical history.","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"  * Justification: clinic staff can find a list of patients not only by their name but by their medical history, so it is easier to track patients with similar past conditions.","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"  * Wrote additional tests for existing features","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"- **Project management**:","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"didymental"},"content":"  * Managed releases `v1.1` - `v1.4` (4 releases) on Github","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"didymental"},"content":"- **Coordinating and Maintaining Issue Tracker**:","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"  * Coordinated sprint issues by dividing tasks and assigning tasks to group members (examples: [\\#54](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/54), [\\#55](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/55), [\\#56](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/56), [\\#57](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/57), [\\#67](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/67), [\\#75](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/75), [\\#76](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/76), [\\#77](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/77), [\\#78](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/78), [\\#79](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/79), [\\#80](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/80), [\\#81](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/81), [\\#102](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/102), [\\#108](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/108), and [more](https://github.com/AY2122S1-CS2103-W14-1/tp/issues?q\u003dis%3Aissue+author%3Adidymental+is%3Aclosed))","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"- **Documentation**:","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"didymental"},"content":"  * User Guide:","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"didymental"},"content":"    * Added documentation for `MedicalHistory` under Patient Records","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"didymental"},"content":"  * Developer Guide:","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"didymental"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"didymental"},"content":"    * Drew the UML diagram which captures the associations between `MedicalHistory`, `MedicalEntry` and `Patient` classes.","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"didymental"},"content":"    * Drew the UML diagram which captures the associations between `AddMedicalEntry`, `DeleteMedicalEntry` and `PatientCommand` classes.","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"didymental"},"content":"    * Updated UML diagram of `ParserUtil` to include related `MedicalHistory` and `MedicalEntry` classes.","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"didymental"},"content":"- **Community**:","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"didymental"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#71](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/71), [\\#29](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/29), [\\#18](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/18), [\\#61](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/61)","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"didymental"},"content":"  * Contributed to forum discussions (examples: [1](https://github.com/nus-cs2103-AY2122S1/forum/issues/237), [2](https://github.com/nus-cs2103-AY2122S1/forum/issues/306))","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"didymental"},"content":"  * Reported bugs and suggestions for other teams in the class (example: [1](https://github.com/didymental/ped))","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"didymental":73}},{"path":"docs/team/gycgabriel.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gycgabriel"},"content":"---","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"layout: page","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"title: Gabriel\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"---","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"### Project: Doc\u0027IT","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"Doc’it provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"patient records, solving the inefficient paper records and files used today. With Doc’it, small family clinics can","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline care services","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"Doc\u0027IT is a desktop address book application. The user interacts with it using a CLI, and it has a GUI created","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"* **New Feature**: Create `Appointment` class to represent a patient\u0027s appointment with the clinic.","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"  * What it does: Allows clinic staff to record a patient\u0027s appointment after a patient is created.","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"  * Justification: This feature improves the product significantly because clinic staff can represent multiple appointments of patient with individual date and times.","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"  * Highlights: The implementation of `Appointment` class required changes in both commands, parsers and storage, to be listed in a separate panel from `Patient` class, yet can be linked to the patient that has the appointment. It required an in-depth analysis of design alternatives. The final design chosen was to build `Appointment` class to compose `Patient` and a `LocalDateTime` to represent the date and time of the appointment. This design required the use of OOP composition and polymorphism principles. The implementation required careful thought in how the `Appointment` class will be loaded and stored to memory as a list of appointments yet referencing a patient object. To achieve this result, the design choice was to use `Index` of a `Patient` at the point of save to store the appointment instead of a `Patient` object for easier loading from and storing to JSON by reference of the `Patient`\u0027s position in the `AddressBook`.  Command types and `AppointmentBook` similar to AB3\u0027s `Person` class structure also needed to be created. New test cases also have to be created for coverage of appointment related classes.","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"* **New Feature**: Implement Add, Edit, Delete operations for `Appointment` class. ","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"* What it does: Allows clinic staff to modify a patient\u0027s appointment after a patient is created.","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"* Justification: This feature improves the product significantly because clinic staff can modify appointments that they have created if they have entered in the wrong patient or date, or if the appointment timing was changed.","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"* Highlights: The implementation of `apmt add`, `apmt edit`, `apmt delete` required changes in `AddressBookParser` class and creation of respective `XYZCommandParser` classes, `XYZCommand` classes to conduct operations on `Appointment` objects. The `AppointmentBook` had to be created as well and have methods to conduct CRUD operations.","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"* **New Feature**: Implement LocalDateTime and date-time parsing for `Appointment` class. ","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"* What it does: Allows clinic staff to enter a computer-comprehensible date and time, so that further functionality can be added that use computer-comprehensible date and time.","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"* Justification: This feature improves the product significantly because clinic staff can enter a computer-comprehensible date and time that can be formatted in the UI, and can be used to create sort appointment by date, and archive functionality.","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"* Highlights: The implementation of `LocalDateTime` required parsing to be implemented when receiving input, documentation changes and incorrect format handling.","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"* **New Feature**: Implement more restrictive parsers under `ParserUtil`.","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"* What it does: Change validation regexes to be more strict in Datetime, Name, Address, MedicalHistory ","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"* Justification: This feature improves the product significantly because clinic staff cannot succeed in entering incorrectly formatted dates, name, address and medical history. Prevents fully numerical inputs for Name, Address and Medical History where it does not make sense.","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"* Highlights: The implementation of stricter validation regexes required an understanding of regex.","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"* **New Feature**: Change command result box to wrap text","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"* What it does: Wraps text overflow within the box so user does not have to scroll","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"* Highlights: The implementation in UI property removes the need to include a newline in command results in multiple places.","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"* **Project management**:","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"  * User Guide:","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"* **Community**:","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"* **Tools**:","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"gycgabriel":66}},{"path":"docs/team/huyuxin0429.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"layout: page","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"title: Yu Xin\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"---","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"### Project: Doc\u0027IT","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"Doc’it provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"patient records, solving the inefficient paper records and files used today. With Doc’it, small family clinics can","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline care services","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"Doc\u0027IT is a desktop address book application. The user interacts with it using a CLI, and it has a GUI created","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"* **Project management**:","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"    * User Guide:","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"* **Community**:","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"* **Tools**:","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"huyuxin0429":50}},{"path":"docs/team/joshenx.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"layout: page","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"title: Joshen\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"---","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"### Project: Doc\u0027it","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"Doc’it provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"patient records, solving the inefficient paper records and files used today. With Doc’it, small family clinics can","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline care services","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"Doc\u0027IT is a desktop address book application. The user interacts with it using a CLI, and it has a GUI created","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"Given below are my contributions to the project:","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"- **New Feature**: Added AppointmentBook class to store and manage appointments.","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"    * What it does: allows the user to store and manage multiple appointments across different Date and Time.","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    * Justification: This feature improves the product significantly because a user can avoid clashing appointments and track the upcoming appointments from patients.","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"- **New Feature**: Added Appointment class to store details of an appointment","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    * What it does: allows the user to store and manage details of an appointment.","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    * Justification: This feature improves the product significantly because a user can find specifics about details of an appointment, catering to the patient\u0027s needs.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"- **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"- **Project management**:","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"    * Managed releases `v1.1` - `v1.5` (3 releases) on Github","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"    * Updated the GUI color scheme","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"    * Wrote additional tests for existing features","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"- **Documentation**:","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"    * User Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"        * Added documentation for the features Patient Records","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"- **Community**:","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"- **Tools**:","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"joshenx":52}},{"path":"docs/team/rishabh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"layout: page","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":"title: Rishabh\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"### Project: `Doc\u0027it`","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"#### Overview","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":"`Doc’it` provides a centralised platform for authorised staff from small family clinics to view, update, and onboard","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"patient records and schedule appointments, solving the inefficient paper records and files used today. With `Doc’it`, ","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"small family clinics can reduce man-hours in managing paper files, translating this ‘saved’ time into better frontline","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"care services.","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"## Contribution Summary","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"### Project Specifics","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"* **Managed releases**: `v1.1` - `v1.4` (4 releases) on GitHub","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"* **Code contributed**: [Rishabh\u0027s RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003drish-16\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByAuthors\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003drish-16\u0026tabRepo\u003dAY2122S1-CS2103-W14-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse\u0026zFR\u003dfalse)","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"### Enhancements","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"    ","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"* Broke `Command` into `BasicCommand`, `PatientCommand`, and `AppointmentCommand` to promote better OOP.","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"  * Allocated each existing and new command into these 3 categories based on purpose and function.","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"* Broke `Parser` into `BasicParser`, `PatientParser`, and `AppointmentParser` to promote better OOP.","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"  * Allocated each existing and new command parser into these 3 categories based on purpose and function. ","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"* Removed all mentions of `Tag` from the app and revamped Patient-related tests ([#248](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/248))","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"### Documentation","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"* User Guide:","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"    * Add description and usage instructions for new commands ([#142](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/142))","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"    * Cosmetic changes in terms of grammar ([#184](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/184), [#185](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/185), [#248](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/248))","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"* Developer Guide:","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"    * Revamped full `Logic` section with breakdown of `Command` ([#165](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/165), )","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"    * Updated DG with new breakdown of `Command` ([#100](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/100), [#105](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/105), [#248](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/248))","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"    * Added a new `Parser` section under `Logic` detailing the changes to existing parsers for all commands","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"    * Updated diagrams based on new designs/ideas used throughout DG ([#165](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/165))","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"### Community","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"* Contributed to [CS2103 Forum](https://github.com/nus-cs2103-AY2122S1/forum/issues) discussions (examples: [#198](https://github.com/nus-cs2103-AY2122S1/forum/issues/198), [#274](https://github.com/nus-cs2103-AY2122S1/forum/issues/274), [#276](https://github.com/nus-cs2103-AY2122S1/forum/issues/276), [#300](https://github.com/nus-cs2103-AY2122S1/forum/issues/300), [#353](https://github.com/nus-cs2103-AY2122S1/forum/issues/353), [#250](https://github.com/nus-cs2103-AY2122S1/forum/issues/350), [#307](https://github.com/nus-cs2103-AY2122S1/forum/issues/307))","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"* Have written emails to Prof. Damith on Outlook containing suggestions/feedback on the website and general execution","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"---","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"rish-16"},"content":"### Absolute Contributions","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"Here\u0027s a list of all the Issues I was assigned: \u003cbr\u003e","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"rish-16"},"content":"[#8](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/8), ","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"rish-16"},"content":"[#14](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/14),","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"[#27](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/27),","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"rish-16"},"content":"[#56](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/56),","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"rish-16"},"content":"[#80](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/80),","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"rish-16"},"content":"[#81](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/81),","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"rish-16"},"content":"[#109](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/109),","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"rish-16"},"content":"[#112](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/112),","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"rish-16"},"content":"[#118](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/118),","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"rish-16"},"content":"[#137](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/137),","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"rish-16"},"content":"[#138](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/138),","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"rish-16"},"content":"[#144](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/144),","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"rish-16"},"content":"[#154](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/154),","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"rish-16"},"content":"[#156](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/156),","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"rish-16"},"content":"[#160](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/160),","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"rish-16"},"content":"[#188](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/188),","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"rish-16"},"content":"[#189](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/189),","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"rish-16"},"content":"[#190](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/190),","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"rish-16"},"content":"[#191](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/191),","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"rish-16"},"content":"[#192](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/192),","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"rish-16"},"content":"[#193](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/193),","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"rish-16"},"content":"[#194](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/194),","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"rish-16"},"content":"[#207](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/207),","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"rish-16"},"content":"[#215](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/215),","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"rish-16"},"content":"[#228](https://github.com/AY2122S1-CS2103-W14-1/tp/issues/228)","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"rish-16"},"content":"Here\u0027s a list of all my PRs that were approved that addressed the above-mentioned issues: \u003cbr\u003e","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"rish-16"},"content":"[#34](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/34),","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"rish-16"},"content":"[#44](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/44),","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"rish-16"},"content":"[#61](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/61),","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"rish-16"},"content":"[#65](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/65),","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"rish-16"},"content":"[#100](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/100),","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"rish-16"},"content":"[#101](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/101),","lastModifiedDate":"2021-11-05"},{"lineNumber":85,"author":{"gitId":"rish-16"},"content":"[#104](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/104),","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"rish-16"},"content":"[#105](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/105),","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"rish-16"},"content":"[#133](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/133),","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"rish-16"},"content":"[#140](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/140),","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"rish-16"},"content":"[#142](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/142),","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"rish-16"},"content":"[#165](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/165),","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"rish-16"},"content":"[#168](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/168),","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"rish-16"},"content":"[#184](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/184),","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"rish-16"},"content":"[#185](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/185),","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"rish-16"},"content":"[#226](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/226),","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"rish-16"},"content":"[#227](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/227),","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"rish-16"},"content":"[#243](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/243),","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"rish-16"},"content":"[#248](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/248),","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"rish-16"},"content":"Here\u0027s a list of PRs I reviewed, approved, and merged: \u003cbr\u003e","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"rish-16"},"content":"[#30](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/30),","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"rish-16"},"content":"[#44](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/44),","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"rish-16"},"content":"[#60](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/60),","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"rish-16"},"content":"[#103](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/103),","lastModifiedDate":"2021-11-05"},{"lineNumber":104,"author":{"gitId":"rish-16"},"content":"[#143](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/143),","lastModifiedDate":"2021-11-05"},{"lineNumber":105,"author":{"gitId":"rish-16"},"content":"[#151](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/151),","lastModifiedDate":"2021-11-05"},{"lineNumber":106,"author":{"gitId":"rish-16"},"content":"[#155](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/155),","lastModifiedDate":"2021-11-05"},{"lineNumber":107,"author":{"gitId":"rish-16"},"content":"[#166](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/166),","lastModifiedDate":"2021-11-05"},{"lineNumber":108,"author":{"gitId":"rish-16"},"content":"[#167](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/167),","lastModifiedDate":"2021-11-05"},{"lineNumber":109,"author":{"gitId":"rish-16"},"content":"[#182](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/182),","lastModifiedDate":"2021-11-05"},{"lineNumber":110,"author":{"gitId":"rish-16"},"content":"[#242](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/242),","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"rish-16"},"content":"[#249](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/249),","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"rish-16"},"content":"[#250](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/250),","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"rish-16"},"content":"[#251](https://github.com/AY2122S1-CS2103-W14-1/tp/pull/251)","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"rish-16":113}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/docit/logic/command` directory.","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":" * Changes the remark of an existing patient in the address book.","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"You can refer to the changes in this [diff](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"didymental"},"content":"            + \": Edits the remark of the patient identified \"","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"didymental"},"content":"            + \"by the index number used in the last patient listing. \"","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"didymental"},"content":"     * @param index of the patient in the filtered patient list to edit the remark","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"didymental"},"content":"     * @param remark of the patient to be updated to","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"joshenx"},"content":"Your code should look something like [this](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2021-10-28"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"joshenx"},"content":"Create a `RemarkCommandParser` class in the `seedu.docit.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"joshenx"},"content":"[here](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2021-10-28"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"joshenx"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of patient data. We achieve that by working with the `Patient` model. Each field in a Patient is implemented as a separate class (e.g. a `Name` object represents the patient’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a patient.","lastModifiedDate":"2021-10-27"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"joshenx"},"content":"Create a new `Remark` in `seedu.docit.model.patient`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2021-10-27"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"joshenx"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2021-10-28"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"didymental"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each patient.","lastModifiedDate":"2021-10-10"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"joshenx"},"content":"Simply add the following to [`seedu.docit.ui.PatientCard`](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2021-10-28"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"joshenx"},"content":"**`PatientCard.java`:**","lastModifiedDate":"2021-10-27"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"joshenx"},"content":"Then insert the following into [`main/resources/view/PatientListCard.fxml`](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2021-10-28"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"joshenx"},"content":"**`PatientListCard.fxml`:**","lastModifiedDate":"2021-10-27"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"joshenx"},"content":"## Modify `Patient` to support a `Remark` field","lastModifiedDate":"2021-10-27"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"joshenx"},"content":"Since `PatientCard` displays data from a `Patient`, we need to update `Patient` to get our `Remark` displayed!","lastModifiedDate":"2021-10-27"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"joshenx"},"content":"### Modify `Patient`","lastModifiedDate":"2021-10-27"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"joshenx"},"content":"We change the constructor of `Patient` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2021-10-27"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"joshenx"},"content":"### Update other usages of `Patient`","lastModifiedDate":"2021-10-27"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"joshenx"},"content":"Unfortunately, a change to `Patient` will cause other commands to break, you will have to modify these commands to use the updated `Patient`!","lastModifiedDate":"2021-10-27"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"joshenx"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Patient` class to find these commands.","lastModifiedDate":"2021-10-27"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"joshenx"},"content":"Refer to [this commit](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2021-10-28"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"joshenx"},"content":"AddressBook stores data by serializing `JsonAdaptedPatient` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPatient` to work with our new `Patient`!","lastModifiedDate":"2021-10-27"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"joshenx"},"content":"Check out [this commit](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2021-10-28"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"joshenx"},"content":"Now that we have finalized the `Patient` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2021-10-27"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"joshenx"},"content":"Just add [this one line of code!](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2021-10-28"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"joshenx"},"content":"**`PatientCard.java`:**","lastModifiedDate":"2021-10-27"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"joshenx"},"content":"public PatientCard(Patient patient, int displayedIndex) {","lastModifiedDate":"2021-10-27"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"didymental"},"content":"    remark.setText(patient.getRemark().value);","lastModifiedDate":"2021-10-10"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"joshenx"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Patient`. Since all fields in a `Patient` are immutable, we create a new instance of a `Patient` with the values that we want and","lastModifiedDate":"2021-10-27"},{"lineNumber":329,"author":{"gitId":"joshenx"},"content":"save it with `Model#setPatient()`.","lastModifiedDate":"2021-10-27"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Patient: %1$s\";","lastModifiedDate":"2021-10-27"},{"lineNumber":336,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Patient: %1$s\";","lastModifiedDate":"2021-10-27"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"joshenx"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"joshenx"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":347,"author":{"gitId":"joshenx"},"content":"        Patient editedPatient \u003d new Patient(","lastModifiedDate":"2021-10-27"},{"lineNumber":348,"author":{"gitId":"didymental"},"content":"                patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(),","lastModifiedDate":"2021-10-10"},{"lineNumber":349,"author":{"gitId":"didymental"},"content":"                patientToEdit.getAddress(), remark, patientToEdit.getTags());","lastModifiedDate":"2021-10-10"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"joshenx"},"content":"        model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":352,"author":{"gitId":"joshenx"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-27"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"didymental"},"content":"        return new CommandResult(generateSuccessMessage(editedPatient));","lastModifiedDate":"2021-10-10"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"didymental"},"content":"     * {@code patientToEdit}.","lastModifiedDate":"2021-10-10"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"joshenx"},"content":"    private String generateSuccessMessage(Patient patientToEdit) {","lastModifiedDate":"2021-10-27"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"didymental"},"content":"        return String.format(message, patientToEdit);","lastModifiedDate":"2021-10-10"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"joshenx"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2021-10-28"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"joshenx"},"content":"You should end up with a test that looks something like [this](https://github.com/AY2122S1-CS2103-W14-1/tp/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2021-10-28"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"joshenx":41,"-":348,"didymental":12}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Patient` class.","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"The `address` field in `Patient` is actually an instance of the `seedu.docit.model.patient.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPatientDescriptor` may require more careful inspection.","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"Let’s try removing references to `Address` in `EditPatientDescriptor`.","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"1. Safe delete the field `address` in `EditPatientDescriptor`.","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Patient` class will require you to modify its constructor.","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PatientCard` that has not been removed nor identified.","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"A quick look at the `PatientCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"**`PatientCard.java`**","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"**`PatientCard.fxml`**","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"joshenx"},"content":"**`invalidPatientAddressBook.json`:**","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"didymental"},"content":"  \"patients\": [ {","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"joshenx"},"content":"    \"name\": \"Patient with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"joshenx":12,"-":99,"didymental":1}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.docit.logic.Logic`.","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"A quick look at the `seedu.docit.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"joshenx"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPatientDescriptor`. Recall that we can verify the contents of `editPatientDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"joshenx"},"content":"       Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":193,"author":{"gitId":"joshenx"},"content":"       Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":194,"author":{"gitId":"joshenx"},"content":"       if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"joshenx"},"content":"       model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":198,"author":{"gitId":"joshenx"},"content":"       model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-27"},{"lineNumber":199,"author":{"gitId":"didymental"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPatient));","lastModifiedDate":"2021-10-10"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"joshenx"},"content":"   * it uses the `setPatient()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the patient data.","lastModifiedDate":"2021-10-27"},{"lineNumber":205,"author":{"gitId":"joshenx"},"content":"   * it uses the `updateFilteredPatientList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ patients.\u003cbr\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":206,"author":{"gitId":"didymental"},"content":"     FYI, The \u0027filtered list\u0027 is the list of patients resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the patients so that the user can see the edited patient along with all other patients. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-10-10"},{"lineNumber":207,"author":{"gitId":"didymental"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of patients is being tracked.","lastModifiedDate":"2021-10-10"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"didymental"},"content":"        patients.addAll(","lastModifiedDate":"2021-10-10"},{"lineNumber":235,"author":{"gitId":"joshenx"},"content":"            source.getPatientList()","lastModifiedDate":"2021-10-27"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"joshenx"},"content":"                  .map(JsonAdaptedPatient::new)","lastModifiedDate":"2021-10-27"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"joshenx"},"content":"1. It appears that a `JsonAdaptedPatient` is created for each `Patient` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2021-10-27"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"joshenx"},"content":"    5.  Add a new field to `Patient`","lastModifiedDate":"2021-10-27"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"joshenx":14,"-":283,"didymental":4}},{"path":"src/main/java/seedu/docit/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.FileUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"joshenx":3,"-":61}},{"path":"src/main/java/seedu/docit/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"joshenx":1,"huyuxin0429":1,"-":24}},{"path":"src/main/java/seedu/docit/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Config;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Version;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.ConfigUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.StringUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.Logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.LogicManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ArchivedAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.AddressBookStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.AppointmentBookStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.ArchivedAppointmentBookStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.JsonAppointmentBookStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.JsonArchivedAppointmentBookStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.Storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.StorageManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.UserPrefsStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"import seedu.docit.ui.Ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"import seedu.docit.ui.UiManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Doc\u0027it ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"        AppointmentBookStorage appointmentBookStorage \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"            new JsonAppointmentBookStorage(userPrefs.getAppointmentBookFilePath());","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"        ArchivedAppointmentBookStorage archivedAppointmentBookStorage \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"                new JsonArchivedAppointmentBookStorage(userPrefs.getArchivedAppointmentBookFilePath());","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"        storage \u003d new StorageManager(addressBookStorage, appointmentBookStorage,","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"                archivedAppointmentBookStorage, userPrefsStorage);","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e The","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"gycgabriel"},"content":"     * data from the sample address book will be used instead if {@code storage}\u0027s address book is not found, or an","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"     * empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"gycgabriel"},"content":"        Optional\u003cReadOnlyAppointmentBook\u003e appointmentBookOptional;","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"        Optional\u003cReadOnlyAppointmentBook\u003e archivedAppointmentBookOptional;","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"gycgabriel"},"content":"        ReadOnlyAppointmentBook initialAppointmentData;","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"        ReadOnlyAppointmentBook initialArchivedAppointmentData;","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"gycgabriel"},"content":"        // Storage and Sample data for Appointments","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"gycgabriel"},"content":"            appointmentBookOptional \u003d storage.readAppointmentBook(initialData);","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"gycgabriel"},"content":"            if (!appointmentBookOptional.isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"gycgabriel"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AppointmentBook\");","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"gycgabriel"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"gycgabriel"},"content":"            initialAppointmentData \u003d appointmentBookOptional.orElseGet(SampleDataUtil::getSampleAppointmentBook);","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"gycgabriel"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AppointmentBook\");","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"gycgabriel"},"content":"            initialAppointmentData \u003d new AppointmentBook();","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"gycgabriel"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":120,"author":{"gitId":"gycgabriel"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AppointmentBook\");","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"gycgabriel"},"content":"            initialAppointmentData \u003d new AppointmentBook();","lastModifiedDate":"2021-10-17"},{"lineNumber":122,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":123,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"joshenx"},"content":"        //Storage and Data for Archived Appointments","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":"        try {","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"gycgabriel"},"content":"            archivedAppointmentBookOptional \u003d storage.readArchivedAppointmentBook(initialData);","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"joshenx"},"content":"            if (!archivedAppointmentBookOptional.isPresent()) {","lastModifiedDate":"2021-10-19"},{"lineNumber":128,"author":{"gitId":"joshenx"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AppointmentBook\");","lastModifiedDate":"2021-10-19"},{"lineNumber":129,"author":{"gitId":"joshenx"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":130,"author":{"gitId":"joshenx"},"content":"            initialArchivedAppointmentData \u003d archivedAppointmentBookOptional.orElseGet(","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"joshenx"},"content":"                    SampleDataUtil::getSampleArchivedAppointmentBook);","lastModifiedDate":"2021-10-19"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2021-10-19"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AppointmentBook\");","lastModifiedDate":"2021-10-19"},{"lineNumber":134,"author":{"gitId":"joshenx"},"content":"            initialArchivedAppointmentData \u003d new ArchivedAppointmentBook();","lastModifiedDate":"2021-10-19"},{"lineNumber":135,"author":{"gitId":"joshenx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"joshenx"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AppointmentBook\");","lastModifiedDate":"2021-10-19"},{"lineNumber":137,"author":{"gitId":"joshenx"},"content":"            initialArchivedAppointmentData \u003d new ArchivedAppointmentBook();","lastModifiedDate":"2021-10-19"},{"lineNumber":138,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":139,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":140,"author":{"gitId":"joshenx"},"content":"        return new ModelManager(initialData, initialAppointmentData, initialArchivedAppointmentData, userPrefs);","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":148,"author":{"gitId":"gycgabriel"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e The default file path {@code","lastModifiedDate":"2021-10-19"},{"lineNumber":149,"author":{"gitId":"gycgabriel"},"content":"     * Config#DEFAULT_CONFIG_FILE} will be used instead if {@code configFilePath} is null.","lastModifiedDate":"2021-10-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":183,"author":{"gitId":"gycgabriel"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a new {@code UserPrefs}","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"gycgabriel"},"content":"     * with default configuration if errors occur when reading from the file.","lastModifiedDate":"2021-10-19"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":195,"author":{"gitId":"gycgabriel"},"content":"            logger.warning(","lastModifiedDate":"2021-10-19"},{"lineNumber":196,"author":{"gitId":"gycgabriel"},"content":"                \"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \" + \"Using default user prefs\");","lastModifiedDate":"2021-10-19"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"joshenx"},"content":"        logger.info(\"Starting Doc\u0027it \" + MainApp.VERSION);","lastModifiedDate":"2021-10-27"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"joshenx"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Doc\u0027it ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-10-27"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":57,"-":142,"gycgabriel":29}},{"path":"src/main/java/seedu/docit/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.core;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":1,"-":62}},{"path":"src/main/java/seedu/docit/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.core;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"    private static final double DEFAULT_WIDTH \u003d 1200;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":2,"-":77}},{"path":"src/main/java/seedu/docit/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.core;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":1,"-":111}},{"path":"src/main/java/seedu/docit/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.core;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! Input cannot be blank! \\n%1$s\";","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"    public static final String MESSAGE_INVALID_REGREX_FORMAT \u003d \"Invalid format! Input can only be alphanumeric \"","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"            + \"and the following special characters: /,.#@\";","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d patients listed!\";","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"        \"The appointment index provided is invalid\";","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_APPOINTMENTS_LISTED_OVERVIEW \u003d \"%1$d appointments listed!\";","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"joshenx":3,"huyuxin0429":3,"-":9,"gycgabriel":3}},{"path":"src/main/java/seedu/docit/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.core;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":1,"-":115}},{"path":"src/main/java/seedu/docit/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.core.index;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"joshenx":1,"-":53}},{"path":"src/main/java/seedu/docit/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.exceptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":1,"-":10}},{"path":"src/main/java/seedu/docit/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.exceptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"joshenx":1,"-":20}},{"path":"src/main/java/seedu/docit/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.MainApp;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"joshenx":2,"-":40}},{"path":"src/main/java/seedu/docit/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"joshenx":1,"-":34}},{"path":"src/main/java/seedu/docit/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Config;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"joshenx":3,"-":20}},{"path":"src/main/java/seedu/docit/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":1,"-":82}},{"path":"src/main/java/seedu/docit/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"    public static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"    public static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":5,"-":138}},{"path":"src/main/java/seedu/docit/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":2,"-":66}},{"path":"src/main/java/seedu/docit/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.CommandResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"     * @see Model#getAddressBook()","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    /** Returns an unmodifiable view of the filtered list of patients */","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"     * Returns the AppointmentBook.","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"     * @see Model#getAppointmentBook()","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    ReadOnlyAppointmentBook getAppointmentBook();","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"     * Returns the ArchivedAppointmentBook.","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"     * @see Model#getArchivedAppointmentBook()","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"    ReadOnlyAppointmentBook getArchivedAppointmentBook();","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"    /** Returns an unmodifiable view of the archived list of appointments */","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"    ObservableList\u003cAppointment\u003e getArchivedAppointmentList();","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"    Path getAppointmentBookFilePath();","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"joshenx":24,"-":40,"gycgabriel":15}},{"path":"src/main/java/seedu/docit/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.Command;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.CommandResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.AddressBookParser;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.Storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"            storage.saveAppointmentBook(model.getAppointmentBook(), model.getAddressBook());","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"            storage.saveArchivedAppointmentBook(model.getArchivedAppointmentBook(), model.getAddressBook());","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"        return model.getFilteredPatientList();","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"    public ReadOnlyAppointmentBook getAppointmentBook() {","lastModifiedDate":"2021-10-17"},{"lineNumber":78,"author":{"gitId":"gycgabriel"},"content":"        return model.getAppointmentBook();","lastModifiedDate":"2021-10-17"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":80,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"    public ReadOnlyAppointmentBook getArchivedAppointmentBook() {","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"        return model.getArchivedAppointmentBook();","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"gycgabriel"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":90,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"    public ObservableList\u003cAppointment\u003e getArchivedAppointmentList() {","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"        return model.getArchivedAppointmentList();","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"gycgabriel"},"content":"    public Path getAppointmentBookFilePath() {","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"gycgabriel"},"content":"        return model.getAppointmentBookFilePath();","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"joshenx":25,"huyuxin0429":1,"-":67,"gycgabriel":17}},{"path":"src/main/java/seedu/docit/logic/commands/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":" * Adds an appointment to the appointment book.","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"public class AddAppointmentCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"        \"apmt \" + COMMAND_WORD + \": Adds an appointment to the appointment book. \"","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"            + \"Parameters: \" + CliSyntax.PREFIX_INDEX + \"INDEX \"","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_DATETIME + \"DATETIME \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"            + \"Example: apmt \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \"","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_DATETIME + \"2021-12-31 1600\";","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: \\n%1$s\";","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"        \"This appointment already exists in the appointment book\";","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"    private final Index targetPatientIndex;","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"    private final LocalDateTime datetime;","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    private Appointment toAdd;","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"     * Creates an AddCommand to add the specified {@code Appointment}","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"     * @param targetPatientIndex patient index to make appointment","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"     * @param datetime date and time of appointment","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"    public AddAppointmentCommand(Index targetPatientIndex, LocalDateTime datetime) {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(targetPatientIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"        this.targetPatientIndex \u003d targetPatientIndex;","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"        if (targetPatientIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"        Patient patientToMakeAppointment \u003d lastShownList.get(targetPatientIndex.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"        toAdd \u003d new Appointment(patientToMakeAppointment, datetime);","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"        if (model.hasAppointment(toAdd) || model.hasAppointmentInArchives(toAdd)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"        model.addAppointment(toAdd);","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"gycgabriel"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"            || (other instanceof AddAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 targetPatientIndex.equals(((AddAppointmentCommand) other).targetPatientIndex)","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 datetime.equals(((AddAppointmentCommand) other).datetime));","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"rish-16":1,"joshenx":15,"gycgabriel":61}},{"path":"src/main/java/seedu/docit/logic/commands/AddMedicalEntryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"import java.util.List;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.MedicalHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"public class AddMedicalEntryCommand extends PatientCommand {","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"    public static final String COMMAND_WORD \u003d \"ma\";","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"    public static final String MESSAGE_USAGE \u003d \"pt \" + COMMAND_WORD + \": Adds a medical entry to the patient. \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"        + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"        + PREFIX_MEDICAL + \"MEDICAL HISTORY\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"        + \"Example: \" + \"pt \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"        + PREFIX_MEDICAL + \"diabetes\";","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Updated: \\n\";","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"    private final Index index;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"    private final MedicalHistory medicalHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"     * Creates a MedicalEntry to add onto the MedicalHistory of the specified {@code Patient}","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"     * @param i index of the patinet specified.","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"     * @param m medical history for the entry to be added to.","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"    public AddMedicalEntryCommand(Index i, MedicalHistory m) {","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"        requireNonNull(i);","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"        requireNonNull(m);","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"        this.index \u003d i;","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"        this.medicalHistory \u003d m;","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"didymental"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"        Patient editedPatient \u003d patientToEdit.addMedicalHistory(this.medicalHistory);","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"didymental"},"content":"        model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"        model.updateAppointmentBook(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"didymental"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"didymental"},"content":"        return new CommandResult(MESSAGE_SUCCESS + editedPatient);","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":12,"didymental":51}},{"path":"src/main/java/seedu/docit/logic/commands/AddPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":" * Adds a patient to the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"public class AddPatientCommand extends PatientCommand {","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"    public static final String MESSAGE_USAGE \u003d \"pt \" + COMMAND_WORD + \": Adds a patient to the address book. \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"            + \"[\" + CliSyntax.PREFIX_MEDICAL + \"MEDICAL HISTORY]...\\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"            + \"Example: pt \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"            + CliSyntax.PREFIX_MEDICAL + \"diabetes\";","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: \\n%1$s\";","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the address book\";","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"    private final Patient toAdd;","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"     * Creates an AddCommand to add the specified {@code Patient}","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"    public AddPatientCommand(Patient patient) {","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"        toAdd \u003d patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"        if (model.hasPatient(toAdd)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"        model.addPatient(toAdd);","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"                || (other instanceof AddPatientCommand // instanceof handles nulls","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"                \u0026\u0026 toAdd.equals(((AddPatientCommand) other).toAdd));","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"rish-16":3,"joshenx":57,"gycgabriel":1,"didymental":1}},{"path":"src/main/java/seedu/docit/logic/commands/AppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * Represents a command specific to Patient records","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" * with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"public abstract class AppointmentCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"    public static final String COMMAND_PREFIX \u003d \"apmt\";","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":19,"joshenx":3,"gycgabriel":2}},{"path":"src/main/java/seedu/docit/logic/commands/ArchiveAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":" * Archives an appointment identified using it\u0027s displayed index from the appointment book.","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"public class ArchiveAppointmentCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    public static final String COMMAND_WORD \u003d \"archive\";","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_USAGE \u003d \"apmt \" + COMMAND_WORD","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"            + \": Archives the appointment identified by the index number used in the displayed appointment list.\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: apmt \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_ARCHIVE_APPOINTMENT_SUCCESS \u003d \"Archived Appointment: \\n%1$s\";","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"            \"This appointment already exists in the archives. Removing appointment.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    public ArchiveAppointmentCommand(Index targetIndex) {","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"    @Override public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        Appointment appointmentToArchive \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"        if (model.hasAppointmentInArchives(appointmentToArchive)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"            model.deleteAppointment(appointmentToArchive);","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"        model.archiveAppointment(appointmentToArchive);","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"        return new CommandResult(String.format(MESSAGE_ARCHIVE_APPOINTMENT_SUCCESS, appointmentToArchive));","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    @Override public boolean equals(Object other) {","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"                || (other instanceof ArchiveAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"                \u0026\u0026 targetIndex.equals(((ArchiveAppointmentCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"rish-16":1,"joshenx":55,"gycgabriel":1}},{"path":"src/main/java/seedu/docit/logic/commands/BasicCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * Represents a basic command agnostic of patient or appointment","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" * with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"public abstract class BasicCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":19,"joshenx":3}},{"path":"src/main/java/seedu/docit/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"public class ClearCommand extends BasicCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"        model.clearAllRecords();","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rish-16":1,"joshenx":3,"-":17}},{"path":"src/main/java/seedu/docit/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"joshenx":3,"-":17}},{"path":"src/main/java/seedu/docit/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    /** Tab is swapped to archive. */","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    private final boolean showArchived;","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showArchived) {","lastModifiedDate":"2021-11-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"        this.showArchived \u003d showArchived;","lastModifiedDate":"2021-11-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"        this(feedbackToUser, false, false, false);","lastModifiedDate":"2021-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"    public boolean isShowArchived() {","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"        return showArchived;","lastModifiedDate":"2021-11-01"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"joshenx":12,"-":68}},{"path":"src/main/java/seedu/docit/logic/commands/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":" * Deletes an appointment identified using it\u0027s displayed index from the appointment book.","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"public class DeleteAppointmentCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"    public static final String MESSAGE_USAGE \u003d \"apmt \" + COMMAND_WORD","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"        + \": Deletes the appointment identified by the index number used in the displayed appointment list.\\n\"","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: apmt \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: \\n%1$s\";","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    public DeleteAppointmentCommand(Index targetIndex) {","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"    @Override public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"        Appointment appointmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"        model.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete));","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"    @Override public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"            || (other instanceof DeleteAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 targetIndex.equals(((DeleteAppointmentCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"rish-16":2,"joshenx":7,"gycgabriel":41}},{"path":"src/main/java/seedu/docit/logic/commands/DeleteMedicalEntryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_INDEX;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"import java.util.List;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"public class DeleteMedicalEntryCommand extends PatientCommand {","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"    public static final String COMMAND_WORD \u003d \"md\";","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"    public static final String MESSAGE_USAGE \u003d \"pt \" + COMMAND_WORD + \": Deletes a medical entry to the patient. \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"        + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"        + PREFIX_INDEX + \"INDEX OF MEDICAL ENTRY\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"        + \"Example: pt \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"        + PREFIX_INDEX + \"1\";","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Updated: \\n\";","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"    private final Index patientIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"    private final Index medicalIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"     * Constructor for the DeleteMedicalEntryCommand.","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"     * @param patientIndex index of the patient to delete a medical entry from.","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"     * @param medicalIndex index of the medical entry to be deleted.","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"    public DeleteMedicalEntryCommand(Index patientIndex, Index medicalIndex) {","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"        requireNonNull(patientIndex);","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"        requireNonNull(medicalIndex);","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"        this.medicalIndex \u003d medicalIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"        Patient patientToEdit \u003d lastShownList.get(patientIndex.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"        if (patientToEdit.hasEmptyMedicalHistory()) {","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"didymental"},"content":"            throw new CommandException(\"No medical history record to delete from \" + patientToEdit.getName() + \".\");","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"didymental"},"content":"        Patient editedPatient \u003d patientToEdit.deleteMedicalHistory(medicalIndex);","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"        model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"didymental"},"content":"        model.updateAppointmentBook(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"didymental"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"didymental"},"content":"        return new CommandResult(MESSAGE_SUCCESS + editedPatient);","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"rish-16":1,"joshenx":11,"didymental":55}},{"path":"src/main/java/seedu/docit/logic/commands/DeletePatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":" * Deletes a patient identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"public class DeletePatientCommand extends PatientCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"    public static final String MESSAGE_USAGE \u003d \"pt \" + COMMAND_WORD","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"            + \"Example: pt \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: \\n%1$s\";","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"    public DeletePatientCommand(Index targetIndex) {","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"        model.deletePatient(patientToDelete);","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"        model.deleteAppointmentsWithPatient(patientToDelete);","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"                || (other instanceof DeletePatientCommand // instanceof handles nulls","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"rish-16"},"content":"                \u0026\u0026 targetIndex.equals(((DeletePatientCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rish-16":7,"joshenx":11,"huyuxin0429":2,"-":32,"gycgabriel":1,"didymental":1}},{"path":"src/main/java/seedu/docit/logic/commands/EditAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_INDEX;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"import java.util.List;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":" * Edits the details of an existing appointment in the appointment book.","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"public class EditAppointmentCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"    public static final String MESSAGE_USAGE \u003d \"apmt \" + COMMAND_WORD","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"            + \": Edits the details of the appointment identified \"","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"            + \"by the index number used in the displayed appointment list. \"","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"            + \"Parameters: APMT_INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"            + \"[\" + PREFIX_INDEX + \"PATIENT_INDEX] \"","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"            + \"[\" + PREFIX_DATETIME + \"DATETIME] \\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"            + \"Example: apmt \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"            + PREFIX_INDEX + \"2 \"","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"            + PREFIX_DATETIME + \"2012-12-31 1600\";","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment: \\n%1$s\";","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"        \"This appointment already exists in the appointment book.\";","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"    private final Index index;","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"    private final EditAppointmentDescriptor editAppointmentDescriptor;","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"     * @param index of the appointment in the filtered appointment list to edit","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"     * @param editAppointmentDescriptor details to edit the appointment with","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"    public EditAppointmentCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(editAppointmentDescriptor);","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"        Appointment appointmentToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"gycgabriel"},"content":"        Appointment editedAppointment \u003d createEditedAppointment(appointmentToEdit, editAppointmentDescriptor,","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"gycgabriel"},"content":"            model.getAddressBook());","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"        if (!appointmentToEdit.isSameAppointment(editedAppointment) \u0026\u0026 model.hasAppointment(editedAppointment)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"gycgabriel"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"        model.setAppointment(appointmentToEdit, editedAppointment);","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"gycgabriel"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment));","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"     * Creates and returns a {@code Appointment} with the details of {@code appointmentToEdit}","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"gycgabriel"},"content":"     * edited with {@code editAppointmentDescriptor} and {@code addressBook}.","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"gycgabriel"},"content":"    private static Appointment createEditedAppointment(Appointment appointmentToEdit,","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"        EditAppointmentDescriptor editAppointmentDescriptor, ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"gycgabriel"},"content":"        throws CommandException {","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"gycgabriel"},"content":"        assert appointmentToEdit !\u003d null;","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"gycgabriel"},"content":"        Patient updatedPatient \u003d null;","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"gycgabriel"},"content":"        if (editAppointmentDescriptor.getPatientIndex().isPresent()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"gycgabriel"},"content":"            Index updatedIndex \u003d editAppointmentDescriptor.getPatientIndex().get();","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"gycgabriel"},"content":"            updatedPatient \u003d addressBook.getPatientOfIndex(updatedIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"gycgabriel"},"content":"            updatedPatient \u003d appointmentToEdit.getPatient();","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"        if (updatedPatient \u003d\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"gycgabriel"},"content":"            throw new CommandException(\"Patient that has the appointment does not exist.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"        LocalDateTime updatedDatetime \u003d editAppointmentDescriptor.getDatetime().orElse(appointmentToEdit.getDatetime());","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"gycgabriel"},"content":"        return new Appointment(updatedPatient, updatedDatetime);","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"gycgabriel"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"gycgabriel"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"gycgabriel"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"gycgabriel"},"content":"            return true;","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"gycgabriel"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"gycgabriel"},"content":"        if (!(other instanceof EditAppointmentCommand)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"            return false;","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"gycgabriel"},"content":"        // state check","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"gycgabriel"},"content":"        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"gycgabriel"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"gycgabriel"},"content":"                \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor);","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"gycgabriel"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will replace the","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"gycgabriel"},"content":"     * corresponding field value of the appointment.","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"gycgabriel"},"content":"    public static class EditAppointmentDescriptor {","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"gycgabriel"},"content":"        private Index patientIndex;","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"gycgabriel"},"content":"        private LocalDateTime datetime;","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"gycgabriel"},"content":"        public EditAppointmentDescriptor() {}","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"gycgabriel"},"content":"        /**","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"gycgabriel"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"gycgabriel"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"gycgabriel"},"content":"         */","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"gycgabriel"},"content":"        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"gycgabriel"},"content":"            setPatientIndex(toCopy.patientIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"gycgabriel"},"content":"            setDatetime(toCopy.datetime);","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"gycgabriel"},"content":"        /**","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"gycgabriel"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"gycgabriel"},"content":"         */","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"gycgabriel"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"gycgabriel"},"content":"            return CollectionUtil.isAnyNonNull(patientIndex, datetime);","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"gycgabriel"},"content":"        public void setPatientIndex(Index patientIndex) {","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"gycgabriel"},"content":"            this.patientIndex \u003d patientIndex;","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"gycgabriel"},"content":"        public Optional\u003cIndex\u003e getPatientIndex() {","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"gycgabriel"},"content":"            return Optional.ofNullable(patientIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"gycgabriel"},"content":"        public void setDatetime(LocalDateTime datetime) {","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"gycgabriel"},"content":"            this.datetime \u003d datetime;","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"gycgabriel"},"content":"        public Optional\u003cLocalDateTime\u003e getDatetime() {","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"gycgabriel"},"content":"            return Optional.ofNullable(datetime);","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"gycgabriel"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"gycgabriel"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"gycgabriel"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"gycgabriel"},"content":"                return true;","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"gycgabriel"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"gycgabriel"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"gycgabriel"},"content":"            if (!(other instanceof EditAppointmentDescriptor)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"gycgabriel"},"content":"                return false;","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"gycgabriel"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"gycgabriel"},"content":"            // state check","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"gycgabriel"},"content":"            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"gycgabriel"},"content":"            return getPatientIndex().equals(e.getPatientIndex())","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"gycgabriel"},"content":"                    \u0026\u0026 getDatetime().equals(e.getDatetime());","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":2,"joshenx":14,"gycgabriel":171}},{"path":"src/main/java/seedu/docit/logic/commands/EditPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.MedicalHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":" * Edits the details of an existing patient in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"public class EditPatientCommand extends PatientCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"    public static final String MESSAGE_USAGE \u003d \"pt \" + COMMAND_WORD","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"            + \": Edits the details of the patient identified \"","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"            + \"by the index number used in the displayed patient list. \"","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"            + \"[\" + CliSyntax.PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"            + \"[\" + CliSyntax.PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"            + \"[\" + CliSyntax.PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"            + \"[\" + CliSyntax.PREFIX_MEDICAL + \"MEDICALHISTORY] \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"            + \"Example: pt \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_EMAIL + \"johndoe@example.com \"","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_MEDICAL + \"lovesick\";","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: \\n%1$s\";","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the address book.\";","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"    private final EditPatientDescriptor editPatientDescriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"     * @param index of the patient in the filtered patient list to edit","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"     * @param editPatientDescriptor details to edit the patient with","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"    public EditPatientCommand(Index index, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"        requireNonNull(editPatientDescriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"didymental"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"huyuxin0429"},"content":"        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"huyuxin0429"},"content":"        model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"        model.updateAppointmentBook(patientToEdit, editedPatient);","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":87,"author":{"gitId":"joshenx"},"content":"     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"joshenx"},"content":"     * edited with {@code editPatientDescriptor}.","lastModifiedDate":"2021-10-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"didymental"},"content":"        assert patientToEdit !\u003d null;","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"        Email updatedEmail \u003d editPatientDescriptor.getEmail().orElse(patientToEdit.getEmail());","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"        Address updatedAddress \u003d editPatientDescriptor.getAddress().orElse(patientToEdit.getAddress());","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"joshenx"},"content":"        MedicalHistory medicalHistory \u003d editPatientDescriptor.getMedicalHistory()","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"didymental"},"content":"                                            .orElse(patientToEdit.getMedicalHistory());","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"rish-16"},"content":"        return new Patient(updatedName, updatedPhone, updatedEmail, updatedAddress, medicalHistory);","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"rish-16"},"content":"        if (!(other instanceof EditPatientCommand)) {","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"rish-16"},"content":"        EditPatientCommand e \u003d (EditPatientCommand) other;","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":118,"author":{"gitId":"joshenx"},"content":"                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":122,"author":{"gitId":"joshenx"},"content":"     * Stores the details to edit the patient with. Each non-empty field value will replace the","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"joshenx"},"content":"     * corresponding field value of the patient.","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":"    public static class EditPatientDescriptor {","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":130,"author":{"gitId":"didymental"},"content":"        private MedicalHistory medicalHistory;","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"        public EditPatientDescriptor() {}","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":138,"author":{"gitId":"joshenx"},"content":"        public EditPatientDescriptor(EditPatientDescriptor toCopy) {","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":143,"author":{"gitId":"didymental"},"content":"            setMedicalHistory(toCopy.medicalHistory);","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"rish-16"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, medicalHistory);","lastModifiedDate":"2021-11-03"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"didymental"},"content":"        public void setMedicalHistory(MedicalHistory medicalHistory) {","lastModifiedDate":"2021-10-10"},{"lineNumber":186,"author":{"gitId":"didymental"},"content":"            this.medicalHistory \u003d medicalHistory;","lastModifiedDate":"2021-10-10"},{"lineNumber":187,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":188,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":189,"author":{"gitId":"didymental"},"content":"        public Optional\u003cMedicalHistory\u003e getMedicalHistory() {","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"didymental"},"content":"            return Optional.ofNullable(medicalHistory);","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":201,"author":{"gitId":"joshenx"},"content":"            if (!(other instanceof EditPatientDescriptor)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":206,"author":{"gitId":"joshenx"},"content":"            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;","lastModifiedDate":"2021-10-27"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":212,"author":{"gitId":"rish-16"},"content":"                    \u0026\u0026 getMedicalHistory().equals(e.getMedicalHistory());","lastModifiedDate":"2021-11-03"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"rish-16":10,"joshenx":54,"huyuxin0429":3,"-":134,"gycgabriel":1,"didymental":13}},{"path":"src/main/java/seedu/docit/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"public class ExitCommand extends BasicCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"    public static final String MESSAGE_USAGE \u003d \"doc \" + COMMAND_WORD + \": Exits the program.\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"            + \"Example: doc \" + COMMAND_WORD;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Doc\u0027it as requested ...\";","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"rish-16":3,"joshenx":4,"-":14}},{"path":"src/main/java/seedu/docit/logic/commands/FindPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.PatientContainsKeywordsPredicate;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":" * Finds and lists all patients in address book whose name contains any of the argument keywords.","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"public class FindPatientCommand extends PatientCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"    public static final String MESSAGE_USAGE \u003d \"pt \" + COMMAND_WORD + \": Finds all patients whose names or \"","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"            + \"medical history contain any of \"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"            + \"Example: pt \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"    private final PatientContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"    public FindPatientCommand(PatientContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"        model.updateFilteredPatientList(predicate);","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"                String.format(Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW, model.getFilteredPatientList().size()));","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"                || (other instanceof FindPatientCommand // instanceof handles nulls","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"                \u0026\u0026 predicate.equals(((FindPatientCommand) other).predicate)); // state check","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"rish-16":5,"joshenx":6,"huyuxin0429":1,"-":28,"didymental":3}},{"path":"src/main/java/seedu/docit/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"public class HelpCommand extends BasicCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"    public static final String MESSAGE_USAGE \u003d \"doc \" + COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"            + \"Example: doc \" + COMMAND_WORD;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rish-16":3,"joshenx":3,"-":15}},{"path":"src/main/java/seedu/docit/logic/commands/ListAppointmentsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":" * Lists all appointments in the address book to the user.","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"public class ListAppointmentsCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments\";","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"    @Override public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false, false);","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"rish-16":1,"joshenx":4,"gycgabriel":18}},{"path":"src/main/java/seedu/docit/logic/commands/ListArchivedAppointmentsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-11-01"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-11-01"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":" * Lists all archived appointments in the address book to the user.","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-11-01"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"public class ListArchivedAppointmentsCommand extends AppointmentCommand {","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"    public static final String COMMAND_WORD \u003d \"alist\";","lastModifiedDate":"2021-11-01"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all archived appointments\";","lastModifiedDate":"2021-11-01"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    @Override public CommandResult execute(Model model) {","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false, true);","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-11-01"}],"authorContributionMap":{"joshenx":23}},{"path":"src/main/java/seedu/docit/logic/commands/ListPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":" * Lists all patients in the address book to the user.","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"public class ListPatientCommand extends PatientCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients\";","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rish-16":2,"joshenx":5,"-":16}},{"path":"src/main/java/seedu/docit/logic/commands/PatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * Represents a command specific to Patient records","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" * with hidden internal logic and the ability to be executed.","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"public abstract class PatientCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":19,"joshenx":3}},{"path":"src/main/java/seedu/docit/logic/commands/SortAppointmentsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":" * Archives an appointment identified using it\u0027s displayed index from the appointment book.","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"public class SortAppointmentsCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_USAGE \u003d \"apmt \" + COMMAND_WORD","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"            + \": Sorts appointments based on their urgency and name.\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"            + \"Parameters: [parameter to sort by..]\\n\" + \"Example: apmt \" + COMMAND_WORD + \"\"; // TODO","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_SORT_APPOINTMENT_SUCCESS \u003d \"Sorted Appointments based on \"","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"            + \"default settings.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"    public SortAppointmentsCommand() {","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"    @Override public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"        model.sortAppointments();","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"        return new CommandResult(String.format(MESSAGE_SORT_APPOINTMENT_SUCCESS));","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    @Override public boolean equals(Object other) {","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"                || (other instanceof SortAppointmentsCommand);","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"joshenx":41}},{"path":"src/main/java/seedu/docit/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands.exceptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"joshenx":1,"-":16}},{"path":"src/main/java/seedu/docit/logic/commands/prescription/AddPrescriptionCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands.prescription;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"import java.util.List;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.CommandResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.prescription.Prescription;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":" * Adds a prescription to an appointment.","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"public class AddPrescriptionCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"    public static final String COMMAND_WORD \u003d \"pa\";","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"            \"apmt \"","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"                    + COMMAND_WORD + \": Adds a prescription to an appointment. \\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"                    + \"Parameters: \"","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"                    + \"APPOINTMENT_INDEX \"","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"                    + CliSyntax.PREFIX_NAME + \"MEDICINE \"","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"                    + CliSyntax.PREFIX_VOLUME + \"VOLUME \"","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"                    + CliSyntax.PREFIX_DURATION + \"DURATION \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"                    + \"Example: apmt \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"                    + \"1 \"","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"                    + CliSyntax.PREFIX_NAME + \"Penicillin \"","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"                    + CliSyntax.PREFIX_VOLUME + \"400 ml \"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"                    + CliSyntax.PREFIX_DURATION + \"2 times a week \";","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New prescription added: \\nMedicine: %1$s\\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"            + \"Volume: %2$s\\nDuration: %3$s\";","lastModifiedDate":"2021-11-01"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"    public static final String MESSAGE_DUPLICATE_MEDICINE \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"            \"This medicine already exists in the prescription for this appointment\";","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"    private final Index targetAppointmentIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"    private String medicine;","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"    private String volume;","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"    private String duration;","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"     * Creates an AddPrescriptionCommand to add the specified {@code Prescription}","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"     * @param targetAppointmentIndex appointment index to make prescription","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"    public AddPrescriptionCommand(Index targetAppointmentIndex, String medicine, String volume, String duration) {","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(targetAppointmentIndex);","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(medicine);","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(volume);","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(duration);","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"huyuxin0429"},"content":"        this.targetAppointmentIndex \u003d targetAppointmentIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"huyuxin0429"},"content":"        this.volume \u003d volume;","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"huyuxin0429"},"content":"        this.medicine \u003d medicine;","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"huyuxin0429"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"huyuxin0429"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"huyuxin0429"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"huyuxin0429"},"content":"        if (targetAppointmentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"huyuxin0429"},"content":"        Appointment appointmentToMakePrescription \u003d lastShownList.get(targetAppointmentIndex.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"huyuxin0429"},"content":"        Prescription prescriptionToAdd \u003d new Prescription(medicine, volume, duration);","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"        if (appointmentToMakePrescription.containsPrescription(prescriptionToAdd)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"huyuxin0429"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_MEDICINE);","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"didymental"},"content":"        model.addPrescription(appointmentToMakePrescription, prescriptionToAdd);","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"        model.updateFilteredAppointmentList(Model.PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, medicine, volume, duration));","lastModifiedDate":"2021-11-01"},{"lineNumber":82,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":20,"huyuxin0429":62,"didymental":1}},{"path":"src/main/java/seedu/docit/logic/commands/prescription/DeletePrescriptionCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands.prescription;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"import java.util.List;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.CommandResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.prescription.exceptions.MedicineNotFoundException;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"public class DeletePrescriptionCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"    public static final String COMMAND_WORD \u003d \"pd\";","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"    public static final String MESSAGE_USAGE \u003d \"apmt \"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"            + COMMAND_WORD + \": Deletes a prescription from an appointment based \"","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"            + \"on appointment index and medicine name. \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"            + \"APPOINTMENT_INDEX \"","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_NAME + \"MEDICINE \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"            + \"Example: apmt \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"            + \"1 \"","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_NAME + \"Penicillin \";","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_DELETE_PRESCRIPTION_SUCCESS \u003d \"Deleted prescription: \\nMedicine: %1$s\\n\\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"            + \"from %2$s\u0027s appointment.\";","lastModifiedDate":"2021-11-01"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"    private final Index targetAppointmentIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"    private final String targetMedicineName;","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"     * Deletes a prescription from an appointment based on appointment index and medicine name","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"     * @param targetAppointmentIndex Index of targeted appointment","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"     * @param targetMedicineName Name of medicine associated with prescription to be deleted","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"    public DeletePrescriptionCommand(Index targetAppointmentIndex, String targetMedicineName) {","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"        this.targetAppointmentIndex \u003d targetAppointmentIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"        this.targetMedicineName \u003d targetMedicineName.trim().toLowerCase();","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"    @Override public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"        if (targetAppointmentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"huyuxin0429"},"content":"        Appointment appointmentToTarget \u003d lastShownList.get(targetAppointmentIndex.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"huyuxin0429"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"didymental"},"content":"            model.deletePrescription(appointmentToTarget, targetMedicineName);","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_PRESCRIPTION_SUCCESS,","lastModifiedDate":"2021-11-01"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"                    targetMedicineName, appointmentToTarget.getPatient().getName()));","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"huyuxin0429"},"content":"        } catch (MedicineNotFoundException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"huyuxin0429"},"content":"            throw new CommandException(e.getMessage());","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"huyuxin0429"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"huyuxin0429"},"content":"            return true;","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"huyuxin0429"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"huyuxin0429"},"content":"            return false;","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"huyuxin0429"},"content":"        DeletePrescriptionCommand that \u003d (DeletePrescriptionCommand) o;","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"huyuxin0429"},"content":"        return Objects.equals(targetAppointmentIndex, that.targetAppointmentIndex)","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"huyuxin0429"},"content":"                \u0026\u0026 Objects.equals(targetMedicineName, that.targetMedicineName);","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"huyuxin0429"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"huyuxin0429"},"content":"        return Objects.hash(targetAppointmentIndex, targetMedicineName);","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":17,"huyuxin0429":65,"didymental":2}},{"path":"src/main/java/seedu/docit/logic/commands/prescription/ListPrescriptionsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands.prescription;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"import java.util.List;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.CommandResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"public class ListPrescriptionsCommand extends AppointmentCommand {","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"    public static final String COMMAND_WORD \u003d \"pl\";","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"    public static final String MESSAGE_USAGE \u003d \"apmt \"","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"            + COMMAND_WORD + \": List all prescriptions of an appointment \"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"            + \"Parameters: \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_INDEX + \"ID OF APPOINTMENT \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"            + \"Example: apmt \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"            + CliSyntax.PREFIX_INDEX + \"1 \";","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all prescriptions of appointment\";","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"    private final Index targetAppointmentIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"    public ListPrescriptionsCommand(Index targetAppointmentIndex) {","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"        this.targetAppointmentIndex \u003d targetAppointmentIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"    @Override public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"        if (targetAppointmentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"        Appointment appointmentToTarget \u003d lastShownList.get(targetAppointmentIndex.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"        return new CommandResult(MESSAGE_SUCCESS + appointmentToTarget.getPrescriptions());","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":12,"huyuxin0429":34}},{"path":"src/main/java/seedu/docit/logic/parser/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"public class AddAppointmentCommandParser implements AppointmentParser\u003cAddAppointmentCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand and returns an","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"     * AddAppointmentCommand object for execution.","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"    public AddAppointmentCommand parseAppointmentCommand(String args) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_INDEX,","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"                CliSyntax.PREFIX_DATETIME);","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"        if (!ParserUtil.hasAllPrefixes(argMultimap, CliSyntax.PREFIX_INDEX, CliSyntax.PREFIX_DATETIME)","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"        Index patientIndex;","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(CliSyntax.PREFIX_INDEX).get());","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        String datetime \u003d argMultimap.getValue(CliSyntax.PREFIX_DATETIME).get();","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"        LocalDateTime localDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"            localDateTime \u003d ParserUtil.parseDateTime(datetime, ParserUtil.INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"                AddAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"        return new AddAppointmentCommand(patientIndex, localDateTime);","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"rish-16":2,"joshenx":11,"gycgabriel":41}},{"path":"src/main/java/seedu/docit/logic/parser/AddMedicalEntryCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddMedicalEntryCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.MedicalHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":" * Parses input arguments and creates a new AddMedicalEntry object","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"public class AddMedicalEntryCommandParser implements PatientParser\u003cAddMedicalEntryCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMedicalEntryCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"     * and returns an AddPatientCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"    public AddMedicalEntryCommand parsePatientCommand(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"        Index index;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_MEDICAL);","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedicalEntryCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"        if (!argMultimap.getValue(PREFIX_MEDICAL).isPresent()","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"            || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"                AddMedicalEntryCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"        MedicalHistory medicalHistory \u003d ParserUtil.parseMedicalHistory(argMultimap.getAllValues(PREFIX_MEDICAL));","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"        return new AddMedicalEntryCommand(index, medicalHistory);","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":7,"didymental":38}},{"path":"src/main/java/seedu/docit/logic/parser/AddPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.MedicalHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":" * Parses input arguments and creates a new AddPatientCommand object","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"public class AddPatientCommandParser implements PatientParser\u003cAddPatientCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPatientCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"     * and returns an AddPatientCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    public AddPatientCommand parsePatientCommand(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_PHONE,","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"                        CliSyntax.PREFIX_EMAIL, CliSyntax.PREFIX_ADDRESS, CliSyntax.PREFIX_MEDICAL);","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"        if (!ParserUtil.hasAllPrefixes(argMultimap, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_ADDRESS,","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"                CliSyntax.PREFIX_PHONE, CliSyntax.PREFIX_EMAIL) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE).get());","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(CliSyntax.PREFIX_EMAIL).get());","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(CliSyntax.PREFIX_ADDRESS).get());","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"        MedicalHistory medicalHistory \u003d ParserUtil.parseMedicalHistory(argMultimap","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"                .getAllValues(CliSyntax.PREFIX_MEDICAL));","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"        Patient patient \u003d new Patient(name, phone, email, address, medicalHistory);","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"        return new AddPatientCommand(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"rish-16":2,"joshenx":43}},{"path":"src/main/java/seedu/docit/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_REGREX_FORMAT;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.Command;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(doc) (?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"    private static final Pattern PTNT_COMMAND_FORMAT \u003d Pattern.compile(\"(pt) (?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"    private static final Pattern APPT_COMMAND_FORMAT \u003d Pattern.compile(\"(apmt) (?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"    private static final Pattern VALID_INPUT_FORMAT \u003d Pattern.compile(\"^[a-z-A-Z0-9/,.#@\\\\s]*$\");","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"    private final PatientBookParser patientParser \u003d new PatientBookParser();","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"    private final AppointmentBookParser apmtParser \u003d new AppointmentBookParser();","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"    private final BasicAddressBookParser basicParser \u003d new BasicAddressBookParser();","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"        final Matcher patientMatcher \u003d PTNT_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"        final Matcher basicMatcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        final Matcher apmtMatcher \u003d APPT_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"        final Matcher inputMatcher \u003d VALID_INPUT_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"        // empty, invalid inputs","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"        if (userInput.equals(\"\")) {","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"        if (!inputMatcher.matches()) {","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_REGREX_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"        // non-empty, potentially valid inputs","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"rish-16"},"content":"        if (basicMatcher.matches()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"rish-16"},"content":"            // Basic Command Matching","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"rish-16"},"content":"            final String commandWord \u003d basicMatcher.group(\"commandWord\");","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"rish-16"},"content":"            final String arguments \u003d basicMatcher.group(\"arguments\"); // ignore any arguments","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"rish-16"},"content":"            return basicParser.parseBasicCommand(commandWord);","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"        } else if (apmtMatcher.matches()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"rish-16"},"content":"            // Appointment Command Matching","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"            final String commandWord \u003d apmtMatcher.group(\"commandWord\");","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"            final String arguments \u003d apmtMatcher.group(\"arguments\");","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"            return apmtParser.parseAppointmentCommand(commandWord, arguments);","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"rish-16"},"content":"        } else if (patientMatcher.matches()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"rish-16"},"content":"            // Patient Command Matching","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"rish-16"},"content":"            final String commandWord \u003d patientMatcher.group(\"commandWord\");","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"rish-16"},"content":"            final String arguments \u003d patientMatcher.group(\"arguments\");","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"rish-16"},"content":"            return patientParser.parsePatientCommand(commandWord, arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"rish-16"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"rish-16"},"content":"            throw new ParseException(String.format(MESSAGE_UNKNOWN_COMMAND, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rish-16":24,"joshenx":12,"huyuxin0429":8,"-":27,"gycgabriel":3}},{"path":"src/main/java/seedu/docit/logic/parser/AppointmentBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ArchiveAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ListAppointmentsCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ListArchivedAppointmentsCommand;","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.SortAppointmentsCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.prescription.AddPrescriptionCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.prescription.DeletePrescriptionCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.prescription.AddPrescriptionCommandParser;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.prescription.DeletePrescriptionCommandParser;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":" * Parses user input.","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"public class AppointmentBookParser {","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"     * Parses user input of appointment command for execution.","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"     * @param commandWord command word","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"     * @param arguments arguments of command","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"    public AppointmentCommand parseAppointmentCommand(String commandWord, String arguments) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"        case AddAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"            return new AddAppointmentCommandParser().parseAppointmentCommand(arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"        case EditAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"            return new EditAppointmentCommandParser().parseAppointmentCommand(arguments);","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"        case DeleteAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"            return new DeleteAppointmentCommandParser().parseAppointmentCommand(arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"        case ArchiveAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"            return new ArchiveAppointmentCommandParser().parseAppointmentCommand(arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"rish-16"},"content":"        case ListAppointmentsCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"            return new ListAppointmentsCommand();","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        case ListArchivedAppointmentsCommand.COMMAND_WORD:","lastModifiedDate":"2021-11-01"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"            return new ListArchivedAppointmentsCommand();","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"        case SortAppointmentsCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"            return new SortAppointmentsCommand();","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"        case AddPrescriptionCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"            return new AddPrescriptionCommandParser().parse(arguments);","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"        case DeletePrescriptionCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"            return new DeletePrescriptionCommandParser().parse(arguments);","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"rish-16"},"content":"        default:","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":28,"joshenx":18,"huyuxin0429":4,"gycgabriel":4}},{"path":"src/main/java/seedu/docit/logic/parser/AppointmentParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * Represents a AppointmentParser that is able to parse","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" * appointment-related user input into a {@code AppointmentCommand} of type {@code T}.","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"public interface AppointmentParser\u003cT extends AppointmentCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"    T parseAppointmentCommand(String userInput) throws ParseException;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":14,"joshenx":3}},{"path":"src/main/java/seedu/docit/logic/parser/ArchiveAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ArchiveAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":" * Parses input arguments and creates a new ArchiveAppointmentCommand object","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"public class ArchiveAppointmentCommandParser implements AppointmentParser\u003cArchiveAppointmentCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"     * Parses the given {@code String} of arguments in the context of the ArchiveAppointmentCommand and returns a","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"     * DeleteAppointmentCommand object for execution.","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"    public ArchiveAppointmentCommand parseAppointmentCommand(String args) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"            return new ArchiveAppointmentCommand(index);","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"rish-16":2,"joshenx":28}},{"path":"src/main/java/seedu/docit/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"joshenx":1,"-":59}},{"path":"src/main/java/seedu/docit/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"joshenx":1,"-":147}},{"path":"src/main/java/seedu/docit/logic/parser/BasicAddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.BasicCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":" * Parses user input.","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"public class BasicAddressBookParser {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"     * Parses user input of basic command for execution.","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"     * @param commandWord command word","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"    public BasicCommand parseBasicCommand(String commandWord) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"            return new ClearCommand();","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"        default:","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":25,"joshenx":6,"gycgabriel":2}},{"path":"src/main/java/seedu/docit/logic/parser/BasicParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.BasicCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * Represents a BasicParser that is able to parse BASIC user input into a {@code BasicCommand} of type {@code T}.","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":"public interface BasicParser\u003cT extends BasicCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":13,"joshenx":3}},{"path":"src/main/java/seedu/docit/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"    public static final Prefix PREFIX_MEDICAL \u003d new Prefix(\"m/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"    public static final Prefix PREFIX_VOLUME \u003d new Prefix(\"v/\");","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"rish-16":1,"joshenx":1,"huyuxin0429":2,"-":11,"gycgabriel":1,"didymental":1}},{"path":"src/main/java/seedu/docit/logic/parser/DeleteAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":" * Parses input arguments and creates a new DeleteAppointmentCommand object","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"public class DeleteAppointmentCommandParser implements AppointmentParser\u003cDeleteAppointmentCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand and returns a","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"     * DeleteAppointmentCommand object for execution.","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"    public DeleteAppointmentCommand parseAppointmentCommand(String args) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"            return new DeleteAppointmentCommand(index);","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"rish-16":2,"joshenx":5,"gycgabriel":23}},{"path":"src/main/java/seedu/docit/logic/parser/DeleteMedicalEntryCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_INDEX;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.DeleteMedicalEntryCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":" * Parses input arguments and creates a new DeleteMedicalEntry object","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"public class DeleteMedicalEntryCommandParser implements PatientParser\u003cDeleteMedicalEntryCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMedicalEntryCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"     * and returns an AddPatientCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"    public DeleteMedicalEntryCommand parsePatientCommand(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"        Index patientIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"        Index medicalIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"            medicalIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMedicalEntryCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"        if (!argMultimap.getValue(PREFIX_INDEX).isPresent()","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"            || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"                DeleteMedicalEntryCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"        return new DeleteMedicalEntryCommand(patientIndex, medicalIndex);","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":6,"didymental":39}},{"path":"src/main/java/seedu/docit/logic/parser/DeletePatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.DeletePatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"public class DeletePatientCommandParser implements PatientParser\u003cDeletePatientCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    public DeletePatientCommand parsePatientCommand(String args) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"            return new DeletePatientCommand(index);","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"rish-16":4,"joshenx":5,"-":20}},{"path":"src/main/java/seedu/docit/logic/parser/EditAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_INDEX;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":" * Parses input arguments and creates a new EditAppointmentCommand object","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"public class EditAppointmentCommandParser implements AppointmentParser\u003cEditAppointmentCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"     * Parses the given {@code String} of arguments in the context of the EditAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"     * and returns an EditAppointmentCommand object for execution.","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"    public EditAppointmentCommand parseAppointmentCommand(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_DATETIME);","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"        Index index;","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"        if (argMultimap.getValue(PREFIX_INDEX).isPresent()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"            Index patientIndex;","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"            try {","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"                patientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"                throw new ParseException(","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"            editAppointmentDescriptor.setPatientIndex(patientIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_DATETIME).isPresent()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"            LocalDateTime localDateTime;","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"            try {","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"                localDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(CliSyntax.PREFIX_DATETIME).get(),","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"                    ParserUtil.INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-11-02"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"                    EditAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"            }","lastModifiedDate":"2021-11-02"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"            editAppointmentDescriptor.setDatetime(localDateTime);","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"        return new EditAppointmentCommand(index, editAppointmentDescriptor);","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"joshenx":10,"gycgabriel":59}},{"path":"src/main/java/seedu/docit/logic/parser/EditPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":" * Parses input arguments and creates a new EditPatientCommand object","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"public class EditPatientCommandParser implements PatientParser\u003cEditPatientCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPatientCommand","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"     * and returns an EditPatientCommand object for execution.","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"    public EditPatientCommand parsePatientCommand(String args) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME,","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_MEDICAL);","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"            editPatientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"didymental"},"content":"        if (argMultimap.getValue(PREFIX_MEDICAL).isPresent()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"            editPatientDescriptor","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"                    .setMedicalHistory(ParserUtil.parseMedicalHistory(argMultimap.getAllValues(PREFIX_MEDICAL)));","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"        if (!editPatientDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"rish-16"},"content":"            throw new ParseException(EditPatientCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"        return new EditPatientCommand(index, editPatientDescriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"rish-16":10,"joshenx":19,"-":33,"didymental":4}},{"path":"src/main/java/seedu/docit/logic/parser/FindPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.FindPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.PatientContainsKeywordsPredicate;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":" * Parses input arguments and creates a new FindPatientCommand object","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"public class FindPatientCommandParser implements PatientParser\u003cFindPatientCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPatientCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"     * and returns a FindPatientCommand object for execution.","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"    public FindPatientCommand parsePatientCommand(String args) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"        return new FindPatientCommand(new PatientContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"rish-16":3,"joshenx":5,"-":21,"didymental":4}},{"path":"src/main/java/seedu/docit/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.Command;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"joshenx":3,"-":13}},{"path":"src/main/java/seedu/docit/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.StringUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.MedicalHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_INVALID_DATETIME \u003d \"%s is incorrect datetime format.\";","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_INVALID_NUMERICAL_ONLY \u003d \"%s cannot be numerical only.\";","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"    public static final DateTimeFormatter DEFAULT_DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM uuuu HHmm\");","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"    public static final DateTimeFormatter INPUT_DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"uuuu-M-d HHmm\");","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    private static final int min_year \u003d 2000;","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"    private static final int max_year \u003d 2999;","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"    private static final int max_hour \u003d 2359;","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ParserUtil.class);","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"joshenx"},"content":"     * Parses a {@code String docit} into an {@code Address}.","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"     * @throws ParseException if the given {@code docit} is invalid.","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"gycgabriel"},"content":"        if (isNumericalOnly(trimmedAddress)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"gycgabriel"},"content":"     * Parses {@code String datetime} of given format into a {@code LocalDateTime}.","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"gycgabriel"},"content":"    public static LocalDateTime parseDateTime(String datetime, DateTimeFormatter formatter) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(datetime);","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"gycgabriel"},"content":"        if (formatter \u003d\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"gycgabriel"},"content":"            formatter \u003d DEFAULT_DATE_TIME_FORMATTER;","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"gycgabriel"},"content":"        Pattern p \u003d Pattern.compile(\"(?\u003cyear\u003e[0-9]{4})-[0-9]{1,2}-[0-9]{1,2} (?\u003chour\u003e[0-9]{4})\");","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"gycgabriel"},"content":"        Matcher m \u003d p.matcher(datetime);","lastModifiedDate":"2021-11-02"},{"lineNumber":129,"author":{"gitId":"gycgabriel"},"content":"        if (!m.matches()) {","lastModifiedDate":"2021-11-02"},{"lineNumber":130,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_DATETIME, datetime));","lastModifiedDate":"2021-11-02"},{"lineNumber":131,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":132,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":133,"author":{"gitId":"gycgabriel"},"content":"        int year;","lastModifiedDate":"2021-11-02"},{"lineNumber":134,"author":{"gitId":"gycgabriel"},"content":"        int hour;","lastModifiedDate":"2021-11-02"},{"lineNumber":135,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":136,"author":{"gitId":"gycgabriel"},"content":"            year \u003d Integer.parseInt(m.group(\"year\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":137,"author":{"gitId":"gycgabriel"},"content":"            hour \u003d Integer.parseInt(m.group(\"hour\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":138,"author":{"gitId":"gycgabriel"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":139,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_DATETIME, datetime));","lastModifiedDate":"2021-11-02"},{"lineNumber":140,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":141,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":142,"author":{"gitId":"gycgabriel"},"content":"        // to limit inputs further","lastModifiedDate":"2021-11-02"},{"lineNumber":143,"author":{"gitId":"gycgabriel"},"content":"        if (year \u003c min_year || year \u003e max_year || hour \u003e max_hour) {","lastModifiedDate":"2021-11-05"},{"lineNumber":144,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_DATETIME, datetime));","lastModifiedDate":"2021-11-02"},{"lineNumber":145,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":146,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":147,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"gycgabriel"},"content":"            return LocalDateTime.parse(datetime, formatter.withResolverStyle(ResolverStyle.STRICT));","lastModifiedDate":"2021-11-05"},{"lineNumber":149,"author":{"gitId":"gycgabriel"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"gycgabriel"},"content":"            logger.warning(e.getMessage());","lastModifiedDate":"2021-11-05"},{"lineNumber":151,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_DATETIME, datetime));","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"gycgabriel"},"content":"     * Parses {@code String medicalEntry} into a {@code MedicalHistory}.","lastModifiedDate":"2021-11-02"},{"lineNumber":157,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"gycgabriel"},"content":"    public static MedicalHistory parseMedicalEntry(String medicalEntry) throws ParseException {","lastModifiedDate":"2021-11-02"},{"lineNumber":159,"author":{"gitId":"didymental"},"content":"        requireNonNull(medicalEntry);","lastModifiedDate":"2021-10-27"},{"lineNumber":160,"author":{"gitId":"didymental"},"content":"        String trimmedMedicalEntry \u003d medicalEntry.trim();","lastModifiedDate":"2021-10-27"},{"lineNumber":161,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"gycgabriel"},"content":"        if (isNumericalOnly(trimmedMedicalEntry)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":163,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(MedicalHistory.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-02"},{"lineNumber":164,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":165,"author":{"gitId":"gycgabriel"},"content":"        if (!MedicalHistory.isValidMedicalEntry(trimmedMedicalEntry)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":166,"author":{"gitId":"didymental"},"content":"            throw new ParseException(MedicalHistory.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-03"},{"lineNumber":167,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"didymental"},"content":"        return new MedicalHistory(trimmedMedicalEntry);","lastModifiedDate":"2021-10-27"},{"lineNumber":169,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":170,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"didymental"},"content":"     * Overloads method to ensure that medical history can be an optional.","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"didymental"},"content":"     * @param medicalEntries an empty Arraylist.","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"didymental"},"content":"     * @return an empty medical history.","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"gycgabriel"},"content":"    public static MedicalHistory parseMedicalHistory(Collection\u003cString\u003e medicalEntries) throws ParseException {","lastModifiedDate":"2021-11-02"},{"lineNumber":177,"author":{"gitId":"didymental"},"content":"        requireNonNull(medicalEntries);","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"didymental"},"content":"        MedicalHistory toParseMh \u003d new MedicalHistory(\"\");","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"didymental"},"content":"        toParseMh.delete(0);","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"didymental"},"content":"        for (String medicalEntry : medicalEntries) {","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"didymental"},"content":"            MedicalHistory mh \u003d parseMedicalEntry(medicalEntry);","lastModifiedDate":"2021-10-27"},{"lineNumber":184,"author":{"gitId":"didymental"},"content":"            if (mh.equals(MedicalHistory.EMPTY_MEDICAL_HISTORY)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"didymental"},"content":"                toParseMh \u003d MedicalHistory.EMPTY_MEDICAL_HISTORY;","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"didymental"},"content":"                break;","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"didymental"},"content":"            } else {","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"didymental"},"content":"                toParseMh.append(parseMedicalEntry(medicalEntry));","lastModifiedDate":"2021-10-27"},{"lineNumber":189,"author":{"gitId":"didymental"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"didymental"},"content":"        return toParseMh.size() \u003d\u003d 0 ? MedicalHistory.EMPTY_MEDICAL_HISTORY : toParseMh;","lastModifiedDate":"2021-10-24"},{"lineNumber":193,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":194,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":196,"author":{"gitId":"huyuxin0429"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code","lastModifiedDate":"2021-10-27"},{"lineNumber":197,"author":{"gitId":"huyuxin0429"},"content":"     * ArgumentMultimap}.","lastModifiedDate":"2021-10-27"},{"lineNumber":198,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":199,"author":{"gitId":"huyuxin0429"},"content":"    public static boolean hasAllPrefixes(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-27"},{"lineNumber":200,"author":{"gitId":"huyuxin0429"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-27"},{"lineNumber":201,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":202,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":203,"author":{"gitId":"gycgabriel"},"content":"    private static boolean isNumericalOnly(String input) {","lastModifiedDate":"2021-11-02"},{"lineNumber":204,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(input);","lastModifiedDate":"2021-11-02"},{"lineNumber":205,"author":{"gitId":"gycgabriel"},"content":"        Pattern p \u003d Pattern.compile(\"^[0-9]*$\");","lastModifiedDate":"2021-11-02"},{"lineNumber":206,"author":{"gitId":"gycgabriel"},"content":"        Matcher m \u003d p.matcher(input);","lastModifiedDate":"2021-11-02"},{"lineNumber":207,"author":{"gitId":"gycgabriel"},"content":"        return m.matches();","lastModifiedDate":"2021-11-02"},{"lineNumber":208,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"joshenx":11,"huyuxin0429":8,"-":85,"gycgabriel":72,"didymental":33}},{"path":"src/main/java/seedu/docit/logic/parser/PatientBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddMedicalEntryCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.DeleteMedicalEntryCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.DeletePatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.FindPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ListPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.PatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":" * Parses user input.","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"public class PatientBookParser {","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"     * Parses user input of patient command for execution.","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"     * @param commandWord command word","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"     * @param arguments arguments of command","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"    public PatientCommand parsePatientCommand(String commandWord, String arguments) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"        case AddPatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"            return new AddPatientCommandParser().parsePatientCommand(arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"        case EditPatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"            return new EditPatientCommandParser().parsePatientCommand(arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"        case DeletePatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"            return new DeletePatientCommandParser().parsePatientCommand(arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"        case FindPatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"            return new FindPatientCommandParser().parsePatientCommand(arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"        case ListPatientCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"            return new ListPatientCommand();","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"        case AddMedicalEntryCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"            return new AddMedicalEntryCommandParser().parsePatientCommand(arguments);","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"        case DeleteMedicalEntryCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"            return new DeleteMedicalEntryCommandParser().parsePatientCommand(arguments);","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"        default:","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":31,"joshenx":10,"gycgabriel":2,"didymental":4}},{"path":"src/main/java/seedu/docit/logic/parser/PatientParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.PatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":" * Represents a PatientParser that is able to parse patient-related","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":" * user input into a {@code Patientommand} of type {@code T}.","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":"public interface PatientParser\u003cT extends PatientCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"    T parsePatientCommand(String userInput) throws ParseException;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":14,"joshenx":3}},{"path":"src/main/java/seedu/docit/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"joshenx":1,"-":38}},{"path":"src/main/java/seedu/docit/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser.exceptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"joshenx":2,"-":15}},{"path":"src/main/java/seedu/docit/logic/parser/prescription/AddPrescriptionCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser.prescription;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.prescription.AddPrescriptionCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.Parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":" * Parses input arguments and creates a new AddPrescriptionCommand object","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"public class AddPrescriptionCommandParser implements Parser\u003cAddPrescriptionCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPrescriptionCommand and returns an","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"     * AddPrescriptionCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"     * @param args Argument input for the command","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"     * @return A valid AddPrescriptionCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"     * @throws ParseException when the input is invalid","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"    public AddPrescriptionCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"        Index index;","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"                CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_DURATION, CliSyntax.PREFIX_VOLUME);","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"        if (!ParserUtil.hasAllPrefixes(argMultimap, CliSyntax.PREFIX_VOLUME,","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"                CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_DURATION)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPrescriptionCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPrescriptionCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"        String medicineName \u003d argMultimap.getValue(CliSyntax.PREFIX_NAME).get();","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"        String duration \u003d argMultimap.getValue(CliSyntax.PREFIX_DURATION).get();","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"        String volume \u003d argMultimap.getValue(CliSyntax.PREFIX_VOLUME).get();","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"        return new AddPrescriptionCommand(index, medicineName, volume, duration);","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":41,"huyuxin0429":13}},{"path":"src/main/java/seedu/docit/logic/parser/prescription/DeletePrescriptionCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser.prescription;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.prescription.DeletePrescriptionCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.Parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"public class DeletePrescriptionCommandParser implements Parser\u003cDeletePrescriptionCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePrescriptionCommand and returns a","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"     * DeletePrescriptionCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"    public DeletePrescriptionCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"        Index index;","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME);","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePrescriptionCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"        if (!ParserUtil.hasAllPrefixes(argMultimap, CliSyntax.PREFIX_NAME)","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"                || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"            throw new ParseException(","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePrescriptionCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"        String medicineName \u003d argMultimap.getValue(CliSyntax.PREFIX_NAME).get();","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"        return new DeletePrescriptionCommand(index, medicineName);","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":10,"huyuxin0429":32}},{"path":"src/main/java/seedu/docit/logic/parser/prescription/ListPrescriptionsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser.prescription;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.prescription.ListPrescriptionsCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.Parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"public class ListPrescriptionsCommandParser implements Parser\u003cListPrescriptionsCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"     * Parses the given {@code String} of arguments in the context of the ListPrescriptionsCommand and returns a","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"     * ListPrescriptionsCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"    public ListPrescriptionsCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"        if (!ParserUtil.hasAllPrefixes(argMultimap, CliSyntax.PREFIX_INDEX)","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"                    ListPrescriptionsCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"        Index appointmentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(CliSyntax.PREFIX_INDEX).get());","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"        ListPrescriptionsCommand newCommand \u003d new ListPrescriptionsCommand(appointmentIndex);","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        return newCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":13,"huyuxin0429":25}},{"path":"src/main/java/seedu/docit/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.UniquePatientList;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":" * Wraps all data at the docit-book level","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":" * Duplicates are not allowed (by .isSamePatient comparison)","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    private final UniquePatientList patients;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"        patients \u003d new UniquePatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"     * Creates an AddressBook using the Patients in the {@code toBeCopied}","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"     * Replaces the contents of the patient list with {@code patients}.","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"        this.patients.setPatients(patients);","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"        setPatients(newData.getPatientList());","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"    //// patient-level operations","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"didymental"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"        return patients.contains(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"     * Adds a patient to the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"     * The patient must not already exist in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"    public void addPatient(Patient p) {","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"        patients.add(p);","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"joshenx"},"content":"     * Replaces the given patient {@code target} in the list with {@code editedPatient}.","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"     * The patient identity of {@code editedPatient} must not be the same as an existing patient in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"didymental"},"content":"        requireNonNull(editedPatient);","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":86,"author":{"gitId":"joshenx"},"content":"        patients.setPatient(target, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"    public void removePatient(Patient key) {","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"        patients.remove(key);","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"     * Returns patient at index position or null if not exist.","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"gycgabriel"},"content":"    public Patient getPatientOfIndex(Index index) {","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"joshenx"},"content":"        return patients.get(index);","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"gycgabriel"},"content":"     * Returns index of patient in the list.","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":110,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"gycgabriel"},"content":"    public Index getIndexOfPatient(Patient patient) {","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"joshenx"},"content":"        return patients.indexOf(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"joshenx"},"content":"        return patients.asUnmodifiableObservableList().size() + \" patients\";","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"joshenx"},"content":"    public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"joshenx"},"content":"        return patients.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":136,"author":{"gitId":"joshenx"},"content":"                \u0026\u0026 patients.equals(((AddressBook) other).patients));","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":141,"author":{"gitId":"joshenx"},"content":"        return patients.hashCode();","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":35,"-":86,"gycgabriel":20,"didymental":2}},{"path":"src/main/java/seedu/docit/model/AppointmentBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"import seedu.docit.model.prescription.Prescription;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":" * Wraps all data at the docit-book level Duplicates are not allowed (by .isSameAppointment comparison)","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"public class AppointmentBook implements ReadOnlyAppointmentBook {","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"    private final UniqueAppointmentList appointments;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"    /*","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"     *   among constructors.","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"    {","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"        appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"    public AppointmentBook() {","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"     * Creates an AppointmentBook using the Appointments in the {@code toBeCopied}","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"    public AppointmentBook(ReadOnlyAppointmentBook toBeCopied) {","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"        this();","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"    //// list overwrite operations","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the contents of the appointment list with {@code appointments}. {@code appointments} must not contain","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"     * duplicate appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"     * Resets the existing data of this {@code AppointmentBook} with {@code newData}.","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"    public void resetData(ReadOnlyAppointmentBook newData) {","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"    //// appointment-level operations","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"        return appointments.contains(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"     * Adds an appointment to the address book. The appointment must not already exist in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"gycgabriel"},"content":"    public void addAppointment(Appointment p) {","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"        appointments.add(p);","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}. {@code target} must","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"     * exist in the address book. The appointment identity of {@code editedAppointment} must not be the same as another","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"gycgabriel"},"content":"     * existing appointment in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"gycgabriel"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"    public void sortAppointments() {","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"        appointments.sort();","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"didymental"},"content":"     * Adds a prescription to the indexed appointment in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"didymental"},"content":"    public void addPrescription(int index, Prescription p) {","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"didymental"},"content":"        appointments.addPrescription(index, p);","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"didymental"},"content":"     * Removes a prescription from an appointment specified by the index in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"didymental"},"content":"    public void deletePrescription(int index, String medicine) {","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"didymental"},"content":"        appointments.deletePrescription(index, medicine);","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":107,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"didymental"},"content":"     * Edits a prescription from an appointment specified by the index in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"didymental"},"content":"    public void editPrescription(int index, Prescription p) {","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"didymental"},"content":"        appointments.editPrescription(index, p);","lastModifiedDate":"2021-10-28"},{"lineNumber":113,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":114,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":115,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"joshenx"},"content":"     * Updates appointments in the list with {@code target} when there are changes to the patient\u0027s details.","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"joshenx"},"content":"     * The appointment identity of {@code editedAppointment} must not be the same as another","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"joshenx"},"content":"     * existing appointment in the address book.","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"joshenx"},"content":"    public void updatePatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"joshenx"},"content":"        requireNonNull(editedPatient);","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"joshenx"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"joshenx"},"content":"            if (appointment.getPatient().equals(target)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":"                Appointment editedAppointment \u003d new Appointment(editedPatient, appointment.getDatetime());","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"joshenx"},"content":"                setAppointment(appointment, editedAppointment);","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"joshenx"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"     * Removes/updates appointments in the list with {@code target} when a patient is removed from the AddressBook.","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"joshenx"},"content":"    public void removePatient(Patient target) {","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"joshenx"},"content":"        ArrayList\u003cAppointment\u003e appointmentsToRemove \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"joshenx"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"joshenx"},"content":"            if (appointment.getPatient().equals(target)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"joshenx"},"content":"                appointmentsToRemove.add(appointment);","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"joshenx"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"joshenx"},"content":"        for (Appointment appointmentToRemove : appointmentsToRemove) {","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"joshenx"},"content":"            removeAppointment(appointmentToRemove);","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"gycgabriel"},"content":"     * Removes {@code key} from this {@code AppointmentBook}. {@code key} must exist in the address book.","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"gycgabriel"},"content":"    public void removeAppointment(Appointment key) {","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"gycgabriel"},"content":"        appointments.remove(key);","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"gycgabriel"},"content":"    //// util methods","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":159,"author":{"gitId":"didymental"},"content":"    public String toString() {","lastModifiedDate":"2021-10-28"},{"lineNumber":160,"author":{"gitId":"gycgabriel"},"content":"        Iterator\u003cAppointment\u003e i \u003d appointments.iterator();","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"gycgabriel"},"content":"        StringBuilder r \u003d new StringBuilder();","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"gycgabriel"},"content":"        while (i.hasNext()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"gycgabriel"},"content":"            r.append(i.next());","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"gycgabriel"},"content":"        return appointments.asUnmodifiableObservableList().size() + \" appointments:\\n\" + r.toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"gycgabriel"},"content":"        // TODO: refine later","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":169,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":170,"author":{"gitId":"didymental"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2021-10-28"},{"lineNumber":171,"author":{"gitId":"gycgabriel"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-09"},{"lineNumber":172,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":173,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":174,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":175,"author":{"gitId":"didymental"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-28"},{"lineNumber":176,"author":{"gitId":"gycgabriel"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"gycgabriel"},"content":"            || (other instanceof AppointmentBook // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":178,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 appointments.equals(((AppointmentBook) other).appointments));","lastModifiedDate":"2021-10-09"},{"lineNumber":179,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":181,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":182,"author":{"gitId":"didymental"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-28"},{"lineNumber":183,"author":{"gitId":"gycgabriel"},"content":"        return appointments.hashCode();","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"joshenx":44,"gycgabriel":111,"didymental":30}},{"path":"src/main/java/seedu/docit/model/ArchivedAppointmentBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":" * Wraps all data at the docit-book level Duplicates are not allowed (by .isSameAppointment comparison)","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"public class ArchivedAppointmentBook implements ReadOnlyAppointmentBook {","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    private final UniqueAppointmentList archivedAppointments;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    /*","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"     *   among constructors.","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"    {","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"        archivedAppointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    public ArchivedAppointmentBook() {","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"     * Creates an AppointmentBook using the Appointments in the {@code toBeCopied}","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"    public ArchivedAppointmentBook(ReadOnlyAppointmentBook toBeCopied) {","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"        this();","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"    //// list overwrite operations","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"     * Replaces the contents of the appointment list with {@code appointments}. {@code appointments} must not contain","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"     * duplicate appointments.","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"    public void setArchivedAppointments(List\u003cAppointment\u003e archivedAppointments) {","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"        this.archivedAppointments.setAppointments(archivedAppointments);","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"     * Resets the existing data of this {@code AppointmentBook} with {@code newData}.","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"    public void resetData(ReadOnlyAppointmentBook newData) {","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"        setArchivedAppointments(newData.getAppointmentList());","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"    //// appointment-level operations","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in the address book.","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"        return archivedAppointments.contains(appointment);","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"     * Adds an appointment to the address book. The appointment must not already exist in the address book.","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"    public void addAppointment(Appointment p) {","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"        archivedAppointments.add(p);","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}. {@code target} must","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"     * exist in the address book. The appointment identity of {@code editedAppointment} must not be the same as another","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"     * existing appointment in the address book.","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"joshenx"},"content":"    private void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"joshenx"},"content":"        archivedAppointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"     * Removes {@code key} from this {@code AppointmentBook}. {@code key} must exist in the address book.","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"    private void removeAppointment(Appointment key) {","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"        archivedAppointments.remove(key);","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"joshenx"},"content":"     * Updates appointments in the list with {@code target} when there are changes to the patient\u0027s details.","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"joshenx"},"content":"     * The appointment identity of {@code editedAppointment} must not be the same as another","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"joshenx"},"content":"     * existing appointment in the address book.","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"joshenx"},"content":"    public void updatePatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"joshenx"},"content":"        requireNonNull(editedPatient);","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"joshenx"},"content":"        for (Appointment appointment : archivedAppointments) {","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"joshenx"},"content":"            if (appointment.getPatient().equals(target)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"joshenx"},"content":"                Appointment editedAppointment \u003d new Appointment(editedPatient, appointment.getDatetime());","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"joshenx"},"content":"                setAppointment(appointment, editedAppointment);","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"joshenx"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":110,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"joshenx"},"content":"     * Removes/updates appointments in the list with {@code target} when a patient is removed from the AddressBook.","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"joshenx"},"content":"    public void removePatient(Patient target) {","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"joshenx"},"content":"        ArrayList\u003cAppointment\u003e appointmentsToRemove \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"joshenx"},"content":"        for (Appointment appointment : archivedAppointments) {","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"joshenx"},"content":"            if (appointment.getPatient().equals(target)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"joshenx"},"content":"                appointmentsToRemove.add(appointment);","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"joshenx"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"joshenx"},"content":"        for (Appointment appointmentToRemove : appointmentsToRemove) {","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"joshenx"},"content":"            removeAppointment(appointmentToRemove);","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"joshenx"},"content":"    //// util methods","lastModifiedDate":"2021-10-19"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"    @Override public String toString() {","lastModifiedDate":"2021-10-19"},{"lineNumber":134,"author":{"gitId":"joshenx"},"content":"        Iterator\u003cAppointment\u003e i \u003d archivedAppointments.iterator();","lastModifiedDate":"2021-10-19"},{"lineNumber":135,"author":{"gitId":"joshenx"},"content":"        StringBuilder r \u003d new StringBuilder();","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"joshenx"},"content":"        while (i.hasNext()) {","lastModifiedDate":"2021-10-19"},{"lineNumber":137,"author":{"gitId":"joshenx"},"content":"            r.append(i.next());","lastModifiedDate":"2021-10-19"},{"lineNumber":138,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":139,"author":{"gitId":"joshenx"},"content":"        return archivedAppointments.asUnmodifiableObservableList().size() + \" appointments:\\n\" + r.toString();","lastModifiedDate":"2021-10-19"},{"lineNumber":140,"author":{"gitId":"joshenx"},"content":"        // TODO: refine later","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":142,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"joshenx"},"content":"    @Override public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2021-10-19"},{"lineNumber":144,"author":{"gitId":"joshenx"},"content":"        return archivedAppointments.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-19"},{"lineNumber":145,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"joshenx"},"content":"    @Override public boolean equals(Object other) {","lastModifiedDate":"2021-10-19"},{"lineNumber":148,"author":{"gitId":"joshenx"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-19"},{"lineNumber":149,"author":{"gitId":"joshenx"},"content":"                || (other instanceof ArchivedAppointmentBook // instanceof handles nulls","lastModifiedDate":"2021-10-19"},{"lineNumber":150,"author":{"gitId":"joshenx"},"content":"                \u0026\u0026 archivedAppointments.equals(((ArchivedAppointmentBook) other).archivedAppointments));","lastModifiedDate":"2021-10-19"},{"lineNumber":151,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":153,"author":{"gitId":"joshenx"},"content":"    @Override public int hashCode() {","lastModifiedDate":"2021-10-19"},{"lineNumber":154,"author":{"gitId":"joshenx"},"content":"        return archivedAppointments.hashCode();","lastModifiedDate":"2021-10-19"},{"lineNumber":155,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":156,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"joshenx":156}},{"path":"src/main/java/seedu/docit/model/AutoArchiveApmts.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":" * Runnable task to auto archive appointments that are 1-day past.","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"public class AutoArchiveApmts implements Runnable {","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"    private final Model model;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"    AutoArchiveApmts(Model model) {","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"        this.model \u003d model;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"    public void run() {","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"        model.archivePastAppointments();","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"joshenx":17}},{"path":"src/main/java/seedu/docit/model/Entry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"didymental"},"content":" * Entry represents an object that is either empty or is something.","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"didymental"},"content":" * @param \u003cT\u003e type that is stored within an entry.","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"didymental"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"public abstract class Entry\u003cT\u003e {","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"    private static final Empty EMPTY \u003d new Entry.Empty();","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"    private Entry() {","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"    private static \u003cS\u003e Entry\u003cS\u003e empty() {","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"        @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"        Entry\u003cS\u003e e \u003d (Entry\u003cS\u003e) EMPTY;","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"        return e;","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"    private static \u003cS\u003e Entry\u003cS\u003e some(S s) {","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"        return new Entry.Some\u003cS\u003e(s);","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"     * A factory method that returns either an Empty or Some object based on the given argument.","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"     * @param item the item that the Entry object will store.","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"     * @param \u003cS\u003e the type of the item that will be stored in the Entry object.","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"     * @return an Empty object if the item is null, else a Some object that stores the value.","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"    public static \u003cS\u003e Entry\u003cS\u003e of(S item) {","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"        if (item \u003d\u003d null) {","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"            return Entry.empty();","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"        } else {","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"            return Entry.some(item);","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"    private static final class Empty extends Entry\u003cObject\u003e {","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"        Empty() {","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"            super();","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"        public String toString() {","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"            return \"\";","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"        public boolean equals(Object o) {","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"didymental"},"content":"            return (o \u003d\u003d EMPTY);","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"        @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"didymental"},"content":"        public Object get() {","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"didymental"},"content":"            return null;","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"    private static final class Some\u003cS\u003e extends Entry\u003cS\u003e {","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"didymental"},"content":"        private final S item;","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"didymental"},"content":"        private Some(S item) {","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"didymental"},"content":"            super();","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"didymental"},"content":"            this.item \u003d item;","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"didymental"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"didymental"},"content":"        public String toString() {","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"didymental"},"content":"            return this.item.toString();","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"didymental"},"content":"        @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"didymental"},"content":"        public boolean equals(Object o) {","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"didymental"},"content":"            if (o instanceof Some\u003c?\u003e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"didymental"},"content":"                Some\u003c?\u003e some \u003d (Some\u003c?\u003e) o;","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"didymental"},"content":"                if (this.item \u003d\u003d null) { // if null","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"didymental"},"content":"                    return this.item \u003d\u003d some.item;","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"didymental"},"content":"                } else {","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"didymental"},"content":"                    return this.item \u003d\u003d some.item || this.item.equals(some.item);","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"didymental"},"content":"                }","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"didymental"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"didymental"},"content":"            return false;","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"didymental"},"content":"        @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"didymental"},"content":"        public S get() {","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"didymental"},"content":"            return this.item;","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"didymental"},"content":"    public abstract T get();","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"joshenx":1,"didymental":95}},{"path":"src/main/java/seedu/docit/model/EntryList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"didymental"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"didymental"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":" * EntryList is a class that uses only four main functions of a list - add, delete, sort, size","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"public class EntryList\u003cEntry\u003e {","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"    private ArrayList\u003cEntry\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"    public boolean add(Entry elem) {","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"        return list.add(elem);","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"    public Entry delete(int i) {","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"        return list.remove(i);","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"    public void sort(Comparator\u003c? super Entry\u003e c) {","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"        list.sort(c);","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"    public int size() {","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"        return list.size();","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"    public Entry get(int i) {","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"        return list.get(i);","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"    public Stream\u003cEntry\u003e toStream() {","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"        return list.stream();","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"joshenx":1,"didymental":35}},{"path":"src/main/java/seedu/docit/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.prescription.Prescription;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"    Predicate\u003cPrescription\u003e PREDICATE_SHOW_ALL_PRESCRIPTIONS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"     * Returns the AddressBook","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"huyuxin0429"},"content":"    boolean hasPatient(Patient patient);","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"     * Deletes the given patient. The patient must exist in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"huyuxin0429"},"content":"    void deletePatient(Patient target);","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"     * Adds the given patient. {@code patient} must not already exist in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"huyuxin0429"},"content":"    void addPatient(Patient patient);","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"     * Replaces the given patient {@code target} with {@code editedPatient}. {@code target} must exist in the docit","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"     * book. The patient identity of {@code editedPatient} must not be the same as another existing patient in the docit","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"     * book.","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"huyuxin0429"},"content":"    void setPatient(Patient target, Patient editedPatient);","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"    /** Returns an unmodifiable view of the filtered patient list */","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"huyuxin0429"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"joshenx"},"content":"     * Updates the filter of the filtered patient list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":91,"author":{"gitId":"huyuxin0429"},"content":"    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"gycgabriel"},"content":"     * Returns the user prefs\u0027 appointment Book file path.","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"    Path getAppointmentBookFilePath();","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"     * Sets the user prefs\u0027 appointment Book file path.","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"gycgabriel"},"content":"    void setAppointmentBookFilePath(Path appointmentBookFilePath);","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"gycgabriel"},"content":"     * Replaces appointment Book data with the data in {@code appointmentBook}.","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"    void setAppointmentBook(ReadOnlyAppointmentBook appointmentBook);","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":109,"author":{"gitId":"joshenx"},"content":"     * Replaces archived appointment Book data with the data in {@code appointmentBook}.","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":111,"author":{"gitId":"joshenx"},"content":"    void setArchivedAppointmentBook(ReadOnlyAppointmentBook appointmentBook);","lastModifiedDate":"2021-11-01"},{"lineNumber":112,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"joshenx"},"content":"     * Updates appointments\u0027 details in appointment Book data with {@code editedPatient}\u0027s details.","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"joshenx"},"content":"    void updateAppointmentBook(Patient target, Patient editedPatient);","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"joshenx"},"content":"     * Removes appointments in appointment Book data when a Patient is removed.","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"joshenx"},"content":"     * Appointments with the Patient will be deleted.","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"joshenx"},"content":"    void deleteAppointmentsWithPatient(Patient target);","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"gycgabriel"},"content":"     * Returns the AppointmentBook","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"gycgabriel"},"content":"    ReadOnlyAppointmentBook getAppointmentBook();","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":130,"author":{"gitId":"joshenx"},"content":"     * Returns the ArchivedAppointmentBook","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"    ReadOnlyAppointmentBook getArchivedAppointmentBook();","lastModifiedDate":"2021-10-19"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":134,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in the appointment Book.","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"gycgabriel"},"content":"    boolean hasAppointment(Appointment appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":140,"author":{"gitId":"joshenx"},"content":"     * Returns true if an appointment with the same identity as {@code appointmentToArchive} exists","lastModifiedDate":"2021-10-28"},{"lineNumber":141,"author":{"gitId":"joshenx"},"content":"     * in the appointment archive book.","lastModifiedDate":"2021-10-28"},{"lineNumber":142,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":143,"author":{"gitId":"joshenx"},"content":"    boolean hasAppointmentInArchives(Appointment appointmentToArchive);","lastModifiedDate":"2021-10-28"},{"lineNumber":144,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":145,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"gycgabriel"},"content":"     * Deletes the given appointment. The appointment must exist in the appointment Book.","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"gycgabriel"},"content":"    void deleteAppointment(Appointment target);","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"gycgabriel"},"content":"     * Adds the given appointment. {@code appointment} must not already exist in the appointment Book.","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"gycgabriel"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"joshenx"},"content":"     * Archives the given appointment.The appointment must exist in the appointment Book.","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"joshenx"},"content":"    void archiveAppointment(Appointment appointmentToArchive);","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}. {@code target} must exist in the","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"gycgabriel"},"content":"     * appointment Book. The appointment identity of {@code editedAppointment} must not be the same as another existing","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"gycgabriel"},"content":"     * appointment in the appointment Book.","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"gycgabriel"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":168,"author":{"gitId":"joshenx"},"content":"     * Sorts appointments in order of whether its today, followed by dateTime, and patient name.","lastModifiedDate":"2021-10-28"},{"lineNumber":169,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":170,"author":{"gitId":"joshenx"},"content":"    void sortAppointments();","lastModifiedDate":"2021-10-28"},{"lineNumber":171,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":172,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":173,"author":{"gitId":"joshenx"},"content":"     * Temporarily returns appointment list to be printed in CommandResult.","lastModifiedDate":"2021-11-01"},{"lineNumber":174,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":175,"author":{"gitId":"gycgabriel"},"content":"    String getAppointments();","lastModifiedDate":"2021-10-09"},{"lineNumber":176,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":178,"author":{"gitId":"joshenx"},"content":"     * Temporarily returns archived appointment list to be printed in CommandResult.","lastModifiedDate":"2021-11-01"},{"lineNumber":179,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":180,"author":{"gitId":"joshenx"},"content":"    String getArchivedAppointments();","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":183,"author":{"gitId":"joshenx"},"content":"     * Adds a prescription to appointment i in the list.","lastModifiedDate":"2021-11-01"},{"lineNumber":184,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":185,"author":{"gitId":"didymental"},"content":"    public void addPrescription(Appointment target, Prescription p);","lastModifiedDate":"2021-10-28"},{"lineNumber":186,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":187,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":188,"author":{"gitId":"joshenx"},"content":"     * Removes a prescription from an appointment i in the list.","lastModifiedDate":"2021-11-01"},{"lineNumber":189,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":190,"author":{"gitId":"didymental"},"content":"    public void deletePrescription(Appointment target, String medicine);","lastModifiedDate":"2021-10-28"},{"lineNumber":191,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":192,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":193,"author":{"gitId":"joshenx"},"content":"     * Edits a prescription from an appointment i in the list.","lastModifiedDate":"2021-11-01"},{"lineNumber":194,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":195,"author":{"gitId":"joshenx"},"content":"    public void editPrescription(int index, Prescription p);","lastModifiedDate":"2021-11-01"},{"lineNumber":196,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":197,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":198,"author":{"gitId":"gycgabriel"},"content":"     * Returns an unmodifiable view of the filtered appointment list","lastModifiedDate":"2021-10-09"},{"lineNumber":199,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":200,"author":{"gitId":"gycgabriel"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2021-10-09"},{"lineNumber":201,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":202,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":203,"author":{"gitId":"joshenx"},"content":"     * Returns an unmodifiable view of the filtered appointment list","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":205,"author":{"gitId":"joshenx"},"content":"    ObservableList\u003cAppointment\u003e getArchivedAppointmentList();","lastModifiedDate":"2021-10-21"},{"lineNumber":206,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":207,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":208,"author":{"gitId":"gycgabriel"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-09"},{"lineNumber":209,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":210,"author":{"gitId":"gycgabriel"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-09"},{"lineNumber":211,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":212,"author":{"gitId":"gycgabriel"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":213,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":214,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":215,"author":{"gitId":"joshenx"},"content":"     * Archives all appointments 1-day past their scheduled date.","lastModifiedDate":"2021-10-28"},{"lineNumber":216,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":217,"author":{"gitId":"joshenx"},"content":"    void archivePastAppointments();","lastModifiedDate":"2021-10-28"},{"lineNumber":218,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":219,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":220,"author":{"gitId":"joshenx"},"content":"     * Deletes all records of patients, appointments, and archived appointments.","lastModifiedDate":"2021-11-01"},{"lineNumber":221,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":222,"author":{"gitId":"joshenx"},"content":"    void clearAllRecords();","lastModifiedDate":"2021-11-01"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"joshenx":83,"huyuxin0429":7,"-":65,"gycgabriel":62,"didymental":6}},{"path":"src/main/java/seedu/docit/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import java.time.Clock;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import java.time.Duration;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import java.time.ZoneId;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import java.time.ZonedDateTime;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import java.util.concurrent.Executors;","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import java.util.concurrent.ScheduledExecutorService;","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import java.util.concurrent.TimeUnit;","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"import seedu.docit.model.prescription.Prescription;","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"    private static final int UPDATE_HOUR \u003d 5;","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    private final AppointmentBook appointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    private final ArchivedAppointmentBook archivedAppointmentBook;","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients;","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"     * Initializes a ModelManager with the given addressBook, appointmentBook and userPrefs.","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyAppointmentBook appointmentBook,","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"        ReadOnlyAppointmentBook archivedAppointmentBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"        requireAllNonNull(addressBook, appointmentBook, archivedAppointmentBook, userPrefs);","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" appointment book: \" + appointmentBook + \" and \"","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"            + \"archived appointment book: \" + archivedAppointmentBook + \"and\" + \"user prefs \" + userPrefs);","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"        this.appointmentBook \u003d new AppointmentBook(appointmentBook);","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"        this.archivedAppointmentBook \u003d new ArchivedAppointmentBook(archivedAppointmentBook);","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"        filteredPatients \u003d new FilteredList\u003c\u003e(this.addressBook.getPatientList());","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.appointmentBook.getAppointmentList());","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"        // Setup scheduler to auto-archive past appointments","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"        archivePastAppointments();","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"        ZonedDateTime now \u003d ZonedDateTime.now(ZoneId.of(\"Asia/Singapore\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"        ZonedDateTime nextRun \u003d now.withHour(UPDATE_HOUR).withMinute(0).withSecond(0);","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"        if (now.compareTo(nextRun) \u003e 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"            nextRun \u003d nextRun.plusDays(1);","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"        Duration duration \u003d Duration.between(now, nextRun);","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"        long initalDelay \u003d duration.getSeconds();","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"        ScheduledExecutorService scheduler \u003d Executors.newScheduledThreadPool(1);","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"        scheduler.scheduleAtFixedRate(new AutoArchiveApmts(this),","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"                initalDelay,","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"                TimeUnit.DAYS.toSeconds(1),","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"                TimeUnit.SECONDS);","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"        this(new AddressBook(), new AppointmentBook(), new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"gycgabriel"},"content":"    public Path getAppointmentBookFilePath() {","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"gycgabriel"},"content":"        return userPrefs.getAppointmentBookFilePath();","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointmentBookFilePath(Path appointmentBookFilePath) {","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(appointmentBookFilePath);","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"gycgabriel"},"content":"        userPrefs.setAppointmentBookFilePath(appointmentBookFilePath);","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"huyuxin0429"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"didymental"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"joshenx"},"content":"        return addressBook.hasPatient(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":150,"author":{"gitId":"huyuxin0429"},"content":"    public void deletePatient(Patient target) {","lastModifiedDate":"2021-10-15"},{"lineNumber":151,"author":{"gitId":"joshenx"},"content":"        addressBook.removePatient(target);","lastModifiedDate":"2021-10-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":155,"author":{"gitId":"huyuxin0429"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2021-10-15"},{"lineNumber":156,"author":{"gitId":"joshenx"},"content":"        addressBook.addPatient(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":157,"author":{"gitId":"joshenx"},"content":"        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":161,"author":{"gitId":"huyuxin0429"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-10-15"},{"lineNumber":162,"author":{"gitId":"didymental"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":164,"author":{"gitId":"joshenx"},"content":"        addressBook.setPatient(target, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":167,"author":{"gitId":"joshenx"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":170,"author":{"gitId":"rish-16"},"content":"     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of","lastModifiedDate":"2021-10-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":174,"author":{"gitId":"huyuxin0429"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-10-15"},{"lineNumber":175,"author":{"gitId":"didymental"},"content":"        return filteredPatients;","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":179,"author":{"gitId":"huyuxin0429"},"content":"    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2021-10-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":181,"author":{"gitId":"didymental"},"content":"        filteredPatients.setPredicate(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":184,"author":{"gitId":"gycgabriel"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":186,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":187,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointmentBook(ReadOnlyAppointmentBook appointmentBook) {","lastModifiedDate":"2021-10-09"},{"lineNumber":188,"author":{"gitId":"gycgabriel"},"content":"        this.appointmentBook.resetData(appointmentBook);","lastModifiedDate":"2021-10-09"},{"lineNumber":189,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":190,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":191,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":192,"author":{"gitId":"joshenx"},"content":"    public void updateAppointmentBook(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-10-21"},{"lineNumber":193,"author":{"gitId":"joshenx"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2021-10-21"},{"lineNumber":194,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":195,"author":{"gitId":"joshenx"},"content":"        appointmentBook.updatePatient(target, editedPatient);","lastModifiedDate":"2021-10-21"},{"lineNumber":196,"author":{"gitId":"joshenx"},"content":"        archivedAppointmentBook.updatePatient(target, editedPatient);","lastModifiedDate":"2021-10-22"},{"lineNumber":197,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":199,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"joshenx"},"content":"    public void deleteAppointmentsWithPatient(Patient target) {","lastModifiedDate":"2021-10-22"},{"lineNumber":201,"author":{"gitId":"joshenx"},"content":"        requireNonNull(target);","lastModifiedDate":"2021-10-22"},{"lineNumber":202,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":203,"author":{"gitId":"joshenx"},"content":"        appointmentBook.removePatient(target);","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"joshenx"},"content":"        archivedAppointmentBook.removePatient(target);","lastModifiedDate":"2021-10-22"},{"lineNumber":205,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":206,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":207,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":208,"author":{"gitId":"gycgabriel"},"content":"    public ReadOnlyAppointmentBook getAppointmentBook() {","lastModifiedDate":"2021-10-09"},{"lineNumber":209,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":210,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":211,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":212,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":213,"author":{"gitId":"joshenx"},"content":"    public ReadOnlyAppointmentBook getArchivedAppointmentBook() {","lastModifiedDate":"2021-10-19"},{"lineNumber":214,"author":{"gitId":"joshenx"},"content":"        return archivedAppointmentBook;","lastModifiedDate":"2021-10-19"},{"lineNumber":215,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":216,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":217,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":218,"author":{"gitId":"gycgabriel"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":219,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":220,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBook.hasAppointment(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":221,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":222,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":223,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":224,"author":{"gitId":"joshenx"},"content":"    public boolean hasAppointmentInArchives(Appointment appointment) {","lastModifiedDate":"2021-10-28"},{"lineNumber":225,"author":{"gitId":"joshenx"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-28"},{"lineNumber":226,"author":{"gitId":"joshenx"},"content":"        return archivedAppointmentBook.hasAppointment(appointment);","lastModifiedDate":"2021-10-28"},{"lineNumber":227,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":228,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":229,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":230,"author":{"gitId":"gycgabriel"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2021-10-09"},{"lineNumber":231,"author":{"gitId":"gycgabriel"},"content":"        appointmentBook.removeAppointment(target);","lastModifiedDate":"2021-10-09"},{"lineNumber":232,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":233,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":234,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":235,"author":{"gitId":"gycgabriel"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":236,"author":{"gitId":"gycgabriel"},"content":"        appointmentBook.addAppointment(appointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":237,"author":{"gitId":"gycgabriel"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-09"},{"lineNumber":238,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":239,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":240,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-12"},{"lineNumber":241,"author":{"gitId":"joshenx"},"content":"    public void archiveAppointment(Appointment target) {","lastModifiedDate":"2021-10-12"},{"lineNumber":242,"author":{"gitId":"joshenx"},"content":"        if (archivedAppointmentBook.hasAppointment(target)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":243,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":244,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":245,"author":{"gitId":"joshenx"},"content":"        appointmentBook.removeAppointment(target);","lastModifiedDate":"2021-10-19"},{"lineNumber":246,"author":{"gitId":"joshenx"},"content":"        archivedAppointmentBook.addAppointment(target);","lastModifiedDate":"2021-10-19"},{"lineNumber":247,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":248,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":249,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":250,"author":{"gitId":"joshenx"},"content":"    public void archivePastAppointments() {","lastModifiedDate":"2021-10-28"},{"lineNumber":251,"author":{"gitId":"joshenx"},"content":"        ArrayList\u003cAppointment\u003e appointmentsToArchive \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":252,"author":{"gitId":"joshenx"},"content":"        ObservableList\u003cAppointment\u003e appointmentList \u003d appointmentBook.getAppointmentList();","lastModifiedDate":"2021-10-28"},{"lineNumber":253,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":254,"author":{"gitId":"joshenx"},"content":"        for (Appointment appointment : appointmentList) {","lastModifiedDate":"2021-10-28"},{"lineNumber":255,"author":{"gitId":"joshenx"},"content":"            if (isExpired(appointment)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":256,"author":{"gitId":"joshenx"},"content":"                appointmentsToArchive.add(appointment);","lastModifiedDate":"2021-10-28"},{"lineNumber":257,"author":{"gitId":"joshenx"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":258,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":259,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":260,"author":{"gitId":"joshenx"},"content":"        for (Appointment appointmentToArchive : appointmentsToArchive) {","lastModifiedDate":"2021-10-28"},{"lineNumber":261,"author":{"gitId":"joshenx"},"content":"            archiveAppointment(appointmentToArchive);","lastModifiedDate":"2021-10-28"},{"lineNumber":262,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":263,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":264,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":265,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":266,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":267,"author":{"gitId":"gycgabriel"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":268,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":269,"author":{"gitId":"gycgabriel"},"content":"        appointmentBook.setAppointment(target, editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":270,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":271,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":272,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":273,"author":{"gitId":"joshenx"},"content":"    public void sortAppointments() {","lastModifiedDate":"2021-10-28"},{"lineNumber":274,"author":{"gitId":"joshenx"},"content":"        appointmentBook.sortAppointments();","lastModifiedDate":"2021-10-28"},{"lineNumber":275,"author":{"gitId":"joshenx"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-10-28"},{"lineNumber":276,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":277,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":278,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":279,"author":{"gitId":"didymental"},"content":"    public void addPrescription(Appointment target, Prescription p) {","lastModifiedDate":"2021-10-28"},{"lineNumber":280,"author":{"gitId":"didymental"},"content":"        Set\u003cPrescription\u003e nextPrescription \u003d target.getPrescriptions();","lastModifiedDate":"2021-10-28"},{"lineNumber":281,"author":{"gitId":"didymental"},"content":"        nextPrescription.add(p);","lastModifiedDate":"2021-10-28"},{"lineNumber":282,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":283,"author":{"gitId":"didymental"},"content":"        Appointment editedAppt \u003d new Appointment(target.getPatient(), target.getDatetime(), nextPrescription);","lastModifiedDate":"2021-10-28"},{"lineNumber":284,"author":{"gitId":"didymental"},"content":"        appointmentBook.setAppointment(target, editedAppt);","lastModifiedDate":"2021-10-28"},{"lineNumber":285,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":286,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":287,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":288,"author":{"gitId":"didymental"},"content":"    public void deletePrescription(Appointment target, String medicine) {","lastModifiedDate":"2021-10-28"},{"lineNumber":289,"author":{"gitId":"didymental"},"content":"        target.removePrescription(medicine);","lastModifiedDate":"2021-10-28"},{"lineNumber":290,"author":{"gitId":"didymental"},"content":"        Set\u003cPrescription\u003e nextPrescription \u003d target.getPrescriptions();","lastModifiedDate":"2021-10-28"},{"lineNumber":291,"author":{"gitId":"didymental"},"content":"        Appointment editedAppt \u003d new Appointment(target.getPatient(), target.getDatetime(), nextPrescription);","lastModifiedDate":"2021-10-28"},{"lineNumber":292,"author":{"gitId":"didymental"},"content":"        appointmentBook.setAppointment(target, editedAppt);","lastModifiedDate":"2021-10-28"},{"lineNumber":293,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":294,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":295,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":296,"author":{"gitId":"joshenx"},"content":"    public void editPrescription(int index, Prescription p) {","lastModifiedDate":"2021-11-01"},{"lineNumber":297,"author":{"gitId":"joshenx"},"content":"        appointmentBook.editPrescription(index, p);","lastModifiedDate":"2021-11-01"},{"lineNumber":298,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":299,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":300,"author":{"gitId":"joshenx"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ArchivedAppointmentBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":301,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":302,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":303,"author":{"gitId":"joshenx"},"content":"    public void setArchivedAppointmentBook(ReadOnlyAppointmentBook appointmentBook) {","lastModifiedDate":"2021-11-01"},{"lineNumber":304,"author":{"gitId":"joshenx"},"content":"        this.archivedAppointmentBook.resetData(appointmentBook);","lastModifiedDate":"2021-11-01"},{"lineNumber":305,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":306,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":307,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":308,"author":{"gitId":"joshenx"},"content":"     * Checks if Appointment is 24-hours/1-day past its scheduled time.","lastModifiedDate":"2021-10-28"},{"lineNumber":309,"author":{"gitId":"joshenx"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":310,"author":{"gitId":"joshenx"},"content":"     * @param appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":311,"author":{"gitId":"joshenx"},"content":"     * @return true if appointment is past its scheduled time.","lastModifiedDate":"2021-10-28"},{"lineNumber":312,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":313,"author":{"gitId":"joshenx"},"content":"    public boolean isExpired(Appointment appointment) {","lastModifiedDate":"2021-10-28"},{"lineNumber":314,"author":{"gitId":"joshenx"},"content":"        Clock cl \u003d Clock.systemUTC();","lastModifiedDate":"2021-10-28"},{"lineNumber":315,"author":{"gitId":"joshenx"},"content":"        LocalDateTime now \u003d LocalDateTime.now(cl);","lastModifiedDate":"2021-10-28"},{"lineNumber":316,"author":{"gitId":"joshenx"},"content":"        LocalDateTime apptTime \u003d appointment.getDatetime();","lastModifiedDate":"2021-10-28"},{"lineNumber":317,"author":{"gitId":"joshenx"},"content":"        Duration duration \u003d Duration.between(apptTime, now);","lastModifiedDate":"2021-10-28"},{"lineNumber":318,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":319,"author":{"gitId":"joshenx"},"content":"        return duration.toDays() \u003e\u003d 1;","lastModifiedDate":"2021-10-28"},{"lineNumber":320,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":321,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":322,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":323,"author":{"gitId":"gycgabriel"},"content":"    public String getAppointments() {","lastModifiedDate":"2021-10-09"},{"lineNumber":324,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBook.toString();","lastModifiedDate":"2021-10-09"},{"lineNumber":325,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":326,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":327,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":328,"author":{"gitId":"joshenx"},"content":"    public String getArchivedAppointments() {","lastModifiedDate":"2021-10-12"},{"lineNumber":329,"author":{"gitId":"joshenx"},"content":"        return archivedAppointmentBook.toString();","lastModifiedDate":"2021-10-19"},{"lineNumber":330,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":331,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":332,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":333,"author":{"gitId":"joshenx"},"content":"    public void clearAllRecords() {","lastModifiedDate":"2021-11-01"},{"lineNumber":334,"author":{"gitId":"joshenx"},"content":"        this.setAppointmentBook(new AppointmentBook());","lastModifiedDate":"2021-11-01"},{"lineNumber":335,"author":{"gitId":"joshenx"},"content":"        this.setArchivedAppointmentBook(new AppointmentBook());","lastModifiedDate":"2021-11-01"},{"lineNumber":336,"author":{"gitId":"joshenx"},"content":"        this.setAddressBook(new AddressBook());","lastModifiedDate":"2021-11-01"},{"lineNumber":337,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":338,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":339,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":340,"author":{"gitId":"joshenx"},"content":"     * Returns an unmodifiable view of the list of archived {@code Appointment}s.","lastModifiedDate":"2021-10-21"},{"lineNumber":341,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":342,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":343,"author":{"gitId":"joshenx"},"content":"    public ObservableList\u003cAppointment\u003e getArchivedAppointmentList() {","lastModifiedDate":"2021-10-21"},{"lineNumber":344,"author":{"gitId":"joshenx"},"content":"        return archivedAppointmentBook.getAppointmentList();","lastModifiedDate":"2021-10-21"},{"lineNumber":345,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":346,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":347,"author":{"gitId":"gycgabriel"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":348,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":349,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":350,"author":{"gitId":"gycgabriel"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of","lastModifiedDate":"2021-10-09"},{"lineNumber":351,"author":{"gitId":"gycgabriel"},"content":"     * {@code versionedAppointmentBook}","lastModifiedDate":"2021-10-09"},{"lineNumber":352,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":353,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":354,"author":{"gitId":"gycgabriel"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":355,"author":{"gitId":"gycgabriel"},"content":"        return filteredAppointments;","lastModifiedDate":"2021-10-09"},{"lineNumber":356,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":357,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":358,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":359,"author":{"gitId":"gycgabriel"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2021-10-09"},{"lineNumber":360,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":361,"author":{"gitId":"gycgabriel"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2021-10-09"},{"lineNumber":362,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":363,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":373,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":379,"author":{"gitId":"didymental"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2021-10-10"},{"lineNumber":380,"author":{"gitId":"didymental"},"content":"                \u0026\u0026 filteredPatients.equals(other.filteredPatients)","lastModifiedDate":"2021-10-10"},{"lineNumber":381,"author":{"gitId":"gycgabriel"},"content":"                \u0026\u0026 appointmentBook.equals(other.appointmentBook)","lastModifiedDate":"2021-10-09"},{"lineNumber":382,"author":{"gitId":"joshenx"},"content":"                \u0026\u0026 archivedAppointmentBook.equals(other.archivedAppointmentBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":383,"author":{"gitId":"didymental"},"content":"                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);","lastModifiedDate":"2021-10-10"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":386,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rish-16":1,"joshenx":154,"huyuxin0429":6,"-":120,"gycgabriel":77,"didymental":28}},{"path":"src/main/java/seedu/docit/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"     * Returns an unmodifiable view of the patient list. This list will not contain any duplicate patients.","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"    ObservableList\u003cPatient\u003e getPatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"     * Returns patient at index position or null if not exist.","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"    Patient getPatientOfIndex(Index index);","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"     * Returns index of patient in the list.","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"    Index getIndexOfPatient(Patient patient);","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":5,"-":12,"gycgabriel":10}},{"path":"src/main/java/seedu/docit/model/ReadOnlyAppointmentBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":" * Unmodifiable view of an appointment book","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"public interface ReadOnlyAppointmentBook {","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"     * Returns an unmodifiable view of the appointment list.","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"     * This list will not contain any duplicate appointment.","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"joshenx":2,"gycgabriel":14}},{"path":"src/main/java/seedu/docit/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"joshenx":2,"-":14}},{"path":"src/main/java/seedu/docit/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"    private Path appointmentBookFilePath \u003d Paths.get(\"data\" , \"appointmentbook.json\");","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    private Path archivedAppointmentBookFilePath \u003d Paths.get(\"data\" , \"archivedappointmentbook.json\");","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"    public Path getAppointmentBookFilePath() {","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBookFilePath;","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointmentBookFilePath(Path appointmentBookFilePath) {","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(appointmentBookFilePath);","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"        this.appointmentBookFilePath \u003d appointmentBookFilePath;","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"    public Path getArchivedAppointmentBookFilePath() {","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"        return archivedAppointmentBookFilePath;","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"    public void setArchivedAppointmentBookFilePath(Path archivedAppointmentBookFilePath) {","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"        requireNonNull(archivedAppointmentBookFilePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"        this.archivedAppointmentBookFilePath \u003d archivedAppointmentBookFilePath;","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":12,"-":85,"gycgabriel":10}},{"path":"src/main/java/seedu/docit/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"import seedu.docit.logic.parser.ParserUtil;","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.prescription.Prescription;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.prescription.exceptions.DuplicatePrescriptionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.prescription.exceptions.MedicineNotFoundException;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":" * Represents an Appointment in the appointment book. Guarantees: details are present and not null, field values are","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":" * validated, immutable.","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"public class Appointment implements Comparable\u003cAppointment\u003e {","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"    public static final DateTimeFormatter UI_DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy HHmm\");","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    public static final DateTimeFormatter UI_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"    public static final DateTimeFormatter UI_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"    // Identity fields","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    private final Patient patient;","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"    private Set\u003cPrescription\u003e prescriptions \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"    private final LocalDateTime datetime;","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"    public Appointment(Patient patient, LocalDateTime datetime) {","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"        this(patient, datetime, new HashSet\u003c\u003e());","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"    public Appointment(Patient patient, LocalDateTime datetime, Set\u003cPrescription\u003e prescriptionList) {","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"        requireAllNonNull(patient, datetime);","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"        this.prescriptions.addAll(prescriptionList);","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"    public Patient getPatient() {","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"        return patient;","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"    public LocalDateTime getDatetime() {","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"        return datetime;","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"huyuxin0429"},"content":"    public Set\u003cPrescription\u003e getPrescriptions() {","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"        return prescriptions;","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"didymental"},"content":"     * Adds a prescription into the appointment.","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"didymental"},"content":"     * @param prescription prescription to be added.","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"didymental"},"content":"     * @throws DuplicatePrescriptionException if prescription already exists.","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"    public void addPrescription(Prescription prescription) throws DuplicatePrescriptionException {","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"didymental"},"content":"        for (Prescription p : prescriptions) {","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"didymental"},"content":"            if (p.getMedicine().equals(prescription.getMedicine())) {","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"didymental"},"content":"                throw new DuplicatePrescriptionException();","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"didymental"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"huyuxin0429"},"content":"        this.prescriptions.add(prescription);","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"didymental"},"content":"        Set\u003cPrescription\u003e p \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"didymental"},"content":"        p.addAll(prescriptions);","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"didymental"},"content":"        this.prescriptions \u003d p;","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"didymental"},"content":"     * Removes a prescription from an appointment.","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"didymental"},"content":"     * @param medicineName medicine name of prescription to be removed.","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"didymental"},"content":"     * @throws MedicineNotFoundException if no such medicine exists.","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"huyuxin0429"},"content":"    public void removePrescription(String medicineName) throws MedicineNotFoundException {","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"didymental"},"content":"        if (!this.prescriptions.removeIf(p -\u003e p.hasSameMedicalName(","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"didymental"},"content":"                new Prescription(medicineName, \"\", \"\")))) {","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"didymental"},"content":"            throw new MedicineNotFoundException();","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"didymental"},"content":"        Set\u003cPrescription\u003e p \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"didymental"},"content":"        p.addAll(prescriptions);","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"didymental"},"content":"        this.prescriptions \u003d p;","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"huyuxin0429"},"content":"     * Edits the prescription associated with this Appointment","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"huyuxin0429"},"content":"     * @param prescription Prescription to be edited","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"huyuxin0429"},"content":"     * @throws MedicineNotFoundException when the prescription cannot be found.","lastModifiedDate":"2021-10-27"},{"lineNumber":99,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"huyuxin0429"},"content":"    public void editPrescription(Prescription prescription) throws MedicineNotFoundException {","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"huyuxin0429"},"content":"        removePrescription(prescription.getMedicine());","lastModifiedDate":"2021-10-27"},{"lineNumber":102,"author":{"gitId":"huyuxin0429"},"content":"        addPrescription(prescription);","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":104,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"gycgabriel"},"content":"    public String getFormattedDatetimeString() {","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"        return getDatetime().format(UI_DATE_TIME_FORMATTER);","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"joshenx"},"content":"    public String getFormattedDateString() {","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"joshenx"},"content":"        return getDatetime().format(UI_DATE_FORMATTER);","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"joshenx"},"content":"    public String getFormattedTimeString() {","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"joshenx"},"content":"        return getDatetime().format(UI_TIME_FORMATTER);","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"    public String getInputFormattedDatetimeString() {","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"gycgabriel"},"content":"        return getDatetime().format(ParserUtil.INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":122,"author":{"gitId":"huyuxin0429"},"content":"     * Returns true if the current appointment contains a prescription with the same medicine name.","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"huyuxin0429"},"content":"     * @param p Prescription to be checked","lastModifiedDate":"2021-11-02"},{"lineNumber":124,"author":{"gitId":"huyuxin0429"},"content":"     * @return True or false","lastModifiedDate":"2021-11-02"},{"lineNumber":125,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":126,"author":{"gitId":"joshenx"},"content":"    public boolean containsPrescription(Prescription p) {","lastModifiedDate":"2021-10-28"},{"lineNumber":127,"author":{"gitId":"huyuxin0429"},"content":"        for (Prescription prescription: prescriptions) {","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"huyuxin0429"},"content":"            if (prescription.getMedicine().equals(p.getMedicine())) {","lastModifiedDate":"2021-11-02"},{"lineNumber":129,"author":{"gitId":"huyuxin0429"},"content":"                return true;","lastModifiedDate":"2021-11-02"},{"lineNumber":130,"author":{"gitId":"huyuxin0429"},"content":"            }","lastModifiedDate":"2021-11-02"},{"lineNumber":131,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":132,"author":{"gitId":"huyuxin0429"},"content":"        return false;","lastModifiedDate":"2021-11-02"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":134,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":135,"author":{"gitId":"joshenx"},"content":"    public boolean isToday() {","lastModifiedDate":"2021-10-28"},{"lineNumber":136,"author":{"gitId":"joshenx"},"content":"        return getDatetime().toLocalDate().equals(LocalDate.now());","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":138,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":139,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if both appointments have the same identity fields. This defines a weaker notion of equality","lastModifiedDate":"2021-10-28"},{"lineNumber":141,"author":{"gitId":"gycgabriel"},"content":"     * between two appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"gycgabriel"},"content":"    public boolean isSameAppointment(Appointment otherAppointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"gycgabriel"},"content":"        if (otherAppointment \u003d\u003d this) {","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"gycgabriel"},"content":"            return true;","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"gycgabriel"},"content":"        return otherAppointment !\u003d null \u0026\u0026 otherAppointment.getPatient().equals(getPatient())","lastModifiedDate":"2021-10-19"},{"lineNumber":149,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 otherAppointment.getDatetime().equals(getDatetime());","lastModifiedDate":"2021-10-28"},{"lineNumber":150,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if both appointments have the same identity and data fields. This defines a stronger notion of","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"     * equality between two appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":157,"author":{"gitId":"gycgabriel"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-19"},{"lineNumber":158,"author":{"gitId":"gycgabriel"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"gycgabriel"},"content":"            return true;","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"gycgabriel"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"gycgabriel"},"content":"            return false;","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"gycgabriel"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"gycgabriel"},"content":"        return isSameAppointment(otherAppointment)","lastModifiedDate":"2021-10-28"},{"lineNumber":168,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 otherAppointment.getPrescriptions().equals(getPrescriptions());","lastModifiedDate":"2021-10-28"},{"lineNumber":169,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":170,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":171,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":172,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"gycgabriel"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"gycgabriel"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-09"},{"lineNumber":175,"author":{"gitId":"huyuxin0429"},"content":"        return Objects.hash(patient, datetime, prescriptions);","lastModifiedDate":"2021-10-27"},{"lineNumber":176,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":178,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"gycgabriel"},"content":"    public String toString() {","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"gycgabriel"},"content":"        return \"Patient: \" + getPatient().getName() + \"; Datetime: \" + getDatetime().format(UI_DATE_TIME_FORMATTER)","lastModifiedDate":"2021-10-28"},{"lineNumber":181,"author":{"gitId":"gycgabriel"},"content":"            + \"; \" + \"Prescription: \" + getPrescriptions() + \"\\n\";","lastModifiedDate":"2021-10-28"},{"lineNumber":182,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":185,"author":{"gitId":"joshenx"},"content":"    public int compareTo(Appointment o) {","lastModifiedDate":"2021-10-28"},{"lineNumber":186,"author":{"gitId":"joshenx"},"content":"        return Comparator.comparing(Appointment::isToday).reversed()","lastModifiedDate":"2021-10-28"},{"lineNumber":187,"author":{"gitId":"joshenx"},"content":"                .thenComparing(Appointment::getDatetime)","lastModifiedDate":"2021-10-28"},{"lineNumber":188,"author":{"gitId":"joshenx"},"content":"                .thenComparing(Appointment::getPatient)","lastModifiedDate":"2021-10-28"},{"lineNumber":189,"author":{"gitId":"joshenx"},"content":"                .compare(this, o);","lastModifiedDate":"2021-10-28"},{"lineNumber":190,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":191,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"joshenx":32,"huyuxin0429":45,"gycgabriel":87,"didymental":27}},{"path":"src/main/java/seedu/docit/model/appointment/AppointmentContainsPatientPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.appointment;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":" * Tests that an {@code Appointment}\u0027s {@code Patient} email matches any of the patient emails given.","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"public class AppointmentContainsPatientPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"    private final Patient patient;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"    public AppointmentContainsPatientPredicate(Patient patient) {","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"        return patient.isSamePatient(appointment.getPatient());","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"            || (other instanceof AppointmentContainsPatientPredicate // instanceof handles nulls","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"            \u0026\u0026 patient.equals(((AppointmentContainsPatientPredicate) other).patient)); // state check","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"joshenx":29}},{"path":"src/main/java/seedu/docit/model/appointment/UniqueAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import java.util.List;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"import seedu.docit.model.prescription.Prescription;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls. An appointment is","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":" * considered unique by comparing using {@code Appointment#isSameAppointment(Appointment)}. As such, adding and updating","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":" * of appointments uses Appointment#isSameAppointment(Appointment) for equality so as to ensure that the appointment","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":" * being added or updated is unique in terms of identity in the UniqueAppointmentList. However, the removal of a","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":" * appointment uses Appointment#equals(Object) so as to ensure that the appointment with exactly the same fields will be","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":" * removed.","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":" *","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":" * @see Appointment#isSameAppointment(Appointment)","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"        FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument.","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"        return internalList.stream().anyMatch(toCheck::isSameAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"     * Adds an appointment to the list. The appointment must not already exist in the list.","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"    public void add(Appointment toAdd) {","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}. {@code target} must exist in","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"     * the list. The appointment identity of {@code editedAppointment} must not be the same as another existing","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"     * appointment in the list.","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"        if (!target.isSameAppointment(editedAppointment) \u0026\u0026 contains(editedAppointment)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"        internalList.set(index, editedAppointment);","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"     * Removes the equivalent appointment from the list. The appointment must exist in the list.","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"gycgabriel"},"content":"    public void remove(Appointment toRemove) {","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"gycgabriel"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"     * Replaces the contents of this list with {@code appointments}. {@code appointments} must not contain duplicate","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"gycgabriel"},"content":"     * appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"gycgabriel"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"gycgabriel"},"content":"        requireAllNonNull(appointments);","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"gycgabriel"},"content":"        if (!appointmentsAreUnique(appointments)) {","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"gycgabriel"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"gycgabriel"},"content":"        internalList.setAll(appointments);","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"joshenx"},"content":"     * Sorts the contents of this list.","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"joshenx"},"content":"    public void sort() {","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"joshenx"},"content":"        internalList.sort(Appointment::compareTo);","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":107,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"didymental"},"content":"     * Adds a prescription to the indexed appointment in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"didymental"},"content":"    public void addPrescription(int index, Prescription p) {","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"didymental"},"content":"        internalList.get(index).addPrescription(p);","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":113,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":114,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":115,"author":{"gitId":"didymental"},"content":"     * Removes a prescription from an appointment specified by the index in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":116,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":117,"author":{"gitId":"didymental"},"content":"    public void deletePrescription(int index, String medicine) {","lastModifiedDate":"2021-10-28"},{"lineNumber":118,"author":{"gitId":"didymental"},"content":"        internalList.get(index).removePrescription(medicine);","lastModifiedDate":"2021-10-28"},{"lineNumber":119,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":120,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":121,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":122,"author":{"gitId":"didymental"},"content":"     * Edits a prescription from an appointment specified by the index in the list.","lastModifiedDate":"2021-10-28"},{"lineNumber":123,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":124,"author":{"gitId":"didymental"},"content":"    public void editPrescription(int index, Prescription p) {","lastModifiedDate":"2021-10-28"},{"lineNumber":125,"author":{"gitId":"didymental"},"content":"        internalList.get(index).editPrescription(p);","lastModifiedDate":"2021-10-28"},{"lineNumber":126,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":127,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":128,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"gycgabriel"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"gycgabriel"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"gycgabriel"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"gycgabriel"},"content":"    @Override public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"gycgabriel"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"gycgabriel"},"content":"    @Override public boolean equals(Object other) {","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"gycgabriel"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"gycgabriel"},"content":"            || (other instanceof UniqueAppointmentList // instanceof handles nulls","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 internalList.equals(((UniqueAppointmentList) other).internalList));","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"gycgabriel"},"content":"    @Override public int hashCode() {","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"gycgabriel"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if {@code appointments} contains only unique appointments.","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"gycgabriel"},"content":"    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"gycgabriel"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"gycgabriel"},"content":"                if (appointments.get(i).isSameAppointment(appointments.get(j))) {","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"gycgabriel"},"content":"                    return false;","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"gycgabriel"},"content":"                }","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"gycgabriel"},"content":"            }","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"gycgabriel"},"content":"        return true;","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"joshenx":11,"gycgabriel":129,"didymental":22}},{"path":"src/main/java/seedu/docit/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.appointment.exceptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":" * Signals that the operation is unable to find the specified appointment.","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"public class AppointmentNotFoundException extends RuntimeException {","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"joshenx":1,"gycgabriel":6}},{"path":"src/main/java/seedu/docit/model/appointment/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.appointment.exceptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":" * Signals that the operation will result in duplicate Appointments (Appointments are considered duplicates if they have","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":" * the same identity).","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"        super(\"Operation would result in duplicate appointments\");","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"joshenx":1,"gycgabriel":10}},{"path":"src/main/java/seedu/docit/model/patient/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":" * Represents a Patient\u0027s docit in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Address should only contain alphanumeric characters, hash, \"","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"        + \"dash, commas, and spaces, \"","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":"        + \"should not be numerical only, \"","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"        + \"and should not be blank\";","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"     * The first character of the docit must not be a whitespace,","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} #\\\\-,]*\";","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"     * @param address A valid docit.","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"joshenx":5,"-":50,"gycgabriel":5}},{"path":"src/main/java/seedu/docit/model/patient/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":" * Represents a Patient\u0027s email in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"     * @param email A valid email docit.","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"joshenx":4,"-":67}},{"path":"src/main/java/seedu/docit/model/patient/MedicalHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"didymental"},"content":"import java.time.ZoneId;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"didymental"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"didymental"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"import java.util.List;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Entry;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.EntryList;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"public class MedicalHistory {","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"    public static final MedicalHistory EMPTY_MEDICAL_HISTORY \u003d new MedicalHistory(null);","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Medical History should only contain alphanumeric characters, \"","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"        + \"dash, commas, and spaces, \"","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"        + \"should not be numerical only, \"","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"        + \"and should not be blank\";","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum} \\\\-,]*\";","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"    private EntryList\u003cEntry\u003cMedicalEntry\u003e\u003e entryList \u003d new EntryList\u003c\u003e();","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"     * Constructs an {@code DateOfBirth}.","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"     * @param medicalHistory Medical history of patient.","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"    public MedicalHistory(String medicalHistory) {","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"        Entry\u003cMedicalEntry\u003e medicalEntry \u003d Entry.of(null);","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"        if (medicalHistory !\u003d \"\" \u0026\u0026 medicalHistory !\u003d \" \" \u0026\u0026 medicalHistory !\u003d null) {","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"            medicalEntry \u003d Entry.of(new MedicalEntry(medicalHistory));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"        entryList.add(medicalEntry);","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"     * A medical entry only exists when a patient has a Medical History.","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"    public static class MedicalEntry {","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"        private final String description;","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"        private LocalDate dateOfEntry;","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"        private final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM uuuu\");","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"        private MedicalEntry(String description) {","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"            this.dateOfEntry \u003d LocalDate.now(ZoneId.of(\"Singapore\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"        /**","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"didymental"},"content":"         * Constructor for the inner class Medical Entry.","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"         * @param description description of a Medical Entry.","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"didymental"},"content":"         * @param date date of record of the medcial entry.","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"         */","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"didymental"},"content":"        public MedicalEntry(String description, LocalDate date) {","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"didymental"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"            this.dateOfEntry \u003d date;","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"        @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"didymental"},"content":"        public String toString() {","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"didymental"},"content":"            String dateToString \u003d dateOfEntry.format(formatter);","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"didymental"},"content":"            return this.description + \", recorded \" + dateToString;","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"didymental"},"content":"        @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"didymental"},"content":"        public boolean equals(Object o) {","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"didymental"},"content":"            if (o instanceof MedicalEntry) {","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"didymental"},"content":"                MedicalEntry m \u003d (MedicalEntry) o;","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"didymental"},"content":"                return this.description.equals(m.description) \u0026\u0026 this.dateOfEntry.equals(m.dateOfEntry);","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"didymental"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"didymental"},"content":"            return false;","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"didymental"},"content":"        public String getDescription() {","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"didymental"},"content":"            return this.description;","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"didymental"},"content":"        public String getDateString() {","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"didymental"},"content":"            return this.dateOfEntry.format(formatter);","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"didymental"},"content":"     * Deletes a medical entry specified from the index from the list of medical entries.","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"didymental"},"content":"     * @param i index to specify the medical entry to be deleted.","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"didymental"},"content":"    public MedicalHistory delete(int i) {","lastModifiedDate":"2021-10-27"},{"lineNumber":89,"author":{"gitId":"didymental"},"content":"        if (this.isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"didymental"},"content":"            return this;","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":93,"author":{"gitId":"didymental"},"content":"        this.entryList.delete(i);","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"didymental"},"content":"        return this;","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"didymental"},"content":"     * Adds a MedicalEntry into the MedicalHistory, with the entry consisting of a description and a date.","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"didymental"},"content":"     * @param desc description of the medical entry.","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"didymental"},"content":"     * @param date date of recording of the medical entry.","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"didymental"},"content":"    public void add(String desc, String date) {","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"didymental"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM uuuu\");","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"didymental"},"content":"        LocalDate dateOfEntry \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"didymental"},"content":"        MedicalEntry entryToAdd \u003d new MedicalEntry(desc, dateOfEntry);","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"didymental"},"content":"        this.entryList.add(Entry.of(entryToAdd));","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"didymental"},"content":"     * Adds a MedicalEntry into the MedicalHistory, with the entry consisting of a description.","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"didymental"},"content":"     * @param desc description of the medical entry.","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"didymental"},"content":"    public void add(String desc) {","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"didymental"},"content":"        MedicalEntry entryToAdd \u003d new MedicalEntry(desc);","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"didymental"},"content":"        this.entryList.add(Entry.of(entryToAdd));","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"didymental"},"content":"     * Appends medical entries of another {@code MedicalHistory} object to this {@code MedicalHistory} object.","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"didymental"},"content":"     * @param mh {@code MedicalHistory} object that is to be added to","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"didymental"},"content":"    public MedicalHistory append(MedicalHistory mh) {","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"didymental"},"content":"        if (this.isEmpty()) { // if no record was stored","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"didymental"},"content":"            return mh;","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":127,"author":{"gitId":"didymental"},"content":"        for (int i \u003d 0; i \u003c mh.size(); i++) {","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"didymental"},"content":"            this.entryList.add(mh.entryList.get(i));","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"didymental"},"content":"        return this;","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"didymental"},"content":"     * Returns the count of medical entries within the medical history.","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"didymental"},"content":"     * @return count of medical entries.","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"didymental"},"content":"    public int size() {","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"didymental"},"content":"        return this.entryList.size();","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"didymental"},"content":"     * Returns the string representation of Medical History as displayed on the app.","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"didymental"},"content":"     * @return string representation for GUI.","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"didymental"},"content":"    public String display(String emoji) {","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"didymental"},"content":"        if (this.isEmpty()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"didymental"},"content":"            return \"No medical history recorded.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"didymental"},"content":"        int size \u003d entryList.size();","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"didymental"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"didymental"},"content":"        StringBuilder icon \u003d new StringBuilder(emoji + \"\\t\");","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"didymental"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"didymental"},"content":"            if (i \u003d\u003d size - 1) {","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"didymental"},"content":"                s \u003d s.append(icon).append(i + 1 + \". \" + entryList.get(i));","lastModifiedDate":"2021-10-27"},{"lineNumber":157,"author":{"gitId":"didymental"},"content":"            } else {","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"didymental"},"content":"                s \u003d s.append(icon).append(i + 1 + \". \" + entryList.get(i)).append(\"\\n\");","lastModifiedDate":"2021-10-27"},{"lineNumber":159,"author":{"gitId":"didymental"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"didymental"},"content":"        return s.toString();","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":167,"author":{"gitId":"gycgabriel"},"content":"     * Returns true if a given string is a valid Medical Entry.","lastModifiedDate":"2021-11-02"},{"lineNumber":168,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":169,"author":{"gitId":"gycgabriel"},"content":"    public static boolean isValidMedicalEntry(String test) {","lastModifiedDate":"2021-11-02"},{"lineNumber":170,"author":{"gitId":"gycgabriel"},"content":"        return !(test.length() \u003d\u003d 0 || test \u003d\u003d \" \" || test \u003d\u003d null)","lastModifiedDate":"2021-11-02"},{"lineNumber":171,"author":{"gitId":"gycgabriel"},"content":"            \u0026\u0026 test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-11-02"},{"lineNumber":172,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":173,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":174,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":175,"author":{"gitId":"didymental"},"content":"     * Generates a Medical History that contains nothing.","lastModifiedDate":"2021-11-03"},{"lineNumber":176,"author":{"gitId":"didymental"},"content":"     * @return a medical history object that contains nothing.","lastModifiedDate":"2021-11-03"},{"lineNumber":177,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":178,"author":{"gitId":"didymental"},"content":"    public static MedicalHistory generate() {","lastModifiedDate":"2021-11-03"},{"lineNumber":179,"author":{"gitId":"didymental"},"content":"        MedicalHistory mh \u003d new MedicalHistory(\"\");","lastModifiedDate":"2021-11-03"},{"lineNumber":180,"author":{"gitId":"didymental"},"content":"        mh.delete(0);","lastModifiedDate":"2021-11-03"},{"lineNumber":181,"author":{"gitId":"didymental"},"content":"        return mh;","lastModifiedDate":"2021-11-03"},{"lineNumber":182,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":183,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":184,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"didymental"},"content":"    public String toString() { // to store the list into a CSV format","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"didymental"},"content":"        if (this.isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":187,"author":{"gitId":"didymental"},"content":"            return \"\";","lastModifiedDate":"2021-10-27"},{"lineNumber":188,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":189,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":190,"author":{"gitId":"didymental"},"content":"        int size \u003d this.entryList.size();","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"didymental"},"content":"        String toReturn \u003d \"\";","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"didymental"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":193,"author":{"gitId":"didymental"},"content":"            if (i \u003d\u003d size - 1) {","lastModifiedDate":"2021-10-10"},{"lineNumber":194,"author":{"gitId":"didymental"},"content":"                toReturn \u003d toReturn + this.entryList.get(i);","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"didymental"},"content":"            } else {","lastModifiedDate":"2021-10-10"},{"lineNumber":196,"author":{"gitId":"didymental"},"content":"                toReturn \u003d toReturn + this.entryList.get(i) + \", \";","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"didymental"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":198,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":199,"author":{"gitId":"didymental"},"content":"        return toReturn;","lastModifiedDate":"2021-10-10"},{"lineNumber":200,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":201,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":202,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":203,"author":{"gitId":"didymental"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-10-24"},{"lineNumber":204,"author":{"gitId":"didymental"},"content":"        if (o instanceof MedicalHistory) {","lastModifiedDate":"2021-10-24"},{"lineNumber":205,"author":{"gitId":"didymental"},"content":"            MedicalHistory m \u003d (MedicalHistory) o;","lastModifiedDate":"2021-10-24"},{"lineNumber":206,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":207,"author":{"gitId":"didymental"},"content":"            if (m.entryList.size() !\u003d this.entryList.size()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":208,"author":{"gitId":"didymental"},"content":"                return false;","lastModifiedDate":"2021-10-24"},{"lineNumber":209,"author":{"gitId":"didymental"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":210,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"didymental"},"content":"            return isEqual(m.entryList);","lastModifiedDate":"2021-10-27"},{"lineNumber":212,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":213,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":214,"author":{"gitId":"didymental"},"content":"        return false;","lastModifiedDate":"2021-10-24"},{"lineNumber":215,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":216,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":217,"author":{"gitId":"didymental"},"content":"    private boolean isEqual(EntryList\u003cEntry\u003cMedicalEntry\u003e\u003e otherList) {","lastModifiedDate":"2021-10-27"},{"lineNumber":218,"author":{"gitId":"didymental"},"content":"        if (this.isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":219,"author":{"gitId":"didymental"},"content":"            return otherList \u003d\u003d this.entryList;","lastModifiedDate":"2021-10-27"},{"lineNumber":220,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":221,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":222,"author":{"gitId":"didymental"},"content":"        int len \u003d this.entryList.size();","lastModifiedDate":"2021-10-24"},{"lineNumber":223,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":224,"author":{"gitId":"didymental"},"content":"        for (int i \u003d 0; i \u003c len; i++) {","lastModifiedDate":"2021-10-24"},{"lineNumber":225,"author":{"gitId":"didymental"},"content":"            if (!this.entryList.get(i).equals(otherList.get(i))) {","lastModifiedDate":"2021-10-24"},{"lineNumber":226,"author":{"gitId":"didymental"},"content":"                return false;","lastModifiedDate":"2021-10-24"},{"lineNumber":227,"author":{"gitId":"didymental"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":228,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":229,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":230,"author":{"gitId":"didymental"},"content":"        return true;","lastModifiedDate":"2021-10-24"},{"lineNumber":231,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":232,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":233,"author":{"gitId":"didymental"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-10-24"},{"lineNumber":234,"author":{"gitId":"didymental"},"content":"        return this \u003d\u003d EMPTY_MEDICAL_HISTORY;","lastModifiedDate":"2021-10-27"},{"lineNumber":235,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":236,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":237,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":238,"author":{"gitId":"didymental"},"content":"     * Converts the MedicalHistory object into a stream representation.","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"didymental"},"content":"     * @return stream representation of MedicalHistory object.","lastModifiedDate":"2021-10-25"},{"lineNumber":240,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":241,"author":{"gitId":"didymental"},"content":"    public Stream\u003cString\u003e toStream() {","lastModifiedDate":"2021-10-25"},{"lineNumber":242,"author":{"gitId":"didymental"},"content":"        return this.isEmpty()","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"didymental"},"content":"            ? Stream.of(\"\")","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"didymental"},"content":"            : this.entryList","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"didymental"},"content":"                .toStream()","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"didymental"},"content":"                .map(entry -\u003e entry.get())","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"didymental"},"content":"                .filter(val -\u003e val !\u003d null)","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"didymental"},"content":"                .map(entry -\u003e entry.description);","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":252,"author":{"gitId":"didymental"},"content":"     * Converts the Medical History object into a List representation.","lastModifiedDate":"2021-11-03"},{"lineNumber":253,"author":{"gitId":"didymental"},"content":"     * @return list representation of MedicalHistory object.","lastModifiedDate":"2021-11-03"},{"lineNumber":254,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":255,"author":{"gitId":"didymental"},"content":"    public List\u003cMedicalEntry\u003e toList() {","lastModifiedDate":"2021-11-03"},{"lineNumber":256,"author":{"gitId":"didymental"},"content":"        if (this.isEmpty()) {","lastModifiedDate":"2021-11-03"},{"lineNumber":257,"author":{"gitId":"didymental"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-03"},{"lineNumber":258,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":259,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":260,"author":{"gitId":"didymental"},"content":"        int len \u003d entryList.size();","lastModifiedDate":"2021-11-03"},{"lineNumber":261,"author":{"gitId":"didymental"},"content":"        List\u003cMedicalEntry\u003e toReturn \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-03"},{"lineNumber":262,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":263,"author":{"gitId":"didymental"},"content":"        for (int i \u003d 0; i \u003c len; i++) {","lastModifiedDate":"2021-11-03"},{"lineNumber":264,"author":{"gitId":"didymental"},"content":"            toReturn.add(entryList.get(i).get());","lastModifiedDate":"2021-11-03"},{"lineNumber":265,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":266,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":267,"author":{"gitId":"didymental"},"content":"        return toReturn;","lastModifiedDate":"2021-11-03"},{"lineNumber":268,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":269,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":270,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"joshenx":3,"gycgabriel":14,"didymental":253}},{"path":"src/main/java/seedu/docit/model/patient/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":" * Represents a Patient\u0027s name in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"gycgabriel"},"content":"            \"Names should only contain alphabetic characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"     * The first character of the docit must not be a whitespace,","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"joshenx":4,"-":53,"gycgabriel":2}},{"path":"src/main/java/seedu/docit/model/patient/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":" * Represents a Patient in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"public class Patient implements Comparable\u003cPatient\u003e {","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"    // Patient specific fields","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"    private final MedicalHistory medicalHistory;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"    public Patient(Name name, Phone phone, Email email, Address address, MedicalHistory medicalHistory) {","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"        requireAllNonNull(name, phone, email, address);","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"        this.medicalHistory \u003d medicalHistory;","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"    public MedicalHistory getMedicalHistory() {","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"didymental"},"content":"        return this.medicalHistory;","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"didymental"},"content":"     * Returns a {@code Patient} object that has the combined {@code MedicalHistory} object.","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"     * @param mH {@code MedicalHistory} object to be combined with existing patient medical history.","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"didymental"},"content":"     * @return patient with combined {@code MedicalHistory} object.","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"didymental"},"content":"    public Patient addMedicalHistory(MedicalHistory mH) { // tell-don\u0027t-ask","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"rish-16"},"content":"        return new Patient(name, phone, email, address, this.medicalHistory.append(mH));","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"didymental"},"content":"     * Returns a {@code Patient} object that has the deleted {@code MedicalHistory} object.","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"didymental"},"content":"     * @param index {@code MedicalHistory} object to with a specified deleted medical entry.","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"didymental"},"content":"     * @return patient with deleted medical entry from {@code MedicalHistory} object.","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"didymental"},"content":"    public Patient deleteMedicalHistory(Index index) { // tell-don\u0027t-ask","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"didymental"},"content":"        int i \u003d index.getZeroBased();","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"didymental"},"content":"        if (i \u003e\u003d this.medicalHistory.size()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"didymental"},"content":"            return this;","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"didymental"},"content":"        if (this.medicalHistory.size() - 1 \u003d\u003d 0) {","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"rish-16"},"content":"            return new Patient(name, phone, email, address, MedicalHistory.EMPTY_MEDICAL_HISTORY);","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"rish-16"},"content":"        return new Patient(name, phone, email, address, this.medicalHistory.delete(i));","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"didymental"},"content":"     * Checks if patient has an empty medical history record.","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"didymental"},"content":"     * @return true if patient has empty, false otherwise.","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"didymental"},"content":"    public boolean hasEmptyMedicalHistory() {","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"didymental"},"content":"        return this.medicalHistory.isEmpty();","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"huyuxin0429"},"content":"    public boolean isSamePatient(Patient otherPatient) {","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"didymental"},"content":"        if (otherPatient \u003d\u003d this) {","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"didymental"},"content":"        return otherPatient !\u003d null","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"didymental"},"content":"                \u0026\u0026 otherPatient.getName().equals(getName());","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"joshenx"},"content":"     * Returns true if both patients have the same identity and data fields.","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"joshenx"},"content":"     * This defines a stronger notion of equality between two patients.","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"didymental"},"content":"        if (!(other instanceof Patient)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"didymental"},"content":"        Patient otherPatient \u003d (Patient) other;","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"didymental"},"content":"        return otherPatient.getName().equals(getName())","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"didymental"},"content":"                \u0026\u0026 otherPatient.getPhone().equals(getPhone())","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"didymental"},"content":"                \u0026\u0026 otherPatient.getEmail().equals(getEmail())","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"rish-16"},"content":"                \u0026\u0026 otherPatient.getAddress().equals(getAddress());","lastModifiedDate":"2021-11-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"rish-16"},"content":"        return Objects.hash(name, phone, email, address);","lastModifiedDate":"2021-11-03"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":145,"author":{"gitId":"didymental"},"content":"        if (!getMedicalHistory().isEmpty()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"didymental"},"content":"            builder.append(\"; Medical History: \")","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"didymental"},"content":"                .append(getMedicalHistory());","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":152,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":153,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":154,"author":{"gitId":"joshenx"},"content":"    public int compareTo(Patient o) {","lastModifiedDate":"2021-10-28"},{"lineNumber":155,"author":{"gitId":"joshenx"},"content":"        return this.name.fullName.compareTo(o.name.fullName);","lastModifiedDate":"2021-10-28"},{"lineNumber":156,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rish-16":7,"joshenx":12,"huyuxin0429":1,"-":83,"didymental":54}},{"path":"src/main/java/seedu/docit/model/patient/PatientContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"import java.util.List;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"didymental"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.StringUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"/**","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":" * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":" */","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"public class PatientContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"    public PatientContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"        boolean hasName \u003d keywords.stream()","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"        boolean hasMedicalHistory \u003d patient.getMedicalHistory().toStream().anyMatch(mh -\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"            keywords.stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(mh, keyword)));","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"        return hasName || hasMedicalHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"                || (other instanceof PatientContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"                \u0026\u0026 keywords.equals(((PatientContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"joshenx":3,"didymental":32}},{"path":"src/main/java/seedu/docit/model/patient/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":" * Represents a Patient\u0027s phone number in the address book.","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"joshenx":3,"-":50}},{"path":"src/main/java/seedu/docit/model/patient/UniquePatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":" * A list of patients that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":" * A patient is considered unique by comparing using {@code Patient#isSamePatient(Patient)}. As such, adding","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":" * and updating of patients uses Patient#isSamePatient(Patient) for equality so as to ensure that the patient","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":" * being added or updated is unique in terms of identity in the UniquePatientList. However, the removal of a","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":" * patient uses Patient#equals(Object) so as to ensure that the patient with exactly the same fields will be removed.","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":" * @see Patient#isSamePatient(Patient)","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"public class UniquePatientList implements Iterable\u003cPatient\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"     * Returns patient at index position or null if not exist.","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"    public Patient get(Index index) {","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"        return index.getZeroBased() \u003c internalList.size() ? internalList.get(index.getZeroBased()) : null;","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"     * Returns index of patient in the list.","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"    public Index indexOf(Patient patient) {","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"        return internalList.indexOf(patient) !\u003d -1 ? Index.fromZeroBased(internalList.indexOf(patient)) : null;","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"     * Returns true if the list contains an equivalent patient as the given argument.","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"didymental"},"content":"    public boolean contains(Patient toCheck) {","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePatient);","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"     * Adds a patient to the list.","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"     * The patient must not already exist in the list.","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"    public void add(Patient toAdd) {","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"     * Replaces the patient {@code target} in the list with {@code editedPatient}.","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list.","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"didymental"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":81,"author":{"gitId":"huyuxin0429"},"content":"        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"didymental"},"content":"        internalList.set(index, editedPatient);","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"     * Removes the equivalent patient from the list.","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"     * The patient must exist in the list.","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"didymental"},"content":"    public void remove(Patient toRemove) {","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"joshenx"},"content":"    public void setPatients(UniquePatientList replacement) {","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"joshenx"},"content":"     * Replaces the contents of this list with {@code patients}.","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"joshenx"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":108,"author":{"gitId":"joshenx"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"didymental"},"content":"        requireAllNonNull(patients);","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"joshenx"},"content":"        if (!patientsAreUnique(patients)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"joshenx"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":114,"author":{"gitId":"didymental"},"content":"        internalList.setAll(patients);","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":120,"author":{"gitId":"didymental"},"content":"    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"didymental"},"content":"    public Iterator\u003cPatient\u003e iterator() {","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"                || (other instanceof UniquePatientList // instanceof handles nulls","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"                        \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"joshenx"},"content":"     * Returns true if {@code patients} contains only unique patients.","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"joshenx"},"content":"    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {","lastModifiedDate":"2021-10-27"},{"lineNumber":145,"author":{"gitId":"didymental"},"content":"        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"didymental"},"content":"            for (int j \u003d i + 1; j \u003c patients.size(); j++) {","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"huyuxin0429"},"content":"                if (patients.get(i).isSamePatient(patients.get(j))) {","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"joshenx":33,"huyuxin0429":4,"-":88,"gycgabriel":17,"didymental":13}},{"path":"src/main/java/seedu/docit/model/patient/exceptions/DuplicatePatientException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient.exceptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":" * Signals that the operation will result in duplicate Patients (Patients are considered duplicates if","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":" * they have the same identity).","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"public class DuplicatePatientException extends RuntimeException {","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"    public DuplicatePatientException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"        super(\"Operation would result in duplicate patients\");","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":11}},{"path":"src/main/java/seedu/docit/model/patient/exceptions/PatientNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient.exceptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":" * Signals that the operation is unable to find the specified patient.","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"public class PatientNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":6}},{"path":"src/main/java/seedu/docit/model/prescription/Prescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.prescription;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"public class Prescription {","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"    private String medicine;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"    private String volume;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"    private String duration;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"     * Creates a new Prescription object with medicine, volume, duration and associated appointment","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"     * @param medicine Name of medicine","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"     * @param volume Volume of medicine","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"     * @param duration Duration of medicine intake","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"    public Prescription(String medicine, String volume, String duration) {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"        this.medicine \u003d medicine.toLowerCase();","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"        this.volume \u003d volume.toLowerCase();","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"        this.duration \u003d duration.toLowerCase();","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"    public String getDuration() {","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"        return duration;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"    public String getMedicine() {","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"        return medicine;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"    public String getVolume() {","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"        return volume;","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"    public boolean medicineContain(String term) {","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        return medicine.contains(term);","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"    public boolean volumeContain(String term) {","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"        return volume.contains(term);","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"    public boolean durationContain(String term) {","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"        return duration.contains(term);","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"     * A looser definition of equality where two prescriptions are considered the same if they have the same medicine","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"     * name.","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"     * @param p The other prescription","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"     * @return Boolean indicating if the two prescriptions have the same name.","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"    public boolean hasSameMedicalName(Prescription p) {","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"huyuxin0429"},"content":"        return this.getMedicine().equals(p.getMedicine());","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"    public String toUiFormat() {","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"didymental"},"content":"        return medicine + \" | \" + volume + \" | \" + duration;","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"huyuxin0429"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"huyuxin0429"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"huyuxin0429"},"content":"            return true;","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"huyuxin0429"},"content":"            return false;","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"huyuxin0429"},"content":"        Prescription that \u003d (Prescription) o;","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"huyuxin0429"},"content":"        return that.getDuration().equals(getDuration())","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"huyuxin0429"},"content":"                \u0026\u0026 that.getMedicine().equals(getMedicine())","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"huyuxin0429"},"content":"                \u0026\u0026 that.getVolume().equals(getVolume());","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"huyuxin0429"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"huyuxin0429"},"content":"        return Objects.hash(getMedicine(), getVolume(), getDuration());","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"huyuxin0429"},"content":"    public String toString() {","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"huyuxin0429"},"content":"        return \"Medicine: \" + medicine","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"huyuxin0429"},"content":"                + \", Volume: \" + volume","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"huyuxin0429"},"content":"                + \", Duration: \" + duration;","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":4,"huyuxin0429":78,"didymental":4}},{"path":"src/main/java/seedu/docit/model/prescription/exceptions/DuplicatePrescriptionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.prescription.exceptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"public class DuplicatePrescriptionException extends RuntimeException {","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"    public DuplicatePrescriptionException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"        super(\"Operation would result in duplicate prescriptions\");","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":1,"huyuxin0429":7}},{"path":"src/main/java/seedu/docit/model/prescription/exceptions/MedicineNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.prescription.exceptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"public class MedicineNotFoundException extends RuntimeException {","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"    public MedicineNotFoundException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"        super(\"Medicine name not found in prescription list\");","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":1,"huyuxin0429":6}},{"path":"src/main/java/seedu/docit/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ArchivedAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.MedicalHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"    private static Patient patientAlex \u003d new Patient(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"            new Email(\"alexyeoh\" + \"@example\" + \".com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"            MedicalHistory.EMPTY_MEDICAL_HISTORY);","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    public static Patient[] getSamplePatients() {","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"        MedicalHistory berniceMh \u003d MedicalHistory.generate();","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"        berniceMh.add(\"diabetes\", \"1 Oct 1999\");","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"        MedicalHistory charlotteMh \u003d MedicalHistory.generate();","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"        charlotteMh.add(\"scoliosis\", \"2 May 2000\");","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"        MedicalHistory davidMh \u003d MedicalHistory.generate();","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"        davidMh.add(\"stage 1a cancer\", \"5 Sep 2005\");","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"        MedicalHistory irfanMh \u003d MedicalHistory.generate();","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"        irfanMh.add(\"high blood pressure\", \"8 Aug 2010\");","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"        MedicalHistory royMh \u003d MedicalHistory.generate();","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"        royMh.add(\"anxiety\", \"8 Aug 2017\");","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"        return new Patient[] {","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"            patientAlex,","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"            new Patient(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), berniceMh),","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"            new Patient(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"rish-16"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), charlotteMh),","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"            new Patient(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), davidMh),","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"            new Patient(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), irfanMh),","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"            new Patient(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"rish-16"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), royMh)","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"    // TODO: Improve sample appointments","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"    public static Appointment[] getSampleAppointments() {","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"        return new Appointment[] {","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"            new Appointment(patientAlex, LocalDateTime.of(2040, 10, 17, 12, 0))","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"        };","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"    public static Appointment[] getSampleArchivedAppointments() {","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"        return new Appointment[] {","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"            new Appointment(patientAlex, LocalDateTime.of(2019, 10, 17, 12, 0))","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"        };","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"        for (Patient samplePatient : getSamplePatients()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"            sampleAb.addPatient(samplePatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"    public static ReadOnlyAppointmentBook getSampleAppointmentBook() {","lastModifiedDate":"2021-10-17"},{"lineNumber":80,"author":{"gitId":"gycgabriel"},"content":"        AppointmentBook sampleAb \u003d new AppointmentBook();","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"        for (Appointment sampleAppointment : getSampleAppointments()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"gycgabriel"},"content":"            sampleAb.addAppointment(sampleAppointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"        return sampleAb;","lastModifiedDate":"2021-10-17"},{"lineNumber":85,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"joshenx"},"content":"    public static ReadOnlyAppointmentBook getSampleArchivedAppointmentBook() {","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"joshenx"},"content":"        ArchivedAppointmentBook sampleAb \u003d new ArchivedAppointmentBook();","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"        for (Appointment sampleAppointment : getSampleArchivedAppointments()) {","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"            sampleAb.addAppointment(sampleAppointment);","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"        return sampleAb;","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"rish-16":6,"joshenx":28,"-":17,"gycgabriel":22,"didymental":21}},{"path":"src/main/java/seedu/docit/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":" * Represents a storage for {@link AddressBook}.","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"     * @throws IOException if there was any problem when saving to the storage.","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"joshenx":5,"huyuxin0429":3,"-":41}},{"path":"src/main/java/seedu/docit/storage/AppointmentBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":" * Represents a storage for {@link AppointmentBook}.","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"gycgabriel"},"content":"public interface AppointmentBookStorage {","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"    Path getAppointmentBookFilePath();","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"     * Returns AppointmentBook data as a {@link ReadOnlyAppointmentBook}. Returns {@code Optional.empty()} if storage","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"     * file is not found.","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"     * @param addressBook address book.","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"     * @throws IOException             if there was any problem when reading from the storage.","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"        throws DataConversionException, IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"     * @throws IOException              if there was any problem when reading from the storage.","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"     * @see #getAppointmentBookFilePath()","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"    Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"        throws DataConversionException, IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"     * Saves the given {@link ReadOnlyAppointmentBook} to the storage.","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"     * @param appointmentBook cannot be null.","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"     * @param addressBook     address book.","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"    void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"        throws IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"     * @throws IOException              if there was any problem when saving to the storage.","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"     * @see #saveAppointmentBook(ReadOnlyAppointmentBook, ReadOnlyAddressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"    void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"        throws IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"joshenx":6,"huyuxin0429":3,"gycgabriel":48}},{"path":"src/main/java/seedu/docit/storage/ArchivedAppointmentBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":" * Represents a storage for {@link AppointmentBook}.","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"public interface ArchivedAppointmentBookStorage {","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    Path getArchivedAppointmentBookFilePath();","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"     * Returns AppointmentBook data as a {@link ReadOnlyAppointmentBook}.","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"    Optional\u003cReadOnlyAppointmentBook\u003e readArchivedAppointmentBook(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"            throws DataConversionException, IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"     * @see #getArchivedAppointmentBookFilePath()","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"    Optional\u003cReadOnlyAppointmentBook\u003e readArchivedAppointmentBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"            throws DataConversionException, IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"     * Saves the given {@link ReadOnlyAppointmentBook} to the storage.","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"     * @param appointmentBook cannot be null.","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"    void saveArchivedAppointmentBook(ReadOnlyAppointmentBook appointmentBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"                                     ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"     * @see #saveArchivedAppointmentBook(ReadOnlyAppointmentBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"    void saveArchivedAppointmentBook(ReadOnlyAppointmentBook appointmentBook, ReadOnlyAddressBook addressBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"                                     Path filePath) throws IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"joshenx":42,"gycgabriel":8}},{"path":"src/main/java/seedu/docit/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"import java.util.List;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"gycgabriel"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"import seedu.docit.model.prescription.Prescription;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"    private final String patientIndex;","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    private final String datetime;","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"    private final List\u003cJsonAdaptedPrescription\u003e prescriptionList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details.","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    @JsonCreator public JsonAdaptedAppointment(@JsonProperty(\"patientId\") String patientIndex,","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"        @JsonProperty(\"datetime\") String datetime, @JsonProperty(\"prescriptionList\")","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"                                                       List\u003cJsonAdaptedPrescription\u003e prescriptionList) {","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"        if (prescriptionList !\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"            this.prescriptionList.addAll(prescriptionList);","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    public JsonAdaptedAppointment(Appointment source, ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"        patientIndex \u003d Integer.toString(addressBook.getIndexOfPatient(source.getPatient()).getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"        datetime \u003d source.getInputFormattedDatetimeString();","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"        prescriptionList.addAll(source.getPrescriptions()","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"                        .stream().map(JsonAdaptedPrescription::new)","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"huyuxin0429"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object.","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment.","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"    public Appointment toModelType(ReadOnlyAddressBook addressBook) throws IllegalValueException {","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"        if (patientIndex \u003d\u003d null) {","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Index.class.getSimpleName()));","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"        Index modelPatientIndex;","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"            modelPatientIndex \u003d Index.fromZeroBased(Integer.parseInt(patientIndex));","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"gycgabriel"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"gycgabriel"},"content":"            throw new IllegalValueException(\"Patient index must be an integer.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":74,"author":{"gitId":"gycgabriel"},"content":"        Patient patientToAppointment \u003d addressBook.getPatientOfIndex(modelPatientIndex);","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"        if (patientToAppointment \u003d\u003d null) {","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"            throw new IllegalValueException(\"Patient that has appointment does not exist.\");","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"gycgabriel"},"content":"        if (datetime \u003d\u003d null) {","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"gycgabriel"},"content":"                String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName()));","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"gycgabriel"},"content":"        LocalDateTime localDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"gycgabriel"},"content":"            localDateTime \u003d ParserUtil.parseDateTime(datetime, ParserUtil.INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"gycgabriel"},"content":"            throw new IllegalValueException(LocalDateTime.class.getSimpleName() + \" is of incorrect format.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"huyuxin0429"},"content":"        if (prescriptionList \u003d\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"huyuxin0429"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Appointment List\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"huyuxin0429"},"content":"        Set\u003cPrescription\u003e newPrescriptionList \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"huyuxin0429"},"content":"        for (JsonAdaptedPrescription prescription : prescriptionList) {","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"huyuxin0429"},"content":"            Prescription newPrescription \u003d new Prescription(","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"huyuxin0429"},"content":"                    prescription.getPrescriptionMedicine(),","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"huyuxin0429"},"content":"                    prescription.getPrescriptionVolume(),","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"huyuxin0429"},"content":"                    prescription.getPrescriptionDuration());","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"huyuxin0429"},"content":"            newPrescriptionList.add(newPrescription);","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"huyuxin0429"},"content":"        return new Appointment(patientToAppointment, localDateTime, newPrescriptionList);","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"joshenx":9,"huyuxin0429":29,"gycgabriel":70}},{"path":"src/main/java/seedu/docit/storage/JsonAdaptedMedicalEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"didymental"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"didymental"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"didymental"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"didymental"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"didymental"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"import seedu.docit.model.patient.MedicalHistory;","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"didymental"},"content":"/**","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":" * Jackson-friendly version of {@link MedicalHistory}.","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":" */","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"public class JsonAdaptedMedicalEntry {","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"    private final String description;","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"    private final String date;","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"     * Constructs a {@code JsonAdaptedMedicalEntry} with the given {@code desc, dateOfRecord}.","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"    @JsonCreator","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"    public JsonAdaptedMedicalEntry(@JsonProperty(\"description\") String desc,","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"                                   @JsonProperty(\"date\") String dateOfRecord) {","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"        this.description \u003d desc;","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"        this.date \u003d dateOfRecord;","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"     * Converts a given {@code MedicalEntry} into this class for Jackson use.","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"    public JsonAdaptedMedicalEntry(MedicalHistory.MedicalEntry source) {","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"        this.description \u003d source.getDescription();","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"        this.date \u003d source.getDateString();","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"    public String getDescription() {","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"        return description;","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"    public String getDateString() {","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"        return date;","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"     * Converts this Jackson-friendly adapted MedicalEntry object into the model\u0027s {@code MedicalHistory} object.","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"     **/","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"    public MedicalHistory.MedicalEntry toModelType() throws IllegalValueException {","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"        LocalDate dateOfRecord \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"d MMM uuuu\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"didymental"},"content":"        return new MedicalHistory.MedicalEntry(description, dateOfRecord);","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"joshenx":4,"didymental":50}},{"path":"src/main/java/seedu/docit/storage/JsonAdaptedPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.MedicalHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":" * Jackson-friendly version of {@link Patient}.","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"public class JsonAdaptedPatient {","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"    private final List\u003cJsonAdaptedMedicalEntry\u003e medicalHistory;","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"     * Constructs a {@code JsonAdaptedPatient} with the given patient details.","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"                              @JsonProperty(\"email\") String email, @JsonProperty(\"docit\") String address,","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"                              @JsonProperty(\"medicalHistory\") List\u003cJsonAdaptedMedicalEntry\u003e medicalHistory) {","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"        this.medicalHistory \u003d medicalHistory;","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"     * Converts a given {@code Patient} into this class for Jackson use.","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"    public JsonAdaptedPatient(Patient source) {","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"didymental"},"content":"        medicalHistory \u003d source.getMedicalHistory()","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"                            .toList()","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"didymental"},"content":"                            .stream()","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"didymental"},"content":"                            .filter(x -\u003e x !\u003d null)","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"                            .map(x -\u003e new JsonAdaptedMedicalEntry(x.getDescription(), x.getDateString()))","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"didymental"},"content":"                            .collect(Collectors.toList());","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object.","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted patient.","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"didymental"},"content":"    public Patient toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"didymental"},"content":"        MedicalHistory modelMedicalHistory \u003d MedicalHistory.generate();","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"didymental"},"content":"        for (JsonAdaptedMedicalEntry medicalEntry: medicalHistory) {","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"didymental"},"content":"            modelMedicalHistory.add(medicalEntry.getDescription(), medicalEntry.getDateString());","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"didymental"},"content":"        if (medicalHistory.size() \u003d\u003d 0) {","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"didymental"},"content":"            modelMedicalHistory \u003d MedicalHistory.EMPTY_MEDICAL_HISTORY;","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"rish-16"},"content":"        return new Patient(modelName, modelPhone, modelEmail, modelAddress, modelMedicalHistory);","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"rish-16":1,"joshenx":17,"-":72,"didymental":21}},{"path":"src/main/java/seedu/docit/storage/JsonAdaptedPrescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"huyuxin0429"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"import seedu.docit.model.prescription.Prescription;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"/**","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":" * Jackson-friendly version of {@link Prescription}.","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":" */","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"public class JsonAdaptedPrescription {","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"    private final String volume;","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"    private final String medicine;","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"    private final String duration;","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"     * Constructs a {@code JsonAdaptedPrescription} with the given {@code volume, medicine, duration}.","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"    public JsonAdaptedPrescription(@JsonProperty(\"volume\") String volume,","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"                                   @JsonProperty(\"medicine\") String medicine,","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"                                   @JsonProperty(\"duration\") String duration) {","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"        this.volume \u003d volume;","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"        this.medicine \u003d medicine;","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"     * Converts a given {@code Prescription} into this class for Jackson use.","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"    public JsonAdaptedPrescription(Prescription source) {","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"        this.volume \u003d source.getVolume();","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"        this.duration \u003d source.getDuration();","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        this.medicine \u003d source.getMedicine();","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"    public String getPrescriptionMedicine() {","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"        return medicine;","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"    public String getPrescriptionVolume() {","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"        return volume;","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"    public String getPrescriptionDuration() {","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"        return duration;","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"     * Converts this Jackson-friendly adapted prescription object into the model\u0027s {@code Prescription} object.","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"     **/","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"huyuxin0429"},"content":"    public Prescription toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"huyuxin0429"},"content":"        return new Prescription(medicine, volume, duration);","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"joshenx":3,"huyuxin0429":55}},{"path":"src/main/java/seedu/docit/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.FileUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.JsonUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"joshenx":7,"-":73}},{"path":"src/main/java/seedu/docit/storage/JsonAppointmentBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.FileUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.JsonUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":" * A class to access AppointmentBook data stored as a json file on the hard disk.","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"public class JsonAppointmentBookStorage implements AppointmentBookStorage {","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAppointmentBookStorage.class);","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"    private Path filePath;","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"    public JsonAppointmentBookStorage(Path filePath) {","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"    public Path getAppointmentBookFilePath() {","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"        return filePath;","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"        throws DataConversionException {","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"        return readAppointmentBook(addressBook, filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"     * Similar to {@link AppointmentBookStorage#readAppointmentBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"     * @param addressBook address book","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"     * @param filePath    location of the data. Cannot be null.","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"        throws DataConversionException {","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"        Optional\u003cJsonSerializableAppointmentBook\u003e jsonAppointmentBook \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"            JsonUtil.readJsonFile(filePath, JsonSerializableAppointmentBook.class);","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"        if (!jsonAppointmentBook.isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"            return Optional.empty();","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"        try {","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"            return Optional.of(jsonAppointmentBook.get().toModelType(addressBook));","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"    public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"        throws IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"        saveAppointmentBook(appointmentBook, addressBook, filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"     * Similar to {@link AppointmentBookStorage#saveAppointmentBook(ReadOnlyAppointmentBook, ReadOnlyAddressBook)}.","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"gycgabriel"},"content":"     * @param addressBook address book","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"     * @param filePath    location of the data. Cannot be null.","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":78,"author":{"gitId":"gycgabriel"},"content":"    public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, ReadOnlyAddressBook addressBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"gycgabriel"},"content":"        Path filePath) throws IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(appointmentBook);","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"gycgabriel"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAppointmentBook(appointmentBook, addressBook), filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"joshenx":8,"gycgabriel":79}},{"path":"src/main/java/seedu/docit/storage/JsonArchivedAppointmentBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.FileUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.JsonUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":" * A class to access AppointmentBook data stored as a json file on the hard disk.","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"public class JsonArchivedAppointmentBookStorage implements ArchivedAppointmentBookStorage {","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonArchivedAppointmentBookStorage.class);","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"    private Path filePath;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"    public JsonArchivedAppointmentBookStorage(Path filePath) {","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"    public Path getArchivedAppointmentBookFilePath() {","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"        return filePath;","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    public Optional\u003cReadOnlyAppointmentBook\u003e readArchivedAppointmentBook(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"            throws DataConversionException {","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"        return readArchivedAppointmentBook(addressBook, filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"     * Similar to {@link #readArchivedAppointmentBook()}.","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"    public Optional\u003cReadOnlyAppointmentBook\u003e readArchivedAppointmentBook(ReadOnlyAddressBook addressBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"                                                                         Path filePath) throws DataConversionException {","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"        Optional\u003cJsonSerializableArchivedAppointmentBook\u003e jsonAppointmentBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"                filePath, JsonSerializableArchivedAppointmentBook.class);","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"        if (!jsonAppointmentBook.isPresent()) {","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"            return Optional.empty();","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"        try {","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"            return Optional.of(jsonAppointmentBook.get().toModelType(addressBook));","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"gycgabriel"},"content":"    public void saveArchivedAppointmentBook(ReadOnlyAppointmentBook appointmentBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"                                            ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"        saveArchivedAppointmentBook(appointmentBook, addressBook, filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"     * Similar to {@link #saveArchivedAppointmentBook(ReadOnlyAppointmentBook)}.","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"gycgabriel"},"content":"    public void saveArchivedAppointmentBook(ReadOnlyAppointmentBook appointmentBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"gycgabriel"},"content":"                                            ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"        requireNonNull(appointmentBook);","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"joshenx"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"gycgabriel"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableArchivedAppointmentBook(appointmentBook, addressBook), filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"joshenx":73,"gycgabriel":12}},{"path":"src/main/java/seedu/docit/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"public class JsonSerializableAddressBook {","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patient list contains duplicate patient(s).\";","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given patients.","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        this.patients.addAll(patients);","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"            Patient patient \u003d jsonAdaptedPatient.toModelType();","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"            if (addressBook.hasPatient(patient)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"            addressBook.addPatient(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"joshenx":17,"-":43}},{"path":"src/main/java/seedu/docit/storage/JsonSerializableAppointmentBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"gycgabriel"},"content":"import java.util.List;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"gycgabriel"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"gycgabriel"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"gycgabriel"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"gycgabriel"},"content":" * An Immutable AppointmentBook that is serializable to JSON format.","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"gycgabriel"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"gycgabriel"},"content":"@JsonRootName(value \u003d \"appointmentBook\")","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"public class JsonSerializableAppointmentBook {","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"gycgabriel"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"Appointments list contains duplicate appointment(s).\";","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"     * Constructs a {@code JsonSerializableAppointmentBook} with the given appointments.","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"gycgabriel"},"content":"    public JsonSerializableAppointmentBook(","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"        @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"        this.appointments.addAll(appointments);","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"gycgabriel"},"content":"     * Converts a given {@code ReadOnlyAppointmentBook} into this class for Jackson use.","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"     * @param source      future changes to this will not affect the created {@code JsonSerializableAppointmentBook}.","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"     * @param addressBook {@code AddressBook} that this appointment book references","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"    public JsonSerializableAppointmentBook(ReadOnlyAppointmentBook source, ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"        appointments.addAll(source.getAppointmentList().stream().map(x -\u003e new JsonAdaptedAppointment(x, addressBook))","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"gycgabriel"},"content":"            .collect(Collectors.toList()));","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"     * Converts this address book into the model\u0027s {@code AppointmentBook} object.","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"    public AppointmentBook toModelType(ReadOnlyAddressBook addressBook) throws IllegalValueException {","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"        AppointmentBook appointmentBook \u003d new AppointmentBook();","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"            Appointment appointment \u003d jsonAdaptedAppointment.toModelType(addressBook);","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"            if (appointmentBook.hasAppointment(appointment)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"gycgabriel"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"gycgabriel"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"gycgabriel"},"content":"            appointmentBook.addAppointment(appointment);","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBook;","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"gycgabriel"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"joshenx":7,"gycgabriel":57}},{"path":"src/main/java/seedu/docit/storage/JsonSerializableArchivedAppointmentBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ArchivedAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":" * An Immutable AppointmentBook that is serializable to JSON format.","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"@JsonRootName(value \u003d \"archivedAppointmentBook\")","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"class JsonSerializableArchivedAppointmentBook {","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"Appointments list contains duplicate appointment(s).\";","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e archivedAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"     * Constructs a {@code JsonSerializableAppointmentBook} with the given appointments.","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"    public JsonSerializableArchivedAppointmentBook(","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"            @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"        this.archivedAppointments.addAll(appointments);","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"     * Converts a given {@code ReadOnlyAppointmentBook} into this class for Jackson use.","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAppointmentBook}.","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"    public JsonSerializableArchivedAppointmentBook(ReadOnlyAppointmentBook source, ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"        archivedAppointments.addAll(source.getAppointmentList().stream()","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"            .map(x -\u003e new JsonAdaptedAppointment(x, addressBook))","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"            .collect(Collectors.toList()));","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"     * Converts this address book into the model\u0027s {@code AppointmentBook} object.","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"gycgabriel"},"content":"    public ArchivedAppointmentBook toModelType(ReadOnlyAddressBook addressBook) throws IllegalValueException {","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"        ArchivedAppointmentBook appointmentBook \u003d new ArchivedAppointmentBook();","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : archivedAppointments) {","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"            Appointment archivedAppointment \u003d jsonAdaptedAppointment.toModelType(addressBook);","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"            if (appointmentBook.hasAppointment(archivedAppointment)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"            appointmentBook.addAppointment(archivedAppointment);","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"        return appointmentBook;","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"joshenx":59,"gycgabriel":5}},{"path":"src/main/java/seedu/docit/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.JsonUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"joshenx":5,"-":42}},{"path":"src/main/java/seedu/docit/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"public interface Storage extends AddressBookStorage, AppointmentBookStorage,","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"        ArchivedAppointmentBookStorage, UserPrefsStorage {","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"    Path getAppointmentBookFilePath();","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"    Path getArchivedAppointmentBookFilePath();","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"    Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"gycgabriel"},"content":"        throws DataConversionException, IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"gycgabriel"},"content":"    Optional\u003cReadOnlyAppointmentBook\u003e readArchivedAppointmentBook(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"            throws DataConversionException, IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"    void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"        throws IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"    void saveArchivedAppointmentBook(ReadOnlyAppointmentBook archivedAppointmentBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"                                     ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"joshenx":14,"-":26,"gycgabriel":15}},{"path":"src/main/java/seedu/docit/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"    private AppointmentBookStorage appointmentBookStorage;","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    private ArchivedAppointmentBookStorage archivedAppointmentBookStorage;","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"    public StorageManager(AddressBookStorage addressBookStorage,","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"        AppointmentBookStorage appointmentBookStorage,","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        ArchivedAppointmentBookStorage archivedAppointmentBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"        this.appointmentBookStorage \u003d appointmentBookStorage;","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"        this.archivedAppointmentBookStorage \u003d archivedAppointmentBookStorage;","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"gycgabriel"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":90,"author":{"gitId":"gycgabriel"},"content":"    public Path getAppointmentBookFilePath() {","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBookStorage.getAppointmentBookFilePath();","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"    public Path getArchivedAppointmentBookFilePath() {","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"        return archivedAppointmentBookStorage.getArchivedAppointmentBookFilePath();","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"gycgabriel"},"content":"    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"gycgabriel"},"content":"        throws DataConversionException, IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"gycgabriel"},"content":"        return readAppointmentBook(addressBook, appointmentBookStorage.getAppointmentBookFilePath());","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":105,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"gycgabriel"},"content":"        throws DataConversionException, IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"gycgabriel"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"gycgabriel"},"content":"        return appointmentBookStorage.readAppointmentBook(addressBook, filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"gycgabriel"},"content":"    public Optional\u003cReadOnlyAppointmentBook\u003e readArchivedAppointmentBook(ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"gycgabriel"},"content":"            throws DataConversionException, IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"gycgabriel"},"content":"        return readArchivedAppointmentBook(addressBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"gycgabriel"},"content":"                archivedAppointmentBookStorage.getArchivedAppointmentBookFilePath());","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"gycgabriel"},"content":"    public Optional\u003cReadOnlyAppointmentBook\u003e readArchivedAppointmentBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"gycgabriel"},"content":"            throws DataConversionException, IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"joshenx"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":124,"author":{"gitId":"gycgabriel"},"content":"        return archivedAppointmentBookStorage.readArchivedAppointmentBook(addressBook, filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"gycgabriel"},"content":"    public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, ReadOnlyAddressBook addressBook)","lastModifiedDate":"2021-10-19"},{"lineNumber":129,"author":{"gitId":"gycgabriel"},"content":"        throws IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":130,"author":{"gitId":"gycgabriel"},"content":"        saveAppointmentBook(appointmentBook, addressBook, appointmentBookStorage.getAppointmentBookFilePath());","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":132,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":133,"author":{"gitId":"gycgabriel"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":134,"author":{"gitId":"gycgabriel"},"content":"    public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, ReadOnlyAddressBook addressBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":135,"author":{"gitId":"gycgabriel"},"content":"        Path filePath) throws IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"gycgabriel"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-10-17"},{"lineNumber":137,"author":{"gitId":"gycgabriel"},"content":"        appointmentBookStorage.saveAppointmentBook(appointmentBook, addressBook, filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":138,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":139,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":140,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"gycgabriel"},"content":"    public void saveArchivedAppointmentBook(ReadOnlyAppointmentBook archivedAppointmentBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":142,"author":{"gitId":"gycgabriel"},"content":"                                            ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"gycgabriel"},"content":"        saveAppointmentBook(archivedAppointmentBook, addressBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":144,"author":{"gitId":"joshenx"},"content":"                archivedAppointmentBookStorage.getArchivedAppointmentBookFilePath());","lastModifiedDate":"2021-10-19"},{"lineNumber":145,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":148,"author":{"gitId":"joshenx"},"content":"    public void saveArchivedAppointmentBook(ReadOnlyAppointmentBook archivedAppointmentBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":149,"author":{"gitId":"gycgabriel"},"content":"                                            ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":150,"author":{"gitId":"joshenx"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":151,"author":{"gitId":"gycgabriel"},"content":"        archivedAppointmentBookStorage.saveArchivedAppointmentBook(archivedAppointmentBook, addressBook, filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":31,"-":72,"gycgabriel":50}},{"path":"src/main/java/seedu/docit/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":" * Represents a storage for {@link UserPrefs}.","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"     * Saves the given {@link ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"joshenx":6,"-":30}},{"path":"src/main/java/seedu/docit/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":" * An UI component that displays information of an {@code Appointment}.","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    private static final String PHONE_ICON \u003d \"\\uD83D\\uDCDE\\t\";","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    private static final String DATE_ICON \u003d \"\\uD83D\\uDCC5\\t\";","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    private static final String TIME_ICON \u003d \"\\u0000\\u23f0\\t\";","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    public final Appointment appointment;","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"    private HBox apptCardPane;","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    private Label name;","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"    private Label id;","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"    private Label phone;","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"    private Label date;","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"    private Label time;","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"    private Label prescription;","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"    @FXML","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"    private VBox prescriptionContainer;","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"    @FXML","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"    private FlowPane prescriptions;","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"    private Label isToday;","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"     * Creates a {@code AppointmentCode} with the given {@code Appointment} and index to display.","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"        super(FXML);","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"        Patient patient \u003d appointment.getPatient();","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"        name.setText(patient.getName().fullName);","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"        phone.setText(PHONE_ICON + patient.getPhone().value);","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"        date.setText(DATE_ICON + appointment.getFormattedDateString());","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"        time.setText(TIME_ICON + appointment.getFormattedTimeString());","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"didymental"},"content":"        if (appointment.getPrescriptions().size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"didymental"},"content":"            prescriptionContainer.setVisible(false);","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"didymental"},"content":"            prescription.setVisible(false);","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"huyuxin0429"},"content":"        appointment.getPrescriptions().stream()","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"               .sorted(Comparator.comparing(presctn -\u003e presctn.getMedicine()))","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"               .forEach(presctn -\u003e prescriptions.getChildren().add(new Label(presctn.toUiFormat())));","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"        isToday.setVisible(appointment.isToday());","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"joshenx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"            return true;","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"joshenx"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"        if (!(other instanceof AppointmentCard)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"            return false;","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"        // state check","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"        AppointmentCard card \u003d (AppointmentCard) other;","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"                \u0026\u0026 appointment.equals(card.appointment);","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"joshenx":84,"huyuxin0429":1,"didymental":13}},{"path":"src/main/java/seedu/docit/ui/AppointmentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":" * Panel containing the list of apointments.","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    private ListView\u003cAppointment\u003e appointmentListView;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"     * Creates a {@code AppointmentListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"        super(FXML);","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"        appointmentListView.setItems(appointmentList);","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Appointment} using a {@code AppointmentCard}.","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"    private static class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"        @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"        protected void updateItem(Appointment appointment, boolean empty) {","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"            if (empty) {","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"                setText(null);","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"            } else if (appointment !\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"            } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"                setText(null);","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"joshenx":45,"didymental":7}},{"path":"src/main/java/seedu/docit/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"didymental"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.Logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.CommandResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":26,"author":{"gitId":"didymental"},"content":"    @FXML","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"    private Button sendButton;","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"         * @see Logic#execute(String)","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"joshenx":6,"-":80,"didymental":4}},{"path":"src/main/java/seedu/docit/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s1-cs2103-w14-1.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"joshenx":3,"-":99}},{"path":"src/main/java/seedu/docit/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import javafx.scene.control.TabPane;","lastModifiedDate":"2021-11-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.Logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.CommandResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"    private PatientListPanel patientListPanel;","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"    private AppointmentListPanel appointmentListPanel;","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"    private AppointmentListPanel archivedAppointmentListPanel;","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"    private Button exitButton;","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    private Button helpButton;","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"    private StackPane patientListPanelPlaceholder;","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"    private StackPane apptListPanelPlaceholder;","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"    private StackPane archiveListPanelPlaceholder;","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"    private TabPane tabsPlaceholder;","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"        setAccelerator(helpButton, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"joshenx"},"content":"    private void setAccelerator(Button menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"joshenx"},"content":"        //menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"joshenx"},"content":"     * Fills up buttons with icons.","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"joshenx"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"joshenx"},"content":"     * @throws FileNotFoundException When images are not found.","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"    void fillButtons() throws FileNotFoundException {","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"joshenx"},"content":"        Image exitImage \u003d new Image(\"images/exitButton.png\");","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"joshenx"},"content":"        ImageView exitImageView \u003d new ImageView(exitImage);","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"joshenx"},"content":"        exitButton.setGraphic(exitImageView);","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"joshenx"},"content":"        Image helpImage \u003d new Image(\"images/helpButton.png\");","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"joshenx"},"content":"        ImageView helpImageView \u003d new ImageView(helpImage);","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"joshenx"},"content":"        helpButton.setGraphic(helpImageView);","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":147,"author":{"gitId":"joshenx"},"content":"        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());","lastModifiedDate":"2021-10-27"},{"lineNumber":148,"author":{"gitId":"joshenx"},"content":"        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"joshenx"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());","lastModifiedDate":"2021-10-21"},{"lineNumber":151,"author":{"gitId":"joshenx"},"content":"        apptListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"joshenx"},"content":"        archivedAppointmentListPanel \u003d new AppointmentListPanel(logic.getArchivedAppointmentList());","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"joshenx"},"content":"        archiveListPanelPlaceholder.getChildren().add(archivedAppointmentListPanel.getRoot());","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":179,"author":{"gitId":"joshenx"},"content":"     * Selects the Upcoming tab.","lastModifiedDate":"2021-11-01"},{"lineNumber":180,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":181,"author":{"gitId":"joshenx"},"content":"    private void handleShowUpcomingTab() {","lastModifiedDate":"2021-11-01"},{"lineNumber":182,"author":{"gitId":"joshenx"},"content":"        tabsPlaceholder.getSelectionModel().select(0);","lastModifiedDate":"2021-11-01"},{"lineNumber":183,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":184,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":185,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":186,"author":{"gitId":"joshenx"},"content":"     * Selects the Archived tab.","lastModifiedDate":"2021-11-01"},{"lineNumber":187,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":188,"author":{"gitId":"joshenx"},"content":"    private void handleShowArchivedTab() {","lastModifiedDate":"2021-11-01"},{"lineNumber":189,"author":{"gitId":"joshenx"},"content":"        tabsPlaceholder.getSelectionModel().select(1);","lastModifiedDate":"2021-11-01"},{"lineNumber":190,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":191,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":218,"author":{"gitId":"joshenx"},"content":"        Platform.exit();","lastModifiedDate":"2021-11-03"},{"lineNumber":219,"author":{"gitId":"joshenx"},"content":"        System.exit(0);","lastModifiedDate":"2021-11-03"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":222,"author":{"gitId":"joshenx"},"content":"    public PatientListPanel getPatientListPanel() {","lastModifiedDate":"2021-10-27"},{"lineNumber":223,"author":{"gitId":"joshenx"},"content":"        return patientListPanel;","lastModifiedDate":"2021-10-21"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"joshenx"},"content":"     * @see Logic#execute(String)","lastModifiedDate":"2021-10-27"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":239,"author":{"gitId":"joshenx"},"content":"            } else if (commandResult.isShowArchived()) {","lastModifiedDate":"2021-11-01"},{"lineNumber":240,"author":{"gitId":"joshenx"},"content":"                handleShowArchivedTab();","lastModifiedDate":"2021-11-01"},{"lineNumber":241,"author":{"gitId":"joshenx"},"content":"            } else {","lastModifiedDate":"2021-11-01"},{"lineNumber":242,"author":{"gitId":"joshenx"},"content":"                handleShowUpcomingTab();","lastModifiedDate":"2021-11-01"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"joshenx":77,"-":179}},{"path":"src/main/java/seedu/docit/ui/PatientCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":" * An UI component that displays information of a {@code Patient}.","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"public class PatientCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"    private static final String FXML \u003d \"PatientListCard.fxml\";","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"didymental"},"content":"    private static final String ADDRESS_ICON \u003d \"\\uD83C\\uDFE0\";","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"    private static final String EMAIL_ICON \u003d \"\\uD83D\\uDCE7\";","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"didymental"},"content":"    private static final String PHONE_ICON \u003d \"\\uD83D\\uDCDE\";","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"didymental"},"content":"    private static final String MEDICAL_HISTORY_ICON \u003d \"\\uD83C\\uDFE5\";","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"    public final Patient patient;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"    private Label medicalHistory;","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"     * Creates a {@code PatientCode} with the given {@code Patient} and index to display.","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"    public PatientCard(Patient patient, int displayedIndex) {","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"        name.setText(patient.getName().fullName);","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"didymental"},"content":"        phone.setText(PHONE_ICON + \"\\t\" + patient.getPhone().value);","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"        address.setText(ADDRESS_ICON + \"\\t\" + patient.getAddress().value);","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"didymental"},"content":"        email.setText(EMAIL_ICON + \"\\t\" + patient.getEmail().value);","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"didymental"},"content":"        medicalHistory.setText(patient.getMedicalHistory().display(MEDICAL_HISTORY_ICON));","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"        if (!(other instanceof PatientCard)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"        PatientCard card \u003d (PatientCard) other;","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"didymental"},"content":"                \u0026\u0026 patient.equals(card.patient);","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"joshenx":9,"-":54,"didymental":14}},{"path":"src/main/java/seedu/docit/ui/PatientListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":" * Panel containing the list of patients.","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"public class PatientListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"    private static final String FXML \u003d \"PatientListPanel.fxml\";","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    @FXML","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    private ListView\u003cPatient\u003e patientListView;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"     * Creates a {@code PatientListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"        super(FXML);","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"        patientListView.setItems(patientList);","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}.","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"    class PatientListViewCell extends ListCell\u003cPatient\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"        @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"        protected void updateItem(Patient patient, boolean empty) {","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"            super.updateItem(patient, empty);","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"            if (empty || patient \u003d\u003d null) {","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"                setText(null);","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"            } else {","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"            }","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":49}},{"path":"src/main/java/seedu/docit/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"joshenx":1,"-":27}},{"path":"src/main/java/seedu/docit/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":1,"-":27}},{"path":"src/main/java/seedu/docit/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"joshenx":1,"-":12}},{"path":"src/main/java/seedu/docit/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.MainApp;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.StringUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.Logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"            mainWindow.fillButtons();","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/LightTheme.css\");","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"joshenx":7,"-":79}},{"path":"src/main/java/seedu/docit/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.MainApp;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"joshenx":2,"-":86}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.control.Separator?\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"\u003cHBox fx:id\u003d\"apptCardPane\" styleClass\u003d\"pane-transparent\" stylesheets\u003d\"@LightTheme.css\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"    \u003cGridPane mouseTransparent\u003d\"true\" styleClass\u003d\"grid-pane\" stylesheets\u003d\"@LightTheme.css\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"      \u003cVBox fx:id\u003d\"appointmentVbox\" prefWidth\u003d\"100.0\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"              \u003cSplitPane dividerPositions\u003d\"0.25, 0.5\" prefHeight\u003d\"100.0\" prefWidth\u003d\"148.0\" stylesheets\u003d\"@LightTheme.css\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"                  \u003citems\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"                      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_bigger_label\" textAlignment\u003d\"RIGHT\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"                          \u003cminWidth\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"                              \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"                              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"                          \u003c/minWidth\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"                          \u003cpadding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"                          \u003c/padding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"                      \u003c/Label\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"                      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"                          \u003cpadding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"                              \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"                          \u003c/padding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"                          \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"                              \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"                                  \u003cHBox.margin\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"                                      \u003cInsets /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"                                  \u003c/HBox.margin\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"                              \u003c/Label\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"                              \u003copaqueInsets\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"                                  \u003cInsets /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"                              \u003c/opaqueInsets\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"                          \u003c/HBox\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"                          \u003cFlowPane fx:id\u003d\"tags\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"                              \u003cpadding\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"                                  \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"                              \u003c/padding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"                          \u003c/FlowPane\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"                          \u003cchildren\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"                            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"                          \u003c/children\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"                      \u003c/VBox\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"                      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"                          \u003cpadding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"                              \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"                          \u003c/padding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"                          \u003cchildren\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"                        \u003cLabel fx:id\u003d\"isToday\" alignment\u003d\"TOP_RIGHT\" contentDisplay\u003d\"RIGHT\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@LightTheme.css\" text\u003d\"TODAY\" textAlignment\u003d\"RIGHT\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"                              \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"                                  \u003copaqueInsets\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"                                      \u003cInsets /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"                                  \u003c/opaqueInsets\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"                                  \u003cchildren\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"                                      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_bigger_label\" text\u003d\"\\$date\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"                                          \u003cHBox.margin\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"                                              \u003cInsets /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"                                          \u003c/HBox.margin\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"                                      \u003c/Label\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"                                  \u003c/children\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"                              \u003c/HBox\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"                        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"                           \u003copaqueInsets\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"                              \u003cInsets /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"                           \u003c/opaqueInsets\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"                           \u003cchildren\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"joshenx"},"content":"                              \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_bigger_label\" text\u003d\"\\$time\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"                                 \u003cHBox.margin\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"                                    \u003cInsets /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"                                 \u003c/HBox.margin\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"                              \u003c/Label\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"joshenx"},"content":"                           \u003c/children\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"                        \u003c/HBox\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"joshenx"},"content":"                          \u003c/children\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"joshenx"},"content":"                      \u003c/VBox\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"joshenx"},"content":"                  \u003c/items\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"              \u003c/SplitPane\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"            \u003cSeparator prefWidth\u003d\"200.0\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"               \u003cVBox.margin\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"                  \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"               \u003c/VBox.margin\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"            \u003c/Separator\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"            \u003cSeparator prefWidth\u003d\"200.0\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"joshenx"},"content":"                  \u003cInsets top\u003d\"2.0\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"joshenx"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"joshenx"},"content":"               \u003cVBox.margin\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"joshenx"},"content":"                  \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"joshenx"},"content":"               \u003c/VBox.margin\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"joshenx"},"content":"            \u003c/Separator\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"didymental"},"content":"            \u003cVBox fx:id\u003d\"prescriptionContainer\" prefWidth\u003d\"148.0\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"joshenx"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"joshenx"},"content":"                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"joshenx"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"joshenx"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":108,"author":{"gitId":"joshenx"},"content":"                  \u003cLabel fx:id\u003d\"prescription\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"cell_small_label_bold\" text\u003d\"Prescriptions:\" textAlignment\u003d\"CENTER\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"joshenx"},"content":"                  \u003cFlowPane fx:id\u003d\"prescriptions\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"joshenx"},"content":"                     \u003cpadding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"joshenx"},"content":"                        \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"joshenx"},"content":"                     \u003c/padding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"joshenx"},"content":"                  \u003c/FlowPane\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"joshenx"},"content":"               \u003c/children\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"joshenx"},"content":"               \u003cVBox.margin\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":116,"author":{"gitId":"joshenx"},"content":"                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":117,"author":{"gitId":"joshenx"},"content":"               \u003c/VBox.margin\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":118,"author":{"gitId":"joshenx"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":119,"author":{"gitId":"joshenx"},"content":"         \u003c/children\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":120,"author":{"gitId":"joshenx"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"joshenx"},"content":"        \u003crowConstraints\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"joshenx"},"content":"            \u003cRowConstraints /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"joshenx"},"content":"        \u003c/rowConstraints\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"joshenx"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"joshenx":122,"didymental":3}},{"path":"src/main/resources/view/AppointmentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"  \u003cListView fx:id\u003d\"appointmentListView\" styleClass\u003d\"pane-transparent\" stylesheets\u003d\"@LightTheme.css\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"joshenx":8}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"didymental"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2018-04-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"  \u003cButton fx:id\u003d\"sendButton\" id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCommandEntered\"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"didymental"},"content":"          prefHeight\u003d\"41.0\" prefWidth\u003d\"100.0\" text\u003d\"Send\" StackPane.alignment\u003d\"CENTER_RIGHT\"/\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"joshenx":1,"-":8,"didymental":2}},{"path":"src/main/resources/view/Fonts.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@font-face {","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    font-family: \"Open Sans\";","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    src: url(\"/fonts/open-sans/OpenSans-Regular.ttf\");","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"@font-face {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    font-family: \"Open Sans SemiBold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    src: url(\"/fonts/open-sans/OpenSans-SemiBold.ttf\");","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@font-face {","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    src: url(\"/fonts/open-sans/OpenSans-Light.ttf\");","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"@font-face {","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    font-family: \"Open Sans Bold Italic\";","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    src: url(\"/fonts/open-sans/OpenSans-BoldItalic.ttf\");","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@font-face {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    font-family: \"Open Sans Extra Bold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    src: url(\"/fonts/open-sans/OpenSans-ExtraBold.ttf\");","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"@font-face {","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    font-family: \"Open Sans Extra Bold Italic\";","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    src: url(\"/fonts/open-sans/OpenSans-ExtraBoldItalic.ttf\");","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"@font-face {","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    font-family: \"Open Sans Italic\";","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    src: url(\"/fonts/open-sans/OpenSans-Italic.ttf\");","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"@font-face {","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    font-family: \"Open Sans Light Italic\";","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    src: url(\"/fonts/open-sans/OpenSans-LightItalic.ttf\");","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"@font-face {","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    font-family: \"Open Sans SemiBold Italic\";","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    src: url(\"/fonts/open-sans/OpenSans-SemiBoldItalic.ttf\");","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"@font-face {","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"    font-family: \"Segoe UI\";","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"    src: url(\"/fonts/segoe-ui/Segoe-UI.ttf\");","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"@font-face {","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    font-family: \"Segoe UI Italic\";","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"    src: url(\"/fonts/segoe-ui/Segoe-UI-Italic.ttf\");","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"@font-face {","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"    font-family: \"Segoe UI Bold Italic\";","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"    src: url(\"/fonts/segoe-ui/Segoe-UI-Bold-Italic.ttf\");","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"@font-face {","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"    font-family: \"Segoe UI Bold\";","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"    src: url(\"/fonts/segoe-ui/Segoe-UI-Bold.ttf\");","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"@font-face {","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"    font-family: \"Droid Sans Mono\";","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"    src: url(\"/fonts/droid-sans-mono/DroidSansMono.ttf\");","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"joshenx":25,"-":44}},{"path":"src/main/resources/view/HelpWindow.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#copyButton, #helpMessage {","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":".background {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: \"#FFFFFF\";","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"    background-color: #FFFFFF; /* Used in the default.html file */","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":".pane-without-border {","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"     -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"     -fx-border-color: derive(#eeeeee, 50%);","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"     -fx-border-width: 0px;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"#copyButton {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 5px;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    -fx-background-radius: 5px;","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #48C9B0;","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"#copyButton:hover {","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #75d6c4;","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.4), 7, 0, 1, 1);","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"#copyButton:pressed, #sendButton:default:hover:pressed {","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #3ac4a9;","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    -fx-effect: innershadow(gaussian, #666666, 7, 0, 0, 0)","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"joshenx":36,"-":2}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@HelpWindow.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"      \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"pane-without-border\" stylesheets\u003d\"@HelpWindow.css\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"              \u003cInsets right\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003c/Label\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"          \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" stylesheets\u003d\"@HelpWindow.css\" text\u003d\"Copy URL\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"              \u003cInsets left\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Button\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/children\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003copaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \u003c/opaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-12-01"}],"authorContributionMap":{"joshenx":3,"-":42}},{"path":"src/main/resources/view/LightTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: \"#FFFFFF\";","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"    background-color: #FFFFFF; /* Used in the default.html file */","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI Bold\";","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #444444;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"#isToday {","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI Bold\";","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #48C9B0;","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"    -fx-font-size: 24pt;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI Bold\";","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #444444;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    -fx-padding: 5;","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":".label-header-italic {","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    -fx-font-size: 24pt;","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI Italic\";","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #444444;","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"    -fx-padding: 5;","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":".tab-pane \u003e .tab-header-area {","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"  -fx-padding: 0;","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":".tab-pane \u003e .tab-header-area \u003e .tab-header-background {","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"  -fx-background-color: #E1E1E1, white;","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"  -fx-background-insets: 0, 0 0 0px 0;","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":".tab-pane \u003e .tab-header-area \u003e .headers-region \u003e .tab {","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"  -fx-background-color: white;","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"  -fx-background-insets: 0 0 0px 0;","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"  -fx-padding: 0.5em 1em;","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":".tab-pane \u003e .tab-header-area \u003e .headers-region \u003e .tab \u003e.tab-container \u003e.tab-label {","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"  -fx-text-fill: #aaaaaa;","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"  -fx-font-size: 12pt;","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"  -fx-font-family: \"Segoe UI Bold\";","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":".tab-pane \u003e .tab-header-area \u003e .headers-region \u003e .tab:selected {","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"  -fx-background-color: white, #48C9B0;","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"  -fx-background-insets: 0, 32px 7px 0px 7px;","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":".tab-pane \u003e .tab-header-area \u003e .headers-region \u003e .tab:selected \u003e.tab-container \u003e.tab-label {","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"joshenx"},"content":"  -fx-text-fill: #333333;","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"  -fx-font-size: 12pt;","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"  -fx-font-family: \"Segoe UI Bold\";","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"joshenx"},"content":".tab-pane \u003e .tab-header-area \u003e .headers-region \u003e .tab:selected \u003e.tab-container \u003e.focus-indicator {","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"  -fx-opacity: 0;","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"    -fx-base: #ffffff;","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"    -fx-control-inner-background: #ffffff;","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI Bold\";","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #444444;","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":".split-pane:horizontal \u003e .split-pane-divider {","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: transparent #e7eeed;","lastModifiedDate":"2021-10-28"},{"lineNumber":127,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"joshenx"},"content":"    -fx-border-insets: 15px 5px;","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"joshenx"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":".split-pane:vertical \u003e .split-pane-divider {","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: #e7eeed transparent;","lastModifiedDate":"2021-10-28"},{"lineNumber":135,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"joshenx"},"content":"    -fx-border-insets: 5px 0px 5px 0px;","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":140,"author":{"gitId":"joshenx"},"content":".separator *.line {","lastModifiedDate":"2021-10-28"},{"lineNumber":141,"author":{"gitId":"joshenx"},"content":"    -fx-border-style: solid;","lastModifiedDate":"2021-10-28"},{"lineNumber":142,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: #e7eeed;","lastModifiedDate":"2021-10-28"},{"lineNumber":143,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2021-10-28"},{"lineNumber":144,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":145,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":146,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":147,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 15px;","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"joshenx"},"content":"    -fx-background-insets: 5;","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"joshenx"},"content":"    -fx-padding: 5;","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":158,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"joshenx"},"content":"    -fx-label-padding: 5 5;","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"joshenx"},"content":"    -fx-graphic-text-gap : 5;","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"joshenx"},"content":"    -fx-padding: 5px;","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"joshenx"},"content":"    -fx-background-radius: 15px;","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"joshenx"},"content":"    -fx-background-insets: 3px;","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 15px;","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-21"},{"lineNumber":166,"author":{"gitId":"joshenx"},"content":"    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.1), 20, 0, 1, 1);","lastModifiedDate":"2021-11-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":170,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2021-11-06"},{"lineNumber":171,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: #d7dedd;","lastModifiedDate":"2021-11-06"},{"lineNumber":172,"author":{"gitId":"joshenx"},"content":"    -fx-border-insets: 3px;","lastModifiedDate":"2021-11-06"},{"lineNumber":173,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":176,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":177,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2021-11-06"},{"lineNumber":178,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: #d7dedd;","lastModifiedDate":"2021-11-06"},{"lineNumber":179,"author":{"gitId":"joshenx"},"content":"    -fx-border-insets: 3px;","lastModifiedDate":"2021-11-06"},{"lineNumber":180,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":183,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":184,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #fcfcff;","lastModifiedDate":"2021-10-21"},{"lineNumber":185,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 17px;","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 3px;","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"joshenx"},"content":"    -fx-border-insets: 3px;","lastModifiedDate":"2021-11-06"},{"lineNumber":188,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: transparent transparent transparent #48c9b0;","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"joshenx"},"content":"    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0, 2, 2);","lastModifiedDate":"2021-10-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":192,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":195,"author":{"gitId":"joshenx"},"content":".list-cell:filled:selected #apptCardPane {","lastModifiedDate":"2021-10-24"},{"lineNumber":196,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #222222;","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"joshenx"},"content":".cell_bigger_label {","lastModifiedDate":"2021-10-24"},{"lineNumber":209,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2021-10-24"},{"lineNumber":210,"author":{"gitId":"joshenx"},"content":"    -fx-font-size: 20px;","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-10-24"},{"lineNumber":212,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":213,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":214,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2021-10-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"didymental"},"content":".cell_small_label_bold {","lastModifiedDate":"2021-10-24"},{"lineNumber":221,"author":{"gitId":"didymental"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2021-10-24"},{"lineNumber":222,"author":{"gitId":"didymental"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2021-10-24"},{"lineNumber":223,"author":{"gitId":"didymental"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2021-10-24"},{"lineNumber":224,"author":{"gitId":"didymental"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-10-24"},{"lineNumber":225,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-10-24"},{"lineNumber":226,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":227,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":228,"author":{"gitId":"joshenx"},"content":"     -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":230,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":231,"author":{"gitId":"joshenx"},"content":".pane-without-border {","lastModifiedDate":"2021-10-21"},{"lineNumber":232,"author":{"gitId":"joshenx"},"content":"     -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"joshenx"},"content":"     -fx-border-color: derive(#eeeeee, 50%);","lastModifiedDate":"2021-10-21"},{"lineNumber":234,"author":{"gitId":"joshenx"},"content":"     -fx-border-width: 0px;","lastModifiedDate":"2021-10-21"},{"lineNumber":235,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":238,"author":{"gitId":"joshenx"},"content":"     -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"joshenx"},"content":"     -fx-border-color: #e7eeed transparent;","lastModifiedDate":"2021-10-28"},{"lineNumber":240,"author":{"gitId":"joshenx"},"content":"     -fx-border-width: 1px;","lastModifiedDate":"2021-10-21"},{"lineNumber":241,"author":{"gitId":"joshenx"},"content":"     -fx-border-radius: 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":242,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":244,"author":{"gitId":"joshenx"},"content":".pane-with-shadow {","lastModifiedDate":"2021-10-21"},{"lineNumber":245,"author":{"gitId":"joshenx"},"content":"     -fx-background-color: derive(#d0dedb, 50%);","lastModifiedDate":"2021-10-28"},{"lineNumber":246,"author":{"gitId":"joshenx"},"content":"     -fx-background-radius: 10px;","lastModifiedDate":"2021-10-21"},{"lineNumber":247,"author":{"gitId":"joshenx"},"content":"     -fx-border-color: #d5ece8;","lastModifiedDate":"2021-10-28"},{"lineNumber":248,"author":{"gitId":"joshenx"},"content":"     -fx-border-width: 0px;","lastModifiedDate":"2021-10-21"},{"lineNumber":249,"author":{"gitId":"joshenx"},"content":"     -fx-border-radius: 15px;","lastModifiedDate":"2021-10-21"},{"lineNumber":250,"author":{"gitId":"joshenx"},"content":"     -fx-effect: innershadow(gaussian, #b9cec9, 15, 0, 0, 0);","lastModifiedDate":"2021-10-28"},{"lineNumber":251,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":252,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":253,"author":{"gitId":"joshenx"},"content":".pane-transparent {","lastModifiedDate":"2021-10-21"},{"lineNumber":254,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-21"},{"lineNumber":255,"author":{"gitId":"didymental"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":258,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: derive(#ffffff, 30%);","lastModifiedDate":"2021-10-21"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":262,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":263,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Droid Sans Mono\";","lastModifiedDate":"2021-10-12"},{"lineNumber":265,"author":{"gitId":"joshenx"},"content":"    -fx-font-size: 10pt;","lastModifiedDate":"2021-10-12"},{"lineNumber":266,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #444444;","lastModifiedDate":"2021-10-21"},{"lineNumber":267,"author":{"gitId":"didymental"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":268,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":270,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":272,"author":{"gitId":"didymental"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-24"},{"lineNumber":273,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Droid Sans Mono\";","lastModifiedDate":"2021-10-12"},{"lineNumber":277,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #888888;","lastModifiedDate":"2021-10-21"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: derive(#ffffff, 30%);","lastModifiedDate":"2021-10-21"},{"lineNumber":284,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: derive(#eeeeee, 25%);","lastModifiedDate":"2021-10-21"},{"lineNumber":285,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2021-10-21"},{"lineNumber":286,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 15px;","lastModifiedDate":"2021-10-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #888888;","lastModifiedDate":"2021-10-21"},{"lineNumber":291,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2021-10-21"},{"lineNumber":292,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 15px;","lastModifiedDate":"2021-10-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-24"},{"lineNumber":297,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2021-10-24"},{"lineNumber":298,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 0px;","lastModifiedDate":"2021-10-12"},{"lineNumber":299,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 15px;","lastModifiedDate":"2021-10-12"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":303,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: derive(#ffffff, 10%);","lastModifiedDate":"2021-10-21"},{"lineNumber":304,"author":{"gitId":"joshenx"},"content":"    -fx-background-radius: 10px;","lastModifiedDate":"2021-11-03"},{"lineNumber":305,"author":{"gitId":"joshenx"},"content":"    -fx-padding: 7px;","lastModifiedDate":"2021-11-03"},{"lineNumber":306,"author":{"gitId":"joshenx"},"content":"    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 15, 0, 1, 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":307,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":309,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":310,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #333333;","lastModifiedDate":"2021-11-03"},{"lineNumber":311,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":312,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":313,"author":{"gitId":"joshenx"},"content":".menu-item {","lastModifiedDate":"2021-11-03"},{"lineNumber":314,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":315,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":316,"author":{"gitId":"joshenx"},"content":".menu-item:focused {","lastModifiedDate":"2021-11-03"},{"lineNumber":317,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #48C9B0;","lastModifiedDate":"2021-11-03"},{"lineNumber":318,"author":{"gitId":"joshenx"},"content":"    -fx-background-radius: 5px;","lastModifiedDate":"2021-11-03"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":322,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":323,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: \"#a2e8dc\";","lastModifiedDate":"2021-10-21"},{"lineNumber":324,"author":{"gitId":"joshenx"},"content":"    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 20, 0, 0, 0);","lastModifiedDate":"2021-10-21"},{"lineNumber":325,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":327,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":329,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2021-10-12"},{"lineNumber":330,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #444444;","lastModifiedDate":"2021-10-21"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":336,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":338,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":339,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":340,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":341,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":342,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":343,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":345,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2021-10-24"},{"lineNumber":346,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-10-12"},{"lineNumber":347,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 5px;","lastModifiedDate":"2021-10-12"},{"lineNumber":348,"author":{"gitId":"joshenx"},"content":"    -fx-background-radius: 5px;","lastModifiedDate":"2021-10-12"},{"lineNumber":349,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-24"},{"lineNumber":350,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI Bold\";","lastModifiedDate":"2021-10-12"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":354,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":356,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":357,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #eeeeee;","lastModifiedDate":"2021-10-24"},{"lineNumber":358,"author":{"gitId":"joshenx"},"content":"    -fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.2), 8, 0, 0, 0);","lastModifiedDate":"2021-10-24"},{"lineNumber":359,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":361,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":362,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #888888;","lastModifiedDate":"2021-10-24"},{"lineNumber":363,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2021-10-12"},{"lineNumber":364,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":366,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":367,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: #dddddd;","lastModifiedDate":"2021-10-24"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":369,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 5px;","lastModifiedDate":"2021-10-12"},{"lineNumber":370,"author":{"gitId":"joshenx"},"content":"    -fx-background-radius: 5px;","lastModifiedDate":"2021-10-12"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":373,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":375,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":378,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2021-10-12"},{"lineNumber":379,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":381,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":384,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":386,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":388,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":390,"author":{"gitId":"joshenx"},"content":"#sendButton {","lastModifiedDate":"2021-10-25"},{"lineNumber":391,"author":{"gitId":"joshenx"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2021-10-25"},{"lineNumber":392,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2021-10-25"},{"lineNumber":393,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":394,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 5px;","lastModifiedDate":"2021-10-25"},{"lineNumber":395,"author":{"gitId":"joshenx"},"content":"    -fx-background-radius: 5px;","lastModifiedDate":"2021-10-25"},{"lineNumber":396,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #48C9B0;","lastModifiedDate":"2021-10-25"},{"lineNumber":397,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Segoe UI Bold\";","lastModifiedDate":"2021-10-25"},{"lineNumber":398,"author":{"gitId":"joshenx"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-10-25"},{"lineNumber":399,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2021-10-25"},{"lineNumber":400,"author":{"gitId":"joshenx"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2021-10-25"},{"lineNumber":401,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":402,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":403,"author":{"gitId":"joshenx"},"content":"#sendButton:hover {","lastModifiedDate":"2021-10-25"},{"lineNumber":404,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #75d6c4;","lastModifiedDate":"2021-10-25"},{"lineNumber":405,"author":{"gitId":"joshenx"},"content":"    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.4), 7, 0, 1, 1);","lastModifiedDate":"2021-10-25"},{"lineNumber":406,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":407,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":408,"author":{"gitId":"joshenx"},"content":"#sendButton:pressed, #sendButton:default:hover:pressed {","lastModifiedDate":"2021-10-25"},{"lineNumber":409,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #3ac4a9;","lastModifiedDate":"2021-10-25"},{"lineNumber":410,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2021-10-25"},{"lineNumber":411,"author":{"gitId":"joshenx"},"content":"    -fx-effect: innershadow(gaussian, #666666, 7, 0, 0, 0)","lastModifiedDate":"2021-10-25"},{"lineNumber":412,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":413,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":414,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":415,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":416,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-21"},{"lineNumber":417,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":419,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":420,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-21"},{"lineNumber":421,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":423,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":424,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":425,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":426,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #444444;","lastModifiedDate":"2021-10-21"},{"lineNumber":427,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":429,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":430,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: derive(#ffffff, 25%);","lastModifiedDate":"2021-10-21"},{"lineNumber":431,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":433,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":434,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":435,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":436,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":437,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #444444;","lastModifiedDate":"2021-10-21"},{"lineNumber":438,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":439,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":440,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":441,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-21"},{"lineNumber":442,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":444,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":445,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2021-10-21"},{"lineNumber":446,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":447,"author":{"gitId":"joshenx"},"content":"    -fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.3), 5, 0, 2, 2);","lastModifiedDate":"2021-10-21"},{"lineNumber":448,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":450,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":451,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":452,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":453,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":455,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":456,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":457,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":458,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":459,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":460,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":461,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":463,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":464,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":465,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":466,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":467,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":468,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":469,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":470,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":472,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #222222;","lastModifiedDate":"2021-10-21"},{"lineNumber":473,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":475,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":476,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2021-10-21"},{"lineNumber":477,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":478,"author":{"gitId":"joshenx"},"content":"    -fx-border-color: #383838 #383838 #454545 #383838;","lastModifiedDate":"2021-10-12"},{"lineNumber":479,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":480,"author":{"gitId":"joshenx"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2021-10-12"},{"lineNumber":481,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 15px;","lastModifiedDate":"2021-10-12"},{"lineNumber":482,"author":{"gitId":"joshenx"},"content":"    -fx-font-family: \"Droid Sans Mono\";","lastModifiedDate":"2021-10-12"},{"lineNumber":483,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":484,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: #222222;","lastModifiedDate":"2021-10-21"},{"lineNumber":485,"author":{"gitId":"joshenx"},"content":"    -fx-effect: innershadow(gaussian, #b9cec9, 7, 0, 0, 0);","lastModifiedDate":"2021-10-28"},{"lineNumber":486,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":488,"author":{"gitId":"joshenx"},"content":"#filterField, #patientListPanel, #patientWebpage {","lastModifiedDate":"2021-10-27"},{"lineNumber":489,"author":{"gitId":"joshenx"},"content":"    -fx-effect: innershadow(gaussian, #b9cec9, 10, 0, 0, 0);","lastModifiedDate":"2021-10-28"},{"lineNumber":490,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":492,"author":{"gitId":"joshenx"},"content":"#resultDisplay {","lastModifiedDate":"2021-10-25"},{"lineNumber":493,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-25"},{"lineNumber":494,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":495,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":496,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":497,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-21"},{"lineNumber":498,"author":{"gitId":"joshenx"},"content":"    -fx-background-radius: 15px;","lastModifiedDate":"2021-10-21"},{"lineNumber":499,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 15px;","lastModifiedDate":"2021-10-21"},{"lineNumber":500,"author":{"gitId":"joshenx"},"content":"    -fx-effect: innershadow(gaussian, #b9cec9, 10, 0, 0, 0);","lastModifiedDate":"2021-10-28"},{"lineNumber":501,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":503,"author":{"gitId":"joshenx"},"content":".text-area .scroll-pane {","lastModifiedDate":"2021-10-25"},{"lineNumber":504,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-25"},{"lineNumber":505,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":506,"author":{"gitId":"joshenx"},"content":".text-area .scroll-pane .viewport{","lastModifiedDate":"2021-10-25"},{"lineNumber":507,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-25"},{"lineNumber":508,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":509,"author":{"gitId":"joshenx"},"content":".text-area .scroll-pane .content{","lastModifiedDate":"2021-10-25"},{"lineNumber":510,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-25"},{"lineNumber":511,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":512,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":513,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":514,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":515,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":516,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":517,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":518,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":519,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":520,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #48C9B0;","lastModifiedDate":"2021-10-27"},{"lineNumber":521,"author":{"gitId":"joshenx"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2021-10-27"},{"lineNumber":522,"author":{"gitId":"joshenx"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2021-10-27"},{"lineNumber":523,"author":{"gitId":"joshenx"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2021-10-27"},{"lineNumber":524,"author":{"gitId":"joshenx"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2021-10-27"},{"lineNumber":525,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":526,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":527,"author":{"gitId":"joshenx"},"content":"#prescriptions {","lastModifiedDate":"2021-10-27"},{"lineNumber":528,"author":{"gitId":"joshenx"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2021-10-27"},{"lineNumber":529,"author":{"gitId":"joshenx"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2021-10-27"},{"lineNumber":530,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":531,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":532,"author":{"gitId":"joshenx"},"content":"#prescriptions .label {","lastModifiedDate":"2021-10-27"},{"lineNumber":533,"author":{"gitId":"joshenx"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-10-27"},{"lineNumber":534,"author":{"gitId":"joshenx"},"content":"    -fx-background-color: #48C9B0;","lastModifiedDate":"2021-10-27"},{"lineNumber":535,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":536,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":537,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":538,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":539,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"joshenx":272,"-":257,"didymental":10}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.control.ButtonBar?\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.control.Tab?\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.control.TabPane?\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"\u003cfx:root minHeight\u003d\"700\" minWidth\u003d\"1200\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Doc\u0027it\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    \u003cicons\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"        \u003cImage url\u003d\"@/images/DocitIcon.png\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    \u003c/icons\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@Fonts.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"                \u003cURL value\u003d\"@LightTheme.css\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"            \u003cVBox prefWidth\u003d\"1038.0\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"            \u003cHBox styleClass\u003d\"pane-with-border\" stylesheets\u003d\"@LightTheme.css\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"                  \u003cImageView fitHeight\u003d\"40.0\" fitWidth\u003d\"170.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"                     \u003cimage\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"                        \u003cImage url\u003d\"@../images/DocitHeader.png\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"                     \u003c/image\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"                     \u003cHBox.margin\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"                     \u003c/HBox.margin\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"                  \u003c/ImageView\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"                  \u003cButtonBar fx:id\u003d\"menuBar\" buttonMinWidth\u003d\"40.0\" minWidth\u003d\"40.0\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" prefHeight\u003d\"52.0\" prefWidth\u003d\"868.0\" styleClass\u003d\"pane-transparent\" stylesheets\u003d\"@LightTheme.css\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"                    \u003cbuttons\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"                        \u003cButton id\u003d\"menuButton\" fx:id\u003d\"helpButton\" minHeight\u003d\"40.0\" minWidth\u003d\"40.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" prefHeight\u003d\"40.0\" prefWidth\u003d\"40.0\" styleClass\u003d\"button-icon\" stylesheets\u003d\"@LightTheme.css\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"                        \u003cButton id\u003d\"menuButton\" fx:id\u003d\"exitButton\" minHeight\u003d\"40.0\" minWidth\u003d\"40.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" prefHeight\u003d\"40.0\" prefWidth\u003d\"40.0\" stylesheets\u003d\"@LightTheme.css\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"                    \u003c/buttons\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"                     \u003cpadding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"                     \u003c/padding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"                  \u003c/ButtonBar\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"               \u003c/children\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"                \u003cSplitPane dividerPositions\u003d\"0.5\" prefHeight\u003d\"724.0\" prefWidth\u003d\"1038.0\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"                    \u003citems\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"                        \u003cVBox fx:id\u003d\"patientList\" minWidth\u003d\"297.0\" prefHeight\u003d\"722.0\" prefWidth\u003d\"297.0\" styleClass\u003d\"pane-without-border\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                            \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                            \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"                            \u003cLabel styleClass\u003d\"label-header\" text\u003d\"Patients\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"                                \u003cfont\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"                                    \u003cFont name\u003d\"Segoe UI\" size\u003d\"24.0\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"                                \u003c/font\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"                            \u003c/Label\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"                            \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" styleClass\u003d\"pane-with-shadow\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"didymental"},"content":"                        \u003c/VBox\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"                        \u003cVBox fx:id\u003d\"appointmentList\" minWidth\u003d\"340\" prefWidth\u003d\"456.0\" styleClass\u003d\"pane-without-border\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"                            \u003cpadding\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"                            \u003c/padding\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"                            \u003cchildren\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"                                \u003cLabel styleClass\u003d\"label-header\" text\u003d\"Appointments\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"                                    \u003cfont\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"                                        \u003cFont name\u003d\"Segoe UI\" size\u003d\"24.0\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"                                    \u003c/font\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"                                \u003c/Label\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"                        \u003cTabPane fx:id\u003d\"tabsPlaceholder\" prefHeight\u003d\"200.0\" prefWidth\u003d\"427.0\" stylesheets\u003d\"@LightTheme.css\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":79,"author":{"gitId":"joshenx"},"content":"                          \u003ctabs\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"                            \u003cTab text\u003d\"Upcoming\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"                                 \u003ccontent\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"                                            \u003cStackPane fx:id\u003d\"apptListPanelPlaceholder\" styleClass\u003d\"pane-with-shadow\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"                                 \u003c/content\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"joshenx"},"content":"                            \u003c/Tab\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"                            \u003cTab text\u003d\"Archive\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"joshenx"},"content":"                                 \u003ccontent\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"joshenx"},"content":"                                            \u003cStackPane fx:id\u003d\"archiveListPanelPlaceholder\" styleClass\u003d\"pane-with-shadow\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"joshenx"},"content":"                                 \u003c/content\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"                            \u003c/Tab\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"                          \u003c/tabs\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"                        \u003c/TabPane\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"                            \u003c/children\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"                        \u003c/VBox\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"                    \u003c/items\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"                \u003c/SplitPane\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":97,"author":{"gitId":"joshenx"},"content":"                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"202.0\" minHeight\u003d\"100\" prefHeight\u003d\"150.0\" prefWidth\u003d\"1038.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":99,"author":{"gitId":"joshenx"},"content":"                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":103,"author":{"gitId":"joshenx"},"content":"                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":105,"author":{"gitId":"joshenx"},"content":"                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":107,"author":{"gitId":"didymental"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"joshenx":77,"-":33,"didymental":3}},{"path":"src/main/resources/view/PatientListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"    \u003cGridPane mouseTransparent\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"        \u003cSplitPane dividerPositions\u003d\"0.6\" mouseTransparent\u003d\"true\" stylesheets\u003d\"@LightTheme.css\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"            \u003citems\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"                \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefWidth\u003d\"250\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"                        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"                    \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                            \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                                \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                            \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"                        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"                            \u003cHBox.margin\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"                                \u003cInsets /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"                            \u003c/HBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"                        \u003copaqueInsets\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"                            \u003cInsets /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"                        \u003c/opaqueInsets\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"                    \u003cFlowPane fx:id\u003d\"tags\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"                        \u003cpadding\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"                            \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"                        \u003c/padding\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"                    \u003c/FlowPane\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"                        \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"                        \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"                        \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"                \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefWidth\u003d\"90\" GridPane.columnIndex\u003d\"1\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"didymental"},"content":"                        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"didymental"},"content":"                    \u003cHBox alignment\u003d\"TOP_CENTER\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"                        \u003cLabel styleClass\u003d\"cell_small_label_bold\" text\u003d\"Medical History\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"didymental"},"content":"                            \u003cminWidth\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"didymental"},"content":"                                \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"didymental"},"content":"                                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"                            \u003c/minWidth\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"didymental"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"didymental"},"content":"                    \u003c/HBox\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"didymental"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"                        \u003cLabel fx:id\u003d\"medicalHistory\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$medicalHistory\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"didymental"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"didymental"},"content":"            \u003c/items\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"didymental"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"        \u003crowConstraints\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"            \u003cRowConstraints /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"        \u003c/rowConstraints\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":24,"-":26,"didymental":23}},{"path":"src/main/resources/view/PatientListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"  \u003cListView fx:id\u003d\"patientListView\" styleClass\u003d\"pane-transparent\" stylesheets\u003d\"@LightTheme.css\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":2,"-":6}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-transparent\" stylesheets\u003d\"@LightTheme.css\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"gycgabriel"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"joshenx":1,"-":5,"gycgabriel":1}},{"path":"src/test/java/seedu/docit/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"joshenx":1,"-":57}},{"path":"src/test/java/seedu/docit/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.core;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"joshenx":1,"-":26}},{"path":"src/test/java/seedu/docit/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.core;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":2,"-":133}},{"path":"src/test/java/seedu/docit/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.core.index;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        final Index fifthPatientIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"        assertTrue(fifthPatientIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"        assertTrue(fifthPatientIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"        assertTrue(fifthPatientIndex.equals(fifthPatientIndex));","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"        assertFalse(fifthPatientIndex.equals(null));","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"        assertFalse(fifthPatientIndex.equals(5.0f));","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"        assertFalse(fifthPatientIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"joshenx":9,"-":51}},{"path":"src/test/java/seedu/docit/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"joshenx":2,"-":34}},{"path":"src/test/java/seedu/docit/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"joshenx":3,"-":105}},{"path":"src/test/java/seedu/docit/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Config;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"joshenx":4,"-":112}},{"path":"src/test/java/seedu/docit/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":2,"-":21}},{"path":"src/test/java/seedu/docit/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.SerializableTestClass;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.TestUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":3,"-":42}},{"path":"src/test/java/seedu/docit/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.commons.util;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"joshenx":2,"-":141}},{"path":"src/test/java/seedu/docit/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.MEDICAL_DESC_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.CommandResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ListPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ArchivedAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.JsonAppointmentBookStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.JsonArchivedAppointmentBookStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"import seedu.docit.storage.StorageManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"    private static final String PT_PREFIX \u003d \"pt \";","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":55,"author":{"gitId":"gycgabriel"},"content":"        JsonAppointmentBookStorage appointmentBookStorage \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"            new JsonAppointmentBookStorage(temporaryFolder.resolve(\"appointmentBook.json\"));","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"        JsonArchivedAppointmentBookStorage archivedAppointmentBookStorage \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"                new JsonArchivedAppointmentBookStorage(temporaryFolder.resolve(\"archivedAppointmentBook.json\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, appointmentBookStorage,","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"                archivedAppointmentBookStorage, userPrefsStorage);","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":73,"author":{"gitId":"rish-16"},"content":"        String deleteCommand \u003d \"pt delete 9\";","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":79,"author":{"gitId":"rish-16"},"content":"        String listCommand \u003d PT_PREFIX + ListPatientCommand.COMMAND_WORD;","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"rish-16"},"content":"        assertCommandSuccess(listCommand, ListPatientCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":88,"author":{"gitId":"gycgabriel"},"content":"        JsonAppointmentBookStorage appointmentBookStorage \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"gycgabriel"},"content":"            new JsonAppointmentBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAppointmentBook.json\"));","lastModifiedDate":"2021-10-17"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"        JsonArchivedAppointmentBookStorage archivedAppointmentBookStorage \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"                new JsonArchivedAppointmentBookIoExceptionThrowingStub(temporaryFolder.resolve(","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"                        \"ioExceptionArchivedAppointmentBook.json\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, appointmentBookStorage,","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"                archivedAppointmentBookStorage, userPrefsStorage);","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"rish-16"},"content":"        String addCommand \u003d PT_PREFIX + AddPatientCommand.COMMAND_WORD + NAME_DESC_AMY","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"rish-16"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + MEDICAL_DESC_PATIENT;","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"rish-16"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.addPatient(expectedPatient);","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":110,"author":{"gitId":"joshenx"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"joshenx"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":150,"author":{"gitId":"joshenx"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":151,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":182,"author":{"gitId":"gycgabriel"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":183,"author":{"gitId":"gycgabriel"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2021-10-17"},{"lineNumber":184,"author":{"gitId":"gycgabriel"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":185,"author":{"gitId":"gycgabriel"},"content":"    private static class JsonAppointmentBookIoExceptionThrowingStub extends JsonAppointmentBookStorage {","lastModifiedDate":"2021-10-17"},{"lineNumber":186,"author":{"gitId":"gycgabriel"},"content":"        private JsonAppointmentBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2021-10-17"},{"lineNumber":187,"author":{"gitId":"gycgabriel"},"content":"            super(filePath);","lastModifiedDate":"2021-10-17"},{"lineNumber":188,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":189,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":190,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":191,"author":{"gitId":"gycgabriel"},"content":"        public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, ReadOnlyAddressBook addressBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":192,"author":{"gitId":"gycgabriel"},"content":"            Path filePath) throws IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":193,"author":{"gitId":"gycgabriel"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2021-10-17"},{"lineNumber":194,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":195,"author":{"gitId":"gycgabriel"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":196,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":197,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":198,"author":{"gitId":"joshenx"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2021-10-19"},{"lineNumber":199,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":200,"author":{"gitId":"joshenx"},"content":"    private static class JsonArchivedAppointmentBookIoExceptionThrowingStub extends JsonArchivedAppointmentBookStorage {","lastModifiedDate":"2021-10-19"},{"lineNumber":201,"author":{"gitId":"joshenx"},"content":"        private JsonArchivedAppointmentBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2021-10-19"},{"lineNumber":202,"author":{"gitId":"joshenx"},"content":"            super(filePath);","lastModifiedDate":"2021-10-19"},{"lineNumber":203,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":204,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":205,"author":{"gitId":"joshenx"},"content":"        @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":206,"author":{"gitId":"gycgabriel"},"content":"        public void saveArchivedAppointmentBook(ReadOnlyAppointmentBook appointmentBook,","lastModifiedDate":"2021-10-19"},{"lineNumber":207,"author":{"gitId":"gycgabriel"},"content":"                                                ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2021-10-19"},{"lineNumber":208,"author":{"gitId":"joshenx"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2021-10-19"},{"lineNumber":209,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":210,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"rish-16":7,"joshenx":56,"huyuxin0429":1,"-":126,"gycgabriel":21}},{"path":"src/test/java/seedu/docit/logic/commands/AddAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.stubs.ModelStub;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.stubs.ModelStubAcceptingAppointmentAdded;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.stubs.ModelStubWithAppointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"public class AddAppointmentCommandTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"    private final Index defaultPatientIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"    private final LocalDateTime defaultDateTime \u003d LocalDateTime.of(2020, 12, 31, 12, 0);","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    private Appointment defaultAppointment \u003d new Appointment(new PatientBuilder().build(), defaultDateTime);","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(null, null));","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        Appointment validAppointment \u003d defaultAppointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"gycgabriel"},"content":"        CommandResult commandResult \u003d new AddAppointmentCommand(defaultPatientIndex,","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"                defaultDateTime).execute(modelStub);","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment),","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"    public void execute_duplicateAppointment_throwsCommandException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"        Appointment validAppointment \u003d defaultAppointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"gycgabriel"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(defaultPatientIndex, defaultDateTime);","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"        ModelStub modelStub \u003d new ModelStubWithAppointment(validAppointment);","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"        assertThrows(CommandException.class, AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT, () -\u003e","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"                addAppointmentCommand.execute(modelStub));","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"huyuxin0429"},"content":"    public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"huyuxin0429"},"content":"        Appointment appointment1 \u003d defaultAppointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"        Appointment appointment2 \u003d new Appointment(SampleDataUtil.getSamplePatients()[0], defaultDateTime);","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"gycgabriel"},"content":"        AddAppointmentCommand addAppointment1 \u003d new AddAppointmentCommand(Index.fromOneBased(1), defaultDateTime);","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"gycgabriel"},"content":"        AddAppointmentCommand addAppointment2 \u003d new AddAppointmentCommand(Index.fromOneBased(2), defaultDateTime);","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"huyuxin0429"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(addAppointment1.equals(addAppointment1));","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"gycgabriel"},"content":"        AddAppointmentCommand addAppointmentCommandCopy \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"gycgabriel"},"content":"            new AddAppointmentCommand(Index.fromOneBased(1), defaultDateTime);","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(addAppointment1.equals(addAppointmentCommandCopy));","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"huyuxin0429"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(addAppointment1.equals(1));","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"huyuxin0429"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(addAppointment1.equals(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(addAppointment1.equals(addAppointment2));","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"joshenx":13,"huyuxin0429":60,"gycgabriel":11}},{"path":"src/test/java/seedu/docit/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ArchivedAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPatientCommand}.","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"    @BeforeEach public void setUp() {","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"    public void execute_newPatient_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.addPatient(validPatient);","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"        assertCommandSuccess(new AddPatientCommand(validPatient), model,","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"                String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"didymental"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"        Patient patientInList \u003d model.getAddressBook().getPatientList().get(0);","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"        assertCommandFailure(new AddPatientCommand(patientInList), model, AddPatientCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"rish-16":3,"joshenx":20,"huyuxin0429":1,"-":21,"gycgabriel":1,"didymental":2}},{"path":"src/test/java/seedu/docit/logic/commands/AddPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.stubs.ModelStub;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.stubs.ModelStubAcceptingPatientAdded;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.stubs.ModelStubWithPatient;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"public class AddPatientCommandTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"        CommandResult commandResult \u003d new AddPatientCommand(validPatient).execute(modelStub);","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"        assertEquals(String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"        AddPatientCommand addCommand \u003d new AddPatientCommand(validPatient);","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"                AddPatientCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"    public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(alice);","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"huyuxin0429"},"content":"        AddPatientCommand addBobCommand \u003d new AddPatientCommand(bob);","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"huyuxin0429"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"huyuxin0429"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"huyuxin0429"},"content":"        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand(alice);","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"huyuxin0429"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"joshenx":18,"huyuxin0429":54}},{"path":"src/test/java/seedu/docit/logic/commands/AddPrescriptionCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.prescription.AddPrescriptionCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"public class AddPrescriptionCommandTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"    public void constructor_nullPrescription_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"                new AddPrescriptionCommand(null, null, null, null));","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":3,"huyuxin0429":14}},{"path":"src/test/java/seedu/docit/logic/commands/AppointmentCommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.AppointmentContainsPatientPredicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"public class AppointmentCommandTestUtil {","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"     * Updates {@code model}\u0027s filtered list to show appointments with patient at the given {@code targetIndex} in the","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"     * {@code model}\u0027s patient list.","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"    public static void showAppointmentWithPatientAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAppointmentList().size());","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"        model.updateFilteredAppointmentList(new AppointmentContainsPatientPredicate(patient));","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"        assertEquals(1, model.getFilteredAppointmentList().size());","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"joshenx":10,"huyuxin0429":15}},{"path":"src/test/java/seedu/docit/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ArchivedAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_emptyAddressBook_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"joshenx":13,"-":19,"gycgabriel":2}},{"path":"src/test/java/seedu/docit/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));","lastModifiedDate":"2021-11-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));","lastModifiedDate":"2021-11-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());","lastModifiedDate":"2021-11-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());","lastModifiedDate":"2021-11-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"joshenx":6,"-":48}},{"path":"src/test/java/seedu/docit/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.PatientContainsKeywordsPredicate;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"    public static final String MEDICAL_DESC_PATIENT \u003d \" \" + PREFIX_MEDICAL + \"lovesick\";","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"huyuxin0429"},"content":"    public static final String VALID_PATIENT_ID_0 \u003d \"0\";","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"huyuxin0429"},"content":"    public static final String VALID_PATIENT_ID_1 \u003d \"1\";","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"huyuxin0429"},"content":"    public static final String VALID_PATIENT_ID_2 \u003d \"2\";","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"huyuxin0429"},"content":"    public static final String VALID_PATIENT_ID_DESC_0 \u003d \" \" + PREFIX_NAME + VALID_PATIENT_ID_0;","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"huyuxin0429"},"content":"    public static final String VALID_PATIENT_ID_DESC_1 \u003d \" \" + PREFIX_NAME + VALID_PATIENT_ID_1;","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"huyuxin0429"},"content":"    public static final String VALID_PATIENT_ID_DESC_2 \u003d \" \" + PREFIX_NAME + VALID_PATIENT_ID_2;","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_PATIENT_ID_MINUS_1 \u003d \"-1\";","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_PATIENT_ID_DESC_MINUS_1 \u003d \" \" + PREFIX_NAME + INVALID_PATIENT_ID_MINUS_1;","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"huyuxin0429"},"content":"    public static final String VALID_APPOINTMENT_DATE_TIME \u003d \"2020-1-10 1600\";","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_MONTH \u003d \"2020-13-10 1600\"; // invalid month","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_YEAR \u003d \"-1-13-10 1600\"; // invalid year","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_DATE \u003d \"2020-1-43 1600\"; // invalid date","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_TIME \u003d \"2020-12-10 3400\"; // invalid time","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_ALL \u003d \"-1-13-33 9900\"; // invalid datetime","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_NULL \u003d \"\"; // invalid entry","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_RANDOM \u003d \"asfdsafsfs\"; // invalid entry","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"huyuxin0429"},"content":"    public static final String VALID_APPOINTMENT_DATE_TIME_DESC \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"huyuxin0429"},"content":"            \" \" + PREFIX_DATETIME + VALID_APPOINTMENT_DATE_TIME;","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_DESC_MONTH \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"huyuxin0429"},"content":"            \" \" + PREFIX_DATETIME + INVALID_APPOINTMENT_DATE_TIME_MONTH; // invalid month","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_DESC_YEAR \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"huyuxin0429"},"content":"            \" \" + PREFIX_DATETIME + INVALID_APPOINTMENT_DATE_TIME_YEAR; // invalid year","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_DESC_DATE \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"huyuxin0429"},"content":"            \" \" + PREFIX_DATETIME + INVALID_APPOINTMENT_DATE_TIME_DATE; // invalid date","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_DESC_TIME \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"huyuxin0429"},"content":"            \" \" + PREFIX_DATETIME + INVALID_APPOINTMENT_DATE_TIME_TIME; // invalid time","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_DESC_ALL \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"huyuxin0429"},"content":"            \" \" + PREFIX_DATETIME + INVALID_APPOINTMENT_DATE_TIME_ALL; // invalid datetime","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_DESC_NULL \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"huyuxin0429"},"content":"            \" \" + PREFIX_DATETIME + INVALID_APPOINTMENT_DATE_TIME_NULL; // invalid entry","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"huyuxin0429"},"content":"    public static final String INVALID_APPOINTMENT_DATE_TIME_DESC_RANDOM \u003d","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"huyuxin0429"},"content":"            \" \" + PREFIX_DATETIME + INVALID_APPOINTMENT_DATE_TIME_RANDOM; // invalid entry","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"    public static final EditPatientCommand.EditPatientDescriptor DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"    public static final EditPatientCommand.EditPatientDescriptor DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":99,"author":{"gitId":"joshenx"},"content":"        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":101,"author":{"gitId":"rish-16"},"content":"                .withMedicalHistory(MEDICAL_DESC_PATIENT).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"joshenx"},"content":"        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":104,"author":{"gitId":"rish-16"},"content":"                .withMedicalHistory(MEDICAL_DESC_PATIENT).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"joshenx"},"content":"     * - the address book, filtered patient list and selected patient in {@code actualModel} remain unchanged","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"huyuxin0429"},"content":"        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":147,"author":{"gitId":"huyuxin0429"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":150,"author":{"gitId":"joshenx"},"content":"     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the","lastModifiedDate":"2021-10-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":153,"author":{"gitId":"joshenx"},"content":"    public static void showPatientAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-10-27"},{"lineNumber":154,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());","lastModifiedDate":"2021-10-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":156,"author":{"gitId":"huyuxin0429"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"didymental"},"content":"        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"didymental"},"content":"        model.updateFilteredPatientList(new PatientContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":160,"author":{"gitId":"huyuxin0429"},"content":"        assertEquals(1, model.getFilteredPatientList().size());","lastModifiedDate":"2021-10-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"rish-16":2,"joshenx":22,"huyuxin0429":43,"-":93,"didymental":3}},{"path":"src/test/java/seedu/docit/logic/commands/DeleteAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.AppointmentCommandTestUtil.showAppointmentWithPatientAtIndex;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalAppointments.getTypicalAppointmentList;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"public class DeleteAppointmentCommandTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"gycgabriel"},"content":"    private final Model model \u003d new ModelManager(SampleDataUtil.getSampleAddressBook(), getTypicalAppointmentList(),","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"            new AppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"                INDEX_FIRST_APPOINTMENT.getZeroBased());","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"                appointmentToDelete);","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getAppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"                model.getArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"    @Test public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"        showAppointmentWithPatientAtIndex(model, INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"huyuxin0429"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"huyuxin0429"},"content":"                INDEX_FIRST_APPOINTMENT.getZeroBased());","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"huyuxin0429"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"huyuxin0429"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"huyuxin0429"},"content":"                appointmentToDelete);","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getAppointmentBook(),","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"                model.getArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"huyuxin0429"},"content":"        showNoAppointment(expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"huyuxin0429"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"gycgabriel"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"gycgabriel"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"        showAppointmentWithPatientAtIndex(model, INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"huyuxin0429"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"huyuxin0429"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAppointmentBook().getAppointmentList().size());","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"huyuxin0429"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"huyuxin0429"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"huyuxin0429"},"content":"    @Test public void equals() {","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"joshenx"},"content":"        DeleteAppointmentCommand deleteFirstAppointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"joshenx"},"content":"        DeleteAppointmentCommand deleteSecondAppointmentCommand \u003d new DeleteAppointmentCommand(INDEX_SECOND_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"huyuxin0429"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(deleteFirstAppointmentCommand.equals(deleteFirstAppointmentCommand));","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"huyuxin0429"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"        DeleteAppointmentCommand deleteFirstAppointmentCommandCopy \u003d new DeleteAppointmentCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(deleteFirstAppointmentCommand.equals(deleteFirstAppointmentCommandCopy));","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"huyuxin0429"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(deleteFirstAppointmentCommand.equals(1));","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"huyuxin0429"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(deleteFirstAppointmentCommand.equals(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"joshenx"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(deleteFirstAppointmentCommand.equals(deleteSecondAppointmentCommand));","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"huyuxin0429"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"huyuxin0429"},"content":"    private void showNoAppointment(Model model) {","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"huyuxin0429"},"content":"        model.updateFilteredAppointmentList(p -\u003e false);","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(model.getFilteredAppointmentList().isEmpty());","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"joshenx":27,"huyuxin0429":83,"gycgabriel":6}},{"path":"src/test/java/seedu/docit/logic/commands/DeletePatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ArchivedAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeletePatientCommand}.","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"public class DeletePatientCommandTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"            new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"        DeletePatientCommand deleteCommand \u003d new DeletePatientCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"        DeletePatientCommand deleteCommand \u003d new DeletePatientCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"        DeletePatientCommand deleteCommand \u003d new DeletePatientCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"        showNoPatient(expectedModel);","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPatientList().size());","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"rish-16"},"content":"        DeletePatientCommand deleteCommand \u003d new DeletePatientCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"gycgabriel"},"content":"    @Test public void equals() {","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"        DeletePatientCommand deleteFirstCommand \u003d new DeletePatientCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"        DeletePatientCommand deleteSecondCommand \u003d new DeletePatientCommand(INDEX_SECOND_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"        DeletePatientCommand deleteFirstCommandCopy \u003d new DeletePatientCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"joshenx"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"joshenx"},"content":"    private void showNoPatient(Model model) {","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"huyuxin0429"},"content":"        model.updateFilteredPatientList(p -\u003e false);","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(model.getFilteredPatientList().isEmpty());","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"rish-16":3,"joshenx":39,"huyuxin0429":6,"-":55,"gycgabriel":4,"didymental":3}},{"path":"src/test/java/seedu/docit/logic/commands/EditPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ArchivedAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditPatientCommand.","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"public class EditPatientCommandTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"            new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"didymental"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        Patient editedPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"        EditPatientCommand editCommand \u003d new EditPatientCommand(INDEX_FIRST_PATIENT, descriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"            new ModelManager(new AddressBook(model.getAddressBook()), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"                    new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"rish-16"},"content":"        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"rish-16"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"        EditPatientCommand editCommand \u003d new EditPatientCommand(indexLastPatient, descriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"            new ModelManager(new AddressBook(model.getAddressBook()), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"                    new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.setPatient(lastPatient, editedPatient);","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"joshenx"},"content":"        EditPatientCommand editCommand \u003d new EditPatientCommand(INDEX_FIRST_PATIENT, new EditPatientDescriptor());","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"            new ModelManager(new AddressBook(model.getAddressBook()), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"joshenx"},"content":"                    new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_filteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"        EditPatientCommand editCommand \u003d new EditPatientCommand(INDEX_FIRST_PATIENT,","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"joshenx"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"joshenx"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"gycgabriel"},"content":"        Model expectedModel \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"joshenx"},"content":"            new ModelManager(new AddressBook(model.getAddressBook()), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"joshenx"},"content":"                    new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":109,"author":{"gitId":"didymental"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"joshenx"},"content":"    public void execute_duplicatePatientUnfilteredList_failure() {","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"joshenx"},"content":"        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"joshenx"},"content":"        EditPatientCommand editCommand \u003d new EditPatientCommand(INDEX_SECOND_PATIENT, descriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"joshenx"},"content":"        assertCommandFailure(editCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"joshenx"},"content":"    @Test public void execute_duplicatePatientFilteredList_failure() {","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"joshenx"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"joshenx"},"content":"        // edit patient in filtered list into a duplicate in address book","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"joshenx"},"content":"        Patient patientInList \u003d model.getAddressBook().getPatientList().get(INDEX_SECOND_PATIENT.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"joshenx"},"content":"        EditPatientCommand editCommand \u003d new EditPatientCommand(INDEX_FIRST_PATIENT,","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":"                new EditPatientDescriptorBuilder(patientInList).build());","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"joshenx"},"content":"        assertCommandFailure(editCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":130,"author":{"gitId":"joshenx"},"content":"    @Test public void execute_invalidPatientIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"huyuxin0429"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2021-10-15"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"rish-16"},"content":"        EditPatientCommand editCommand \u003d new EditPatientCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"joshenx"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"gycgabriel"},"content":"     * Edit filtered list where index is larger than size of filtered list, but smaller than size of address book","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"joshenx"},"content":"    @Test public void execute_invalidPatientIndexFilteredList_failure() {","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"joshenx"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"joshenx"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"joshenx"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPatientList().size());","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"rish-16"},"content":"        EditPatientCommand editCommand \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"joshenx"},"content":"            new EditPatientCommand(outOfBoundIndex, new EditPatientDescriptorBuilder()","lastModifiedDate":"2021-10-27"},{"lineNumber":149,"author":{"gitId":"joshenx"},"content":"                    .withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-10-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":151,"author":{"gitId":"joshenx"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":154,"author":{"gitId":"gycgabriel"},"content":"    @Test public void equals() {","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"joshenx"},"content":"        final EditPatientCommand standardCommand \u003d new EditPatientCommand(INDEX_FIRST_PATIENT, DESC_AMY);","lastModifiedDate":"2021-10-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor copyDescriptor \u003d new EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2021-10-27"},{"lineNumber":159,"author":{"gitId":"joshenx"},"content":"        EditPatientCommand commandWithSameValues \u003d new EditPatientCommand(INDEX_FIRST_PATIENT, copyDescriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"joshenx"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_SECOND_PATIENT, DESC_AMY)));","lastModifiedDate":"2021-10-27"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"joshenx"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_FIRST_PATIENT, DESC_BOB)));","lastModifiedDate":"2021-10-27"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"rish-16":5,"joshenx":79,"huyuxin0429":5,"-":74,"gycgabriel":9,"didymental":6}},{"path":"src/test/java/seedu/docit/logic/commands/EditPatientDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"public class EditPatientDescriptorTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    public void equals() {","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptorWithSameValues \u003d new EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"        // different docit -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":53}},{"path":"src/test/java/seedu/docit/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"joshenx":6,"-":14}},{"path":"src/test/java/seedu/docit/logic/commands/FindPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.CARL;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.ELLE;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.FIONA;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ArchivedAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.PatientContainsKeywordsPredicate;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPatientCommand}.","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"public class FindPatientCommandTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"            new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"            new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"        PatientContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"didymental"},"content":"                new PatientContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"        PatientContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"didymental"},"content":"                new PatientContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"        FindPatientCommand findFirstCommand \u003d new FindPatientCommand(firstPredicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"        FindPatientCommand findSecondCommand \u003d new FindPatientCommand(secondPredicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"rish-16"},"content":"        FindPatientCommand findFirstCommandCopy \u003d new FindPatientCommand(firstPredicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"    public void execute_zeroKeywords_noPatientFound() {","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"didymental"},"content":"        PatientContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"rish-16"},"content":"        FindPatientCommand command \u003d new FindPatientCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPatientList());","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"    public void execute_multipleKeywords_multiplePatientsFound() {","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"didymental"},"content":"        PatientContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"rish-16"},"content":"        FindPatientCommand command \u003d new FindPatientCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"huyuxin0429"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"huyuxin0429"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"didymental"},"content":"     * Parses {@code userInput} into a {@code PatientContainsKeywordsPredicate}.","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"didymental"},"content":"    private PatientContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"didymental"},"content":"        return new PatientContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"rish-16":6,"joshenx":22,"huyuxin0429":5,"-":45,"didymental":9}},{"path":"src/test/java/seedu/docit/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"joshenx":6,"-":14}},{"path":"src/test/java/seedu/docit/logic/commands/ListAppointmentsCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.AppointmentCommandTestUtil.showAppointmentWithPatientAtIndex;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalAppointments.getTypicalAppointmentList;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"import org.junit.jupiter.api.Disabled;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListAppointmentCommand.","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"public class ListAppointmentsCommandTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"    private Model model;","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"    public void setUp() {","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"        model \u003d new ModelManager(new AddressBook(), getTypicalAppointmentList(),","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"                getTypicalAppointmentList(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(), model.getAppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"                model.getArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"    @Disabled(\"Not implemented yet, currently list is shown in user feedback\")","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"        assertCommandSuccess(new ListAppointmentsCommand(), model, ListAppointmentsCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"                expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"    @Disabled(\"Not implemented yet, currently list is shown in user feedback\")","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"        showAppointmentWithPatientAtIndex(model, INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"        assertCommandSuccess(new ListPatientCommand(), model, ListAppointmentsCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"joshenx":14,"huyuxin0429":33}},{"path":"src/test/java/seedu/docit/logic/commands/ListPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ArchivedAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListPatientCommand.","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"public class ListPatientCommandTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"gycgabriel"},"content":"    @BeforeEach public void setUp() {","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"gycgabriel"},"content":"    @Test public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"rish-16":3,"joshenx":15,"huyuxin0429":1,"-":18,"gycgabriel":3}},{"path":"src/test/java/seedu/docit/logic/parser/AddAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DATE_TIME_DESC_ALL;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DATE_TIME_DESC_DATE;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DATE_TIME_DESC_MONTH;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DATE_TIME_DESC_NULL;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DATE_TIME_DESC_RANDOM;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DATE_TIME_DESC_TIME;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DATE_TIME_DESC_YEAR;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_PATIENT_ID_DESC_MINUS_1;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DATE_TIME;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DATE_TIME_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_PATIENT_ID_0;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_PATIENT_ID_DESC_0;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.AppointmentCommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.AppointmentCommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"import org.junit.jupiter.api.Disabled;","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"public class AddAppointmentCommandParserTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"    @Disabled(\"Currently, parser do not discard unused preamble\")","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"gycgabriel"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.of(","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"gycgabriel"},"content":"            2021, 12, 21, 16, 0);","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        Appointment expectedAppointment \u003d new Appointment(SampleDataUtil.getSamplePatients()[0], expectedDateTime);","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_PATIENT_ID_0 + VALID_APPOINTMENT_DATE_TIME,","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"gycgabriel"},"content":"                new AddAppointmentCommand(Index.fromOneBased(1), expectedDateTime));","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"        // fully correct entry","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"        assertParseSuccess(parser, VALID_PATIENT_ID_0 + VALID_APPOINTMENT_DATE_TIME,","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"gycgabriel"},"content":"                new AddAppointmentCommand(Index.fromOneBased(1), expectedDateTime));","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"        // fully correct entry with irrelevant ending whitespace only preamble","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"        assertParseSuccess(parser, VALID_PATIENT_ID_0 + VALID_APPOINTMENT_DATE_TIME + PREAMBLE_WHITESPACE,","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"gycgabriel"},"content":"                new AddAppointmentCommand(Index.fromOneBased(1), expectedDateTime));","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"huyuxin0429"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"huyuxin0429"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"huyuxin0429"},"content":"        // missing patient id prefix","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, VALID_PATIENT_ID_0 + VALID_APPOINTMENT_DATE_TIME_DESC,","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"huyuxin0429"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"        // missing date time prefix","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, VALID_PATIENT_ID_DESC_0 + VALID_APPOINTMENT_DATE_TIME,","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"huyuxin0429"},"content":"        // all prefixes missing","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, VALID_PATIENT_ID_0 + VALID_APPOINTMENT_DATE_TIME,","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"huyuxin0429"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":77,"author":{"gitId":"huyuxin0429"},"content":"    @Disabled(\"Currently, no error checking is done for patient id and date time\")","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"huyuxin0429"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"huyuxin0429"},"content":"        // invalid id","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, INVALID_PATIENT_ID_DESC_MINUS_1 + VALID_APPOINTMENT_DATE_TIME_DESC,","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"huyuxin0429"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"huyuxin0429"},"content":"        // invalid year","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, VALID_PATIENT_ID_DESC_0 + INVALID_APPOINTMENT_DATE_TIME_DESC_YEAR,","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"huyuxin0429"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"huyuxin0429"},"content":"        // invalid month","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, VALID_PATIENT_ID_DESC_0 + INVALID_APPOINTMENT_DATE_TIME_DESC_MONTH,","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"huyuxin0429"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"huyuxin0429"},"content":"        // invalid date","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, VALID_PATIENT_ID_DESC_0 + INVALID_APPOINTMENT_DATE_TIME_DESC_DATE,","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"huyuxin0429"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"huyuxin0429"},"content":"        // invalid time","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, VALID_PATIENT_ID_DESC_0 + INVALID_APPOINTMENT_DATE_TIME_DESC_TIME,","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"huyuxin0429"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"huyuxin0429"},"content":"        // invalid null input","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, VALID_PATIENT_ID_DESC_0 + INVALID_APPOINTMENT_DATE_TIME_DESC_NULL,","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"huyuxin0429"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"huyuxin0429"},"content":"        // invalid random input","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, VALID_PATIENT_ID_DESC_0 + INVALID_APPOINTMENT_DATE_TIME_DESC_RANDOM,","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"huyuxin0429"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"huyuxin0429"},"content":"        // invalid input for all date time fields","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, VALID_PATIENT_ID_DESC_0 + INVALID_APPOINTMENT_DATE_TIME_DESC_ALL,","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"huyuxin0429"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"huyuxin0429"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, INVALID_PATIENT_ID_DESC_MINUS_1 + INVALID_APPOINTMENT_DATE_TIME_DESC_MONTH,","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"huyuxin0429"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"huyuxin0429"},"content":"        // non-empty preamble","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2021-10-15"},{"lineNumber":118,"author":{"gitId":"huyuxin0429"},"content":"                PREAMBLE_NON_EMPTY","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"huyuxin0429"},"content":"                        + VALID_PATIENT_ID_DESC_0","lastModifiedDate":"2021-10-15"},{"lineNumber":120,"author":{"gitId":"huyuxin0429"},"content":"                        + VALID_APPOINTMENT_DATE_TIME_DESC,","lastModifiedDate":"2021-10-15"},{"lineNumber":121,"author":{"gitId":"huyuxin0429"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-15"},{"lineNumber":122,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":123,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"joshenx":26,"huyuxin0429":90,"gycgabriel":7}},{"path":"src/test/java/seedu/docit/logic/parser/AddPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.MEDICAL_DESC_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.PatientCommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.PatientCommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"public class AddPatientCommandParserTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"rish-16"},"content":"        Patient expectedPatient \u003d new PatientBuilder(BOB).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"                + ADDRESS_DESC_BOB + MEDICAL_DESC_PATIENT, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":50,"author":{"gitId":"rish-16"},"content":"                + ADDRESS_DESC_BOB + MEDICAL_DESC_PATIENT, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"                + ADDRESS_DESC_BOB + MEDICAL_DESC_PATIENT, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"rish-16"},"content":"                + ADDRESS_DESC_BOB + MEDICAL_DESC_PATIENT, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"        // multiple addresses - last docit accepted","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"rish-16"},"content":"                + ADDRESS_DESC_BOB + MEDICAL_DESC_PATIENT, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"rish-16"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"didymental"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"didymental"},"content":"                + MEDICAL_DESC_PATIENT,","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":75,"author":{"gitId":"didymental"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"didymental"},"content":"                + MEDICAL_DESC_PATIENT,","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"didymental"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"didymental"},"content":"                + MEDICAL_DESC_PATIENT,","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"joshenx"},"content":"        // missing docit prefix","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"didymental"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"didymental"},"content":"                + MEDICAL_DESC_PATIENT,","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"didymental"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"didymental"},"content":"                + MEDICAL_DESC_PATIENT,","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":99,"author":{"gitId":"rish-16"},"content":"                + MEDICAL_DESC_PATIENT, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":103,"author":{"gitId":"rish-16"},"content":"                + MEDICAL_DESC_PATIENT, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":107,"author":{"gitId":"rish-16"},"content":"                + MEDICAL_DESC_PATIENT, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"joshenx"},"content":"        // invalid docit","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":111,"author":{"gitId":"rish-16"},"content":"                + MEDICAL_DESC_PATIENT, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":114,"author":{"gitId":"didymental"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"rish-16"},"content":"                + MEDICAL_DESC_PATIENT, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":119,"author":{"gitId":"rish-16"},"content":"                + ADDRESS_DESC_BOB + MEDICAL_DESC_PATIENT,","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"rish-16"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"rish-16":14,"joshenx":35,"huyuxin0429":2,"-":60,"didymental":11}},{"path":"src/test/java/seedu/docit/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalAppointments.APPOINTMENT_1;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"import org.junit.jupiter.api.Disabled;","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"import seedu.docit.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.DeletePatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.FindPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ListAppointmentsCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.ListPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.PatientContainsKeywordsPredicate;","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.AppointmentUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"rish-16"},"content":"    public static final String PT_PREFIX \u003d \"pt \";","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"    public static final String APPT_PREFIX \u003d \"apmt \";","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"rish-16"},"content":"    public static final String BASIC_CMD_PREFIX \u003d \"doc \";","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"    // Patient related section","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_addPatient() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"        String testString \u003d PT_PREFIX + PatientUtil.getAddCommand(patient);","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"rish-16"},"content":"        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"                PT_PREFIX + PatientUtil.getAddCommand(patient));","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"rish-16"},"content":"        assertEquals(new AddPatientCommand(patient), command);","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_deletePatient() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"rish-16"},"content":"        DeletePatientCommand command \u003d (DeletePatientCommand) parser.parseCommand(PT_PREFIX","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"                + DeletePatientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PATIENT.getOneBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"        assertEquals(new DeletePatientCommand(INDEX_FIRST_PATIENT), command);","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_editPatient() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"        String args \u003d PatientUtil.getEditPatientDescriptorDetails(descriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"didymental"},"content":"        // args not supposed to have date after m/ by design","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"didymental"},"content":"        if (args.split(\", recorded\").length \u003e 1) {","lastModifiedDate":"2021-10-29"},{"lineNumber":75,"author":{"gitId":"didymental"},"content":"            args \u003d args.split(\", recorded\")[0].trim();","lastModifiedDate":"2021-10-29"},{"lineNumber":76,"author":{"gitId":"didymental"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"rish-16"},"content":"        EditPatientCommand command \u003d (EditPatientCommand) parser.parseCommand(PT_PREFIX","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"                + EditPatientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PATIENT.getOneBased()","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"didymental"},"content":"                + \" \" + args);","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"        assertEquals(new EditPatientCommand(INDEX_FIRST_PATIENT, descriptor), command);","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_findPatient() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":87,"author":{"gitId":"rish-16"},"content":"        FindPatientCommand command \u003d (FindPatientCommand) parser.parseCommand(PT_PREFIX","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"rish-16"},"content":"                + FindPatientCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"didymental"},"content":"        assertEquals(new FindPatientCommand(new PatientContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_listPatient() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"rish-16"},"content":"        assertTrue(parser.parseCommand(PT_PREFIX + ListPatientCommand.COMMAND_WORD) instanceof ListPatientCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"rish-16"},"content":"        assertTrue(parser.parseCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"rish-16"},"content":"                PT_PREFIX + ListPatientCommand.COMMAND_WORD + \" 3\") instanceof ListPatientCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"huyuxin0429"},"content":"    // Appointment related section","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_addAppointment() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"huyuxin0429"},"content":"        Appointment appointment \u003d APPOINTMENT_1;","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"rish-16"},"content":"        AddAppointmentCommand command \u003d (AddAppointmentCommand) parser.parseCommand(APPT_PREFIX","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"huyuxin0429"},"content":"                + AppointmentUtil.getAddCommand(appointment));","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"        assertEquals(new AddAppointmentCommand(Index.fromOneBased(1), appointment.getDatetime()), command);","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_deleteAppointment() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"huyuxin0429"},"content":"        DeleteAppointmentCommand command \u003d (DeleteAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"rish-16"},"content":"                APPT_PREFIX + DeleteAppointmentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPOINTMENT.getOneBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"huyuxin0429"},"content":"        assertEquals(new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT), command);","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"huyuxin0429"},"content":"    @Disabled(\"Not yet implemented\")","lastModifiedDate":"2021-10-15"},{"lineNumber":118,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_editAppointment() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"huyuxin0429"},"content":"        //TODO implement editAppointment test","lastModifiedDate":"2021-10-15"},{"lineNumber":120,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":121,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":122,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":123,"author":{"gitId":"huyuxin0429"},"content":"    @Disabled(\"Not yet implemented\")","lastModifiedDate":"2021-10-15"},{"lineNumber":124,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_findAppointment() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":125,"author":{"gitId":"huyuxin0429"},"content":"        //TODO implement findAppointment test","lastModifiedDate":"2021-10-15"},{"lineNumber":126,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":127,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":128,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":129,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_listAppointments() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":130,"author":{"gitId":"rish-16"},"content":"        assertTrue(parser.parseCommand(APPT_PREFIX + ListAppointmentsCommand.COMMAND_WORD)","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"huyuxin0429"},"content":"                instanceof ListAppointmentsCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":132,"author":{"gitId":"rish-16"},"content":"        assertTrue(parser.parseCommand(APPT_PREFIX + ListAppointmentsCommand.COMMAND_WORD + \" 3\")","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"huyuxin0429"},"content":"                instanceof ListAppointmentsCommand);","lastModifiedDate":"2021-10-15"},{"lineNumber":134,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":135,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":136,"author":{"gitId":"huyuxin0429"},"content":"    // General commands","lastModifiedDate":"2021-10-15"},{"lineNumber":137,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":138,"author":{"gitId":"rish-16"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2021-10-29"},{"lineNumber":139,"author":{"gitId":"rish-16"},"content":"        assertTrue(parser.parseCommand(BASIC_CMD_PREFIX + ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2021-10-29"},{"lineNumber":140,"author":{"gitId":"rish-16"},"content":"        assertTrue(parser.parseCommand(BASIC_CMD_PREFIX","lastModifiedDate":"2021-10-29"},{"lineNumber":141,"author":{"gitId":"rish-16"},"content":"                            + ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2021-10-29"},{"lineNumber":142,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":143,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":144,"author":{"gitId":"huyuxin0429"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":145,"author":{"gitId":"huyuxin0429"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":146,"author":{"gitId":"rish-16"},"content":"        assertTrue(parser.parseCommand(BASIC_CMD_PREFIX + ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"rish-16"},"content":"        assertTrue(parser.parseCommand(BASIC_CMD_PREFIX + ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":152,"author":{"gitId":"rish-16"},"content":"        assertTrue(parser.parseCommand(BASIC_CMD_PREFIX + HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"rish-16"},"content":"        assertTrue(parser.parseCommand(BASIC_CMD_PREFIX + HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":156,"author":{"gitId":"huyuxin0429"},"content":"    // Erroneous commands","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"rish-16":26,"joshenx":36,"huyuxin0429":52,"-":44,"gycgabriel":1,"didymental":9}},{"path":"src/test/java/seedu/docit/logic/parser/AppointmentCommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" * Contains helper methods for testing appointment command parsers.","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"public class AppointmentCommandParserTestUtil {","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"    public static void assertParseSuccess(","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"            AppointmentParser parser, String userInput, AppointmentCommand expectedCommand) {","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"            AppointmentCommand command \u003d parser.parseAppointmentCommand(userInput);","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"    public static void assertParseFailure(AppointmentParser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"            parser.parseAppointmentCommand(userInput);","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":36,"joshenx":3}},{"path":"src/test/java/seedu/docit/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"joshenx":1,"-":149}},{"path":"src/test/java/seedu/docit/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.Command;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"joshenx":3,"-":35}},{"path":"src/test/java/seedu/docit/logic/parser/DeleteAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.AppointmentCommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.AppointmentCommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":" * outside of the DeleteAppointmentCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":" * same path through the DeleteAppointmentCommand, and therefore we test only one of them.","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"public class DeleteAppointmentCommandParserTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"    private DeleteAppointmentCommandParser parser \u003d new DeleteAppointmentCommandParser();","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"        assertParseSuccess(parser, \"1\", new DeleteAppointmentCommand(INDEX_FIRST_PATIENT));","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"                DeleteAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"                DeleteAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"joshenx":7,"huyuxin0429":11,"-":19}},{"path":"src/test/java/seedu/docit/logic/parser/DeletePatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.PatientCommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.PatientCommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.DeletePatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"public class DeletePatientCommandParserTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"    private DeletePatientCommandParser parser \u003d new DeletePatientCommandParser();","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"        assertParseSuccess(parser, \"1\", new DeletePatientCommand(INDEX_FIRST_PATIENT));","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"rish-16":2,"joshenx":7,"huyuxin0429":2,"-":22}},{"path":"src/test/java/seedu/docit/logic/parser/EditPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.PatientCommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.PatientCommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_THIRD_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"public class EditPatientCommandParserTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"rish-16"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"    private EditPatientCommandParser parser \u003d new EditPatientCommandParser();","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"rish-16"},"content":"        assertParseFailure(parser, \"1\", EditPatientCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid docit","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"        Index targetIndex \u003d INDEX_SECOND_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"rish-16"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"rish-16"},"content":"                + NAME_DESC_AMY;","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"rish-16"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"rish-16"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":106,"author":{"gitId":"joshenx"},"content":"        Index targetIndex \u003d INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"rish-16"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"joshenx"},"content":"        Index targetIndex \u003d INDEX_THIRD_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":121,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"rish-16"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":127,"author":{"gitId":"joshenx"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"rish-16"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"rish-16"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"joshenx"},"content":"        // docit","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"joshenx"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"rish-16"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":146,"author":{"gitId":"joshenx"},"content":"        Index targetIndex \u003d INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":148,"author":{"gitId":"rish-16"},"content":"                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-11-03"},{"lineNumber":149,"author":{"gitId":"rish-16"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;","lastModifiedDate":"2021-11-03"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-27"},{"lineNumber":152,"author":{"gitId":"rish-16"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":153,"author":{"gitId":"rish-16"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"joshenx"},"content":"        Index targetIndex \u003d INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":163,"author":{"gitId":"joshenx"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":164,"author":{"gitId":"rish-16"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":170,"author":{"gitId":"joshenx"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-27"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":172,"author":{"gitId":"rish-16"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"rish-16":17,"joshenx":50,"huyuxin0429":2,"-":106}},{"path":"src/test/java/seedu/docit/logic/parser/FindPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.PatientCommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.PatientCommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.FindPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.PatientContainsKeywordsPredicate;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"public class FindPatientCommandParserTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"    private FindPatientCommandParser parser \u003d new FindPatientCommandParser();","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"        FindPatientCommand expectedFindPatientCommand \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"didymental"},"content":"                new FindPatientCommand(new PatientContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindPatientCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPatientCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"rish-16":2,"joshenx":6,"huyuxin0429":2,"-":21,"didymental":4}},{"path":"src/test/java/seedu/docit/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"joshenx":11,"-":129}},{"path":"src/test/java/seedu/docit/logic/parser/PatientCommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"rish-16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.PatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"rish-16"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"rish-16"},"content":" * Contains helper methods for testing patient command parsers.","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"rish-16"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"rish-16"},"content":"public class PatientCommandParserTestUtil {","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"rish-16"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"rish-16"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"rish-16"},"content":"    public static void assertParseSuccess(PatientParser parser, String userInput, PatientCommand expectedCommand) {","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"rish-16"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"rish-16"},"content":"            PatientCommand command \u003d parser.parsePatientCommand(userInput);","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"rish-16"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"rish-16"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"rish-16"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"rish-16"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"rish-16"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"rish-16"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"rish-16"},"content":"    public static void assertParseFailure(PatientParser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"rish-16"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"rish-16"},"content":"            parser.parsePatientCommand(userInput);","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"rish-16"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"rish-16"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"rish-16"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"rish-16"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"rish-16"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"rish-16":35,"joshenx":3}},{"path":"src/test/java/seedu/docit/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPatientList());","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"        // Two patients with the same identity fields","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"rish-16"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"didymental"},"content":"        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"didymental"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPatients);","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"    public void hasPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPatient(null));","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"    public void hasPatient_patientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"        assertFalse(addressBook.hasPatient(ALICE));","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"    public void hasPatient_patientInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"        addressBook.addPatient(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"        assertTrue(addressBook.hasPatient(ALICE));","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"    public void hasPatient_patientWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"        addressBook.addPatient(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"rish-16"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"        assertTrue(addressBook.hasPatient(editedAlice));","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"    public void getPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPatientList().remove(0));","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"     * A stub ReadOnlyAddressBook whose patients list can violate interface constraints.","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"didymental"},"content":"        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"didymental"},"content":"        AddressBookStub(Collection\u003cPatient\u003e patients) {","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"didymental"},"content":"            this.patients.setAll(patients);","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"        public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"didymental"},"content":"            return patients;","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"gycgabriel"},"content":"        public Patient getPatientOfIndex(Index index) {","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"gycgabriel"},"content":"            return null;","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"gycgabriel"},"content":"        @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":105,"author":{"gitId":"gycgabriel"},"content":"        public Index getIndexOfPatient(Patient patient) {","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"gycgabriel"},"content":"            return null;","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"gycgabriel"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"rish-16":2,"joshenx":27,"-":65,"gycgabriel":10,"didymental":6}},{"path":"src/test/java/seedu/docit/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.BENSON;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.PatientContainsKeywordsPredicate;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.AddressBookBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"docit/book/file/path\"));","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/docit/book/file/path\"));","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"        Path path \u003d Paths.get(\"docit/book/file/path\");","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"    public void hasPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"huyuxin0429"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"    public void hasPatient_patientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(modelManager.hasPatient(ALICE));","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"joshenx"},"content":"    public void hasPatient_patientInAddressBook_returnsTrue() {","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"huyuxin0429"},"content":"        modelManager.addPatient(ALICE);","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(modelManager.hasPatient(ALICE));","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":93,"author":{"gitId":"huyuxin0429"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"joshenx"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPatient(ALICE).withPatient(BENSON).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"joshenx"},"content":"        modelManager \u003d new ModelManager(addressBook, new AppointmentBook(), new ArchivedAppointmentBook(), userPrefs);","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"joshenx"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":105,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), userPrefs);","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"joshenx"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), userPrefs)));","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":123,"author":{"gitId":"didymental"},"content":"        modelManager.updateFilteredPatientList(new PatientContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"joshenx"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), userPrefs)));","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":128,"author":{"gitId":"joshenx"},"content":"        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, new AppointmentBook(),","lastModifiedDate":"2021-10-19"},{"lineNumber":134,"author":{"gitId":"joshenx"},"content":"                new ArchivedAppointmentBook(), differentUserPrefs)));","lastModifiedDate":"2021-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"joshenx":26,"huyuxin0429":5,"-":104,"didymental":1}},{"path":"src/test/java/seedu/docit/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"joshenx":2,"-":19}},{"path":"src/test/java/seedu/docit/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"        // null docit","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"        assertFalse(Address.isValidAddress(\"-\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"        assertTrue(Address.isValidAddress(\"a\")); // one character","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"gycgabriel"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc, 1234 Market S, San Francisco CA 2349879, USA\")); // long docit","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"joshenx":3,"-":31,"gycgabriel":3}},{"path":"src/test/java/seedu/docit/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"joshenx":2,"-":66}},{"path":"src/test/java/seedu/docit/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"gycgabriel"},"content":"        assertFalse(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"gycgabriel"},"content":"        assertFalse(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"gycgabriel"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"gycgabriel"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr\")); // long names","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"joshenx":2,"-":35,"gycgabriel":4}},{"path":"src/test/java/seedu/docit/model/person/PatientContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"public class PatientContainsKeywordsPredicateTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"didymental"},"content":"        PatientContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"didymental"},"content":"            new PatientContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"didymental"},"content":"        PatientContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"didymental"},"content":"            new PatientContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"        PatientContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"            new PatientContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"        PatientContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"            new PatientContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"        predicate \u003d new PatientContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"didymental"},"content":"        predicate \u003d new PatientContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"didymental"},"content":"        predicate \u003d new PatientContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"didymental"},"content":"        PatientContainsKeywordsPredicate predicate \u003d new PatientContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"didymental"},"content":"        predicate \u003d new PatientContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"        // Keywords match phone, email and docit, but does not match name","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"didymental"},"content":"        predicate \u003d new PatientContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"joshenx":11,"-":53,"didymental":15}},{"path":"src/test/java/seedu/docit/model/person/PatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"didymental"},"content":"public class PatientTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    public void isSamePatient() {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(ALICE.isSamePatient(ALICE));","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(ALICE.isSamePatient(null));","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"rish-16"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"        assertTrue(ALICE.isSamePatient(editedAlice));","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(ALICE.isSamePatient(editedAlice));","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"        Patient editedBob \u003d new PatientBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(BOB.isSamePatient(editedBob));","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        editedBob \u003d new PatientBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"        assertFalse(BOB.isSamePatient(editedBob));","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"        // different docit -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"rish-16":1,"joshenx":20,"huyuxin0429":6,"-":50,"didymental":1}},{"path":"src/test/java/seedu/docit/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"joshenx":2,"-":38}},{"path":"src/test/java/seedu/docit/model/person/UniquePatientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.model.patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"public class UniquePatientListTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    public void contains_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"    public void contains_patientNotInList_returnsFalse() {","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"        assertFalse(uniquePatientList.contains(ALICE));","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    public void contains_patientInList_returnsTrue() {","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"        assertTrue(uniquePatientList.contains(ALICE));","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"rish-16"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"        assertTrue(uniquePatientList.contains(editedAlice));","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"    public void add_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"    public void add_duplicatePatient_throwsDuplicatePatientException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"    public void setPatient_nullTargetPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"    public void setPatient_nullEditedPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"    public void setPatient_editedPatientIsSamePatient_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.setPatient(ALICE, ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"joshenx"},"content":"        expectedUniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"joshenx"},"content":"    public void setPatient_editedPatientHasSameIdentity_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"rish-16"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.setPatient(ALICE, editedAlice);","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"joshenx"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":89,"author":{"gitId":"joshenx"},"content":"        expectedUniquePatientList.add(editedAlice);","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"joshenx"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"joshenx"},"content":"    public void setPatient_editedPatientHasDifferentIdentity_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.setPatient(ALICE, BOB);","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"joshenx"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"joshenx"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2021-10-27"},{"lineNumber":99,"author":{"gitId":"joshenx"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":102,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"joshenx"},"content":"    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":104,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(BOB);","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"joshenx"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":108,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"joshenx"},"content":"    public void remove_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"joshenx"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"joshenx"},"content":"    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"joshenx"},"content":"        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"joshenx"},"content":"    public void remove_existingPatient_removesPatient() {","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.remove(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"joshenx"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"joshenx"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":127,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"joshenx"},"content":"    public void setPatients_nullUniquePatientList_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"joshenx"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"    public void setPatients_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"joshenx"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"joshenx"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.setPatients(expectedUniquePatientList);","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"joshenx"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":141,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"joshenx"},"content":"    public void setPatients_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"joshenx"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":145,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"joshenx"},"content":"    public void setPatients_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-10-27"},{"lineNumber":148,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":149,"author":{"gitId":"joshenx"},"content":"        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2021-10-27"},{"lineNumber":150,"author":{"gitId":"joshenx"},"content":"        uniquePatientList.setPatients(patientList);","lastModifiedDate":"2021-10-27"},{"lineNumber":151,"author":{"gitId":"joshenx"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":152,"author":{"gitId":"joshenx"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2021-10-27"},{"lineNumber":153,"author":{"gitId":"joshenx"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2021-10-27"},{"lineNumber":154,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":155,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":156,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":157,"author":{"gitId":"joshenx"},"content":"    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":158,"author":{"gitId":"joshenx"},"content":"        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":159,"author":{"gitId":"joshenx"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));","lastModifiedDate":"2021-10-27"},{"lineNumber":160,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":161,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":162,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":163,"author":{"gitId":"joshenx"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":164,"author":{"gitId":"joshenx"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2021-10-27"},{"lineNumber":165,"author":{"gitId":"joshenx"},"content":"            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-10-27"},{"lineNumber":166,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":167,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"rish-16":2,"joshenx":165}},{"path":"src/test/java/seedu/docit/storage/JsonAdaptedPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.BENSON;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"public class JsonAdaptedPatientTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"    private static final List\u003cJsonAdaptedMedicalEntry\u003e VALID_MEDICAL_HISTORY \u003d","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"        BENSON.getMedicalHistory()","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"              .toList()","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"              .stream()","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"              .filter(x -\u003e x !\u003d null)","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"              .map(x -\u003e new JsonAdaptedMedicalEntry(x.getDescription(), x.getDateString()))","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"              .collect(Collectors.toList());","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"    public void toModelType_validPatientDetails_returnsPatient() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"        assertEquals(BENSON, patient.toModelType());","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"        JsonAdaptedPatient patient \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"rish-16"},"content":"                new JsonAdaptedPatient(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_MEDICAL_HISTORY);","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"rish-16"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"didymental"},"content":"                VALID_MEDICAL_HISTORY);","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"        JsonAdaptedPatient patient \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"rish-16"},"content":"                new JsonAdaptedPatient(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_MEDICAL_HISTORY);","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"rish-16"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"didymental"},"content":"                VALID_MEDICAL_HISTORY);","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"        JsonAdaptedPatient patient \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"rish-16"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_MEDICAL_HISTORY);","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"rish-16"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"didymental"},"content":"            VALID_MEDICAL_HISTORY);","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"joshenx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-10-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"joshenx"},"content":"        JsonAdaptedPatient patient \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"rish-16"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_MEDICAL_HISTORY);","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"joshenx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"rish-16"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"didymental"},"content":"                VALID_MEDICAL_HISTORY);","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"joshenx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"rish-16":8,"joshenx":24,"-":62,"didymental":12}},{"path":"src/test/java/seedu/docit/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.HOON;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.IDA;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"    public void readAddressBook_invalidPatientAddressBook_throwDataConversionException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPatientAddressBook.json\"));","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"    public void readAddressBook_invalidAndValidPatientAddressBook_throwDataConversionException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPatientAddressBook.json\"));","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"        original.addPatient(HOON);","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"        original.removePatient(ALICE);","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"        original.addPatient(IDA);","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"joshenx":16,"-":94}},{"path":"src/test/java/seedu/docit/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.util.JsonUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.TypicalPatients;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientsAddressBook.json\");","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientAddressBook.json\");","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientAddressBook.json\");","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    public void toModelType_typicalPatientsFile_success() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"        AddressBook typicalPatientsAddressBook \u003d TypicalPatients.getTypicalAddressBook();","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"        assertEquals(addressBookFromFile, typicalPatientsAddressBook);","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PATIENT,","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":47}},{"path":"src/test/java/seedu/docit/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"joshenx":5,"-":118}},{"path":"src/test/java/seedu/docit/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.storage;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.TypicalPatients.getTypicalAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"gycgabriel"},"content":"        JsonAppointmentBookStorage appointmentBookStorage \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"gycgabriel"},"content":"            new JsonAppointmentBookStorage(getTempFilePath(\"apb\"));","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"        JsonArchivedAppointmentBookStorage archivedAppointmentBookStorage \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"                new JsonArchivedAppointmentBookStorage(getTempFilePath(\"aapb\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, appointmentBookStorage,","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"                archivedAppointmentBookStorage, userPrefsStorage);","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":10,"-":61,"gycgabriel":2}},{"path":"src/test/java/seedu/docit/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPatient(\"John\", \"Doe\").build();}","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"     * Adds a new {@code Patient} to the {@code AddressBook} that we are building.","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    public AddressBookBuilder withPatient(Patient patient) {","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"        addressBook.addPatient(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":7,"-":27}},{"path":"src/test/java/seedu/docit/testutil/AppointmentUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_DATETIME;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_INDEX;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":" * A utility class for Appointment.","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"public class AppointmentUtil {","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"     * Returns an add command string for adding the {@code appointment}.","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"    public static String getAddCommand(Appointment appointment) {","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"        return AddAppointmentCommand.COMMAND_WORD + \" \" + getAppointmentDetails(appointment);","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"     * Returns the part of command string for the given {@code patient}\u0027s details.","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"    public static String getAppointmentDetails(Appointment appointment) {","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"rish-16"},"content":"        sb.append(PREFIX_INDEX + String.valueOf(1) + \" \"); // Changed patientId to arbitrary index","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"gycgabriel"},"content":"        sb.append(PREFIX_DATETIME + appointment.getInputFormattedDatetimeString() + \" \");","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"        return sb.toString();","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"rish-16":1,"joshenx":6,"huyuxin0429":26,"gycgabriel":1}},{"path":"src/test/java/seedu/docit/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"joshenx":1,"-":33}},{"path":"src/test/java/seedu/docit/testutil/EditPatientDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.MedicalHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":" * A utility class to help with building EditPatientDescriptor objects.","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"public class EditPatientDescriptorBuilder {","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"    private EditPatientDescriptor descriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    public EditPatientDescriptorBuilder() {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"        descriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    public EditPatientDescriptorBuilder(EditPatientDescriptor descriptor) {","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"        this.descriptor \u003d new EditPatientDescriptor(descriptor);","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"    public EditPatientDescriptorBuilder(Patient patient) {","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"        descriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        descriptor.setName(patient.getName());","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"        descriptor.setPhone(patient.getPhone());","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"        descriptor.setEmail(patient.getEmail());","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"        descriptor.setAddress(patient.getAddress());","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"        descriptor.setMedicalHistory(patient.getMedicalHistory());","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"    public EditPatientDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"        return this;","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"joshenx"},"content":"    public EditPatientDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"        return this;","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"     * Sets the {@code Email} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"    public EditPatientDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"joshenx"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"        return this;","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"     * Sets the {@code Address} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"    public EditPatientDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"        return this;","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"     * Sets the {@code MedicalHistory} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"    public EditPatientDescriptorBuilder withMedicalHistory(String medicalHistory) {","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"didymental"},"content":"        MedicalHistory mh \u003d MedicalHistory.generate();","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"didymental"},"content":"        mh.add(medicalHistory);","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"didymental"},"content":"        descriptor.setMedicalHistory(mh);","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"        return this;","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"joshenx"},"content":"    public EditPatientDescriptor build() {","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"joshenx"},"content":"        return descriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":80,"didymental":3}},{"path":"src/test/java/seedu/docit/testutil/PatientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Address;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Email;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.MedicalHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Name;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Phone;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":" * A utility class to help with building Patient objects.","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"public class PatientBuilder {","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"didymental"},"content":"    public static final String DEFAULT_MEDICAL \u003d \"diabetes\";","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"didymental"},"content":"    private MedicalHistory medicalHistory;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"     * Creates a {@code PatientBuilder} with the default details.","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    public PatientBuilder() {","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"didymental"},"content":"        medicalHistory \u003d MedicalHistory.generate();","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"didymental"},"content":"        medicalHistory.add(DEFAULT_MEDICAL);","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"     * Initializes the PatientBuilder with the data of {@code patientToCopy}.","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"    public PatientBuilder(Patient patientToCopy) {","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"didymental"},"content":"        name \u003d patientToCopy.getName();","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"        phone \u003d patientToCopy.getPhone();","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"didymental"},"content":"        email \u003d patientToCopy.getEmail();","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"didymental"},"content":"        address \u003d patientToCopy.getAddress();","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"        medicalHistory \u003d patientToCopy.getMedicalHistory();","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"     * Sets the {@code Name} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"    public PatientBuilder withName(String name) {","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"     * Sets the {@code Address} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"    public PatientBuilder withAddress(String address) {","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"     * Sets the {@code Phone} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"    public PatientBuilder withPhone(String phone) {","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"     * Sets the {@code Email} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"    public PatientBuilder withEmail(String email) {","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"didymental"},"content":"     * Sets the {@code MedicalHistory} of the {@code Patient} that we are building.","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"joshenx"},"content":"    public PatientBuilder withMedicalHistory(String medicalHistory) {","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"didymental"},"content":"        this.medicalHistory \u003d new MedicalHistory(medicalHistory);","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"didymental"},"content":"        return this;","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"didymental"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"didymental"},"content":"     * Sets the {@code MedicalHistory} of the {@code Patient} that we are building.","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"didymental"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"didymental"},"content":"    public PatientBuilder withMedicalHistory(String medicalHistory, String date) {","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"didymental"},"content":"        this.medicalHistory \u003d MedicalHistory.generate();","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"didymental"},"content":"        this.medicalHistory.add(medicalHistory, date);","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"didymental"},"content":"        return this;","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"didymental"},"content":"    public Patient build() {","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"rish-16"},"content":"        return new Patient(name, phone, email, address, medicalHistory);","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"rish-16":1,"joshenx":22,"-":54,"didymental":26}},{"path":"src/test/java/seedu/docit/testutil/PatientUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.AddPatientCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.logic.commands.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":" * A utility class for Patient.","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"public class PatientUtil {","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"     * Returns an add command string for adding the {@code patient}.","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"didymental"},"content":"    public static String getAddCommand(Patient patient) {","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"        return AddPatientCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"     * Returns the part of command string for the given {@code patient}\u0027s details.","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"    public static String getPatientDetails(Patient patient) {","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"didymental"},"content":"        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"didymental"},"content":"        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"        sb.append(PREFIX_EMAIL + patient.getEmail().value + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"didymental"},"content":"        sb.append(PREFIX_ADDRESS + patient.getAddress().value + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"didymental"},"content":"        sb.append(PREFIX_MEDICAL + patient.getMedicalHistory().toString() + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details.","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"    public static String getEditPatientDescriptorDetails(EditPatientDescriptor descriptor) {","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"didymental"},"content":"        descriptor.getMedicalHistory().ifPresent(medicalHistory -\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"didymental"},"content":"                sb.append(PREFIX_MEDICAL).append(medicalHistory.toString()).append(\" \"));","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"joshenx":17,"-":25,"didymental":9}},{"path":"src/test/java/seedu/docit/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":1,"-":71}},{"path":"src/test/java/seedu/docit/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"     * Returns the middle index of the patient in the {@code model}\u0027s patient list.","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"     * Returns the last index of the patient in the {@code model}\u0027s patient list.","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"        return Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"     * Returns the patient in the {@code model}\u0027s patient list at {@code index}.","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"joshenx"},"content":"    public static Patient getPatient(Model model, Index index) {","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"        return model.getFilteredPatientList().get(index.getZeroBased());","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"joshenx":8,"huyuxin0429":3,"-":44}},{"path":"src/test/java/seedu/docit/testutil/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"gycgabriel"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"import java.util.List;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":" * A utility class containing a list of {@code Appointment} objects to be used in tests.","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"public class TypicalAppointments {","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_1 \u003d new Appointment(SampleDataUtil.getSamplePatients()[0],","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 1, 1, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_2 \u003d new Appointment(SampleDataUtil.getSamplePatients()[1],","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 2, 2, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_3 \u003d new Appointment(SampleDataUtil.getSamplePatients()[2],","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 3, 3, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_4 \u003d new Appointment(SampleDataUtil.getSamplePatients()[3],","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 4, 1, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_5 \u003d new Appointment(SampleDataUtil.getSamplePatients()[4],","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 5, 1, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_6 \u003d new Appointment(SampleDataUtil.getSamplePatients()[5],","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 6, 1, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_7 \u003d new Appointment(SampleDataUtil.getSamplePatients()[5],","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 7, 1, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_8 \u003d new Appointment(SampleDataUtil.getSamplePatients()[5],","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 8, 1, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_9 \u003d new Appointment(SampleDataUtil.getSamplePatients()[5],","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 9, 1, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_10 \u003d new Appointment(SampleDataUtil.getSamplePatients()[5],","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 10, 1, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_11 \u003d new Appointment(SampleDataUtil.getSamplePatients()[5],","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 11, 1, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"    public static final Appointment APPOINTMENT_12 \u003d new Appointment(SampleDataUtil.getSamplePatients()[5],","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"        LocalDateTime.of(2022, 12, 1, 16, 0));","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"    private TypicalAppointments() {} // prevents instantiation","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"     * Returns an {@code AppointmentList} with all the typical appointments.","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"    public static AppointmentBook getTypicalAppointmentList() {","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"        AppointmentBook ab \u003d new AppointmentBook();","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"        for (Appointment appointment : getTypicalAppointments()) {","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"            ab.addAppointment(appointment);","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"        return ab;","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"huyuxin0429"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"huyuxin0429"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(APPOINTMENT_1, APPOINTMENT_2, APPOINTMENT_3,","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"huyuxin0429"},"content":"                APPOINTMENT_4, APPOINTMENT_5, APPOINTMENT_6, APPOINTMENT_7));","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"joshenx":28,"huyuxin0429":30,"gycgabriel":1}},{"path":"src/test/java/seedu/docit/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"    public static final Index INDEX_THIRD_APPOINTMENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"joshenx":5,"huyuxin0429":4,"-":7}},{"path":"src/test/java/seedu/docit/testutil/TypicalPatients.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":" * A utility class containing a list of {@code Patient} objects to be used in tests.","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"public class TypicalPatients {","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"didymental"},"content":"            .withMedicalHistory(\"diabetes\").build();","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"didymental"},"content":"            .withMedicalHistory(\"diabetes\", \"1 Oct 1999\").build();","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withMedicalHistory(\"\").build();","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"rish-16"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withMedicalHistory(\"diabetes\").build();","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"    public static final Patient ELLE \u003d new PatientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"didymental"},"content":"            .withMedicalHistory(\"diabetes\").build();","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"    public static final Patient FIONA \u003d new PatientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"didymental"},"content":"            .withMedicalHistory(\"diabetes\").build();","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"joshenx"},"content":"    public static final Patient GEORGE \u003d new PatientBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"didymental"},"content":"            .withMedicalHistory(\"diabetes\").build();","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"    // Manually added","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"joshenx"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\")","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"didymental"},"content":"            .withMedicalHistory(\"diabetes\").build();","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"joshenx"},"content":"    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"joshenx"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"didymental"},"content":"            .withMedicalHistory(\"diabetes\").build();","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"joshenx"},"content":"    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"joshenx"},"content":"    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"rish-16"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"joshenx"},"content":"    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"rish-16"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"joshenx"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"joshenx"},"content":"    private TypicalPatients() {} // prevents instantiation","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"joshenx"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"joshenx"},"content":"     * Returns an {@code AddressBook} with all the typical patients.","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"joshenx"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"joshenx"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"joshenx"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"joshenx"},"content":"        for (Patient patient : getTypicalPatients()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"joshenx"},"content":"            ab.addPatient(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"joshenx"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"joshenx"},"content":"        return ab;","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"joshenx"},"content":"    public static List\u003cPatient\u003e getTypicalPatients() {","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"rish-16":3,"joshenx":68,"didymental":7}},{"path":"src/test/java/seedu/docit/testutil/stubs/ModelStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil.stubs;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.commons.core.GuiSettings;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"didymental"},"content":"import seedu.docit.model.prescription.Prescription;","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":" * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"public class ModelStub implements Model {","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"huyuxin0429"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-10-15"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":45,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"huyuxin0429"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":53,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":55,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":56,"author":{"gitId":"huyuxin0429"},"content":"    public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"huyuxin0429"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":65,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"huyuxin0429"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-15"},{"lineNumber":67,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":68,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":69,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":70,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":71,"author":{"gitId":"huyuxin0429"},"content":"    public void deletePatient(Patient target) {","lastModifiedDate":"2021-10-15"},{"lineNumber":72,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":75,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":76,"author":{"gitId":"joshenx"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":79,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":81,"author":{"gitId":"huyuxin0429"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"huyuxin0429"},"content":"    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"huyuxin0429"},"content":"    public Path getAppointmentBookFilePath() {","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"huyuxin0429"},"content":"    public void setAppointmentBookFilePath(Path appointmentBookFilePath) {","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"huyuxin0429"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"huyuxin0429"},"content":"     * Archives the given appointment.The appointment must exist in the appointment Book.","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"huyuxin0429"},"content":"     *","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"huyuxin0429"},"content":"     * @param appointmentToArchive","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":110,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":111,"author":{"gitId":"huyuxin0429"},"content":"    public void archiveAppointment(Appointment appointmentToArchive) {","lastModifiedDate":"2021-10-15"},{"lineNumber":112,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":113,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":114,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":115,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":116,"author":{"gitId":"huyuxin0429"},"content":"    public void setAppointmentBook(ReadOnlyAppointmentBook newData) {","lastModifiedDate":"2021-10-15"},{"lineNumber":117,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":118,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":119,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":120,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":121,"author":{"gitId":"joshenx"},"content":"    public void setArchivedAppointmentBook(ReadOnlyAppointmentBook appointmentBook) {","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"joshenx"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":123,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":125,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"joshenx"},"content":"    public void updateAppointmentBook(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"joshenx"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"joshenx"},"content":"    public void deleteAppointmentsWithPatient(Patient target) {","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"joshenx"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":136,"author":{"gitId":"huyuxin0429"},"content":"    public ReadOnlyAppointmentBook getAppointmentBook() {","lastModifiedDate":"2021-10-15"},{"lineNumber":137,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":138,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":139,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":140,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"joshenx"},"content":"    public ReadOnlyAppointmentBook getArchivedAppointmentBook() {","lastModifiedDate":"2021-10-19"},{"lineNumber":142,"author":{"gitId":"joshenx"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":144,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":145,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":146,"author":{"gitId":"huyuxin0429"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-15"},{"lineNumber":147,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":148,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":149,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":150,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":151,"author":{"gitId":"joshenx"},"content":"    public boolean hasAppointmentInArchives(Appointment appointmentToArchive) {","lastModifiedDate":"2021-10-28"},{"lineNumber":152,"author":{"gitId":"joshenx"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":153,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":154,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":155,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":156,"author":{"gitId":"huyuxin0429"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":158,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":159,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":160,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":161,"author":{"gitId":"huyuxin0429"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-10-15"},{"lineNumber":162,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":163,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":164,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":165,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":166,"author":{"gitId":"joshenx"},"content":"    public void sortAppointments() {","lastModifiedDate":"2021-10-28"},{"lineNumber":167,"author":{"gitId":"joshenx"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":168,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":169,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":170,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"huyuxin0429"},"content":"    public String getAppointments() {","lastModifiedDate":"2021-10-15"},{"lineNumber":172,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":173,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":174,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":175,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":176,"author":{"gitId":"huyuxin0429"},"content":"    public String getArchivedAppointments() {","lastModifiedDate":"2021-10-15"},{"lineNumber":177,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":178,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":179,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":180,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":181,"author":{"gitId":"huyuxin0429"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-10-15"},{"lineNumber":182,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":183,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":184,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":185,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":186,"author":{"gitId":"joshenx"},"content":"    public ObservableList\u003cAppointment\u003e getArchivedAppointmentList() {","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"joshenx"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":188,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":189,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":190,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":191,"author":{"gitId":"huyuxin0429"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2021-10-15"},{"lineNumber":192,"author":{"gitId":"huyuxin0429"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-15"},{"lineNumber":193,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":194,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":195,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":196,"author":{"gitId":"joshenx"},"content":"    public void archivePastAppointments() {","lastModifiedDate":"2021-10-28"},{"lineNumber":197,"author":{"gitId":"joshenx"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":198,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":199,"author":{"gitId":"didymental"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":200,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-01"},{"lineNumber":201,"author":{"gitId":"joshenx"},"content":"    public void clearAllRecords() {","lastModifiedDate":"2021-11-01"},{"lineNumber":202,"author":{"gitId":"joshenx"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":203,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":204,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":205,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":206,"author":{"gitId":"didymental"},"content":"    public void addPrescription(Appointment target, Prescription p) {","lastModifiedDate":"2021-10-28"},{"lineNumber":207,"author":{"gitId":"didymental"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":208,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":209,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":210,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":211,"author":{"gitId":"didymental"},"content":"    public void deletePrescription(Appointment target, String medicine) {","lastModifiedDate":"2021-10-28"},{"lineNumber":212,"author":{"gitId":"didymental"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":213,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":214,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":215,"author":{"gitId":"didymental"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":216,"author":{"gitId":"didymental"},"content":"    public void editPrescription(int i, Prescription p) {","lastModifiedDate":"2021-10-28"},{"lineNumber":217,"author":{"gitId":"didymental"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":218,"author":{"gitId":"didymental"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":219,"author":{"gitId":"didymental"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"joshenx":55,"huyuxin0429":150,"didymental":14}},{"path":"src/test/java/seedu/docit/testutil/stubs/ModelStubAcceptingAppointmentAdded.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil.stubs;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"huyuxin0429"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-15"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAppointmentBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.AddressBookBuilder;","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":" * A Model stub that always accept the appointment being added.","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"public class ModelStubAcceptingAppointmentAdded extends ModelStub {","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"    public final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"    private final Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    private final AddressBook addressbook \u003d new AddressBookBuilder().withPatient(patient).build();","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients \u003d new FilteredList\u003cPatient\u003e(addressbook.getPatientList());","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"        return appointmentsAdded.stream().anyMatch(appointment::isSameAppointment);","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"    public boolean hasAppointmentInArchives(Appointment appointment) {","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"joshenx"},"content":"        return false;","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"huyuxin0429"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-15"},{"lineNumber":40,"author":{"gitId":"huyuxin0429"},"content":"        appointmentsAdded.add(appointment);","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"joshenx"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"joshenx"},"content":"        return filteredPatients;","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":49,"author":{"gitId":"huyuxin0429"},"content":"    public ReadOnlyAppointmentBook getAppointmentBook() {","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"huyuxin0429"},"content":"        return new AppointmentBook();","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":52,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"joshenx":23,"huyuxin0429":29}},{"path":"src/test/java/seedu/docit/testutil/stubs/ModelStubAcceptingPatientAdded.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil.stubs;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"joshenx"},"content":" * A Model stub that always accept the patient being added.","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"joshenx"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"public class ModelStubAcceptingPatientAdded extends ModelStub {","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"    public final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"        return patientsAdded.stream().anyMatch(patient::isSamePatient);","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"joshenx"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"joshenx"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"joshenx"},"content":"        patientsAdded.add(patient);","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"joshenx"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"joshenx"},"content":"        return new AddressBook();","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"joshenx"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"joshenx":33}},{"path":"src/test/java/seedu/docit/testutil/stubs/ModelStubWithAppointment.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil.stubs;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"joshenx"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.AddressBook;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.appointment.Appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.AddressBookBuilder;","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"joshenx"},"content":"import seedu.docit.testutil.PatientBuilder;","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":" * A Model stub that contains a single patient.","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"huyuxin0429"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":16,"author":{"gitId":"huyuxin0429"},"content":"public class ModelStubWithAppointment extends ModelStub {","lastModifiedDate":"2021-10-15"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"    private final Appointment appointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"joshenx"},"content":"    private final Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"joshenx"},"content":"    private final AddressBook addressbook \u003d new AddressBookBuilder().withPatient(patient).build();","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"joshenx"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients \u003d new FilteredList\u003cPatient\u003e(addressbook.getPatientList());","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"     * Returns a model stub that contains 1 appointment","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"     * @param appointment Appointment to be contained in the stub","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"    public ModelStubWithAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-15"},{"lineNumber":29,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":30,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":31,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"huyuxin0429"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-10-15"},{"lineNumber":34,"author":{"gitId":"huyuxin0429"},"content":"        return this.appointment.isSameAppointment(appointment);","lastModifiedDate":"2021-10-15"},{"lineNumber":35,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":36,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"joshenx"},"content":"    @Override","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"joshenx"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"joshenx"},"content":"        return filteredPatients;","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"joshenx"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"joshenx"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"joshenx":18,"huyuxin0429":24}},{"path":"src/test/java/seedu/docit/testutil/stubs/ModelStubWithPatient.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.testutil.stubs;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":3,"author":{"gitId":"huyuxin0429"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-15"},{"lineNumber":4,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import seedu.docit.model.patient.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"huyuxin0429"},"content":"/**","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"joshenx"},"content":" * A Model stub that contains a single patient.","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"huyuxin0429"},"content":" */","lastModifiedDate":"2021-10-15"},{"lineNumber":11,"author":{"gitId":"huyuxin0429"},"content":"public class ModelStubWithPatient extends ModelStub {","lastModifiedDate":"2021-10-15"},{"lineNumber":12,"author":{"gitId":"huyuxin0429"},"content":"    private final Patient patient;","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"huyuxin0429"},"content":"    /**","lastModifiedDate":"2021-10-15"},{"lineNumber":15,"author":{"gitId":"joshenx"},"content":"     * Returns a model stub containing a patient","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"joshenx"},"content":"     * @param patient Patient to be contained in model stub","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"huyuxin0429"},"content":"     */","lastModifiedDate":"2021-10-15"},{"lineNumber":18,"author":{"gitId":"huyuxin0429"},"content":"    public ModelStubWithPatient(Patient patient) {","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"huyuxin0429"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"huyuxin0429"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":23,"author":{"gitId":"huyuxin0429"},"content":"    @Override","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"huyuxin0429"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"huyuxin0429"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"huyuxin0429"},"content":"        return this.patient.isSamePatient(patient);","lastModifiedDate":"2021-10-15"},{"lineNumber":27,"author":{"gitId":"huyuxin0429"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"huyuxin0429"},"content":"}","lastModifiedDate":"2021-10-15"}],"authorContributionMap":{"joshenx":5,"huyuxin0429":23}},{"path":"src/test/java/seedu/docit/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"joshenx":1,"-":34}},{"path":"src/test/java/seedu/docit/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"joshenx"},"content":"package seedu.docit.ui;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"joshenx"},"content":"import static seedu.docit.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"joshenx"},"content":"import seedu.docit.MainApp;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"joshenx":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"\u003c?import seedu.docit.ui.TestFxmlObject?\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"joshenx":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"joshenx"},"content":"\u003cfx:root type\u003d\"seedu.docit.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"joshenx":1,"-":5}}]
